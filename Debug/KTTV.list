
KTTV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800aaa0  0800aaa0  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afe0  0800afe0  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  0800afe0  0800afe0  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afe0  0800afe0  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe0  0800afe0  0001afe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe4  0800afe4  0001afe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800afe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001128  20000178  0800b15c  00020178  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012a0  0800b15c  000212a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c1c  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000383d  00000000  00000000  00036dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0003a600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  0003b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213b1  00000000  00000000  0003c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001599a  00000000  00000000  0005d9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf04a  00000000  00000000  0007334b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005098  00000000  00000000  001323e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa88 	.word	0x0800aa88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	0800aa88 	.word	0x0800aa88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <Flash_delBuff>:
#include "FLASH_STM32.h"
#include "stdio.h"
uint8_t lengthPage;

void Flash_delBuff(char* data, uint16_t len)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e007      	b.n	8000bee <Flash_delBuff+0x22>
	{
		data[i] = 0;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	3301      	adds	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f2      	bhi.n	8000bde <Flash_delBuff+0x12>
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <Flash_Lock>:

void Flash_Lock()
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 8000c0a:	f005 f88f 	bl	8005d2c <HAL_FLASH_Lock>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <Flash_Unlock>:

void Flash_Unlock()
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000c16:	f005 f863 	bl	8005ce0 <HAL_FLASH_Unlock>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <Flash_Erase>:
  return sector;
}
#endif

void Flash_Erase(uint32_t addr)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
			//print log here
			__NOP();
		}
	#else
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PageError = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.PageAddress = addr;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	613b      	str	r3, [r7, #16]
		EraseInitStruct.NbPages     = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8000c36:	f107 0208 	add.w	r2, r7, #8
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f005 f911 	bl	8005e68 <HAL_FLASHEx_Erase>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d000      	beq.n	8000c4e <Flash_Erase+0x30>
		{
			//print log here
			__NOP();
 8000c4c:	bf00      	nop
		}
	#endif
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <Flash_WriteIntType>:

void Flash_WriteIntType(uint32_t addr, uint32_t data, uint32_t typeprogram)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Program(typeprogram, addr, data);
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	461a      	mov	r2, r3
 8000c66:	f04f 0300 	mov.w	r3, #0
 8000c6a:	68f9      	ldr	r1, [r7, #12]
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f004 ffc7 	bl	8005c00 <HAL_FLASH_Program>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <Flash_ReadIntType>:

uint32_t Flash_ReadIntType(uint32_t addr)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	uint32_t* val = (uint32_t *)addr;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
	return *val;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <Flash_WriteCharType>:

void Flash_WriteCharType(uint32_t addr, char* data, uint8_t typeprogram)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]
	uint16_t i;
	FLASH->CR |= FLASH_CR_PG;
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <Flash_WriteCharType+0x98>)
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <Flash_WriteCharType+0x98>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6113      	str	r3, [r2, #16]
	int var = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
	lengthPage = strlen(data);
 8000cb6:	68b8      	ldr	r0, [r7, #8]
 8000cb8:	f7ff fa8a 	bl	80001d0 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <Flash_WriteCharType+0x9c>)
 8000cc2:	701a      	strb	r2, [r3, #0]
	for(i=0; i<lengthPage; i+=1)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	82fb      	strh	r3, [r7, #22]
 8000cc8:	e01a      	b.n	8000d00 <Flash_WriteCharType+0x68>
	{
		while((FLASH->SR&FLASH_SR_BSY)){};
 8000cca:	bf00      	nop
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <Flash_WriteCharType+0x98>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f9      	bne.n	8000ccc <Flash_WriteCharType+0x34>
		var = (int)data[i];
 8000cd8:	8afb      	ldrh	r3, [r7, #22]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
			//Print log here
			break;
		}
		#else
		{
			HAL_FLASH_Program(typeprogram, (addr + i*2), var);
 8000ce2:	79f8      	ldrb	r0, [r7, #7]
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	461a      	mov	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	18d1      	adds	r1, r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cf6:	f004 ff83 	bl	8005c00 <HAL_FLASH_Program>
	for(i=0; i<lengthPage; i+=1)
 8000cfa:	8afb      	ldrh	r3, [r7, #22]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	82fb      	strh	r3, [r7, #22]
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <Flash_WriteCharType+0x9c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	8afa      	ldrh	r2, [r7, #22]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d3de      	bcc.n	8000cca <Flash_WriteCharType+0x32>
		}
		#endif
	}
	while((FLASH->SR&FLASH_SR_BSY)){};
 8000d0c:	bf00      	nop
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <Flash_WriteCharType+0x98>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f9      	bne.n	8000d0e <Flash_WriteCharType+0x76>
	FLASH->CR &= ~FLASH_CR_PG;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <Flash_WriteCharType+0x98>)
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <Flash_WriteCharType+0x98>)
 8000d20:	f023 0301 	bic.w	r3, r3, #1
 8000d24:	6113      	str	r3, [r2, #16]
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40022000 	.word	0x40022000
 8000d34:	20000f70 	.word	0x20000f70

08000d38 <Flash_ReadCharType>:

uint32_t Flash_ReadCharType(char* dataOut, uint32_t addr, uint8_t typeprogram)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	4613      	mov	r3, r2
 8000d44:	71fb      	strb	r3, [r7, #7]
	Flash_delBuff(dataOut, strlen(dataOut));
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f7ff fa42 	bl	80001d0 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4619      	mov	r1, r3
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff ff3a 	bl	8000bcc <Flash_delBuff>
	uint32_t ind = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
	uint32_t count = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
	uint32_t sizearea = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
	#if _FLASHTYPE_ == SECTOR
		sizearea = SIZE_OF_SECTOR;
	#else
		sizearea = SIZE_OF_PAGE;
 8000d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d68:	617b      	str	r3, [r7, #20]
	#endif
	for(ind = addr; ind < addr+sizearea; )
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	e014      	b.n	8000d9a <Flash_ReadCharType+0x62>
	{
		if((unsigned char)Flash_ReadIntType(ind) == 0xFF) break;
 8000d70:	69f8      	ldr	r0, [r7, #28]
 8000d72:	f7ff ff82 	bl	8000c7a <Flash_ReadIntType>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2bff      	cmp	r3, #255	; 0xff
 8000d7c:	d014      	beq.n	8000da8 <Flash_ReadCharType+0x70>
		else
		{
			dataOut[count++] = Flash_ReadIntType(ind);
 8000d7e:	69f8      	ldr	r0, [r7, #28]
 8000d80:	f7ff ff7b 	bl	8000c7a <Flash_ReadIntType>
 8000d84:	4601      	mov	r1, r0
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	61ba      	str	r2, [r7, #24]
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	b2ca      	uxtb	r2, r1
 8000d92:	701a      	strb	r2, [r3, #0]
		{
			ind=ind+0x02;
		}
		#else
		{
			ind=ind+0x02;
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	3302      	adds	r3, #2
 8000d98:	61fb      	str	r3, [r7, #28]
	for(ind = addr; ind < addr+sizearea; )
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	4413      	add	r3, r2
 8000da0:	69fa      	ldr	r2, [r7, #28]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d3e4      	bcc.n	8000d70 <Flash_ReadCharType+0x38>
 8000da6:	e000      	b.n	8000daa <Flash_ReadCharType+0x72>
		if((unsigned char)Flash_ReadIntType(ind) == 0xFF) break;
 8000da8:	bf00      	nop
		}
		#endif
	}
	return count;
 8000daa:	69bb      	ldr	r3, [r7, #24]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HTTP_configParams>:
  * @param  None.
  * @retval RET_FAIL if configuration failed.
  * 		RET_OK if configuration successful.
  */
STATUS HTTP_configParams(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	Sim_send("AT+CGDCONT=cid,\"ip\",\"APN\"\r",strlen("AT+CGDCONT=cid,\"ip\",\"APN\"\r"));
 8000db8:	211a      	movs	r1, #26
 8000dba:	482f      	ldr	r0, [pc, #188]	; (8000e78 <HTTP_configParams+0xc4>)
 8000dbc:	f000 fc30 	bl	8001620 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8000dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	482d      	ldr	r0, [pc, #180]	; (8000e7c <HTTP_configParams+0xc8>)
 8000dc8:	f000 fc8e 	bl	80016e8 <Sim_checkResponseWith>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <HTTP_configParams+0xcc>)
 8000dd2:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000dd4:	bf00      	nop
	if(ret == RET_OK)
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HTTP_configParams+0xcc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d147      	bne.n	8000e6e <HTTP_configParams+0xba>
	{
		Sim_send("AT+CGACT=1,cid\r",strlen("AT+CGACT=1,cid\r"));
 8000dde:	210f      	movs	r1, #15
 8000de0:	4828      	ldr	r0, [pc, #160]	; (8000e84 <HTTP_configParams+0xd0>)
 8000de2:	f000 fc1d 	bl	8001620 <Sim_send>
		ret = Sim_checkResponseWith("OK", 2, 5000);
 8000de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dea:	2102      	movs	r1, #2
 8000dec:	4823      	ldr	r0, [pc, #140]	; (8000e7c <HTTP_configParams+0xc8>)
 8000dee:	f000 fc7b 	bl	80016e8 <Sim_checkResponseWith>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HTTP_configParams+0xcc>)
 8000df8:	701a      	strb	r2, [r3, #0]
		__NOP();
 8000dfa:	bf00      	nop
		if(ret == RET_OK)
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HTTP_configParams+0xcc>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d134      	bne.n	8000e6e <HTTP_configParams+0xba>
		{
			Sim_send("AT+HTTPINIT\r",strlen("AT+HTTPINIT\r"));
 8000e04:	210c      	movs	r1, #12
 8000e06:	4820      	ldr	r0, [pc, #128]	; (8000e88 <HTTP_configParams+0xd4>)
 8000e08:	f000 fc0a 	bl	8001620 <Sim_send>
			ret = Sim_checkResponseWith("OK", 2, 5000);
 8000e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e10:	2102      	movs	r1, #2
 8000e12:	481a      	ldr	r0, [pc, #104]	; (8000e7c <HTTP_configParams+0xc8>)
 8000e14:	f000 fc68 	bl	80016e8 <Sim_checkResponseWith>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HTTP_configParams+0xcc>)
 8000e1e:	701a      	strb	r2, [r3, #0]
			__NOP();
 8000e20:	bf00      	nop
			if(ret == RET_FAIL)
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HTTP_configParams+0xcc>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d121      	bne.n	8000e6e <HTTP_configParams+0xba>
			{
				Sim_send("AT+HTTPTERM\r",strlen("AT+HTTPTERM\r"));
 8000e2a:	210c      	movs	r1, #12
 8000e2c:	4817      	ldr	r0, [pc, #92]	; (8000e8c <HTTP_configParams+0xd8>)
 8000e2e:	f000 fbf7 	bl	8001620 <Sim_send>
				ret = Sim_checkResponseWith("OK", 2, 5000);
 8000e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e36:	2102      	movs	r1, #2
 8000e38:	4810      	ldr	r0, [pc, #64]	; (8000e7c <HTTP_configParams+0xc8>)
 8000e3a:	f000 fc55 	bl	80016e8 <Sim_checkResponseWith>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HTTP_configParams+0xcc>)
 8000e44:	701a      	strb	r2, [r3, #0]
				__NOP();
 8000e46:	bf00      	nop
				if(ret == RET_OK)
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HTTP_configParams+0xcc>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10e      	bne.n	8000e6e <HTTP_configParams+0xba>
				{
					Sim_send("AT+HTTPINIT\r",strlen("AT+HTTPINIT\r"));
 8000e50:	210c      	movs	r1, #12
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <HTTP_configParams+0xd4>)
 8000e54:	f000 fbe4 	bl	8001620 <Sim_send>
					ret = Sim_checkResponseWith("OK", 2, 5000);
 8000e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <HTTP_configParams+0xc8>)
 8000e60:	f000 fc42 	bl	80016e8 <Sim_checkResponseWith>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HTTP_configParams+0xcc>)
 8000e6a:	701a      	strb	r2, [r3, #0]
					__NOP();
 8000e6c:	bf00      	nop
				}
			}
		}
	}
	return ret;
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <HTTP_configParams+0xcc>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0800aaa0 	.word	0x0800aaa0
 8000e7c:	0800aabc 	.word	0x0800aabc
 8000e80:	20000f71 	.word	0x20000f71
 8000e84:	0800aac0 	.word	0x0800aac0
 8000e88:	0800aad0 	.word	0x0800aad0
 8000e8c:	0800aae0 	.word	0x0800aae0

08000e90 <HTTP_sendGETRequest>:
  * @param  url is URL to access.
  * @retval RET_OK if Server responds to code 200.
  * 		RET_FAIL if otherwise.
  */
STATUS HTTP_sendGETRequest(char* url)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09c      	sub	sp, #112	; 0x70
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	char cmd[100] = {0};
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2260      	movs	r2, #96	; 0x60
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 fb49 	bl	800953c <memset>
	sprintf(cmd,"AT+HTTPPARA=\"URL\",\"%s\"\r",url);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4926      	ldr	r1, [pc, #152]	; (8000f4c <HTTP_sendGETRequest+0xbc>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f008 fb4a 	bl	800954c <siprintf>
	Sim_send(cmd,strlen(cmd));
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f987 	bl	80001d0 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fba7 	bl	8001620 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8000ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	481d      	ldr	r0, [pc, #116]	; (8000f50 <HTTP_sendGETRequest+0xc0>)
 8000eda:	f000 fc05 	bl	80016e8 <Sim_checkResponseWith>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <HTTP_sendGETRequest+0xc4>)
 8000ee4:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000ee6:	bf00      	nop
	if(ret == RET_OK)
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HTTP_sendGETRequest+0xc4>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d126      	bne.n	8000f3e <HTTP_sendGETRequest+0xae>
	{
		Sim_send("AT+HTTPACTION=0\r",16);
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4819      	ldr	r0, [pc, #100]	; (8000f58 <HTTP_sendGETRequest+0xc8>)
 8000ef4:	f000 fb94 	bl	8001620 <Sim_send>
		ret = Sim_checkResponseWith("+HTTPACTION: 0,200", 2, 30000);
 8000ef8:	f247 5230 	movw	r2, #30000	; 0x7530
 8000efc:	2102      	movs	r1, #2
 8000efe:	4817      	ldr	r0, [pc, #92]	; (8000f5c <HTTP_sendGETRequest+0xcc>)
 8000f00:	f000 fbf2 	bl	80016e8 <Sim_checkResponseWith>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HTTP_sendGETRequest+0xc4>)
 8000f0a:	701a      	strb	r2, [r3, #0]
		__NOP();
 8000f0c:	bf00      	nop
		if(ret == RET_OK)
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HTTP_sendGETRequest+0xc4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d113      	bne.n	8000f3e <HTTP_sendGETRequest+0xae>
		{
			Sim_send("AT+HTTPHEAD\r",12);
 8000f16:	210c      	movs	r1, #12
 8000f18:	4811      	ldr	r0, [pc, #68]	; (8000f60 <HTTP_sendGETRequest+0xd0>)
 8000f1a:	f000 fb81 	bl	8001620 <Sim_send>
			ret = Sim_checkResponseWith("200 OK", 3, 60000);
 8000f1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f22:	2103      	movs	r1, #3
 8000f24:	480f      	ldr	r0, [pc, #60]	; (8000f64 <HTTP_sendGETRequest+0xd4>)
 8000f26:	f000 fbdf 	bl	80016e8 <Sim_checkResponseWith>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HTTP_sendGETRequest+0xc4>)
 8000f30:	701a      	strb	r2, [r3, #0]
			__NOP();
 8000f32:	bf00      	nop
			if(ret == RET_OK)
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HTTP_sendGETRequest+0xc4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d100      	bne.n	8000f3e <HTTP_sendGETRequest+0xae>
			{
				__NOP();
 8000f3c:	bf00      	nop
			}
		}
	}
	return ret;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HTTP_sendGETRequest+0xc4>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3770      	adds	r7, #112	; 0x70
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	0800aaf0 	.word	0x0800aaf0
 8000f50:	0800aabc 	.word	0x0800aabc
 8000f54:	20000f71 	.word	0x20000f71
 8000f58:	0800ab08 	.word	0x0800ab08
 8000f5c:	0800ab1c 	.word	0x0800ab1c
 8000f60:	0800ab30 	.word	0x0800ab30
 8000f64:	0800ab40 	.word	0x0800ab40

08000f68 <HTTP_readGETResponse>:
  * @param  datatoget is used to store response data from the server.
  * @retval RET_OK if read success.
  * 		RET_FAIL if read fail.
  */
STATUS HTTP_readGETResponse(char* datatoget)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	deleteBuffer(datatoget, strlen(datatoget));
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff f92d 	bl	80001d0 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fb0e 	bl	800159c <deleteBuffer>
	Sim_send("AT+HTTPHEAD\r",strlen("AT+HTTPHEAD\r"));
 8000f80:	210c      	movs	r1, #12
 8000f82:	481d      	ldr	r0, [pc, #116]	; (8000ff8 <HTTP_readGETResponse+0x90>)
 8000f84:	f000 fb4c 	bl	8001620 <Sim_send>
	ret = Sim_checkResponseWith("\r\nOK\r\n", 4, 60000);
 8000f88:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	481b      	ldr	r0, [pc, #108]	; (8000ffc <HTTP_readGETResponse+0x94>)
 8000f90:	f000 fbaa 	bl	80016e8 <Sim_checkResponseWith>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HTTP_readGETResponse+0x98>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000f9c:	bf00      	nop
	if(ret == RET_OK)
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HTTP_readGETResponse+0x98>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d122      	bne.n	8000fec <HTTP_readGETResponse+0x84>
	{
		char* ptr = NULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
		ptr = strstr((char*)Sim_Rxdata,"HTTP/");
 8000faa:	4916      	ldr	r1, [pc, #88]	; (8001004 <HTTP_readGETResponse+0x9c>)
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <HTTP_readGETResponse+0xa0>)
 8000fae:	f008 faf5 	bl	800959c <strstr>
 8000fb2:	6178      	str	r0, [r7, #20]
		if(ptr != NULL)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d015      	beq.n	8000fe6 <HTTP_readGETResponse+0x7e>
		{
			char* ptr1 = NULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
			ptr1 = strstr((char*)Sim_Rxdata,"\r\nOK");
 8000fbe:	4913      	ldr	r1, [pc, #76]	; (800100c <HTTP_readGETResponse+0xa4>)
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <HTTP_readGETResponse+0xa0>)
 8000fc2:	f008 faeb 	bl	800959c <strstr>
 8000fc6:	6138      	str	r0, [r7, #16]
			uint16_t startpos = ptr - (char*)Sim_Rxdata;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HTTP_readGETResponse+0xa0>)
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	81fb      	strh	r3, [r7, #14]
			uint16_t endpos = ptr1 - (char*)Sim_Rxdata;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HTTP_readGETResponse+0xa0>)
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	81bb      	strh	r3, [r7, #12]
			subString((char*)Sim_Rxdata, datatoget, startpos, endpos);
 8000fd8:	89fa      	ldrh	r2, [r7, #14]
 8000fda:	89bb      	ldrh	r3, [r7, #12]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	480a      	ldr	r0, [pc, #40]	; (8001008 <HTTP_readGETResponse+0xa0>)
 8000fe0:	f000 faf7 	bl	80015d2 <subString>
 8000fe4:	e002      	b.n	8000fec <HTTP_readGETResponse+0x84>
		}
		else
		{
			ret = RET_FAIL;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HTTP_readGETResponse+0x98>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
		}
	}
	return ret;
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HTTP_readGETResponse+0x98>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	0800ab30 	.word	0x0800ab30
 8000ffc:	0800ab48 	.word	0x0800ab48
 8001000:	20000f71 	.word	0x20000f71
 8001004:	0800ab50 	.word	0x0800ab50
 8001008:	20000580 	.word	0x20000580
 800100c:	0800ab58 	.word	0x0800ab58

08001010 <RS485_EnablePin>:

#define rs485_uart huart2
extern UART_HandleTypeDef rs485_uart;

void RS485_EnablePin(RS485_PinState status)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, status?GPIO_PIN_SET:GPIO_PIN_RESET);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f005 f950 	bl	80062d4 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <crcCalculation>:
uint16_t crcCalculation(uint8_t* rs485_data, int in_dx)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	int i,j;
	uint16_t crc=0xFFFF;
 8001046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104a:	81fb      	strh	r3, [r7, #14]
	uint16_t crctemp;
	for(i=0;i<in_dx;i++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e026      	b.n	80010a0 <crcCalculation+0x64>
  {
		crc = rs485_data[i]^crc;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b29a      	uxth	r2, r3
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	4053      	eors	r3, r2
 8001060:	81fb      	strh	r3, [r7, #14]
		for(j=1;j<9;j++)
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	e015      	b.n	8001094 <crcCalculation+0x58>
		{
			crctemp = crc/2;
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	085b      	lsrs	r3, r3, #1
 800106c:	81bb      	strh	r3, [r7, #12]
			if(crc-crctemp*2==1)
 800106e:	89fa      	ldrh	r2, [r7, #14]
 8001070:	89bb      	ldrh	r3, [r7, #12]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d107      	bne.n	800108a <crcCalculation+0x4e>
			{
				crc=crctemp ^ 0xA001;
 800107a:	89bb      	ldrh	r3, [r7, #12]
 800107c:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001080:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001084:	43db      	mvns	r3, r3
 8001086:	81fb      	strh	r3, [r7, #14]
 8001088:	e001      	b.n	800108e <crcCalculation+0x52>
			}
			else
			{
				crc=crctemp;
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	81fb      	strh	r3, [r7, #14]
		for(j=1;j<9;j++)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	3301      	adds	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2b08      	cmp	r3, #8
 8001098:	dde6      	ble.n	8001068 <crcCalculation+0x2c>
	for(i=0;i<in_dx;i++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbd4      	blt.n	8001052 <crcCalculation+0x16>
			}
		}
	}
	return crc;
 80010a8:	89fb      	ldrh	r3, [r7, #14]
//  crctemp1 = crc/256;
//  crctemp2 = crc*256;
//  crc= crctemp1 + crctemp2;
//	crc1 =crc>>8;
//	crc2=(uint8_t)crc;
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <RS485_transmit>:

void RS485_transmit(RS485Query_t p_RS485Query)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	463b      	mov	r3, r7
 80010c0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t queryData[10];
	uint8_t ind=0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	75fb      	strb	r3, [r7, #23]
	queryData[ind++] = p_RS485Query.slaveAddress;
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	75fa      	strb	r2, [r7, #23]
 80010ce:	783a      	ldrb	r2, [r7, #0]
 80010d0:	f107 0118 	add.w	r1, r7, #24
 80010d4:	440b      	add	r3, r1
 80010d6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = p_RS485Query.mbFunction;
 80010da:	7dfb      	ldrb	r3, [r7, #23]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	75fa      	strb	r2, [r7, #23]
 80010e0:	787a      	ldrb	r2, [r7, #1]
 80010e2:	f107 0118 	add.w	r1, r7, #24
 80010e6:	440b      	add	r3, r1
 80010e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	if	((p_RS485Query.mbFunction == Read_CoilStatus) 		||(p_RS485Query.mbFunction == Read_InputStatus)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d00e      	beq.n	8001110 <RS485_transmit+0x58>
 80010f2:	787b      	ldrb	r3, [r7, #1]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d00b      	beq.n	8001110 <RS485_transmit+0x58>
		|| (p_RS485Query.mbFunction == Read_HoldingRegister)||(p_RS485Query.mbFunction == Read_InputRegister)
 80010f8:	787b      	ldrb	r3, [r7, #1]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d008      	beq.n	8001110 <RS485_transmit+0x58>
 80010fe:	787b      	ldrb	r3, [r7, #1]
 8001100:	2b04      	cmp	r3, #4
 8001102:	d005      	beq.n	8001110 <RS485_transmit+0x58>
		|| (p_RS485Query.mbFunction == Force_SingleCoil)		||(p_RS485Query.mbFunction == Preset_SingleRegister))
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b05      	cmp	r3, #5
 8001108:	d002      	beq.n	8001110 <RS485_transmit+0x58>
 800110a:	787b      	ldrb	r3, [r7, #1]
 800110c:	2b06      	cmp	r3, #6
 800110e:	d12b      	bne.n	8001168 <RS485_transmit+0xb0>
	{
		queryData[ind++] = (uint8_t)(p_RS485Query.regAddress>>8);
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	b29a      	uxth	r2, r3
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	1c59      	adds	r1, r3, #1
 800111a:	75f9      	strb	r1, [r7, #23]
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	f107 0118 	add.w	r1, r7, #24
 8001122:	440b      	add	r3, r1
 8001124:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regAddress&0xFF);
 8001128:	887a      	ldrh	r2, [r7, #2]
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	1c59      	adds	r1, r3, #1
 800112e:	75f9      	strb	r1, [r7, #23]
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	f107 0118 	add.w	r1, r7, #24
 8001136:	440b      	add	r3, r1
 8001138:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regCount>>8);
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	0a1b      	lsrs	r3, r3, #8
 8001140:	b29a      	uxth	r2, r3
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	1c59      	adds	r1, r3, #1
 8001146:	75f9      	strb	r1, [r7, #23]
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f107 0118 	add.w	r1, r7, #24
 800114e:	440b      	add	r3, r1
 8001150:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regCount&0xFF);
 8001154:	88ba      	ldrh	r2, [r7, #4]
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	75f9      	strb	r1, [r7, #23]
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	f107 0118 	add.w	r1, r7, #24
 8001162:	440b      	add	r3, r1
 8001164:	f803 2c0c 	strb.w	r2, [r3, #-12]
	else if((p_RS485Query.mbFunction == Read_ExceptionStatus) || (p_RS485Query.mbFunction == Fetch_CommEventCounter)
		||	(p_RS485Query.mbFunction == Fetch_CommEventLog))
	{
		
	}	
	p_RS485Query.crc = crcCalculation(queryData,ind);
 8001168:	7dfa      	ldrb	r2, [r7, #23]
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff63 	bl	800103c <crcCalculation>
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
	queryData[ind++] = (uint8_t)(p_RS485Query.crc&0xFF);
 800117a:	88fa      	ldrh	r2, [r7, #6]
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	1c59      	adds	r1, r3, #1
 8001180:	75f9      	strb	r1, [r7, #23]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f107 0118 	add.w	r1, r7, #24
 8001188:	440b      	add	r3, r1
 800118a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = (uint8_t)(p_RS485Query.crc>>8);	
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	b29a      	uxth	r2, r3
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	75f9      	strb	r1, [r7, #23]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f107 0118 	add.w	r1, r7, #24
 80011a0:	440b      	add	r3, r1
 80011a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	RS485_EnablePin(TRANSMIT);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ff32 	bl	8001010 <RS485_EnablePin>
	HAL_UART_Transmit(&rs485_uart, (uint8_t*)queryData,ind,1000);
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f107 010c 	add.w	r1, r7, #12
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <RS485_transmit+0x114>)
 80011ba:	f007 f8f3 	bl	80083a4 <HAL_UART_Transmit>
	RS485_EnablePin(RECEIVE);
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff ff26 	bl	8001010 <RS485_EnablePin>
	
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20001150 	.word	0x20001150

080011d0 <RS485_analysis>:
	RS485_EnablePin(RECEIVE);
	
}

uint8_t RS485_analysis(RS485Data_t* m_rs485data, RS485Query_t RS485_SentStruct, uint8_t* p_RS485Data, uint8_t length)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	1d38      	adds	r0, r7, #4
 80011da:	e880 0006 	stmia.w	r0, {r1, r2}
 80011de:	603b      	str	r3, [r7, #0]
	if((length > 3)&&(p_RS485Data[0] == RS485_SentStruct.slaveAddress))
 80011e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	f240 8196 	bls.w	8001516 <RS485_analysis+0x346>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	793b      	ldrb	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 8190 	bne.w	8001516 <RS485_analysis+0x346>
	{
		uint8_t lengthData = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	74fb      	strb	r3, [r7, #19]
		uint16_t crc = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	823b      	strh	r3, [r7, #16]
		m_rs485data->Function = (RS485_Function)p_RS485Data[1];
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	781a      	ldrb	r2, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	709a      	strb	r2, [r3, #2]
		if(m_rs485data->Function == RS485_SentStruct.mbFunction)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	789a      	ldrb	r2, [r3, #2]
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	429a      	cmp	r2, r3
 8001210:	f040 817f 	bne.w	8001512 <RS485_analysis+0x342>
		{
			m_rs485data->slaveAddress = p_RS485Data[0];
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	705a      	strb	r2, [r3, #1]
			if((p_RS485Data[1]&0x80) == 0x80)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	da01      	bge.n	800122c <RS485_analysis+0x5c>
			{
				//return wrong function code
				return 0;
 8001228:	2300      	movs	r3, #0
 800122a:	e175      	b.n	8001518 <RS485_analysis+0x348>
			}
			else
			{
				switch (p_RS485Data[1])
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	2b17      	cmp	r3, #23
 8001236:	f200 816e 	bhi.w	8001516 <RS485_analysis+0x346>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <RS485_analysis+0x70>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	080012a1 	.word	0x080012a1
 8001244:	0800131f 	.word	0x0800131f
 8001248:	0800139d 	.word	0x0800139d
 800124c:	08001439 	.word	0x08001439
 8001250:	08001517 	.word	0x08001517
 8001254:	08001517 	.word	0x08001517
 8001258:	080014d5 	.word	0x080014d5
 800125c:	08001517 	.word	0x08001517
 8001260:	08001517 	.word	0x08001517
 8001264:	08001517 	.word	0x08001517
 8001268:	08001517 	.word	0x08001517
 800126c:	08001517 	.word	0x08001517
 8001270:	08001517 	.word	0x08001517
 8001274:	08001517 	.word	0x08001517
 8001278:	08001517 	.word	0x08001517
 800127c:	08001517 	.word	0x08001517
 8001280:	08001517 	.word	0x08001517
 8001284:	08001517 	.word	0x08001517
 8001288:	08001517 	.word	0x08001517
 800128c:	08001517 	.word	0x08001517
 8001290:	08001517 	.word	0x08001517
 8001294:	08001517 	.word	0x08001517
 8001298:	08001517 	.word	0x08001517
 800129c:	08001517 	.word	0x08001517
				{
					case 0x01:	//Read Coil Status
						lengthData = p_RS485Data[2];
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	789b      	ldrb	r3, [r3, #2]
 80012a4:	74fb      	strb	r3, [r7, #19]
						m_rs485data->length = lengthData;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	7cfa      	ldrb	r2, [r7, #19]
 80012aa:	701a      	strb	r2, [r3, #0]
						crc =  (uint16_t)p_RS485Data[3+m_rs485data->length]|((uint16_t)p_RS485Data[4+m_rs485data->length]<<8); 
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3303      	adds	r3, #3
 80012b2:	461a      	mov	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3304      	adds	r3, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 80012d4:	7cfb      	ldrb	r3, [r7, #19]
 80012d6:	3303      	adds	r3, #3
 80012d8:	4619      	mov	r1, r3
 80012da:	6838      	ldr	r0, [r7, #0]
 80012dc:	f7ff feae 	bl	800103c <crcCalculation>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	8a3b      	ldrh	r3, [r7, #16]
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d117      	bne.n	800131a <RS485_analysis+0x14a>
						{
							for(uint8_t i=0; i<m_rs485data->length;i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
 80012ee:	e00d      	b.n	800130c <RS485_analysis+0x13c>
							{
								m_rs485data->CoilStatus[i] = p_RS485Data[3+i];
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	3303      	adds	r3, #3
 80012f4:	461a      	mov	r2, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	441a      	add	r2, r3
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	7811      	ldrb	r1, [r2, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	460a      	mov	r2, r1
 8001304:	729a      	strb	r2, [r3, #10]
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	3301      	adds	r3, #1
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	7dfa      	ldrb	r2, [r7, #23]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3ec      	bcc.n	80012f0 <RS485_analysis+0x120>
							}
							return 1;
 8001316:	2301      	movs	r3, #1
 8001318:	e0fe      	b.n	8001518 <RS485_analysis+0x348>
						}
						else return 0;
 800131a:	2300      	movs	r3, #0
 800131c:	e0fc      	b.n	8001518 <RS485_analysis+0x348>
					case 0x02: //Read Input Status
						lengthData = p_RS485Data[2];
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	789b      	ldrb	r3, [r3, #2]
 8001322:	74fb      	strb	r3, [r7, #19]
						m_rs485data->length = lengthData;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	7cfa      	ldrb	r2, [r7, #19]
 8001328:	701a      	strb	r2, [r3, #0]
						crc =  (uint16_t)p_RS485Data[3+m_rs485data->length]|((uint16_t)p_RS485Data[4+m_rs485data->length]<<8); 
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3303      	adds	r3, #3
 8001330:	461a      	mov	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b21a      	sxth	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3304      	adds	r3, #4
 8001340:	4619      	mov	r1, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	440b      	add	r3, r1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21b      	sxth	r3, r3
 8001350:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 8001352:	7cfb      	ldrb	r3, [r7, #19]
 8001354:	3303      	adds	r3, #3
 8001356:	4619      	mov	r1, r3
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f7ff fe6f 	bl	800103c <crcCalculation>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	8a3b      	ldrh	r3, [r7, #16]
 8001364:	4293      	cmp	r3, r2
 8001366:	d117      	bne.n	8001398 <RS485_analysis+0x1c8>
						{
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001368:	2300      	movs	r3, #0
 800136a:	75bb      	strb	r3, [r7, #22]
 800136c:	e00d      	b.n	800138a <RS485_analysis+0x1ba>
							{
								m_rs485data->CoilStatus[i] = p_RS485Data[3+i];
 800136e:	7dbb      	ldrb	r3, [r7, #22]
 8001370:	3303      	adds	r3, #3
 8001372:	461a      	mov	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	441a      	add	r2, r3
 8001378:	7dbb      	ldrb	r3, [r7, #22]
 800137a:	7811      	ldrb	r1, [r2, #0]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	460a      	mov	r2, r1
 8001382:	729a      	strb	r2, [r3, #10]
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001384:	7dbb      	ldrb	r3, [r7, #22]
 8001386:	3301      	adds	r3, #1
 8001388:	75bb      	strb	r3, [r7, #22]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	7dba      	ldrb	r2, [r7, #22]
 8001390:	429a      	cmp	r2, r3
 8001392:	d3ec      	bcc.n	800136e <RS485_analysis+0x19e>
							}
							return 1;
 8001394:	2301      	movs	r3, #1
 8001396:	e0bf      	b.n	8001518 <RS485_analysis+0x348>
						}
						else return 0;
 8001398:	2300      	movs	r3, #0
 800139a:	e0bd      	b.n	8001518 <RS485_analysis+0x348>
					case 0x03:	//Read Holding Register
						lengthData = p_RS485Data[2];
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	74fb      	strb	r3, [r7, #19]
						m_rs485data->length = lengthData/2;
 80013a2:	7cfb      	ldrb	r3, [r7, #19]
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	701a      	strb	r2, [r3, #0]
						crc =  (uint16_t)p_RS485Data[3+lengthData]|((uint16_t)p_RS485Data[4+lengthData]<<8); 
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	3303      	adds	r3, #3
 80013b0:	461a      	mov	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	3304      	adds	r3, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	440b      	add	r3, r1
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 80013d0:	7cfb      	ldrb	r3, [r7, #19]
 80013d2:	3303      	adds	r3, #3
 80013d4:	4619      	mov	r1, r3
 80013d6:	6838      	ldr	r0, [r7, #0]
 80013d8:	f7ff fe30 	bl	800103c <crcCalculation>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	8a3b      	ldrh	r3, [r7, #16]
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d126      	bne.n	8001434 <RS485_analysis+0x264>
						{
							for(uint8_t i=0; i<m_rs485data->length;i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	757b      	strb	r3, [r7, #21]
 80013ea:	e01c      	b.n	8001426 <RS485_analysis+0x256>
							{
								m_rs485data->dataReg[i] = (uint16_t)(p_RS485Data[3+i*2]<<8)|p_RS485Data[4+i*2];	//Vi tri bat dau du lieu se la 3
 80013ec:	7d7b      	ldrb	r3, [r7, #21]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	3303      	adds	r3, #3
 80013f2:	461a      	mov	r2, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b299      	uxth	r1, r3
 8001400:	7d7b      	ldrb	r3, [r7, #21]
 8001402:	3302      	adds	r3, #2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	461a      	mov	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29a      	uxth	r2, r3
 8001410:	7d7b      	ldrb	r3, [r7, #21]
 8001412:	430a      	orrs	r2, r1
 8001414:	b291      	uxth	r1, r2
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	460a      	mov	r2, r1
 800141e:	809a      	strh	r2, [r3, #4]
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001420:	7d7b      	ldrb	r3, [r7, #21]
 8001422:	3301      	adds	r3, #1
 8001424:	757b      	strb	r3, [r7, #21]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	7d7a      	ldrb	r2, [r7, #21]
 800142c:	429a      	cmp	r2, r3
 800142e:	d3dd      	bcc.n	80013ec <RS485_analysis+0x21c>
							}
							return 1;
 8001430:	2301      	movs	r3, #1
 8001432:	e071      	b.n	8001518 <RS485_analysis+0x348>
						}
						else return 0;
 8001434:	2300      	movs	r3, #0
 8001436:	e06f      	b.n	8001518 <RS485_analysis+0x348>
					case 0x04:	//Read Input Register
						lengthData = p_RS485Data[2];
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	789b      	ldrb	r3, [r3, #2]
 800143c:	74fb      	strb	r3, [r7, #19]
						m_rs485data->length = lengthData/2;
 800143e:	7cfb      	ldrb	r3, [r7, #19]
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	b2da      	uxtb	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	701a      	strb	r2, [r3, #0]
						crc =  (uint16_t)p_RS485Data[3+lengthData]|((uint16_t)p_RS485Data[4+lengthData]<<8); 
 8001448:	7cfb      	ldrb	r3, [r7, #19]
 800144a:	3303      	adds	r3, #3
 800144c:	461a      	mov	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b21a      	sxth	r2, r3
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	3304      	adds	r3, #4
 800145a:	4619      	mov	r1, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	440b      	add	r3, r1
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 800146c:	7cfb      	ldrb	r3, [r7, #19]
 800146e:	3303      	adds	r3, #3
 8001470:	4619      	mov	r1, r3
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f7ff fde2 	bl	800103c <crcCalculation>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	8a3b      	ldrh	r3, [r7, #16]
 800147e:	4293      	cmp	r3, r2
 8001480:	d126      	bne.n	80014d0 <RS485_analysis+0x300>
						{
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001482:	2300      	movs	r3, #0
 8001484:	753b      	strb	r3, [r7, #20]
 8001486:	e01c      	b.n	80014c2 <RS485_analysis+0x2f2>
							{
								m_rs485data->dataReg[i] = (uint16_t)(p_RS485Data[3+i*2]<<8)|p_RS485Data[4+i*2];	//Vi tri bat dau du lieu se la 3
 8001488:	7d3b      	ldrb	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	3303      	adds	r3, #3
 800148e:	461a      	mov	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b299      	uxth	r1, r3
 800149c:	7d3b      	ldrb	r3, [r7, #20]
 800149e:	3302      	adds	r3, #2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	461a      	mov	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	7d3b      	ldrb	r3, [r7, #20]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	b291      	uxth	r1, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	460a      	mov	r2, r1
 80014ba:	809a      	strh	r2, [r3, #4]
							for(uint8_t i=0; i<m_rs485data->length;i++)
 80014bc:	7d3b      	ldrb	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	753b      	strb	r3, [r7, #20]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	7d3a      	ldrb	r2, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d3dd      	bcc.n	8001488 <RS485_analysis+0x2b8>
							}
							return 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e023      	b.n	8001518 <RS485_analysis+0x348>
						}
						else return 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e021      	b.n	8001518 <RS485_analysis+0x348>
						break;
					case 0x06:
						
						break;
					case 0x07:
						crc =  (uint16_t)p_RS485Data[3]|((uint16_t)p_RS485Data[4]<<8);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3303      	adds	r3, #3
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b21a      	sxth	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3304      	adds	r3, #4
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	3303      	adds	r3, #3
 80014f0:	4619      	mov	r1, r3
 80014f2:	6838      	ldr	r0, [r7, #0]
 80014f4:	f7ff fda2 	bl	800103c <crcCalculation>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	8a3b      	ldrh	r3, [r7, #16]
 80014fe:	4293      	cmp	r3, r2
 8001500:	d105      	bne.n	800150e <RS485_analysis+0x33e>
						{
							m_rs485data->CoilStatus[0] = p_RS485Data[2];
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	789a      	ldrb	r2, [r3, #2]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	729a      	strb	r2, [r3, #10]
							return 1;
 800150a:	2301      	movs	r3, #1
 800150c:	e004      	b.n	8001518 <RS485_analysis+0x348>
						}
						else return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e002      	b.n	8001518 <RS485_analysis+0x348>
					case 0x18:
						break;
				}
			}
		}
		else return 0;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <RS485_analysis+0x348>
	}
	return 0;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	if(huart->Instance == SIM_USART)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_UART_RxCpltCallback+0x60>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d121      	bne.n	8001576 <HAL_UART_RxCpltCallback+0x56>
	{
		if(Sim_Count == MAX_RECVBUF_LEN)
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_RxCpltCallback+0x64>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800153c:	d102      	bne.n	8001544 <HAL_UART_RxCpltCallback+0x24>
		{
			Sim_Count = 0;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_RxCpltCallback+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
		}
		Sim_Rxdata[Sim_Count++] = Sim_Rxbyte[0];
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_UART_RxCpltCallback+0x64>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b29b      	uxth	r3, r3
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	b291      	uxth	r1, r2
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_UART_RxCpltCallback+0x64>)
 8001550:	8011      	strh	r1, [r2, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_UART_RxCpltCallback+0x68>)
 8001556:	7819      	ldrb	r1, [r3, #0]
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_UART_RxCpltCallback+0x6c>)
 800155a:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	490a      	ldr	r1, [pc, #40]	; (8001588 <HAL_UART_RxCpltCallback+0x68>)
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <HAL_UART_RxCpltCallback+0x70>)
 8001562:	f007 f871 	bl	8008648 <HAL_UART_Receive_IT>
		Sim_UartTime = HAL_GetTick();
 8001566:	f002 ff3b 	bl	80043e0 <HAL_GetTick>
 800156a:	4603      	mov	r3, r0
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_UART_RxCpltCallback+0x74>)
 800156e:	6013      	str	r3, [r2, #0]
		isSimResponse = true;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_UART_RxCpltCallback+0x78>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
	}
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40004400 	.word	0x40004400
 8001584:	20000968 	.word	0x20000968
 8001588:	2000057c 	.word	0x2000057c
 800158c:	20000580 	.word	0x20000580
 8001590:	20001150 	.word	0x20001150
 8001594:	2000096c 	.word	0x2000096c
 8001598:	2000096a 	.word	0x2000096a

0800159c <deleteBuffer>:
  * @param  buf which buffer needs to be deleted
  * @param  len which length of buffer to be deleted.
  * @retval None
  */
void deleteBuffer(char* buf, uint32_t len)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < len; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e007      	b.n	80015bc <deleteBuffer+0x20>
	{
		buf[i] = '\0';
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3f3      	bcc.n	80015ac <deleteBuffer+0x10>
	}
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <subString>:
  * @param  startpos is the index to start the substring at.
  * @param  endpos is the index to end the substring before.
  * @retval None
  */
void subString(char* maindata, char* subdata, uint32_t startpos, uint32_t endpos)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	603b      	str	r3, [r7, #0]
	if(endpos < strlen(maindata))
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7fe fdf5 	bl	80001d0 <strlen>
 80015e6:	4602      	mov	r2, r0
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d213      	bcs.n	8001616 <subString+0x44>
	{
		for(uint32_t i = startpos; i < endpos; i++)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e00c      	b.n	800160e <subString+0x3c>
		{
			subdata[i - startpos] = maindata[i];
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	441a      	add	r2, r3
 80015fa:	6979      	ldr	r1, [r7, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1acb      	subs	r3, r1, r3
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	440b      	add	r3, r1
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = startpos; i < endpos; i++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3ee      	bcc.n	80015f4 <subString+0x22>
		}
	}
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <Sim_send>:
  * @param  command which is AT commands or data.
  * @param  len which is length of AT commands or data.
  * @retval None
  */
STATUS Sim_send(char *command, uint16_t len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
	deleteBuffer((char*)Sim_Rxdata, strlen((char*)Sim_Rxdata));
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <Sim_send+0x44>)
 800162e:	f7fe fdcf 	bl	80001d0 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	4619      	mov	r1, r3
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <Sim_send+0x44>)
 8001638:	f7ff ffb0 	bl	800159c <deleteBuffer>
	Sim_Count = 0;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <Sim_send+0x48>)
 800163e:	2200      	movs	r2, #0
 8001640:	801a      	strh	r2, [r3, #0]
	if(HAL_UART_Transmit(&SIM_UART, (uint8_t*) command, len, MAX_SEND_TIME) == HAL_OK)
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	f44f 7359 	mov.w	r3, #868	; 0x364
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <Sim_send+0x4c>)
 800164c:	f006 feaa 	bl	80083a4 <HAL_UART_Transmit>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <Sim_send+0x3a>
	{
		return RET_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <Sim_send+0x3c>
	}
	return RET_TIMEOUT;
 800165a:	2302      	movs	r3, #2
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000580 	.word	0x20000580
 8001668:	20000968 	.word	0x20000968
 800166c:	20001150 	.word	0x20001150

08001670 <Sim_recv>:
  * @param  timeout which is maximum waiting time for receiving data.
  * @retval RET_TIMEOUT if no response data.
  * 		RET_OK if received a string of data.
  */
STATUS Sim_recv(uint32_t timeout)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8001678:	f002 feb2 	bl	80043e0 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]
	while(isSimResponse == false)
 800167e:	e009      	b.n	8001694 <Sim_recv+0x24>
	{
		if(HAL_GetTick() - time > timeout)
 8001680:	f002 feae 	bl	80043e0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d201      	bcs.n	8001694 <Sim_recv+0x24>
		{
			return RET_TIMEOUT;
 8001690:	2302      	movs	r3, #2
 8001692:	e020      	b.n	80016d6 <Sim_recv+0x66>
	while(isSimResponse == false)
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <Sim_recv+0x70>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ed      	bne.n	8001680 <Sim_recv+0x10>
		}
	}
	HAL_Delay(5);
 80016a4:	2005      	movs	r0, #5
 80016a6:	f002 fea7 	bl	80043f8 <HAL_Delay>
	uint32_t time1 = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		time1 = HAL_GetTick();
 80016ae:	f002 fe97 	bl	80043e0 <HAL_GetTick>
 80016b2:	60b8      	str	r0, [r7, #8]
		if((time1 - Sim_UartTime) > 100)
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <Sim_recv+0x74>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b64      	cmp	r3, #100	; 0x64
 80016be:	d906      	bls.n	80016ce <Sim_recv+0x5e>
		{
			__NOP();
 80016c0:	bf00      	nop
			break;
 80016c2:	bf00      	nop
		}
		HAL_Delay(1);
	}
	isSimResponse = false;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <Sim_recv+0x70>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e003      	b.n	80016d6 <Sim_recv+0x66>
		HAL_Delay(1);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f002 fe92 	bl	80043f8 <HAL_Delay>
		time1 = HAL_GetTick();
 80016d4:	e7eb      	b.n	80016ae <Sim_recv+0x3e>
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000096a 	.word	0x2000096a
 80016e4:	2000096c 	.word	0x2000096c

080016e8 <Sim_checkResponseWith>:
  * @param	timeout is maximum waiting time of a data
  * @retval RET_FAIL if no userdata data in Sim_Rxdata.
  * 		RET_OK if otherwise.
  */
STATUS Sim_checkResponseWith(char* userdata, uint8_t maxretry, uint32_t timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	460b      	mov	r3, r1
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	for(i = 0; i < maxretry; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
 80016fa:	e012      	b.n	8001722 <Sim_checkResponseWith+0x3a>
	{
		if(Sim_recv(timeout) == RET_OK)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ffb7 	bl	8001670 <Sim_recv>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d109      	bne.n	800171c <Sim_checkResponseWith+0x34>
		{
			if(strstr((char*)Sim_Rxdata,userdata) != NULL)
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	480b      	ldr	r0, [pc, #44]	; (8001738 <Sim_checkResponseWith+0x50>)
 800170c:	f007 ff46 	bl	800959c <strstr>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <Sim_checkResponseWith+0x34>
			{
				__NOP();
 8001716:	bf00      	nop
				#if (SIM_DEBUG == 1)
					printf("%s\r\n",(char*)Sim_Rxdata);
				#endif
				return RET_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	e008      	b.n	800172e <Sim_checkResponseWith+0x46>
	for(i = 0; i < maxretry; i++)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	3301      	adds	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]
 8001722:	7dfa      	ldrb	r2, [r7, #23]
 8001724:	7afb      	ldrb	r3, [r7, #11]
 8001726:	429a      	cmp	r2, r3
 8001728:	d3e8      	bcc.n	80016fc <Sim_checkResponseWith+0x14>
		printf("-----Error-----\r\n");
		printf("Max retry = %d\r\n",i);
		printf("%s",(char*)Sim_Rxdata);
		printf("---------------\r\n");
	#endif
	__NOP();
 800172a:	bf00      	nop
	return RET_FAIL;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000580 	.word	0x20000580

0800173c <Sim_checkOK>:
  * @param  None.
  * @retval RET_FAIL if no response or incorrect data.
  * 		RET_OK if response correct data.
  */
STATUS Sim_checkOK(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	Sim_send("AT\r",3);
 8001740:	2103      	movs	r1, #3
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <Sim_checkOK+0x2c>)
 8001744:	f7ff ff6c 	bl	8001620 <Sim_send>
	ret = Sim_checkResponseWith("OK", 1, 1000);
 8001748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800174c:	2101      	movs	r1, #1
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <Sim_checkOK+0x30>)
 8001750:	f7ff ffca 	bl	80016e8 <Sim_checkResponseWith>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <Sim_checkOK+0x34>)
 800175a:	701a      	strb	r2, [r3, #0]
	__NOP();
 800175c:	bf00      	nop
	return ret;
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <Sim_checkOK+0x34>)
 8001760:	781b      	ldrb	r3, [r3, #0]
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	0800ab60 	.word	0x0800ab60
 800176c:	0800ab64 	.word	0x0800ab64
 8001770:	20000f71 	.word	0x20000f71

08001774 <Sim_getSignalQuality>:
  * @param  None.
  * @retval RET_FAIL if 0 < RSSI < 32.
  * 		RET_OK if otherwise.
  */
uint8_t Sim_getSignalQuality(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
	uint8_t rssi = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	71fb      	strb	r3, [r7, #7]
	Sim_send("AT+CSQ\r",7);
 800177e:	2107      	movs	r1, #7
 8001780:	4817      	ldr	r0, [pc, #92]	; (80017e0 <Sim_getSignalQuality+0x6c>)
 8001782:	f7ff ff4d 	bl	8001620 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 3000);
 8001786:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800178a:	2102      	movs	r1, #2
 800178c:	4815      	ldr	r0, [pc, #84]	; (80017e4 <Sim_getSignalQuality+0x70>)
 800178e:	f7ff ffab 	bl	80016e8 <Sim_checkResponseWith>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <Sim_getSignalQuality+0x74>)
 8001798:	701a      	strb	r2, [r3, #0]
	__NOP();
 800179a:	bf00      	nop
	if(ret == RET_OK)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <Sim_getSignalQuality+0x74>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d117      	bne.n	80017d4 <Sim_getSignalQuality+0x60>
	{
		char* tok = strtok((char*)Sim_Rxdata,":");
 80017a4:	4911      	ldr	r1, [pc, #68]	; (80017ec <Sim_getSignalQuality+0x78>)
 80017a6:	4812      	ldr	r0, [pc, #72]	; (80017f0 <Sim_getSignalQuality+0x7c>)
 80017a8:	f007 ff10 	bl	80095cc <strtok>
 80017ac:	6038      	str	r0, [r7, #0]
		tok = strtok(NULL,",");
 80017ae:	4911      	ldr	r1, [pc, #68]	; (80017f4 <Sim_getSignalQuality+0x80>)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f007 ff0b 	bl	80095cc <strtok>
 80017b6:	6038      	str	r0, [r7, #0]
		rssi = atoi(tok);
 80017b8:	6838      	ldr	r0, [r7, #0]
 80017ba:	f007 fe91 	bl	80094e0 <atoi>
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
		deleteBuffer((char*)Sim_Rxdata, 100);
 80017c2:	2164      	movs	r1, #100	; 0x64
 80017c4:	480a      	ldr	r0, [pc, #40]	; (80017f0 <Sim_getSignalQuality+0x7c>)
 80017c6:	f7ff fee9 	bl	800159c <deleteBuffer>
		if(rssi < 32)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b1f      	cmp	r3, #31
 80017ce:	d801      	bhi.n	80017d4 <Sim_getSignalQuality+0x60>
		{
			return rssi;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	e000      	b.n	80017d6 <Sim_getSignalQuality+0x62>
		}
	}
	return 99;
 80017d4:	2363      	movs	r3, #99	; 0x63
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	0800ab68 	.word	0x0800ab68
 80017e4:	0800ab64 	.word	0x0800ab64
 80017e8:	20000f71 	.word	0x20000f71
 80017ec:	0800ab70 	.word	0x0800ab70
 80017f0:	20000580 	.word	0x20000580
 80017f4:	0800ab74 	.word	0x0800ab74

080017f8 <Sim_disconnectInternet>:
  * @param  None.
  * @retval RET_FAIL if disconnection failed.
  * 		RET_OK if disconnection successful.
  */
STATUS Sim_disconnectInternet(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	Sim_send("AT+QIDEACT=1\r",13);
 80017fc:	210d      	movs	r1, #13
 80017fe:	4809      	ldr	r0, [pc, #36]	; (8001824 <Sim_disconnectInternet+0x2c>)
 8001800:	f7ff ff0e 	bl	8001620 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	2102      	movs	r1, #2
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <Sim_disconnectInternet+0x30>)
 800180c:	f7ff ff6c 	bl	80016e8 <Sim_checkResponseWith>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <Sim_disconnectInternet+0x34>)
 8001816:	701a      	strb	r2, [r3, #0]
	__NOP();
 8001818:	bf00      	nop
	return ret;
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <Sim_disconnectInternet+0x34>)
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	0800abd8 	.word	0x0800abd8
 8001828:	0800ab64 	.word	0x0800ab64
 800182c:	20000f71 	.word	0x20000f71

08001830 <Sim_initSMS>:

STATUS Sim_initSMS(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	//Select SMS Message Format
	Sim_send("AT+CMGF=1\r",strlen("AT+CMGF=1\r"));
 8001834:	210a      	movs	r1, #10
 8001836:	4810      	ldr	r0, [pc, #64]	; (8001878 <Sim_initSMS+0x48>)
 8001838:	f7ff fef2 	bl	8001620 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	2102      	movs	r1, #2
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <Sim_initSMS+0x4c>)
 8001844:	f7ff ff50 	bl	80016e8 <Sim_checkResponseWith>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <Sim_initSMS+0x50>)
 800184e:	701a      	strb	r2, [r3, #0]
	__NOP();
 8001850:	bf00      	nop
	//Delete all message
	Sim_send("AT+CMGD=1,4\r",strlen("AT+CMGD=1,4\r"));
 8001852:	210c      	movs	r1, #12
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <Sim_initSMS+0x54>)
 8001856:	f7ff fee3 	bl	8001620 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	2102      	movs	r1, #2
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <Sim_initSMS+0x4c>)
 8001862:	f7ff ff41 	bl	80016e8 <Sim_checkResponseWith>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <Sim_initSMS+0x50>)
 800186c:	701a      	strb	r2, [r3, #0]
	__NOP();
 800186e:	bf00      	nop
	return ret;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <Sim_initSMS+0x50>)
 8001872:	781b      	ldrb	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	0800abe8 	.word	0x0800abe8
 800187c:	0800ab64 	.word	0x0800ab64
 8001880:	20000f71 	.word	0x20000f71
 8001884:	0800abf4 	.word	0x0800abf4

08001888 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800188c:	f3bf 8f4f 	dsb	sy
}
 8001890:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <__NVIC_SystemReset+0x24>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800189a:	4904      	ldr	r1, [pc, #16]	; (80018ac <__NVIC_SystemReset+0x24>)
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_SystemReset+0x28>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80018a2:	f3bf 8f4f 	dsb	sy
}
 80018a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <__NVIC_SystemReset+0x20>
 80018ac:	e000ed00 	.word	0xe000ed00
 80018b0:	05fa0004 	.word	0x05fa0004

080018b4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
	for(uint32_t i = 0; i < 100000; i++);
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_EXTI_Callback+0x16>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_GPIO_EXTI_Callback+0x8c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d9f8      	bls.n	80018c4 <HAL_GPIO_EXTI_Callback+0x10>
	if(GPIO_Pin == SIM_RI_Pin)
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d102      	bne.n	80018de <HAL_GPIO_EXTI_Callback+0x2a>
	{
		Sim_isRISignal = true;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_GPIO_EXTI_Callback+0x90>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == IN_1_Pin)
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e4:	d118      	bne.n	8001918 <HAL_GPIO_EXTI_Callback+0x64>
	{
		rainRaw++;
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_GPIO_EXTI_Callback+0x94>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_GPIO_EXTI_Callback+0x94>)
 80018f2:	801a      	strh	r2, [r3, #0]
		long j = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
		while((HAL_GPIO_ReadPin(IN_1_GPIO_Port,IN_1_Pin) == GPIO_PIN_SET) && (j < 1000000)){j++;};
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_EXTI_Callback+0x4c>
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	3301      	adds	r3, #1
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001904:	4811      	ldr	r0, [pc, #68]	; (800194c <HAL_GPIO_EXTI_Callback+0x98>)
 8001906:	f004 fccd 	bl	80062a4 <HAL_GPIO_ReadPin>
 800190a:	4603      	mov	r3, r0
 800190c:	2b01      	cmp	r3, #1
 800190e:	d103      	bne.n	8001918 <HAL_GPIO_EXTI_Callback+0x64>
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	ddf0      	ble.n	80018fa <HAL_GPIO_EXTI_Callback+0x46>
//	if(GPIO_Pin == IN_4_Pin)
//	{
//		while(HAL_GPIO_ReadPin(IN_4_GPIO_Port, IN_4_Pin) == GPIO_PIN_SET);
//		IN4_cnt++;
//	}
	for(uint32_t i = 0; i < 100000; i++);
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e002      	b.n	8001924 <HAL_GPIO_EXTI_Callback+0x70>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d9f8      	bls.n	800191e <HAL_GPIO_EXTI_Callback+0x6a>
	EXTI->PR |= GPIO_Pin;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_GPIO_EXTI_Callback+0xa0>)
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001934:	4313      	orrs	r3, r2
 8001936:	614b      	str	r3, [r1, #20]
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	0001869f 	.word	0x0001869f
 8001944:	20000972 	.word	0x20000972
 8001948:	20000ed8 	.word	0x20000ed8
 800194c:	48000800 	.word	0x48000800
 8001950:	000f423f 	.word	0x000f423f
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	isOnTimeToSendReq = true;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RTC_AlarmAEventCallback+0x68>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
	//Thuc hien lay thoi gian hien tai cua RTC
	HAL_RTC_GetTime(hrtc, &currentTime, RTC_FORMAT_BIN);
 8001966:	2200      	movs	r2, #0
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HAL_RTC_AlarmAEventCallback+0x6c>)
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f006 f92e 	bl	8007bcc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &currentDate, RTC_FORMAT_BIN);
 8001970:	2200      	movs	r2, #0
 8001972:	4915      	ldr	r1, [pc, #84]	; (80019c8 <HAL_RTC_AlarmAEventCallback+0x70>)
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f006 fa2e 	bl	8007dd6 <HAL_RTC_GetDate>
	rtc_count++;
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_RTC_AlarmAEventCallback+0x74>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	3301      	adds	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_RTC_AlarmAEventCallback+0x74>)
 8001986:	801a      	strh	r2, [r3, #0]
	if((userAlarm.AlarmTime.Hours == 0) && (userAlarm.AlarmTime.Minutes == 0))
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_RTC_AlarmAEventCallback+0x78>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_RTC_AlarmAEventCallback+0x46>
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RTC_AlarmAEventCallback+0x78>)
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <HAL_RTC_AlarmAEventCallback+0x46>
	{
		isRTCStartCounting = true;
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_RTC_AlarmAEventCallback+0x7c>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
	}
	//Thuc hien cai dat thoi gian Alarm
	RTC_initAlarm(currentTime.Hours, currentTime.Minutes, 0);
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80019a4:	7851      	ldrb	r1, [r2, #1]
 80019a6:	2200      	movs	r2, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 fad1 	bl	8002f50 <RTC_initAlarm>
	HAL_RTC_SetAlarm_IT(hrtc, &userAlarm, RTC_FORMAT_BIN);
 80019ae:	2200      	movs	r2, #0
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <HAL_RTC_AlarmAEventCallback+0x78>)
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f006 fa5e 	bl	8007e74 <HAL_RTC_SetAlarm_IT>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000bad 	.word	0x20000bad
 80019c4:	20000b6c 	.word	0x20000b6c
 80019c8:	20000b80 	.word	0x20000b80
 80019cc:	20000bae 	.word	0x20000bae
 80019d0:	20000b84 	.word	0x20000b84
 80019d4:	20000bac 	.word	0x20000bac

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b099      	sub	sp, #100	; 0x64
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019de:	f002 fca5 	bl	800432c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e2:	f000 fb25 	bl	8002030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e6:	f000 fde1 	bl	80025ac <MX_GPIO_Init>
  MX_DMA_Init();
 80019ea:	f000 fdb9 	bl	8002560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019ee:	f000 fd57 	bl	80024a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80019f2:	f000 fd85 	bl	8002500 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80019f6:	f000 fc61 	bl	80022bc <MX_RTC_Init>
  MX_ADC2_Init();
 80019fa:	f000 fb87 	bl	800210c <MX_ADC2_Init>
  MX_ADC4_Init();
 80019fe:	f000 fbf1 	bl	80021e4 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
	#if (PWRMODE == 1)
	PWR_ctrlPwrSensor(ON);
	#endif
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001a02:	2100      	movs	r1, #0
 8001a04:	48bc      	ldr	r0, [pc, #752]	; (8001cf8 <main+0x320>)
 8001a06:	f003 f897 	bl	8004b38 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	48bb      	ldr	r0, [pc, #748]	; (8001cfc <main+0x324>)
 8001a0e:	f003 f893 	bl	8004b38 <HAL_ADCEx_Calibration_Start>
  	HAL_Delay(1000);
 8001a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a16:	f002 fcef 	bl	80043f8 <HAL_Delay>
  	Flash_init();
 8001a1a:	f001 fc8b 	bl	8003334 <Flash_init>
    HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	49b7      	ldr	r1, [pc, #732]	; (8001d00 <main+0x328>)
 8001a22:	48b8      	ldr	r0, [pc, #736]	; (8001d04 <main+0x32c>)
 8001a24:	f006 fe10 	bl	8008648 <HAL_UART_Receive_IT>
    Sim_resetSIM();
 8001a28:	f001 f8e2 	bl	8002bf0 <Sim_resetSIM>
    /* First Connection */
	char StationStart[25]  = {0};
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	751a      	strb	r2, [r3, #20]
	char StationConfig[25] = {0};
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	751a      	strb	r2, [r3, #20]
	sprintf(StationStart,"station=%d&status=%s",STATION,"START");
 8001a58:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a5c:	4baa      	ldr	r3, [pc, #680]	; (8001d08 <main+0x330>)
 8001a5e:	221e      	movs	r2, #30
 8001a60:	49aa      	ldr	r1, [pc, #680]	; (8001d0c <main+0x334>)
 8001a62:	f007 fd73 	bl	800954c <siprintf>
	sprintf(StationConfig,"station=%d&status=%s",STATION,"CONFIG");
 8001a66:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a6a:	4ba9      	ldr	r3, [pc, #676]	; (8001d10 <main+0x338>)
 8001a6c:	221e      	movs	r2, #30
 8001a6e:	49a7      	ldr	r1, [pc, #668]	; (8001d0c <main+0x334>)
 8001a70:	f007 fd6c 	bl	800954c <siprintf>
	Sim_exitSLEEPMode();
 8001a74:	f001 f8a0 	bl	8002bb8 <Sim_exitSLEEPMode>
	Sim_checkOK();
 8001a78:	f7ff fe60 	bl	800173c <Sim_checkOK>
	HAL_Delay(3000);
 8001a7c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a80:	f002 fcba 	bl	80043f8 <HAL_Delay>
    if(Sim_checkOK() == RET_OK)
 8001a84:	f7ff fe5a 	bl	800173c <Sim_checkOK>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d11b      	bne.n	8001ac6 <main+0xee>
    {
		Sim_RSSI = Sim_getSignalQuality();
 8001a8e:	f7ff fe71 	bl	8001774 <Sim_getSignalQuality>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b9f      	ldr	r3, [pc, #636]	; (8001d14 <main+0x33c>)
 8001a98:	701a      	strb	r2, [r3, #0]
		if(Sim_RSSI != 99) //99 <=> error
 8001a9a:	4b9e      	ldr	r3, [pc, #632]	; (8001d14 <main+0x33c>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b63      	cmp	r3, #99	; 0x63
 8001aa0:	d011      	beq.n	8001ac6 <main+0xee>
		{
			if(Sim_initSMS() == RET_OK)
 8001aa2:	f7ff fec5 	bl	8001830 <Sim_initSMS>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10c      	bne.n	8001ac6 <main+0xee>
			{
				if(HTTP_configParams() == RET_OK)
 8001aac:	f7ff f982 	bl	8000db4 <HTTP_configParams>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d107      	bne.n	8001ac6 <main+0xee>
				{
					__NOP();
 8001ab6:	bf00      	nop
					Sim_connectHTTP(HostConfig, URLConfig, StationStart, (char*)HTTP_DataToGet);
 8001ab8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001abc:	4b96      	ldr	r3, [pc, #600]	; (8001d18 <main+0x340>)
 8001abe:	4997      	ldr	r1, [pc, #604]	; (8001d1c <main+0x344>)
 8001ac0:	4897      	ldr	r0, [pc, #604]	; (8001d20 <main+0x348>)
 8001ac2:	f000 fe43 	bl	800274c <Sim_connectHTTP>
				}
			}
		}
    }
    __NOP();
 8001ac6:	bf00      	nop
    Sim_enterSLEEPMode();
 8001ac8:	f001 f838 	bl	8002b3c <Sim_enterSLEEPMode>
    Sim_isRISignal = false; //After reset, RISignal will raise
 8001acc:	4b95      	ldr	r3, [pc, #596]	; (8001d24 <main+0x34c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
	#if (PWRMODE == 0)
	PWR_ctrlPwrSensor(OFF);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f001 ffde 	bl	8003a94 <PWR_ctrlPwrSensor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Sim_isRISignal == true)
 8001ad8:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <main+0x34c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <main+0x114>
	  {
		  Sim_restartControl();
 8001ae2:	f001 f923 	bl	8002d2c <Sim_restartControl>
		  Sim_isRISignal = false;
 8001ae6:	4b8f      	ldr	r3, [pc, #572]	; (8001d24 <main+0x34c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
	  }

	  if(configStatus == 1)
 8001aec:	4b8e      	ldr	r3, [pc, #568]	; (8001d28 <main+0x350>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d109      	bne.n	8001b08 <main+0x130>
	  {
		  Sim_connectHTTP(HostConfig, URLConfig, StationConfig, (char*)HTTP_DataToGet);
 8001af4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001af8:	4b87      	ldr	r3, [pc, #540]	; (8001d18 <main+0x340>)
 8001afa:	4988      	ldr	r1, [pc, #544]	; (8001d1c <main+0x344>)
 8001afc:	4888      	ldr	r0, [pc, #544]	; (8001d20 <main+0x348>)
 8001afe:	f000 fe25 	bl	800274c <Sim_connectHTTP>
		  configStatus = 0;
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <main+0x350>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
	  }

	  if(isRTCStartCounting)
 8001b08:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <main+0x354>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d013      	beq.n	8001b3a <main+0x162>
	  {
		  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001b12:	2200      	movs	r2, #0
 8001b14:	4986      	ldr	r1, [pc, #536]	; (8001d30 <main+0x358>)
 8001b16:	4887      	ldr	r0, [pc, #540]	; (8001d34 <main+0x35c>)
 8001b18:	f006 f858 	bl	8007bcc <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4986      	ldr	r1, [pc, #536]	; (8001d38 <main+0x360>)
 8001b20:	4884      	ldr	r0, [pc, #528]	; (8001d34 <main+0x35c>)
 8001b22:	f006 f958 	bl	8007dd6 <HAL_RTC_GetDate>
		  if((currentTime.Hours == 0)&&(currentTime.Minutes > 4))
 8001b26:	4b82      	ldr	r3, [pc, #520]	; (8001d30 <main+0x358>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <main+0x162>
 8001b2e:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <main+0x358>)
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d901      	bls.n	8001b3a <main+0x162>
		  {
			  NVIC_SystemReset();
 8001b36:	f7ff fea7 	bl	8001888 <__NVIC_SystemReset>
		  }
	  }

	  if(isOnTimeToSendReq)
 8001b3a:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <main+0x364>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 81a3 	beq.w	8001e8c <main+0x4b4>
	  {
		  #if (PWRMODE == 0)
		  PWR_ctrlPwrSensor(ON);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f001 ffa4 	bl	8003a94 <PWR_ctrlPwrSensor>
		  #endif
		  Sim_exitSLEEPMode();
 8001b4c:	f001 f834 	bl	8002bb8 <Sim_exitSLEEPMode>
		  //Kiem tra tin hieu Sim
		  Sim_RSSI = Sim_getSignalQuality();
 8001b50:	f7ff fe10 	bl	8001774 <Sim_getSignalQuality>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b6e      	ldr	r3, [pc, #440]	; (8001d14 <main+0x33c>)
 8001b5a:	701a      	strb	r2, [r3, #0]
		  //Doc dien ap
		  PWR_getPwrSupply(0);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f001 ffb3 	bl	8003ac8 <PWR_getPwrSupply>
		  HAL_Delay(10000);
 8001b62:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b66:	f002 fc47 	bl	80043f8 <HAL_Delay>
		  HAL_Delay(10000);
 8001b6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b6e:	f002 fc43 	bl	80043f8 <HAL_Delay>
		  //Doc du lieu cam bien
		  /*-------RS485-------*/
		  float rs485_arr[5] = {0};
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
		  for(uint8_t i = 0; i < 5; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001b88:	e012      	b.n	8001bb0 <main+0x1d8>
		  {
		  	rs485_arr[i] = RS485_readLiquidLevelTransmitter(0x01);
 8001b8a:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f001 fd7e 	bl	8003690 <RS485_readLiquidLevelTransmitter>
 8001b94:	eef0 7a40 	vmov.f32	s15, s0
 8001b98:	00a3      	lsls	r3, r4, #2
 8001b9a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b4c      	subs	r3, #76	; 0x4c
 8001ba2:	edc3 7a00 	vstr	s15, [r3]
		  for(uint8_t i = 0; i < 5; i++)
 8001ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001baa:	3301      	adds	r3, #1
 8001bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d9e8      	bls.n	8001b8a <main+0x1b2>
		  }
		  insertionSort_2(rs485_arr,5);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 f87a 	bl	8003cb8 <insertionSort_2>
		  if(rs485_arr[4] == -32767)
 8001bc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bc8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001d40 <main+0x368>
 8001bcc:	eef4 7a47 	vcmp.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d114      	bne.n	8001c00 <main+0x228>
		  {
			  levelWater = 0;
 8001bd6:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <main+0x36c>)
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
			  //bao trang thai cam bien
			  memset(sensorStatus,0,strlen(sensorStatus));
 8001bde:	485a      	ldr	r0, [pc, #360]	; (8001d48 <main+0x370>)
 8001be0:	f7fe faf6 	bl	80001d0 <strlen>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	2100      	movs	r1, #0
 8001bea:	4857      	ldr	r0, [pc, #348]	; (8001d48 <main+0x370>)
 8001bec:	f007 fca6 	bl	800953c <memset>
			  strcpy(sensorStatus,"ERROR");
 8001bf0:	4b55      	ldr	r3, [pc, #340]	; (8001d48 <main+0x370>)
 8001bf2:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <main+0x374>)
 8001bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bf8:	6018      	str	r0, [r3, #0]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	8019      	strh	r1, [r3, #0]
 8001bfe:	e029      	b.n	8001c54 <main+0x27c>
		  }
		  else
		  {
			  levelWater = rs485_arr[2];
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <main+0x36c>)
 8001c04:	6013      	str	r3, [r2, #0]
			  if(levelWater < 0 || levelWater > 10) levelWater = 0;
 8001c06:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <main+0x36c>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d409      	bmi.n	8001c2a <main+0x252>
 8001c16:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <main+0x36c>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	dd03      	ble.n	8001c32 <main+0x25a>
 8001c2a:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <main+0x36c>)
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
			  memset(sensorStatus,0,strlen(sensorStatus));
 8001c32:	4845      	ldr	r0, [pc, #276]	; (8001d48 <main+0x370>)
 8001c34:	f7fe facc 	bl	80001d0 <strlen>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4842      	ldr	r0, [pc, #264]	; (8001d48 <main+0x370>)
 8001c40:	f007 fc7c 	bl	800953c <memset>
			  strcpy(sensorStatus,"OK");
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <main+0x370>)
 8001c46:	4a42      	ldr	r2, [pc, #264]	; (8001d50 <main+0x378>)
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	8019      	strh	r1, [r3, #0]
 8001c4e:	3302      	adds	r3, #2
 8001c50:	0c12      	lsrs	r2, r2, #16
 8001c52:	701a      	strb	r2, [r3, #0]
		  }
		  /*-------420mA-------*/
		  float adc_arr[5] = {0};
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
		  for(uint8_t i = 0; i < 5; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001c68:	e012      	b.n	8001c90 <main+0x2b8>
		  {
			  adc_arr[i] = Sensor_getADCValue(2);
 8001c6a:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f001 fd7e 	bl	8003770 <Sensor_getADCValue>
 8001c74:	eef0 7a40 	vmov.f32	s15, s0
 8001c78:	00a3      	lsls	r3, r4, #2
 8001c7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b60      	subs	r3, #96	; 0x60
 8001c82:	edc3 7a00 	vstr	s15, [r3]
		  for(uint8_t i = 0; i < 5; i++)
 8001c86:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001c90:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d9e8      	bls.n	8001c6a <main+0x292>
		  }
		  insertionSort_2(adc_arr,5);
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2105      	movs	r1, #5
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 f80b 	bl	8003cb8 <insertionSort_2>
		  Sensor_CalibCurrent = adc_arr[2];
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <main+0x37c>)
 8001ca6:	6013      	str	r3, [r2, #0]
		  if((Sensor_CalibCurrent > 3.9) && (Sensor_CalibCurrent < 4.01))
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <main+0x37c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc4b 	bl	8000548 <__aeabi_f2d>
 8001cb2:	a30d      	add	r3, pc, #52	; (adr r3, 8001ce8 <main+0x310>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe ff2e 	bl	8000b18 <__aeabi_dcmpgt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d04a      	beq.n	8001d58 <main+0x380>
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <main+0x37c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc3e 	bl	8000548 <__aeabi_f2d>
 8001ccc:	a308      	add	r3, pc, #32	; (adr r3, 8001cf0 <main+0x318>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe ff03 	bl	8000adc <__aeabi_dcmplt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d03d      	beq.n	8001d58 <main+0x380>
		  {
		  	Sensor_CalibCurrent = 4.00;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <main+0x37c>)
 8001cde:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e052      	b.n	8001d8c <main+0x3b4>
 8001ce6:	bf00      	nop
 8001ce8:	33333333 	.word	0x33333333
 8001cec:	400f3333 	.word	0x400f3333
 8001cf0:	70a3d70a 	.word	0x70a3d70a
 8001cf4:	40100a3d 	.word	0x40100a3d
 8001cf8:	2000103c 	.word	0x2000103c
 8001cfc:	200011d4 	.word	0x200011d4
 8001d00:	2000057c 	.word	0x2000057c
 8001d04:	20001150 	.word	0x20001150
 8001d08:	0800ac34 	.word	0x0800ac34
 8001d0c:	0800ac3c 	.word	0x0800ac3c
 8001d10:	0800ac54 	.word	0x0800ac54
 8001d14:	20000970 	.word	0x20000970
 8001d18:	20000194 	.word	0x20000194
 8001d1c:	200000a0 	.word	0x200000a0
 8001d20:	20000080 	.word	0x20000080
 8001d24:	20000972 	.word	0x20000972
 8001d28:	20000b68 	.word	0x20000b68
 8001d2c:	20000bac 	.word	0x20000bac
 8001d30:	20000b6c 	.word	0x20000b6c
 8001d34:	200010fc 	.word	0x200010fc
 8001d38:	20000b80 	.word	0x20000b80
 8001d3c:	20000bad 	.word	0x20000bad
 8001d40:	c6fffe00 	.word	0xc6fffe00
 8001d44:	20000ed4 	.word	0x20000ed4
 8001d48:	200000fc 	.word	0x200000fc
 8001d4c:	0800ac5c 	.word	0x0800ac5c
 8001d50:	0800ac64 	.word	0x0800ac64
 8001d54:	20000f58 	.word	0x20000f58
		  }
		  else if((Sensor_CalibCurrent > 20.01) && (Sensor_CalibCurrent < 21))
 8001d58:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <main+0x5e0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbf3 	bl	8000548 <__aeabi_f2d>
 8001d62:	a393      	add	r3, pc, #588	; (adr r3, 8001fb0 <main+0x5d8>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fed6 	bl	8000b18 <__aeabi_dcmpgt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <main+0x3b4>
 8001d72:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <main+0x5e0>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8001d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	d502      	bpl.n	8001d8c <main+0x3b4>
		  {
		  	Sensor_CalibCurrent = 20.00;
 8001d86:	4b8c      	ldr	r3, [pc, #560]	; (8001fb8 <main+0x5e0>)
 8001d88:	4a8c      	ldr	r2, [pc, #560]	; (8001fbc <main+0x5e4>)
 8001d8a:	601a      	str	r2, [r3, #0]
		  }
		  levelWater = ADC_map(Sensor_CalibCurrent, 4.00, 20.00, 0.0, 15); //donvi: met
 8001d8c:	4b8a      	ldr	r3, [pc, #552]	; (8001fb8 <main+0x5e0>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8001d96:	eddf 1a8a 	vldr	s3, [pc, #552]	; 8001fc0 <main+0x5e8>
 8001d9a:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8001d9e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001da2:	eeb0 0a67 	vmov.f32	s0, s15
 8001da6:	f001 fe47 	bl	8003a38 <ADC_map>
 8001daa:	eef0 7a40 	vmov.f32	s15, s0
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <main+0x5ec>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
		  if((levelWater < 0.0) || (levelWater > 16.0))
 8001db4:	4b83      	ldr	r3, [pc, #524]	; (8001fc4 <main+0x5ec>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d409      	bmi.n	8001dd8 <main+0x400>
 8001dc4:	4b7f      	ldr	r3, [pc, #508]	; (8001fc4 <main+0x5ec>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	dd14      	ble.n	8001e02 <main+0x42a>
		  {
			  levelWater = 0;
 8001dd8:	4b7a      	ldr	r3, [pc, #488]	; (8001fc4 <main+0x5ec>)
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
			  memset(sensorStatus,0,strlen(sensorStatus));
 8001de0:	4879      	ldr	r0, [pc, #484]	; (8001fc8 <main+0x5f0>)
 8001de2:	f7fe f9f5 	bl	80001d0 <strlen>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	2100      	movs	r1, #0
 8001dec:	4876      	ldr	r0, [pc, #472]	; (8001fc8 <main+0x5f0>)
 8001dee:	f007 fba5 	bl	800953c <memset>
			  strcpy(sensorStatus,"ERROR");
 8001df2:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <main+0x5f0>)
 8001df4:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <main+0x5f4>)
 8001df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dfa:	6018      	str	r0, [r3, #0]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	8019      	strh	r1, [r3, #0]
 8001e00:	e010      	b.n	8001e24 <main+0x44c>
		  }
		  else
		  {
			  memset(sensorStatus,0,strlen(sensorStatus));
 8001e02:	4871      	ldr	r0, [pc, #452]	; (8001fc8 <main+0x5f0>)
 8001e04:	f7fe f9e4 	bl	80001d0 <strlen>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	486e      	ldr	r0, [pc, #440]	; (8001fc8 <main+0x5f0>)
 8001e10:	f007 fb94 	bl	800953c <memset>
			  strcpy(sensorStatus,"OK");
 8001e14:	4b6c      	ldr	r3, [pc, #432]	; (8001fc8 <main+0x5f0>)
 8001e16:	4a6e      	ldr	r2, [pc, #440]	; (8001fd0 <main+0x5f8>)
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	8019      	strh	r1, [r3, #0]
 8001e1e:	3302      	adds	r3, #2
 8001e20:	0c12      	lsrs	r2, r2, #16
 8001e22:	701a      	strb	r2, [r3, #0]
		  }
		  //Tong hop du lieu
		  strcpy(MainData,"TEST DATA");
 8001e24:	4b6b      	ldr	r3, [pc, #428]	; (8001fd4 <main+0x5fc>)
 8001e26:	4a6c      	ldr	r2, [pc, #432]	; (8001fd8 <main+0x600>)
 8001e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e2a:	c303      	stmia	r3!, {r0, r1}
 8001e2c:	801a      	strh	r2, [r3, #0]
		  //Reset du lieu
		  rainRaw = 0;
 8001e2e:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <main+0x604>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	801a      	strh	r2, [r3, #0]
		  #if (PWRMODE == 0)
		  PWR_ctrlPwrSensor(OFF);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f001 fe2d 	bl	8003a94 <PWR_ctrlPwrSensor>
		  #endif
		  //Gui du lieu len Server
		  ret = Sim_connectHTTP(Host1, URL1, MainData, (char*)HTTP_DataToGet);
 8001e3a:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <main+0x608>)
 8001e3c:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <main+0x5fc>)
 8001e3e:	4969      	ldr	r1, [pc, #420]	; (8001fe4 <main+0x60c>)
 8001e40:	4869      	ldr	r0, [pc, #420]	; (8001fe8 <main+0x610>)
 8001e42:	f000 fc83 	bl	800274c <Sim_connectHTTP>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b68      	ldr	r3, [pc, #416]	; (8001fec <main+0x614>)
 8001e4c:	701a      	strb	r2, [r3, #0]
		  if(ret != RET_OK)
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <main+0x614>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <main+0x490>
		  {
			  Flash_writeData(Host1, NULL, MainData);
 8001e56:	4a5f      	ldr	r2, [pc, #380]	; (8001fd4 <main+0x5fc>)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4863      	ldr	r0, [pc, #396]	; (8001fe8 <main+0x610>)
 8001e5c:	f001 fada 	bl	8003414 <Flash_writeData>
			  Flash_isReadData = false;
 8001e60:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <main+0x618>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e002      	b.n	8001e6e <main+0x496>
		  }
		  else
		  {
			  Flash_isReadData = true;
 8001e68:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <main+0x618>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
		  }
		  //Reset du lieu
		  memset(MainData,0,strlen(MainData));
 8001e6e:	4859      	ldr	r0, [pc, #356]	; (8001fd4 <main+0x5fc>)
 8001e70:	f7fe f9ae 	bl	80001d0 <strlen>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4856      	ldr	r0, [pc, #344]	; (8001fd4 <main+0x5fc>)
 8001e7c:	f007 fb5e 	bl	800953c <memset>
		  Sim_enterSLEEPMode();
 8001e80:	f000 fe5c 	bl	8002b3c <Sim_enterSLEEPMode>
		  isOnTimeToSendReq = false;
 8001e84:	4b5b      	ldr	r3, [pc, #364]	; (8001ff4 <main+0x61c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	e625      	b.n	8001ad8 <main+0x100>
	  }
	  else
	  {
		  if(Flash_isReadData == true)
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <main+0x618>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8082 	beq.w	8001f9a <main+0x5c2>
		  {
			  if(READ_DATA_ADDR != WRITE_DATA_ADDR)
 8001e96:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <main+0x620>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <main+0x624>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d070      	beq.n	8001f84 <main+0x5ac>
			  {
				  memset(Flash_DataToRead, 0, strlen(Flash_DataToRead));
 8001ea2:	4857      	ldr	r0, [pc, #348]	; (8002000 <main+0x628>)
 8001ea4:	f7fe f994 	bl	80001d0 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2100      	movs	r1, #0
 8001eae:	4854      	ldr	r0, [pc, #336]	; (8002000 <main+0x628>)
 8001eb0:	f007 fb44 	bl	800953c <memset>
				  READ_DATA_ADDR = Flash_ReadIntType(RD_ADDR);
 8001eb4:	4853      	ldr	r0, [pc, #332]	; (8002004 <main+0x62c>)
 8001eb6:	f7fe fee0 	bl	8000c7a <Flash_ReadIntType>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a4e      	ldr	r2, [pc, #312]	; (8001ff8 <main+0x620>)
 8001ebe:	6013      	str	r3, [r2, #0]
				  WRITE_DATA_ADDR = Flash_ReadIntType(WR_ADDR);
 8001ec0:	4851      	ldr	r0, [pc, #324]	; (8002008 <main+0x630>)
 8001ec2:	f7fe feda 	bl	8000c7a <Flash_ReadIntType>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <main+0x624>)
 8001eca:	6013      	str	r3, [r2, #0]
				  PAGE_ADDR = Flash_ReadIntType(PG_ADDR);
 8001ecc:	484f      	ldr	r0, [pc, #316]	; (800200c <main+0x634>)
 8001ece:	f7fe fed4 	bl	8000c7a <Flash_ReadIntType>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a4e      	ldr	r2, [pc, #312]	; (8002010 <main+0x638>)
 8001ed6:	6013      	str	r3, [r2, #0]
				  Flash_ReadCharType(Flash_DataToRead, READ_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8001ed8:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <main+0x620>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4847      	ldr	r0, [pc, #284]	; (8002000 <main+0x628>)
 8001ee2:	f7fe ff29 	bl	8000d38 <Flash_ReadCharType>
				  Flash_ReadDataLen = strlen(Flash_DataToRead);
 8001ee6:	4846      	ldr	r0, [pc, #280]	; (8002000 <main+0x628>)
 8001ee8:	f7fe f972 	bl	80001d0 <strlen>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	4b48      	ldr	r3, [pc, #288]	; (8002014 <main+0x63c>)
 8001ef2:	801a      	strh	r2, [r3, #0]
				  if(Flash_ReadDataLen != 0)
 8001ef4:	4b47      	ldr	r3, [pc, #284]	; (8002014 <main+0x63c>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <main+0x52a>
				  {
					  Flash_extractData(Flash_DataToRead);
 8001efc:	4840      	ldr	r0, [pc, #256]	; (8002000 <main+0x628>)
 8001efe:	f001 fb45 	bl	800358c <Flash_extractData>
				  }
				  ret = Sim_connectHTTP(Flash_Host, Flash_URL, Flash_Data, (char*)HTTP_DataToGet);
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <main+0x608>)
 8001f04:	4a44      	ldr	r2, [pc, #272]	; (8002018 <main+0x640>)
 8001f06:	4945      	ldr	r1, [pc, #276]	; (800201c <main+0x644>)
 8001f08:	4845      	ldr	r0, [pc, #276]	; (8002020 <main+0x648>)
 8001f0a:	f000 fc1f 	bl	800274c <Sim_connectHTTP>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <main+0x614>)
 8001f14:	701a      	strb	r2, [r3, #0]
				  if(ret == RET_OK)
 8001f16:	4b35      	ldr	r3, [pc, #212]	; (8001fec <main+0x614>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d12e      	bne.n	8001f7c <main+0x5a4>
				  {
					  READ_DATA_ADDR += Flash_ReadDataLen*2+2;
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <main+0x63c>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <main+0x620>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a32      	ldr	r2, [pc, #200]	; (8001ff8 <main+0x620>)
 8001f30:	6013      	str	r3, [r2, #0]
					  if(READ_DATA_ADDR == MAX_PAGE_ADDR)
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <main+0x620>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <main+0x64c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d102      	bne.n	8001f42 <main+0x56a>
					  {
						  READ_DATA_ADDR = MIN_DATA_ADDR;
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <main+0x620>)
 8001f3e:	4a3a      	ldr	r2, [pc, #232]	; (8002028 <main+0x650>)
 8001f40:	601a      	str	r2, [r3, #0]
					  }
					  Flash_Unlock();
 8001f42:	f7fe fe66 	bl	8000c12 <Flash_Unlock>
					  Flash_Erase(RD_ADDR);
 8001f46:	482f      	ldr	r0, [pc, #188]	; (8002004 <main+0x62c>)
 8001f48:	f7fe fe69 	bl	8000c1e <Flash_Erase>
					  Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR,FLASH_TYPEPROGRAM_WORD);
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <main+0x620>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2202      	movs	r2, #2
 8001f52:	4619      	mov	r1, r3
 8001f54:	482b      	ldr	r0, [pc, #172]	; (8002004 <main+0x62c>)
 8001f56:	f7fe fe7e 	bl	8000c56 <Flash_WriteIntType>
					  Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR,FLASH_TYPEPROGRAM_WORD);
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <main+0x624>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4619      	mov	r1, r3
 8001f62:	4829      	ldr	r0, [pc, #164]	; (8002008 <main+0x630>)
 8001f64:	f7fe fe77 	bl	8000c56 <Flash_WriteIntType>
					  Flash_WriteIntType(PG_ADDR,PAGE_ADDR,FLASH_TYPEPROGRAM_WORD);
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <main+0x638>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4826      	ldr	r0, [pc, #152]	; (800200c <main+0x634>)
 8001f72:	f7fe fe70 	bl	8000c56 <Flash_WriteIntType>
					  Flash_Lock();
 8001f76:	f7fe fe46 	bl	8000c06 <Flash_Lock>
 8001f7a:	e5ad      	b.n	8001ad8 <main+0x100>
				  }
				  else //gui that bai -> khong cho phep doc bo nho Flash
				  {
					  Flash_isReadData = false;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <main+0x618>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e5a9      	b.n	8001ad8 <main+0x100>
				  }
			  }
			  else //gui het du lieu Flash -> dua ve Sleepmode
			  {
				  if(Sim_SleepMode == false)
 8001f84:	4b29      	ldr	r3, [pc, #164]	; (800202c <main+0x654>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	f083 0301 	eor.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f43f ada2 	beq.w	8001ad8 <main+0x100>
				  {
					  Sim_enterSLEEPMode();
 8001f94:	f000 fdd2 	bl	8002b3c <Sim_enterSLEEPMode>
 8001f98:	e59e      	b.n	8001ad8 <main+0x100>
				  }
			  }
		  }
		  else //khong cho phep doc du lieu Flash -> dua ve Sleepmode
		  {
			  if(Sim_SleepMode == false)
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <main+0x654>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f083 0301 	eor.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f43f ad97 	beq.w	8001ad8 <main+0x100>
			  {
				  Sim_enterSLEEPMode();
 8001faa:	f000 fdc7 	bl	8002b3c <Sim_enterSLEEPMode>
	  if(Sim_isRISignal == true)
 8001fae:	e593      	b.n	8001ad8 <main+0x100>
 8001fb0:	5c28f5c3 	.word	0x5c28f5c3
 8001fb4:	4034028f 	.word	0x4034028f
 8001fb8:	20000f58 	.word	0x20000f58
 8001fbc:	41a00000 	.word	0x41a00000
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	20000ed4 	.word	0x20000ed4
 8001fc8:	200000fc 	.word	0x200000fc
 8001fcc:	0800ac5c 	.word	0x0800ac5c
 8001fd0:	0800ac64 	.word	0x0800ac64
 8001fd4:	20000e0c 	.word	0x20000e0c
 8001fd8:	0800ac68 	.word	0x0800ac68
 8001fdc:	20000ed8 	.word	0x20000ed8
 8001fe0:	20000194 	.word	0x20000194
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000020 	.word	0x20000020
 8001fec:	20000f71 	.word	0x20000f71
 8001ff0:	20000e0a 	.word	0x20000e0a
 8001ff4:	20000bad 	.word	0x20000bad
 8001ff8:	200000f4 	.word	0x200000f4
 8001ffc:	200000f0 	.word	0x200000f0
 8002000:	20000c78 	.word	0x20000c78
 8002004:	08011000 	.word	0x08011000
 8002008:	08010c00 	.word	0x08010c00
 800200c:	08010800 	.word	0x08010800
 8002010:	200000f8 	.word	0x200000f8
 8002014:	20000e08 	.word	0x20000e08
 8002018:	20000d40 	.word	0x20000d40
 800201c:	2000111c 	.word	0x2000111c
 8002020:	2000108c 	.word	0x2000108c
 8002024:	0801fbf0 	.word	0x0801fbf0
 8002028:	08011400 	.word	0x08011400
 800202c:	20000971 	.word	0x20000971

08002030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b09e      	sub	sp, #120	; 0x78
 8002034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002036:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800203a:	2228      	movs	r2, #40	; 0x28
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f007 fa7c 	bl	800953c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002044:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002054:	463b      	mov	r3, r7
 8002056:	223c      	movs	r2, #60	; 0x3c
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f007 fa6e 	bl	800953c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002060:	f004 f968 	bl	8006334 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <SystemClock_Config+0xd4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <SystemClock_Config+0xd4>)
 800206a:	f023 0318 	bic.w	r3, r3, #24
 800206e:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002070:	2306      	movs	r3, #6
 8002072:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002074:	2301      	movs	r3, #1
 8002076:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002078:	2301      	movs	r3, #1
 800207a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800207c:	2310      	movs	r3, #16
 800207e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002080:	2302      	movs	r3, #2
 8002082:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002084:	2300      	movs	r3, #0
 8002086:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800208c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002092:	4618      	mov	r0, r3
 8002094:	f004 f95e 	bl	8006354 <HAL_RCC_OscConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800209e:	f001 fe50 	bl	8003d42 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	230f      	movs	r3, #15
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020a6:	2300      	movs	r3, #0
 80020a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f005 f851 	bl	8007164 <HAL_RCC_ClockConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80020c8:	f001 fe3b 	bl	8003d42 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <SystemClock_Config+0xd8>)
 80020ce:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80020d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80020de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e8:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ea:	463b      	mov	r3, r7
 80020ec:	4618      	mov	r0, r3
 80020ee:	f005 fa6f 	bl	80075d0 <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80020f8:	f001 fe23 	bl	8003d42 <Error_Handler>
  }
}
 80020fc:	bf00      	nop
 80020fe:	3778      	adds	r7, #120	; 0x78
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	00010186 	.word	0x00010186

0800210c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002112:	463b      	mov	r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002124:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <MX_ADC2_Init+0xd4>)
 8002126:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002128:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <MX_ADC2_Init+0xd0>)
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002136:	2201      	movs	r2, #1
 8002138:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <MX_ADC2_Init+0xd0>)
 800213c:	2201      	movs	r2, #1
 800213e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <MX_ADC2_Init+0xd0>)
 800214a:	2200      	movs	r2, #0
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002150:	2201      	movs	r2, #1
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <MX_ADC2_Init+0xd0>)
 800215c:	2202      	movs	r2, #2
 800215e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <MX_ADC2_Init+0xd0>)
 800216a:	2204      	movs	r2, #4
 800216c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002170:	2200      	movs	r2, #0
 8002172:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <MX_ADC2_Init+0xd0>)
 8002176:	2200      	movs	r2, #0
 8002178:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800217a:	4818      	ldr	r0, [pc, #96]	; (80021dc <MX_ADC2_Init+0xd0>)
 800217c:	f002 f97e 	bl	800447c <HAL_ADC_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8002186:	f001 fddc 	bl	8003d42 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800218a:	2302      	movs	r3, #2
 800218c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800218e:	2301      	movs	r3, #1
 8002190:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8002196:	2307      	movs	r3, #7
 8002198:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021a2:	463b      	mov	r3, r7
 80021a4:	4619      	mov	r1, r3
 80021a6:	480d      	ldr	r0, [pc, #52]	; (80021dc <MX_ADC2_Init+0xd0>)
 80021a8:	f002 fd30 	bl	8004c0c <HAL_ADC_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80021b2:	f001 fdc6 	bl	8003d42 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80021b6:	2303      	movs	r3, #3
 80021b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80021ba:	2302      	movs	r3, #2
 80021bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021be:	463b      	mov	r3, r7
 80021c0:	4619      	mov	r1, r3
 80021c2:	4806      	ldr	r0, [pc, #24]	; (80021dc <MX_ADC2_Init+0xd0>)
 80021c4:	f002 fd22 	bl	8004c0c <HAL_ADC_ConfigChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80021ce:	f001 fdb8 	bl	8003d42 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000103c 	.word	0x2000103c
 80021e0:	50000100 	.word	0x50000100

080021e4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021ea:	463b      	mov	r3, r7
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 80021fa:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <MX_ADC4_Init+0xd0>)
 80021fc:	4a2e      	ldr	r2, [pc, #184]	; (80022b8 <MX_ADC4_Init+0xd4>)
 80021fe:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <MX_ADC4_Init+0xd0>)
 800220e:	2201      	movs	r2, #1
 8002210:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002214:	2201      	movs	r2, #1
 8002216:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <MX_ADC4_Init+0xd0>)
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002222:	2200      	movs	r2, #0
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002226:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002228:	2201      	movs	r2, #1
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <MX_ADC4_Init+0xd0>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 2;
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002234:	2202      	movs	r2, #2
 8002236:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <MX_ADC4_Init+0xd0>)
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002242:	2204      	movs	r2, #4
 8002244:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002248:	2200      	movs	r2, #0
 800224a:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <MX_ADC4_Init+0xd0>)
 800224e:	2200      	movs	r2, #0
 8002250:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8002252:	4818      	ldr	r0, [pc, #96]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002254:	f002 f912 	bl	800447c <HAL_ADC_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 800225e:	f001 fd70 	bl	8003d42 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002262:	2304      	movs	r3, #4
 8002264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002266:	2301      	movs	r3, #1
 8002268:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800226e:	2307      	movs	r3, #7
 8002270:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800227a:	463b      	mov	r3, r7
 800227c:	4619      	mov	r1, r3
 800227e:	480d      	ldr	r0, [pc, #52]	; (80022b4 <MX_ADC4_Init+0xd0>)
 8002280:	f002 fcc4 	bl	8004c0c <HAL_ADC_ConfigChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 800228a:	f001 fd5a 	bl	8003d42 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800228e:	2305      	movs	r3, #5
 8002290:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002292:	2302      	movs	r3, #2
 8002294:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8002296:	463b      	mov	r3, r7
 8002298:	4619      	mov	r1, r3
 800229a:	4806      	ldr	r0, [pc, #24]	; (80022b4 <MX_ADC4_Init+0xd0>)
 800229c:	f002 fcb6 	bl	8004c0c <HAL_ADC_ConfigChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 80022a6:	f001 fd4c 	bl	8003d42 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200011d4 	.word	0x200011d4
 80022b8:	50000500 	.word	0x50000500

080022bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022bc:	b5b0      	push	{r4, r5, r7, lr}
 80022be:	b090      	sub	sp, #64	; 0x40
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80022d6:	463b      	mov	r3, r7
 80022d8:	2228      	movs	r2, #40	; 0x28
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f007 f92d 	bl	800953c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022e2:	4b6a      	ldr	r3, [pc, #424]	; (800248c <MX_RTC_Init+0x1d0>)
 80022e4:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <MX_RTC_Init+0x1d4>)
 80022e6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <MX_RTC_Init+0x1d0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <MX_RTC_Init+0x1d0>)
 80022f0:	227f      	movs	r2, #127	; 0x7f
 80022f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022f4:	4b65      	ldr	r3, [pc, #404]	; (800248c <MX_RTC_Init+0x1d0>)
 80022f6:	22ff      	movs	r2, #255	; 0xff
 80022f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022fa:	4b64      	ldr	r3, [pc, #400]	; (800248c <MX_RTC_Init+0x1d0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002300:	4b62      	ldr	r3, [pc, #392]	; (800248c <MX_RTC_Init+0x1d0>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002306:	4b61      	ldr	r3, [pc, #388]	; (800248c <MX_RTC_Init+0x1d0>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800230c:	485f      	ldr	r0, [pc, #380]	; (800248c <MX_RTC_Init+0x1d0>)
 800230e:	f005 fb0f 	bl	8007930 <HAL_RTC_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002318:	f001 fd13 	bl	8003d42 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F5)
 800231c:	2101      	movs	r1, #1
 800231e:	485b      	ldr	r0, [pc, #364]	; (800248c <MX_RTC_Init+0x1d0>)
 8002320:	f005 ffd0 	bl	80082c4 <HAL_RTCEx_BKUPRead>
 8002324:	4603      	mov	r3, r0
 8002326:	f243 22f5 	movw	r2, #13045	; 0x32f5
 800232a:	4293      	cmp	r3, r2
 800232c:	d071      	beq.n	8002412 <MX_RTC_Init+0x156>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 9;
 800232e:	2309      	movs	r3, #9
 8002330:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002340:	2300      	movs	r3, #0
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234c:	2200      	movs	r2, #0
 800234e:	4619      	mov	r1, r3
 8002350:	484e      	ldr	r0, [pc, #312]	; (800248c <MX_RTC_Init+0x1d0>)
 8002352:	f005 fb7e 	bl	8007a52 <HAL_RTC_SetTime>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 800235c:	f001 fcf1 	bl	8003d42 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002360:	2301      	movs	r3, #1
 8002362:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 10;
 800236c:	230a      	movs	r3, #10
 800236e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 21;
 8002372:	2315      	movs	r3, #21
 8002374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237c:	2200      	movs	r2, #0
 800237e:	4619      	mov	r1, r3
 8002380:	4842      	ldr	r0, [pc, #264]	; (800248c <MX_RTC_Init+0x1d0>)
 8002382:	f005 fc81 	bl	8007c88 <HAL_RTC_SetDate>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 800238c:	f001 fcd9 	bl	8003d42 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 9;
 8002390:	2309      	movs	r3, #9
 8002392:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 8002398:	230a      	movs	r3, #10
 800239a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80023a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023ac:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80023bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80023c2:	463b      	mov	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	4619      	mov	r1, r3
 80023c8:	4830      	ldr	r0, [pc, #192]	; (800248c <MX_RTC_Init+0x1d0>)
 80023ca:	f005 fd53 	bl	8007e74 <HAL_RTC_SetAlarm_IT>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80023d4:	f001 fcb5 	bl	8003d42 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //Khoi tao cac gia tri ban dau cho cac bien
  userAlarm = sAlarm;
 80023d8:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <MX_RTC_Init+0x1d8>)
 80023da:	461d      	mov	r5, r3
 80023dc:	463c      	mov	r4, r7
 80023de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ea:	e885 0003 	stmia.w	r5, {r0, r1}
  currentTime = sTime;
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <MX_RTC_Init+0x1dc>)
 80023f0:	461d      	mov	r5, r3
 80023f2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80023f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	602b      	str	r3, [r5, #0]
  currentDate = sDate;
 80023fe:	4a27      	ldr	r2, [pc, #156]	; (800249c <MX_RTC_Init+0x1e0>)
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	6013      	str	r3, [r2, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F5);
 8002404:	f243 22f5 	movw	r2, #13045	; 0x32f5
 8002408:	2101      	movs	r1, #1
 800240a:	4820      	ldr	r0, [pc, #128]	; (800248c <MX_RTC_Init+0x1d0>)
 800240c:	f005 ff40 	bl	8008290 <HAL_RTCEx_BKUPWrite>
	  userAlarm.Alarm = RTC_ALARM_A;
	  RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
  }
  /* USER CODE END RTC_Init 2 */

}
 8002410:	e037      	b.n	8002482 <MX_RTC_Init+0x1c6>
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002412:	2200      	movs	r2, #0
 8002414:	4920      	ldr	r1, [pc, #128]	; (8002498 <MX_RTC_Init+0x1dc>)
 8002416:	481d      	ldr	r0, [pc, #116]	; (800248c <MX_RTC_Init+0x1d0>)
 8002418:	f005 fbd8 	bl	8007bcc <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800241c:	2200      	movs	r2, #0
 800241e:	491f      	ldr	r1, [pc, #124]	; (800249c <MX_RTC_Init+0x1e0>)
 8002420:	481a      	ldr	r0, [pc, #104]	; (800248c <MX_RTC_Init+0x1d0>)
 8002422:	f005 fcd8 	bl	8007dd6 <HAL_RTC_GetDate>
	  userAlarm.AlarmTime.Hours = currentTime.Hours;
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <MX_RTC_Init+0x1dc>)
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <MX_RTC_Init+0x1d8>)
 800242c:	701a      	strb	r2, [r3, #0]
	  userAlarm.AlarmTime.Minutes = currentTime.Minutes;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_RTC_Init+0x1dc>)
 8002430:	785a      	ldrb	r2, [r3, #1]
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <MX_RTC_Init+0x1d8>)
 8002434:	705a      	strb	r2, [r3, #1]
	  userAlarm.AlarmTime.Seconds = 0;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <MX_RTC_Init+0x1d8>)
 8002438:	2200      	movs	r2, #0
 800243a:	709a      	strb	r2, [r3, #2]
	  userAlarm.AlarmTime.SubSeconds = 0;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <MX_RTC_Init+0x1d8>)
 800243e:	2200      	movs	r2, #0
 8002440:	605a      	str	r2, [r3, #4]
	  userAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MX_RTC_Init+0x1d8>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
	  userAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <MX_RTC_Init+0x1d8>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
	  userAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_RTC_Init+0x1d8>)
 8002450:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002454:	615a      	str	r2, [r3, #20]
	  userAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <MX_RTC_Init+0x1d8>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
	  userAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <MX_RTC_Init+0x1d8>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
	  userAlarm.AlarmDateWeekDay = 1;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_RTC_Init+0x1d8>)
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2020 	strb.w	r2, [r3, #32]
	  userAlarm.Alarm = RTC_ALARM_A;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <MX_RTC_Init+0x1d8>)
 800246c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
	  RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_RTC_Init+0x1d8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <MX_RTC_Init+0x1d8>)
 8002478:	7851      	ldrb	r1, [r2, #1]
 800247a:	2200      	movs	r2, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fd67 	bl	8002f50 <RTC_initAlarm>
}
 8002482:	bf00      	nop
 8002484:	3740      	adds	r7, #64	; 0x40
 8002486:	46bd      	mov	sp, r7
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	bf00      	nop
 800248c:	200010fc 	.word	0x200010fc
 8002490:	40002800 	.word	0x40002800
 8002494:	20000b84 	.word	0x20000b84
 8002498:	20000b6c 	.word	0x20000b6c
 800249c:	20000b80 	.word	0x20000b80

080024a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <MX_USART2_UART_Init+0x5c>)
 80024a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024c6:	220c      	movs	r2, #12
 80024c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024de:	2200      	movs	r2, #0
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_USART2_UART_Init+0x58>)
 80024e4:	f005 ff10 	bl	8008308 <HAL_UART_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024ee:	f001 fc28 	bl	8003d42 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20001150 	.word	0x20001150
 80024fc:	40004400 	.word	0x40004400

08002500 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <MX_USART3_UART_Init+0x5c>)
 8002508:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <MX_USART3_UART_Init+0x58>)
 800250c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002510:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_USART3_UART_Init+0x58>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <MX_USART3_UART_Init+0x58>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_USART3_UART_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002542:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002544:	f005 fee0 	bl	8008308 <HAL_UART_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800254e:	f001 fbf8 	bl	8003d42 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000fb8 	.word	0x20000fb8
 800255c:	40004800 	.word	0x40004800

08002560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_DMA_Init+0x48>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <MX_DMA_Init+0x48>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6153      	str	r3, [r2, #20]
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <MX_DMA_Init+0x48>)
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	2038      	movs	r0, #56	; 0x38
 8002584:	f003 f8db 	bl	800573e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002588:	2038      	movs	r0, #56	; 0x38
 800258a:	f003 f8f4 	bl	8005776 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	2039      	movs	r0, #57	; 0x39
 8002594:	f003 f8d3 	bl	800573e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002598:	2039      	movs	r0, #57	; 0x39
 800259a:	f003 f8ec 	bl	8005776 <HAL_NVIC_EnableIRQ>

}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000

080025ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <MX_GPIO_Init+0x188>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	4a5b      	ldr	r2, [pc, #364]	; (8002734 <MX_GPIO_Init+0x188>)
 80025c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025cc:	6153      	str	r3, [r2, #20]
 80025ce:	4b59      	ldr	r3, [pc, #356]	; (8002734 <MX_GPIO_Init+0x188>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025da:	4b56      	ldr	r3, [pc, #344]	; (8002734 <MX_GPIO_Init+0x188>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4a55      	ldr	r2, [pc, #340]	; (8002734 <MX_GPIO_Init+0x188>)
 80025e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e4:	6153      	str	r3, [r2, #20]
 80025e6:	4b53      	ldr	r3, [pc, #332]	; (8002734 <MX_GPIO_Init+0x188>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b50      	ldr	r3, [pc, #320]	; (8002734 <MX_GPIO_Init+0x188>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <MX_GPIO_Init+0x188>)
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	6153      	str	r3, [r2, #20]
 80025fe:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <MX_GPIO_Init+0x188>)
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <MX_GPIO_Init+0x188>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4a49      	ldr	r2, [pc, #292]	; (8002734 <MX_GPIO_Init+0x188>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6153      	str	r3, [r2, #20]
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <MX_GPIO_Init+0x188>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <MX_GPIO_Init+0x188>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4a43      	ldr	r2, [pc, #268]	; (8002734 <MX_GPIO_Init+0x188>)
 8002628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262c:	6153      	str	r3, [r2, #20]
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <MX_GPIO_Init+0x188>)
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_RESET_Pin|SIM_PWR_Pin, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	210c      	movs	r1, #12
 800263e:	483e      	ldr	r0, [pc, #248]	; (8002738 <MX_GPIO_Init+0x18c>)
 8002640:	f003 fe48 	bl	80062d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_DTR_Pin|CTR_PWR_SS_Pin, GPIO_PIN_RESET);
 8002644:	2200      	movs	r2, #0
 8002646:	f240 1101 	movw	r1, #257	; 0x101
 800264a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264e:	f003 fe41 	bl	80062d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 8002652:	2200      	movs	r2, #0
 8002654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002658:	4838      	ldr	r0, [pc, #224]	; (800273c <MX_GPIO_Init+0x190>)
 800265a:	f003 fe3b 	bl	80062d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SIM_RESET_Pin SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_RESET_Pin|SIM_PWR_Pin;
 800265e:	230c      	movs	r3, #12
 8002660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	2301      	movs	r3, #1
 8002664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4830      	ldr	r0, [pc, #192]	; (8002738 <MX_GPIO_Init+0x18c>)
 8002676:	f003 fc9b 	bl	8005fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_DTR_Pin CTR_PWR_SS_Pin */
  GPIO_InitStruct.Pin = SIM_DTR_Pin|CTR_PWR_SS_Pin;
 800267a:	f240 1301 	movw	r3, #257	; 0x101
 800267e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	2301      	movs	r3, #1
 8002682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002696:	f003 fc8b 	bl	8005fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_RI_Pin */
  GPIO_InitStruct.Pin = SIM_RI_Pin;
 800269a:	2302      	movs	r3, #2
 800269c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <MX_GPIO_Init+0x194>)
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_RI_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b0:	f003 fc7e 	bl	8005fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 80026b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	481b      	ldr	r0, [pc, #108]	; (800273c <MX_GPIO_Init+0x190>)
 80026ce:	f003 fc6f 	bl	8005fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_1_Pin IN_2_Pin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin;
 80026d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_GPIO_Init+0x198>)
 80026da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	4619      	mov	r1, r3
 80026e6:	4814      	ldr	r0, [pc, #80]	; (8002738 <MX_GPIO_Init+0x18c>)
 80026e8:	f003 fc62 	bl	8005fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_3_Pin */
  GPIO_InitStruct.Pin = IN_3_Pin;
 80026ec:	2304      	movs	r3, #4
 80026ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <MX_GPIO_Init+0x198>)
 80026f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_3_GPIO_Port, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4812      	ldr	r0, [pc, #72]	; (8002748 <MX_GPIO_Init+0x19c>)
 8002700:	f003 fc56 	bl	8005fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_4_Pin */
  GPIO_InitStruct.Pin = IN_4_Pin;
 8002704:	2308      	movs	r3, #8
 8002706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_GPIO_Init+0x198>)
 800270a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_4_GPIO_Port, &GPIO_InitStruct);
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4619      	mov	r1, r3
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <MX_GPIO_Init+0x190>)
 8002718:	f003 fc4a 	bl	8005fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	2007      	movs	r0, #7
 8002722:	f003 f80c 	bl	800573e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002726:	2007      	movs	r0, #7
 8002728:	f003 f825 	bl	8005776 <HAL_NVIC_EnableIRQ>

}
 800272c:	bf00      	nop
 800272e:	3728      	adds	r7, #40	; 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	48000800 	.word	0x48000800
 800273c:	48000400 	.word	0x48000400
 8002740:	10210000 	.word	0x10210000
 8002744:	10110000 	.word	0x10110000
 8002748:	48000c00 	.word	0x48000c00

0800274c <Sim_connectHTTP>:

/* USER CODE BEGIN 4 */
STATUS Sim_connectHTTP(char* host, char* url, char* sentdata, char* recvdata)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
	Sim_exitSLEEPMode();
 800275a:	f000 fa2d 	bl	8002bb8 <Sim_exitSLEEPMode>
	deleteBuffer(HTTPServer_URL, strlen(HTTPServer_URL));
 800275e:	4858      	ldr	r0, [pc, #352]	; (80028c0 <Sim_connectHTTP+0x174>)
 8002760:	f7fd fd36 	bl	80001d0 <strlen>
 8002764:	4603      	mov	r3, r0
 8002766:	4619      	mov	r1, r3
 8002768:	4855      	ldr	r0, [pc, #340]	; (80028c0 <Sim_connectHTTP+0x174>)
 800276a:	f7fe ff17 	bl	800159c <deleteBuffer>
	sprintf(HTTPServer_URL,"http://%s/%s?%s",host,url,sentdata);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4953      	ldr	r1, [pc, #332]	; (80028c4 <Sim_connectHTTP+0x178>)
 8002778:	4851      	ldr	r0, [pc, #324]	; (80028c0 <Sim_connectHTTP+0x174>)
 800277a:	f006 fee7 	bl	800954c <siprintf>
	STATUS m_ret = RET_FAIL;
 800277e:	2301      	movs	r3, #1
 8002780:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++)
 8002782:	2300      	movs	r3, #0
 8002784:	77bb      	strb	r3, [r7, #30]
 8002786:	e090      	b.n	80028aa <Sim_connectHTTP+0x15e>
	{
		if(HTTP_sendGETRequest(HTTPServer_URL) == RET_OK)
 8002788:	484d      	ldr	r0, [pc, #308]	; (80028c0 <Sim_connectHTTP+0x174>)
 800278a:	f7fe fb81 	bl	8000e90 <HTTP_sendGETRequest>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d17e      	bne.n	8002892 <Sim_connectHTTP+0x146>
		{
			__NOP();
 8002794:	bf00      	nop
			if(HTTP_readGETResponse(recvdata) == RET_OK)
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	f7fe fbe6 	bl	8000f68 <HTTP_readGETResponse>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d177      	bne.n	8002892 <Sim_connectHTTP+0x146>
			{
				__NOP();
 80027a2:	bf00      	nop
				if(strstr(recvdata,"200 OK") != NULL)
 80027a4:	4948      	ldr	r1, [pc, #288]	; (80028c8 <Sim_connectHTTP+0x17c>)
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	f006 fef8 	bl	800959c <strstr>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d06f      	beq.n	8002892 <Sim_connectHTTP+0x146>
				{
					Sim_extractTimeStamp(recvdata);
 80027b2:	6838      	ldr	r0, [r7, #0]
 80027b4:	f000 f8a2 	bl	80028fc <Sim_extractTimeStamp>
					if(strstr(recvdata,"||CC") != NULL)
 80027b8:	4944      	ldr	r1, [pc, #272]	; (80028cc <Sim_connectHTTP+0x180>)
 80027ba:	6838      	ldr	r0, [r7, #0]
 80027bc:	f006 feee 	bl	800959c <strstr>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <Sim_connectHTTP+0x86>
					{
						Sim_getHostnUrl(recvdata);
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	f000 f944 	bl	8002a54 <Sim_getHostnUrl>
						m_ret = RET_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e05f      	b.n	8002892 <Sim_connectHTTP+0x146>
					}
					else if(strstr(recvdata,"||00") != NULL)
 80027d2:	493f      	ldr	r1, [pc, #252]	; (80028d0 <Sim_connectHTTP+0x184>)
 80027d4:	6838      	ldr	r0, [r7, #0]
 80027d6:	f006 fee1 	bl	800959c <strstr>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <Sim_connectHTTP+0xa0>
					{
						configStatus = 1;
 80027e0:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <Sim_connectHTTP+0x188>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
						m_ret = RET_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	77fb      	strb	r3, [r7, #31]
 80027ea:	e052      	b.n	8002892 <Sim_connectHTTP+0x146>
					}
					else if(strstr(recvdata,"||11") != NULL)
 80027ec:	493a      	ldr	r1, [pc, #232]	; (80028d8 <Sim_connectHTTP+0x18c>)
 80027ee:	6838      	ldr	r0, [r7, #0]
 80027f0:	f006 fed4 	bl	800959c <strstr>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d04b      	beq.n	8002892 <Sim_connectHTTP+0x146>
					{
						char* tok = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
						tok = strtok(recvdata,"|");
 80027fe:	4937      	ldr	r1, [pc, #220]	; (80028dc <Sim_connectHTTP+0x190>)
 8002800:	6838      	ldr	r0, [r7, #0]
 8002802:	f006 fee3 	bl	80095cc <strtok>
 8002806:	61b8      	str	r0, [r7, #24]
						tok = strtok(NULL,"<");
 8002808:	4935      	ldr	r1, [pc, #212]	; (80028e0 <Sim_connectHTTP+0x194>)
 800280a:	2000      	movs	r0, #0
 800280c:	f006 fede 	bl	80095cc <strtok>
 8002810:	61b8      	str	r0, [r7, #24]
						int8_t rtc_alarm = atoi(tok);
 8002812:	69b8      	ldr	r0, [r7, #24]
 8002814:	f006 fe64 	bl	80094e0 <atoi>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]
						if((rtc_alarm >= 0) && (rtc_alarm <= 60))
 800281c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db34      	blt.n	800288e <Sim_connectHTTP+0x142>
 8002824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002828:	2b3c      	cmp	r3, #60	; 0x3c
 800282a:	dc30      	bgt.n	800288e <Sim_connectHTTP+0x142>
						{
							if((rtc_alarm % 5) == 0)
 800282c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <Sim_connectHTTP+0x198>)
 8002832:	fb83 1302 	smull	r1, r3, r3, r2
 8002836:	1059      	asrs	r1, r3, #1
 8002838:	17d3      	asrs	r3, r2, #31
 800283a:	1ac9      	subs	r1, r1, r3
 800283c:	460b      	mov	r3, r1
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	b25b      	sxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d121      	bne.n	800288e <Sim_connectHTTP+0x142>
							{
								if(rtc_alarm != RTC_ALARM)
 800284a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800284e:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <Sim_connectHTTP+0x19c>)
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	4293      	cmp	r3, r2
 8002854:	d01b      	beq.n	800288e <Sim_connectHTTP+0x142>
								{
									RTC_ALARM = rtc_alarm;
 8002856:	7dfa      	ldrb	r2, [r7, #23]
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <Sim_connectHTTP+0x19c>)
 800285a:	701a      	strb	r2, [r3, #0]
									Flash_WriteIntType(MODE_RTC_ADDR, RTC_ALARM, FLASH_TYPEPROGRAM_HALFWORD);
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <Sim_connectHTTP+0x19c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	4619      	mov	r1, r3
 8002864:	4821      	ldr	r0, [pc, #132]	; (80028ec <Sim_connectHTTP+0x1a0>)
 8002866:	f7fe f9f6 	bl	8000c56 <Flash_WriteIntType>
									HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800286a:	2200      	movs	r2, #0
 800286c:	4920      	ldr	r1, [pc, #128]	; (80028f0 <Sim_connectHTTP+0x1a4>)
 800286e:	4821      	ldr	r0, [pc, #132]	; (80028f4 <Sim_connectHTTP+0x1a8>)
 8002870:	f005 f9ac 	bl	8007bcc <HAL_RTC_GetTime>
									HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002874:	2200      	movs	r2, #0
 8002876:	4920      	ldr	r1, [pc, #128]	; (80028f8 <Sim_connectHTTP+0x1ac>)
 8002878:	481e      	ldr	r0, [pc, #120]	; (80028f4 <Sim_connectHTTP+0x1a8>)
 800287a:	f005 faac 	bl	8007dd6 <HAL_RTC_GetDate>
									RTC_initAlarm(currentTime.Hours, currentTime.Minutes, 0);
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <Sim_connectHTTP+0x1a4>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <Sim_connectHTTP+0x1a4>)
 8002884:	7851      	ldrb	r1, [r2, #1]
 8002886:	2200      	movs	r2, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fb61 	bl	8002f50 <RTC_initAlarm>
								}
							}
						}
						m_ret = RET_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
		}
		Sim_disconnectInternet();
 8002892:	f7fe ffb1 	bl	80017f8 <Sim_disconnectInternet>
		if(m_ret == RET_OK)
 8002896:	7ffb      	ldrb	r3, [r7, #31]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <Sim_connectHTTP+0x168>
		{
			break;
		}
		else
		{
			HAL_Delay(2000);
 800289c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028a0:	f001 fdaa 	bl	80043f8 <HAL_Delay>
	for(uint8_t i = 0; i < 3; i++)
 80028a4:	7fbb      	ldrb	r3, [r7, #30]
 80028a6:	3301      	adds	r3, #1
 80028a8:	77bb      	strb	r3, [r7, #30]
 80028aa:	7fbb      	ldrb	r3, [r7, #30]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f67f af6b 	bls.w	8002788 <Sim_connectHTTP+0x3c>
 80028b2:	e000      	b.n	80028b6 <Sim_connectHTTP+0x16a>
			break;
 80028b4:	bf00      	nop
		}
	}
	return m_ret;
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000974 	.word	0x20000974
 80028c4:	0800ac74 	.word	0x0800ac74
 80028c8:	0800ac84 	.word	0x0800ac84
 80028cc:	0800ac8c 	.word	0x0800ac8c
 80028d0:	0800ac94 	.word	0x0800ac94
 80028d4:	20000b68 	.word	0x20000b68
 80028d8:	0800ac9c 	.word	0x0800ac9c
 80028dc:	0800aca4 	.word	0x0800aca4
 80028e0:	0800aca8 	.word	0x0800aca8
 80028e4:	66666667 	.word	0x66666667
 80028e8:	200000be 	.word	0x200000be
 80028ec:	08010400 	.word	0x08010400
 80028f0:	20000b6c 	.word	0x20000b6c
 80028f4:	200010fc 	.word	0x200010fc
 80028f8:	20000b80 	.word	0x20000b80

080028fc <Sim_extractTimeStamp>:

void Sim_extractTimeStamp(char* data)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
	char* ptr1 = strstr(data,"Date:");
 8002908:	494c      	ldr	r1, [pc, #304]	; (8002a3c <Sim_extractTimeStamp+0x140>)
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f006 fe46 	bl	800959c <strstr>
 8002910:	61b8      	str	r0, [r7, #24]
	char* ptr2 = strstr(data," GMT");
 8002912:	494b      	ldr	r1, [pc, #300]	; (8002a40 <Sim_extractTimeStamp+0x144>)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f006 fe41 	bl	800959c <strstr>
 800291a:	6138      	str	r0, [r7, #16]
	if((ptr1 != NULL) & (ptr2 != NULL))
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2da      	uxtb	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4013      	ands	r3, r2
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d07b      	beq.n	8002a34 <Sim_extractTimeStamp+0x138>
	{
		while(ptr1 != ptr2)
 800293c:	e009      	b.n	8002952 <Sim_extractTimeStamp+0x56>
		{
			TimeStamp.timezone[i++] = *ptr1;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	61fa      	str	r2, [r7, #28]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	7811      	ldrb	r1, [r2, #0]
 8002948:	4a3e      	ldr	r2, [pc, #248]	; (8002a44 <Sim_extractTimeStamp+0x148>)
 800294a:	54d1      	strb	r1, [r2, r3]
			ptr1++;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	3301      	adds	r3, #1
 8002950:	61bb      	str	r3, [r7, #24]
		while(ptr1 != ptr2)
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	429a      	cmp	r2, r3
 8002958:	d1f1      	bne.n	800293e <Sim_extractTimeStamp+0x42>
		}
		char* tok = strtok(TimeStamp.timezone," ");
 800295a:	493b      	ldr	r1, [pc, #236]	; (8002a48 <Sim_extractTimeStamp+0x14c>)
 800295c:	4839      	ldr	r0, [pc, #228]	; (8002a44 <Sim_extractTimeStamp+0x148>)
 800295e:	f006 fe35 	bl	80095cc <strtok>
 8002962:	60f8      	str	r0, [r7, #12]
		tok = strtok(NULL," ");
 8002964:	4938      	ldr	r1, [pc, #224]	; (8002a48 <Sim_extractTimeStamp+0x14c>)
 8002966:	2000      	movs	r0, #0
 8002968:	f006 fe30 	bl	80095cc <strtok>
 800296c:	60f8      	str	r0, [r7, #12]
		tok = strtok(NULL," ");
 800296e:	4936      	ldr	r1, [pc, #216]	; (8002a48 <Sim_extractTimeStamp+0x14c>)
 8002970:	2000      	movs	r0, #0
 8002972:	f006 fe2b 	bl	80095cc <strtok>
 8002976:	60f8      	str	r0, [r7, #12]
		TimeStamp.date = atoi(tok);
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f006 fdb1 	bl	80094e0 <atoi>
 800297e:	4603      	mov	r3, r0
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <Sim_extractTimeStamp+0x148>)
 8002984:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		tok = strtok(NULL," ");
 8002988:	492f      	ldr	r1, [pc, #188]	; (8002a48 <Sim_extractTimeStamp+0x14c>)
 800298a:	2000      	movs	r0, #0
 800298c:	f006 fe1e 	bl	80095cc <strtok>
 8002990:	60f8      	str	r0, [r7, #12]
		for(int i = 0; i < 12; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e015      	b.n	80029c4 <Sim_extractTimeStamp+0xc8>
		{
			if(strstr(tok,Months[i]) != NULL)
 8002998:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <Sim_extractTimeStamp+0x150>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	4619      	mov	r1, r3
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f006 fdfa 	bl	800959c <strstr>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <Sim_extractTimeStamp+0xc2>
			{
				TimeStamp.mon = i + 1;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <Sim_extractTimeStamp+0x148>)
 80029b8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				break;
 80029bc:	e005      	b.n	80029ca <Sim_extractTimeStamp+0xce>
		for(int i = 0; i < 12; i++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b0b      	cmp	r3, #11
 80029c8:	dde6      	ble.n	8002998 <Sim_extractTimeStamp+0x9c>
			}
		}
		tok = strtok(NULL," ");
 80029ca:	491f      	ldr	r1, [pc, #124]	; (8002a48 <Sim_extractTimeStamp+0x14c>)
 80029cc:	2000      	movs	r0, #0
 80029ce:	f006 fdfd 	bl	80095cc <strtok>
 80029d2:	60f8      	str	r0, [r7, #12]
		TimeStamp.year = atoi(tok);
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f006 fd83 	bl	80094e0 <atoi>
 80029da:	4603      	mov	r3, r0
 80029dc:	b29a      	uxth	r2, r3
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <Sim_extractTimeStamp+0x148>)
 80029e0:	869a      	strh	r2, [r3, #52]	; 0x34
		tok = strtok(NULL,":");
 80029e2:	491b      	ldr	r1, [pc, #108]	; (8002a50 <Sim_extractTimeStamp+0x154>)
 80029e4:	2000      	movs	r0, #0
 80029e6:	f006 fdf1 	bl	80095cc <strtok>
 80029ea:	60f8      	str	r0, [r7, #12]
		TimeStamp.hour = atoi(tok);
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f006 fd77 	bl	80094e0 <atoi>
 80029f2:	4603      	mov	r3, r0
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <Sim_extractTimeStamp+0x148>)
 80029f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		tok = strtok(NULL,":");
 80029fc:	4914      	ldr	r1, [pc, #80]	; (8002a50 <Sim_extractTimeStamp+0x154>)
 80029fe:	2000      	movs	r0, #0
 8002a00:	f006 fde4 	bl	80095cc <strtok>
 8002a04:	60f8      	str	r0, [r7, #12]
		TimeStamp.min = atoi(tok);
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f006 fd6a 	bl	80094e0 <atoi>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <Sim_extractTimeStamp+0x148>)
 8002a12:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		tok = strtok(NULL,":");
 8002a16:	490e      	ldr	r1, [pc, #56]	; (8002a50 <Sim_extractTimeStamp+0x154>)
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f006 fdd7 	bl	80095cc <strtok>
 8002a1e:	60f8      	str	r0, [r7, #12]
		TimeStamp.sec = atoi(tok);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f006 fd5d 	bl	80094e0 <atoi>
 8002a26:	4603      	mov	r3, r0
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <Sim_extractTimeStamp+0x148>)
 8002a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		//update RTC Time
		RTC_updateUserTime();
 8002a30:	f000 faf6 	bl	8003020 <RTC_updateUserTime>
	}
}
 8002a34:	bf00      	nop
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	0800acac 	.word	0x0800acac
 8002a40:	0800acb4 	.word	0x0800acb4
 8002a44:	200010c0 	.word	0x200010c0
 8002a48:	0800acbc 	.word	0x0800acbc
 8002a4c:	200000c0 	.word	0x200000c0
 8002a50:	0800acc0 	.word	0x0800acc0

08002a54 <Sim_getHostnUrl>:

void Sim_getHostnUrl(char* data)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	memset(Host1,0,strlen(Host1));
 8002a5c:	482f      	ldr	r0, [pc, #188]	; (8002b1c <Sim_getHostnUrl+0xc8>)
 8002a5e:	f7fd fbb7 	bl	80001d0 <strlen>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461a      	mov	r2, r3
 8002a66:	2100      	movs	r1, #0
 8002a68:	482c      	ldr	r0, [pc, #176]	; (8002b1c <Sim_getHostnUrl+0xc8>)
 8002a6a:	f006 fd67 	bl	800953c <memset>
	memset(Host2,0,strlen(Host2));
 8002a6e:	482c      	ldr	r0, [pc, #176]	; (8002b20 <Sim_getHostnUrl+0xcc>)
 8002a70:	f7fd fbae 	bl	80001d0 <strlen>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4829      	ldr	r0, [pc, #164]	; (8002b20 <Sim_getHostnUrl+0xcc>)
 8002a7c:	f006 fd5e 	bl	800953c <memset>
	memset(URL1,0,strlen(URL1));
 8002a80:	4828      	ldr	r0, [pc, #160]	; (8002b24 <Sim_getHostnUrl+0xd0>)
 8002a82:	f7fd fba5 	bl	80001d0 <strlen>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4825      	ldr	r0, [pc, #148]	; (8002b24 <Sim_getHostnUrl+0xd0>)
 8002a8e:	f006 fd55 	bl	800953c <memset>
	memset(URL2,0,strlen(URL2));
 8002a92:	4825      	ldr	r0, [pc, #148]	; (8002b28 <Sim_getHostnUrl+0xd4>)
 8002a94:	f7fd fb9c 	bl	80001d0 <strlen>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4822      	ldr	r0, [pc, #136]	; (8002b28 <Sim_getHostnUrl+0xd4>)
 8002aa0:	f006 fd4c 	bl	800953c <memset>
	char* token;
	token = strtok(data,"|");
 8002aa4:	4921      	ldr	r1, [pc, #132]	; (8002b2c <Sim_getHostnUrl+0xd8>)
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f006 fd90 	bl	80095cc <strtok>
 8002aac:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,":");
 8002aae:	4920      	ldr	r1, [pc, #128]	; (8002b30 <Sim_getHostnUrl+0xdc>)
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f006 fd8b 	bl	80095cc <strtok>
 8002ab6:	60f8      	str	r0, [r7, #12]
	strcpy(Host1,token);
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	4818      	ldr	r0, [pc, #96]	; (8002b1c <Sim_getHostnUrl+0xc8>)
 8002abc:	f006 fd66 	bl	800958c <strcpy>
	token = strtok(NULL,"/");
 8002ac0:	491c      	ldr	r1, [pc, #112]	; (8002b34 <Sim_getHostnUrl+0xe0>)
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f006 fd82 	bl	80095cc <strtok>
 8002ac8:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,"<");
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <Sim_getHostnUrl+0xe4>)
 8002acc:	2000      	movs	r0, #0
 8002ace:	f006 fd7d 	bl	80095cc <strtok>
 8002ad2:	60f8      	str	r0, [r7, #12]
	strcpy(URL1,token);
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	4813      	ldr	r0, [pc, #76]	; (8002b24 <Sim_getHostnUrl+0xd0>)
 8002ad8:	f006 fd58 	bl	800958c <strcpy>
	token = strtok(NULL,"|");
 8002adc:	4913      	ldr	r1, [pc, #76]	; (8002b2c <Sim_getHostnUrl+0xd8>)
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f006 fd74 	bl	80095cc <strtok>
 8002ae4:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,":");
 8002ae6:	4912      	ldr	r1, [pc, #72]	; (8002b30 <Sim_getHostnUrl+0xdc>)
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f006 fd6f 	bl	80095cc <strtok>
 8002aee:	60f8      	str	r0, [r7, #12]
	strcpy(Host2,token);
 8002af0:	68f9      	ldr	r1, [r7, #12]
 8002af2:	480b      	ldr	r0, [pc, #44]	; (8002b20 <Sim_getHostnUrl+0xcc>)
 8002af4:	f006 fd4a 	bl	800958c <strcpy>
	token = strtok(NULL,"/");
 8002af8:	490e      	ldr	r1, [pc, #56]	; (8002b34 <Sim_getHostnUrl+0xe0>)
 8002afa:	2000      	movs	r0, #0
 8002afc:	f006 fd66 	bl	80095cc <strtok>
 8002b00:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,"<");
 8002b02:	490d      	ldr	r1, [pc, #52]	; (8002b38 <Sim_getHostnUrl+0xe4>)
 8002b04:	2000      	movs	r0, #0
 8002b06:	f006 fd61 	bl	80095cc <strtok>
 8002b0a:	60f8      	str	r0, [r7, #12]
	strcpy(URL2,token);
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	4806      	ldr	r0, [pc, #24]	; (8002b28 <Sim_getHostnUrl+0xd4>)
 8002b10:	f006 fd3c 	bl	800958c <strcpy>
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000020 	.word	0x20000020
 8002b20:	20000060 	.word	0x20000060
 8002b24:	20000000 	.word	0x20000000
 8002b28:	20000040 	.word	0x20000040
 8002b2c:	0800aca4 	.word	0x0800aca4
 8002b30:	0800acc0 	.word	0x0800acc0
 8002b34:	0800acc4 	.word	0x0800acc4
 8002b38:	0800aca8 	.word	0x0800aca8

08002b3c <Sim_enterSLEEPMode>:

void Sim_enterSLEEPMode(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
	STATUS m_ret;
	for(uint8_t i = 0; i < 2; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	71fb      	strb	r3, [r7, #7]
 8002b46:	e01d      	b.n	8002b84 <Sim_enterSLEEPMode+0x48>
	{
		Sim_send("AT+CSCLK=1\r", strlen("AT+CSCLK=1\r"));
 8002b48:	210b      	movs	r1, #11
 8002b4a:	4818      	ldr	r0, [pc, #96]	; (8002bac <Sim_enterSLEEPMode+0x70>)
 8002b4c:	f7fe fd68 	bl	8001620 <Sim_send>
		m_ret = Sim_checkResponseWith("OK", 2, 5000);
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	2102      	movs	r1, #2
 8002b56:	4816      	ldr	r0, [pc, #88]	; (8002bb0 <Sim_enterSLEEPMode+0x74>)
 8002b58:	f7fe fdc6 	bl	80016e8 <Sim_checkResponseWith>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71bb      	strb	r3, [r7, #6]
		__NOP();
 8002b60:	bf00      	nop
		if(m_ret == RET_OK)
 8002b62:	79bb      	ldrb	r3, [r7, #6]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <Sim_enterSLEEPMode+0x42>
		{
			//DTR high
			HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b70:	f003 fbb0 	bl	80062d4 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8002b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b78:	f001 fc3e 	bl	80043f8 <HAL_Delay>
			break;
 8002b7c:	e005      	b.n	8002b8a <Sim_enterSLEEPMode+0x4e>
	for(uint8_t i = 0; i < 2; i++)
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	3301      	adds	r3, #1
 8002b82:	71fb      	strb	r3, [r7, #7]
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d9de      	bls.n	8002b48 <Sim_enterSLEEPMode+0xc>
		}
	}
	if(Sim_checkOK() == RET_FAIL)
 8002b8a:	f7fe fdd7 	bl	800173c <Sim_checkOK>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d103      	bne.n	8002b9c <Sim_enterSLEEPMode+0x60>
	{
		Sim_SleepMode = true;
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <Sim_enterSLEEPMode+0x78>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Sim_SleepMode = false;
	}
}
 8002b9a:	e002      	b.n	8002ba2 <Sim_enterSLEEPMode+0x66>
		Sim_SleepMode = false;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <Sim_enterSLEEPMode+0x78>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	0800acc8 	.word	0x0800acc8
 8002bb0:	0800ac64 	.word	0x0800ac64
 8002bb4:	20000971 	.word	0x20000971

08002bb8 <Sim_exitSLEEPMode>:

void Sim_exitSLEEPMode(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	Sim_SleepMode = true; //Sim van con o che do sleep mode
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <Sim_exitSLEEPMode+0x34>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
	//DTR low
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bca:	f003 fb83 	bl	80062d4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bd2:	f001 fc11 	bl	80043f8 <HAL_Delay>
	if(Sim_checkOK() == RET_OK)
 8002bd6:	f7fe fdb1 	bl	800173c <Sim_checkOK>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <Sim_exitSLEEPMode+0x2e>
	{
		Sim_SleepMode = false;
 8002be0:	4b02      	ldr	r3, [pc, #8]	; (8002bec <Sim_exitSLEEPMode+0x34>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
	}
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000971 	.word	0x20000971

08002bf0 <Sim_resetSIM>:

void Sim_resetSIM(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	//DTR high
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bfc:	f003 fb6a 	bl	80062d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c00:	2064      	movs	r0, #100	; 0x64
 8002c02:	f001 fbf9 	bl	80043f8 <HAL_Delay>
	//DTR low
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2101      	movs	r1, #1
 8002c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0e:	f003 fb61 	bl	80062d4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c16:	f001 fbef 	bl	80043f8 <HAL_Delay>
	if(Sim_checkOK() == RET_OK) //SIM response
 8002c1a:	f7fe fd8f 	bl	800173c <Sim_checkOK>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d134      	bne.n	8002c8e <Sim_resetSIM+0x9e>
	{
		/*turn off*/
		//pull down PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002c24:	2201      	movs	r2, #1
 8002c26:	2108      	movs	r1, #8
 8002c28:	483f      	ldr	r0, [pc, #252]	; (8002d28 <Sim_resetSIM+0x138>)
 8002c2a:	f003 fb53 	bl	80062d4 <HAL_GPIO_WritePin>
		//wait at least 2.5s
		HAL_Delay(3000);
 8002c2e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c32:	f001 fbe1 	bl	80043f8 <HAL_Delay>
		//release PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2108      	movs	r1, #8
 8002c3a:	483b      	ldr	r0, [pc, #236]	; (8002d28 <Sim_resetSIM+0x138>)
 8002c3c:	f003 fb4a 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8002c40:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c44:	f001 fbd8 	bl	80043f8 <HAL_Delay>
		HAL_Delay(5000);
 8002c48:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c4c:	f001 fbd4 	bl	80043f8 <HAL_Delay>
		/* turn on power*/
		//pull down PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002c50:	2201      	movs	r2, #1
 8002c52:	2108      	movs	r1, #8
 8002c54:	4834      	ldr	r0, [pc, #208]	; (8002d28 <Sim_resetSIM+0x138>)
 8002c56:	f003 fb3d 	bl	80062d4 <HAL_GPIO_WritePin>
		//wait at least 0.5s
		HAL_Delay(3000);
 8002c5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c5e:	f001 fbcb 	bl	80043f8 <HAL_Delay>
		//release PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2108      	movs	r1, #8
 8002c66:	4830      	ldr	r0, [pc, #192]	; (8002d28 <Sim_resetSIM+0x138>)
 8002c68:	f003 fb34 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8002c6c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c70:	f001 fbc2 	bl	80043f8 <HAL_Delay>
		HAL_Delay(5000);
 8002c74:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c78:	f001 fbbe 	bl	80043f8 <HAL_Delay>
		HAL_Delay(5000);
 8002c7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c80:	f001 fbba 	bl	80043f8 <HAL_Delay>
		HAL_Delay(5000);
 8002c84:	f241 3088 	movw	r0, #5000	; 0x1388
 8002c88:	f001 fbb6 	bl	80043f8 <HAL_Delay>
			HAL_Delay(5000);
			HAL_Delay(5000);
			HAL_Delay(5000);
		}
	}
}
 8002c8c:	e04a      	b.n	8002d24 <Sim_resetSIM+0x134>
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002c8e:	2201      	movs	r2, #1
 8002c90:	2108      	movs	r1, #8
 8002c92:	4825      	ldr	r0, [pc, #148]	; (8002d28 <Sim_resetSIM+0x138>)
 8002c94:	f003 fb1e 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 8002c98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c9c:	f001 fbac 	bl	80043f8 <HAL_Delay>
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2108      	movs	r1, #8
 8002ca4:	4820      	ldr	r0, [pc, #128]	; (8002d28 <Sim_resetSIM+0x138>)
 8002ca6:	f003 fb15 	bl	80062d4 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8002caa:	f241 3088 	movw	r0, #5000	; 0x1388
 8002cae:	f001 fba3 	bl	80043f8 <HAL_Delay>
		HAL_Delay(5000);
 8002cb2:	f241 3088 	movw	r0, #5000	; 0x1388
 8002cb6:	f001 fb9f 	bl	80043f8 <HAL_Delay>
		HAL_Delay(5000);
 8002cba:	f241 3088 	movw	r0, #5000	; 0x1388
 8002cbe:	f001 fb9b 	bl	80043f8 <HAL_Delay>
		HAL_Delay(5000);
 8002cc2:	f241 3088 	movw	r0, #5000	; 0x1388
 8002cc6:	f001 fb97 	bl	80043f8 <HAL_Delay>
		Sim_exitSLEEPMode();
 8002cca:	f7ff ff75 	bl	8002bb8 <Sim_exitSLEEPMode>
		Sim_checkOK();
 8002cce:	f7fe fd35 	bl	800173c <Sim_checkOK>
		HAL_Delay(1000);
 8002cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cd6:	f001 fb8f 	bl	80043f8 <HAL_Delay>
		if(Sim_checkOK() == RET_OK) //SIM ON
 8002cda:	f7fe fd2f 	bl	800173c <Sim_checkOK>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <Sim_resetSIM+0xf8>
			__NOP();
 8002ce4:	bf00      	nop
}
 8002ce6:	e01d      	b.n	8002d24 <Sim_resetSIM+0x134>
			HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2108      	movs	r1, #8
 8002cec:	480e      	ldr	r0, [pc, #56]	; (8002d28 <Sim_resetSIM+0x138>)
 8002cee:	f003 faf1 	bl	80062d4 <HAL_GPIO_WritePin>
			HAL_Delay(3000);
 8002cf2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cf6:	f001 fb7f 	bl	80043f8 <HAL_Delay>
			HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2108      	movs	r1, #8
 8002cfe:	480a      	ldr	r0, [pc, #40]	; (8002d28 <Sim_resetSIM+0x138>)
 8002d00:	f003 fae8 	bl	80062d4 <HAL_GPIO_WritePin>
			HAL_Delay(5000);
 8002d04:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d08:	f001 fb76 	bl	80043f8 <HAL_Delay>
			HAL_Delay(5000);
 8002d0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d10:	f001 fb72 	bl	80043f8 <HAL_Delay>
			HAL_Delay(5000);
 8002d14:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d18:	f001 fb6e 	bl	80043f8 <HAL_Delay>
			HAL_Delay(5000);
 8002d1c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d20:	f001 fb6a 	bl	80043f8 <HAL_Delay>
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	48000800 	.word	0x48000800

08002d2c <Sim_restartControl>:

void Sim_restartControl(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b0a0      	sub	sp, #128	; 0x80
 8002d30:	af00      	add	r7, sp, #0
	bool isResetSystem = false;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	char Sim_PhoneNumb[15] = {0};
 8002d38:	2300      	movs	r3, #0
 8002d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	f8c3 2007 	str.w	r2, [r3, #7]
	STATUS m_ret;
	m_ret = Sim_checkResponseWith("+CMTI:", 3, 5000);
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	2103      	movs	r1, #3
 8002d50:	484d      	ldr	r0, [pc, #308]	; (8002e88 <Sim_restartControl+0x15c>)
 8002d52:	f7fe fcc9 	bl	80016e8 <Sim_checkResponseWith>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	__NOP();
 8002d5c:	bf00      	nop
	if(m_ret == RET_OK)
 8002d5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 808b 	bne.w	8002e7e <Sim_restartControl+0x152>
	{
		char Sim_Cmd[100] = {0};
 8002d68:	2300      	movs	r3, #0
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	2260      	movs	r2, #96	; 0x60
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f006 fbe1 	bl	800953c <memset>
		Sim_exitSLEEPMode();
 8002d7a:	f7ff ff1d 	bl	8002bb8 <Sim_exitSLEEPMode>
		for(uint8_t i = 1; i < 11; i++)
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002d84:	e061      	b.n	8002e4a <Sim_restartControl+0x11e>
		{
			sprintf(Sim_Cmd,"AT+CMGR=%d\r",i);
 8002d86:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	493f      	ldr	r1, [pc, #252]	; (8002e8c <Sim_restartControl+0x160>)
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f006 fbdc 	bl	800954c <siprintf>
			//Doc noi dung tin nhan
			Sim_send(Sim_Cmd, strlen(Sim_Cmd));
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fa1a 	bl	80001d0 <strlen>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fc3b 	bl	8001620 <Sim_send>
			m_ret = Sim_checkResponseWith("RESET", 3, 3000);
 8002daa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dae:	2103      	movs	r1, #3
 8002db0:	4837      	ldr	r0, [pc, #220]	; (8002e90 <Sim_restartControl+0x164>)
 8002db2:	f7fe fc99 	bl	80016e8 <Sim_checkResponseWith>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			char* tok = NULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	67bb      	str	r3, [r7, #120]	; 0x78
			tok = strtok((char*)Sim_Rxdata,"\"");
 8002dc0:	4934      	ldr	r1, [pc, #208]	; (8002e94 <Sim_restartControl+0x168>)
 8002dc2:	4835      	ldr	r0, [pc, #212]	; (8002e98 <Sim_restartControl+0x16c>)
 8002dc4:	f006 fc02 	bl	80095cc <strtok>
 8002dc8:	67b8      	str	r0, [r7, #120]	; 0x78
			if(tok != NULL)
 8002dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d037      	beq.n	8002e40 <Sim_restartControl+0x114>
			{
				while(tok != NULL)
 8002dd0:	e02f      	b.n	8002e32 <Sim_restartControl+0x106>
				{
					tok = strtok(NULL,"\"");
 8002dd2:	4930      	ldr	r1, [pc, #192]	; (8002e94 <Sim_restartControl+0x168>)
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f006 fbf9 	bl	80095cc <strtok>
 8002dda:	67b8      	str	r0, [r7, #120]	; 0x78
					if(strstr(tok,"+84") != NULL)
 8002ddc:	492f      	ldr	r1, [pc, #188]	; (8002e9c <Sim_restartControl+0x170>)
 8002dde:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002de0:	f006 fbdc 	bl	800959c <strstr>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <Sim_restartControl+0xe4>
					{
						memset(Sim_PhoneNumb,0,strlen(Sim_PhoneNumb));
 8002dea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd f9ee 	bl	80001d0 <strlen>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f006 fb9d 	bl	800953c <memset>
						strcpy(Sim_PhoneNumb,tok);
 8002e02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e06:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f006 fbbf 	bl	800958c <strcpy>
 8002e0e:	e010      	b.n	8002e32 <Sim_restartControl+0x106>
					}
					else if(strstr(tok,"RESET") != NULL)
 8002e10:	491f      	ldr	r1, [pc, #124]	; (8002e90 <Sim_restartControl+0x164>)
 8002e12:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e14:	f006 fbc2 	bl	800959c <strstr>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <Sim_restartControl+0x106>
					{
						Sim_sendMess(Sim_PhoneNumb, "Reset he thong thanh cong");
 8002e1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e22:	491f      	ldr	r1, [pc, #124]	; (8002ea0 <Sim_restartControl+0x174>)
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f841 	bl	8002eac <Sim_sendMess>
						isResetSystem = true;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						break; //break while
 8002e30:	e002      	b.n	8002e38 <Sim_restartControl+0x10c>
				while(tok != NULL)
 8002e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1cc      	bne.n	8002dd2 <Sim_restartControl+0xa6>
					}
				}
				if(isResetSystem == true)
 8002e38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <Sim_restartControl+0x128>
		for(uint8_t i = 1; i < 11; i++)
 8002e40:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002e44:	3301      	adds	r3, #1
 8002e46:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002e4a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d999      	bls.n	8002d86 <Sim_restartControl+0x5a>
 8002e52:	e000      	b.n	8002e56 <Sim_restartControl+0x12a>
				{
					break; //break for
 8002e54:	bf00      	nop
				}
			}
		}
		Sim_send("AT+CMGD=1,4\r",strlen("AT+CMGD=1,4\r"));
 8002e56:	210c      	movs	r1, #12
 8002e58:	4812      	ldr	r0, [pc, #72]	; (8002ea4 <Sim_restartControl+0x178>)
 8002e5a:	f7fe fbe1 	bl	8001620 <Sim_send>
		m_ret = Sim_checkResponseWith("OK", 2, 5000);
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	2102      	movs	r1, #2
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <Sim_restartControl+0x17c>)
 8002e66:	f7fe fc3f 	bl	80016e8 <Sim_checkResponseWith>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		__NOP();
 8002e70:	bf00      	nop
		if(isResetSystem == true)
 8002e72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <Sim_restartControl+0x152>
		{
			NVIC_SystemReset();
 8002e7a:	f7fe fd05 	bl	8001888 <__NVIC_SystemReset>
		}
	}
}
 8002e7e:	bf00      	nop
 8002e80:	3780      	adds	r7, #128	; 0x80
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	0800acd4 	.word	0x0800acd4
 8002e8c:	0800acdc 	.word	0x0800acdc
 8002e90:	0800ace8 	.word	0x0800ace8
 8002e94:	0800acf0 	.word	0x0800acf0
 8002e98:	20000580 	.word	0x20000580
 8002e9c:	0800acf4 	.word	0x0800acf4
 8002ea0:	0800acf8 	.word	0x0800acf8
 8002ea4:	0800ad14 	.word	0x0800ad14
 8002ea8:	0800ac64 	.word	0x0800ac64

08002eac <Sim_sendMess>:

void Sim_sendMess(char* phonenumber, char* content)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b096      	sub	sp, #88	; 0x58
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
	char Sim_Cmd1[40] = {0};
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f006 fb3a 	bl	800953c <memset>
	sprintf(Sim_Cmd1,"AT+CMGS=\"%s\"\r",phonenumber);
 8002ec8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	491d      	ldr	r1, [pc, #116]	; (8002f44 <Sim_sendMess+0x98>)
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f006 fb3b 	bl	800954c <siprintf>
	char Sim_Cmd2[40] = {0};
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f006 fb2a 	bl	800953c <memset>
	sprintf(Sim_Cmd2,"%s\x1A",content);
 8002ee8:	f107 0308 	add.w	r3, r7, #8
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	4916      	ldr	r1, [pc, #88]	; (8002f48 <Sim_sendMess+0x9c>)
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f006 fb2b 	bl	800954c <siprintf>
	Sim_send(Sim_Cmd1, strlen(Sim_Cmd1));
 8002ef6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd f968 	bl	80001d0 <strlen>
 8002f00:	4603      	mov	r3, r0
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fb88 	bl	8001620 <Sim_send>
	if(Sim_checkResponseWith(">",2,5000) == RET_OK)
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	2102      	movs	r1, #2
 8002f16:	480d      	ldr	r0, [pc, #52]	; (8002f4c <Sim_sendMess+0xa0>)
 8002f18:	f7fe fbe6 	bl	80016e8 <Sim_checkResponseWith>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10c      	bne.n	8002f3c <Sim_sendMess+0x90>
	{
		Sim_send(Sim_Cmd2, strlen(Sim_Cmd2));
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd f952 	bl	80001d0 <strlen>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fb72 	bl	8001620 <Sim_send>
	}
}
 8002f3c:	bf00      	nop
 8002f3e:	3758      	adds	r7, #88	; 0x58
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	0800ad24 	.word	0x0800ad24
 8002f48:	0800ad34 	.word	0x0800ad34
 8002f4c:	0800ad38 	.word	0x0800ad38

08002f50 <RTC_initAlarm>:

bool RTC_initAlarm(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	71bb      	strb	r3, [r7, #6]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	717b      	strb	r3, [r7, #5]
	minutes = (minutes/RTC_ALARM)*RTC_ALARM + RTC_ALARM;
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <RTC_initAlarm+0xbc>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	79ba      	ldrb	r2, [r7, #6]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <RTC_initAlarm+0xbc>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	fb12 f303 	smulbb	r3, r2, r3
 8002f7a:	71bb      	strb	r3, [r7, #6]
	if(minutes > 59)
 8002f7c:	79bb      	ldrb	r3, [r7, #6]
 8002f7e:	2b3b      	cmp	r3, #59	; 0x3b
 8002f80:	d915      	bls.n	8002fae <RTC_initAlarm+0x5e>
	{
		if(hours+1 > 23)
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	2b16      	cmp	r3, #22
 8002f86:	d90f      	bls.n	8002fa8 <RTC_initAlarm+0x58>
		{
			hours = (hours+1)%24;
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <RTC_initAlarm+0xc0>)
 8002f8e:	fb83 1302 	smull	r1, r3, r3, r2
 8002f92:	1099      	asrs	r1, r3, #2
 8002f94:	17d3      	asrs	r3, r2, #31
 8002f96:	1ac9      	subs	r1, r1, r3
 8002f98:	460b      	mov	r3, r1
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	440b      	add	r3, r1
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	1ad1      	subs	r1, r2, r3
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	71fb      	strb	r3, [r7, #7]
 8002fa6:	e002      	b.n	8002fae <RTC_initAlarm+0x5e>
		}
		else hours = hours+1;
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	3301      	adds	r3, #1
 8002fac:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		hours = hours;
	}
	minutes = minutes%60;
 8002fae:	79ba      	ldrb	r2, [r7, #6]
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <RTC_initAlarm+0xc4>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	0959      	lsrs	r1, r3, #5
 8002fb8:	460b      	mov	r3, r1
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a5b      	subs	r3, r3, r1
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	71bb      	strb	r3, [r7, #6]
	seconds = seconds%60;
 8002fc4:	797a      	ldrb	r2, [r7, #5]
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <RTC_initAlarm+0xc4>)
 8002fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fcc:	0959      	lsrs	r1, r3, #5
 8002fce:	460b      	mov	r3, r1
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a5b      	subs	r3, r3, r1
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	717b      	strb	r3, [r7, #5]
	userAlarm.AlarmTime.Hours = hours;
 8002fda:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <RTC_initAlarm+0xc8>)
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	7013      	strb	r3, [r2, #0]
	userAlarm.AlarmTime.Minutes = minutes;
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <RTC_initAlarm+0xc8>)
 8002fe2:	79bb      	ldrb	r3, [r7, #6]
 8002fe4:	7053      	strb	r3, [r2, #1]
	userAlarm.AlarmTime.Seconds = 0;
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <RTC_initAlarm+0xc8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	709a      	strb	r2, [r3, #2]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &userAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002fec:	2200      	movs	r2, #0
 8002fee:	490a      	ldr	r1, [pc, #40]	; (8003018 <RTC_initAlarm+0xc8>)
 8002ff0:	480a      	ldr	r0, [pc, #40]	; (800301c <RTC_initAlarm+0xcc>)
 8002ff2:	f004 ff3f 	bl	8007e74 <HAL_RTC_SetAlarm_IT>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <RTC_initAlarm+0xb0>
	{
		return false;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <RTC_initAlarm+0xb2>
	}
	return true;
 8003000:	2301      	movs	r3, #1
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200000be 	.word	0x200000be
 8003010:	2aaaaaab 	.word	0x2aaaaaab
 8003014:	88888889 	.word	0x88888889
 8003018:	20000b84 	.word	0x20000b84
 800301c:	200010fc 	.word	0x200010fc

08003020 <RTC_updateUserTime>:

void RTC_updateUserTime(void)
{
 8003020:	b5b0      	push	{r4, r5, r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
	bool isCorrectTime = false;
 8003026:	2300      	movs	r3, #0
 8003028:	77fb      	strb	r3, [r7, #31]
	RTC_TimeTypeDef m_Time = currentTime;
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <RTC_updateUserTime+0x130>)
 800302c:	f107 0408 	add.w	r4, r7, #8
 8003030:	461d      	mov	r5, r3
 8003032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003036:	682b      	ldr	r3, [r5, #0]
 8003038:	6023      	str	r3, [r4, #0]
	RTC_DateTypeDef m_Date = currentDate;
 800303a:	4b46      	ldr	r3, [pc, #280]	; (8003154 <RTC_updateUserTime+0x134>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	607b      	str	r3, [r7, #4]
	TimeStamp.year -= 2000;
 8003040:	4b45      	ldr	r3, [pc, #276]	; (8003158 <RTC_updateUserTime+0x138>)
 8003042:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003044:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b43      	ldr	r3, [pc, #268]	; (8003158 <RTC_updateUserTime+0x138>)
 800304c:	869a      	strh	r2, [r3, #52]	; 0x34
	TimeStamp.hour += 7;
 800304e:	4b42      	ldr	r3, [pc, #264]	; (8003158 <RTC_updateUserTime+0x138>)
 8003050:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003054:	3307      	adds	r3, #7
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <RTC_updateUserTime+0x138>)
 800305a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if(TimeStamp.year < 99)
 800305e:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <RTC_updateUserTime+0x138>)
 8003060:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003062:	2b62      	cmp	r3, #98	; 0x62
 8003064:	d829      	bhi.n	80030ba <RTC_updateUserTime+0x9a>
	{
		if((TimeStamp.mon > 0) && (TimeStamp.mon < 13))
 8003066:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <RTC_updateUserTime+0x138>)
 8003068:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800306c:	2b00      	cmp	r3, #0
 800306e:	d024      	beq.n	80030ba <RTC_updateUserTime+0x9a>
 8003070:	4b39      	ldr	r3, [pc, #228]	; (8003158 <RTC_updateUserTime+0x138>)
 8003072:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d81f      	bhi.n	80030ba <RTC_updateUserTime+0x9a>
		{
			if((TimeStamp.date > 0) && (TimeStamp.date < 32))
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <RTC_updateUserTime+0x138>)
 800307c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01a      	beq.n	80030ba <RTC_updateUserTime+0x9a>
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <RTC_updateUserTime+0x138>)
 8003086:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800308a:	2b1f      	cmp	r3, #31
 800308c:	d815      	bhi.n	80030ba <RTC_updateUserTime+0x9a>
			{
				if((TimeStamp.hour > 6) && (TimeStamp.hour < 31)) //7->30
 800308e:	4b32      	ldr	r3, [pc, #200]	; (8003158 <RTC_updateUserTime+0x138>)
 8003090:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003094:	2b06      	cmp	r3, #6
 8003096:	d910      	bls.n	80030ba <RTC_updateUserTime+0x9a>
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <RTC_updateUserTime+0x138>)
 800309a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800309e:	2b1e      	cmp	r3, #30
 80030a0:	d80b      	bhi.n	80030ba <RTC_updateUserTime+0x9a>
				{
					if(TimeStamp.min < 60)
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <RTC_updateUserTime+0x138>)
 80030a4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80030a8:	2b3b      	cmp	r3, #59	; 0x3b
 80030aa:	d806      	bhi.n	80030ba <RTC_updateUserTime+0x9a>
					{
						if(TimeStamp.sec < 60)
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <RTC_updateUserTime+0x138>)
 80030ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030b2:	2b3b      	cmp	r3, #59	; 0x3b
 80030b4:	d801      	bhi.n	80030ba <RTC_updateUserTime+0x9a>
						{
							isCorrectTime = true;
 80030b6:	2301      	movs	r3, #1
 80030b8:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
		}
	}
	if(isCorrectTime)
 80030ba:	7ffb      	ldrb	r3, [r7, #31]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d042      	beq.n	8003146 <RTC_updateUserTime+0x126>
	{
		//cap nhat ngay thang cho DateToUpdate
		m_Date.Date = TimeStamp.date;
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <RTC_updateUserTime+0x138>)
 80030c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80030c6:	71bb      	strb	r3, [r7, #6]
		m_Date.Month = TimeStamp.mon;
 80030c8:	4b23      	ldr	r3, [pc, #140]	; (8003158 <RTC_updateUserTime+0x138>)
 80030ca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80030ce:	717b      	strb	r3, [r7, #5]
		m_Date.Year = TimeStamp.year;
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <RTC_updateUserTime+0x138>)
 80030d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	71fb      	strb	r3, [r7, #7]
		if(TimeStamp.hour > 23)
 80030d8:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <RTC_updateUserTime+0x138>)
 80030da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80030de:	2b17      	cmp	r3, #23
 80030e0:	d90c      	bls.n	80030fc <RTC_updateUserTime+0xdc>
		{
			TimeStamp.hour = TimeStamp.hour - 24;
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <RTC_updateUserTime+0x138>)
 80030e4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80030e8:	3b18      	subs	r3, #24
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <RTC_updateUserTime+0x138>)
 80030ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			RTC_updateUserDate(&m_Date);
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 f833 	bl	8003160 <RTC_updateUserDate>
 80030fa:	e005      	b.n	8003108 <RTC_updateUserTime+0xe8>
		}
		else
		{
			HAL_RTC_SetDate(&hrtc, &m_Date, RTC_FORMAT_BIN);
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	2200      	movs	r2, #0
 8003100:	4619      	mov	r1, r3
 8003102:	4816      	ldr	r0, [pc, #88]	; (800315c <RTC_updateUserTime+0x13c>)
 8003104:	f004 fdc0 	bl	8007c88 <HAL_RTC_SetDate>
		}
		m_Time.Hours = TimeStamp.hour;
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <RTC_updateUserTime+0x138>)
 800310a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800310e:	723b      	strb	r3, [r7, #8]
		m_Time.Minutes = TimeStamp.min;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <RTC_updateUserTime+0x138>)
 8003112:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003116:	727b      	strb	r3, [r7, #9]
		m_Time.Seconds = TimeStamp.sec;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <RTC_updateUserTime+0x138>)
 800311a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800311e:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc, &m_Time, RTC_FORMAT_BIN);
 8003120:	f107 0308 	add.w	r3, r7, #8
 8003124:	2200      	movs	r2, #0
 8003126:	4619      	mov	r1, r3
 8003128:	480c      	ldr	r0, [pc, #48]	; (800315c <RTC_updateUserTime+0x13c>)
 800312a:	f004 fc92 	bl	8007a52 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &m_Date, RTC_FORMAT_BIN);
 800312e:	1d3b      	adds	r3, r7, #4
 8003130:	2200      	movs	r2, #0
 8003132:	4619      	mov	r1, r3
 8003134:	4809      	ldr	r0, [pc, #36]	; (800315c <RTC_updateUserTime+0x13c>)
 8003136:	f004 fda7 	bl	8007c88 <HAL_RTC_SetDate>
		RTC_initAlarm(m_Time.Hours, m_Time.Minutes, 0);
 800313a:	7a3b      	ldrb	r3, [r7, #8]
 800313c:	7a79      	ldrb	r1, [r7, #9]
 800313e:	2200      	movs	r2, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff05 	bl	8002f50 <RTC_initAlarm>
	}
}
 8003146:	bf00      	nop
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bdb0      	pop	{r4, r5, r7, pc}
 800314e:	bf00      	nop
 8003150:	20000b6c 	.word	0x20000b6c
 8003154:	20000b80 	.word	0x20000b80
 8003158:	200010c0 	.word	0x200010c0
 800315c:	200010fc 	.word	0x200010fc

08003160 <RTC_updateUserDate>:

void RTC_updateUserDate(RTC_DateTypeDef* datetime)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	if ((datetime->Month == 1U) || (datetime->Month == 3U) || (datetime->Month == 5U) || (datetime->Month == 7U) || \
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d017      	beq.n	80031a0 <RTC_updateUserDate+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	785b      	ldrb	r3, [r3, #1]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d013      	beq.n	80031a0 <RTC_updateUserDate+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d00f      	beq.n	80031a0 <RTC_updateUserDate+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b07      	cmp	r3, #7
 8003186:	d00b      	beq.n	80031a0 <RTC_updateUserDate+0x40>
        (datetime->Month == 8U) || (datetime->Month == 10U) || (datetime->Month == 12U))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	785b      	ldrb	r3, [r3, #1]
	if ((datetime->Month == 1U) || (datetime->Month == 3U) || (datetime->Month == 5U) || (datetime->Month == 7U) || \
 800318c:	2b08      	cmp	r3, #8
 800318e:	d007      	beq.n	80031a0 <RTC_updateUserDate+0x40>
        (datetime->Month == 8U) || (datetime->Month == 10U) || (datetime->Month == 12U))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b0a      	cmp	r3, #10
 8003196:	d003      	beq.n	80031a0 <RTC_updateUserDate+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d125      	bne.n	80031ec <RTC_updateUserDate+0x8c>
	{
		if (datetime->Date < 31U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	789b      	ldrb	r3, [r3, #2]
 80031a4:	2b1e      	cmp	r3, #30
 80031a6:	d806      	bhi.n	80031b6 <RTC_updateUserDate+0x56>
		{
			datetime->Date++;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	789b      	ldrb	r3, [r3, #2]
 80031ac:	3301      	adds	r3, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 31U)
 80031b4:	e079      	b.n	80032aa <RTC_updateUserDate+0x14a>
		}
		/* Date structure member: day = 31 */
		else
		{
			if (datetime->Month != 12U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d009      	beq.n	80031d2 <RTC_updateUserDate+0x72>
			{
				datetime->Month++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 31U)
 80031d0:	e06b      	b.n	80032aa <RTC_updateUserDate+0x14a>
			}
			/* Date structure member: day = 31 & month =12 */
			else
			{
				datetime->Month = 1U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	709a      	strb	r2, [r3, #2]
				datetime->Year++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	78db      	ldrb	r3, [r3, #3]
 80031e2:	3301      	adds	r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	70da      	strb	r2, [r3, #3]
		if (datetime->Date < 31U)
 80031ea:	e05e      	b.n	80032aa <RTC_updateUserDate+0x14a>
			}
		}
	}
	else if ((datetime->Month == 4U) || (datetime->Month == 6U) || (datetime->Month == 9U) || (datetime->Month == 11U))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d00b      	beq.n	800320c <RTC_updateUserDate+0xac>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d007      	beq.n	800320c <RTC_updateUserDate+0xac>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b09      	cmp	r3, #9
 8003202:	d003      	beq.n	800320c <RTC_updateUserDate+0xac>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	2b0b      	cmp	r3, #11
 800320a:	d114      	bne.n	8003236 <RTC_updateUserDate+0xd6>
	{
		if (datetime->Date < 30U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	2b1d      	cmp	r3, #29
 8003212:	d806      	bhi.n	8003222 <RTC_updateUserDate+0xc2>
		{
			datetime->Date++;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	789b      	ldrb	r3, [r3, #2]
 8003218:	3301      	adds	r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 30U)
 8003220:	e043      	b.n	80032aa <RTC_updateUserDate+0x14a>
		}
		/* Date structure member: day = 30 */
		else
		{
			datetime->Month++;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	3301      	adds	r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	705a      	strb	r2, [r3, #1]
			datetime->Date = 1U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 30U)
 8003234:	e039      	b.n	80032aa <RTC_updateUserDate+0x14a>
		}
	}
	else if (datetime->Month == 2U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	785b      	ldrb	r3, [r3, #1]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d135      	bne.n	80032aa <RTC_updateUserDate+0x14a>
	{
		if (datetime->Date < 28U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	789b      	ldrb	r3, [r3, #2]
 8003242:	2b1b      	cmp	r3, #27
 8003244:	d806      	bhi.n	8003254 <RTC_updateUserDate+0xf4>
		{
			datetime->Date++;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	789b      	ldrb	r3, [r3, #2]
 800324a:	3301      	adds	r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	709a      	strb	r2, [r3, #2]
 8003252:	e02a      	b.n	80032aa <RTC_updateUserDate+0x14a>
		}
		else if (datetime->Date == 28U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	789b      	ldrb	r3, [r3, #2]
 8003258:	2b1c      	cmp	r3, #28
 800325a:	d119      	bne.n	8003290 <RTC_updateUserDate+0x130>
		{
			/* Leap year */
			if (RTC_isLeapYear(datetime->Year))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	78db      	ldrb	r3, [r3, #3]
 8003260:	b29b      	uxth	r3, r3
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f82c 	bl	80032c0 <RTC_isLeapYear>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <RTC_updateUserDate+0x11c>
			{
				datetime->Date++;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	789b      	ldrb	r3, [r3, #2]
 8003272:	3301      	adds	r3, #1
 8003274:	b2da      	uxtb	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	709a      	strb	r2, [r3, #2]
 800327a:	e016      	b.n	80032aa <RTC_updateUserDate+0x14a>
			}
			else
			{
				datetime->Month++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	3301      	adds	r3, #1
 8003282:	b2da      	uxtb	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	709a      	strb	r2, [r3, #2]
 800328e:	e00c      	b.n	80032aa <RTC_updateUserDate+0x14a>
			}
		}
		else if (datetime->Date == 29U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	789b      	ldrb	r3, [r3, #2]
 8003294:	2b1d      	cmp	r3, #29
 8003296:	d108      	bne.n	80032aa <RTC_updateUserDate+0x14a>
		{
			datetime->Month++;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	3301      	adds	r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	705a      	strb	r2, [r3, #1]
			datetime->Date = 1U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	709a      	strb	r2, [r3, #2]
		}
	}
	HAL_RTC_SetDate(&hrtc, datetime, RTC_FORMAT_BIN);
 80032aa:	2200      	movs	r2, #0
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4803      	ldr	r0, [pc, #12]	; (80032bc <RTC_updateUserDate+0x15c>)
 80032b0:	f004 fcea 	bl	8007c88 <HAL_RTC_SetDate>
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200010fc 	.word	0x200010fc

080032c0 <RTC_isLeapYear>:

bool RTC_isLeapYear(uint16_t y)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  if((y + 2000) % 4 != 0)
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <RTC_isLeapYear+0x1c>
  {
    return false;
 80032d8:	2300      	movs	r3, #0
 80032da:	e023      	b.n	8003324 <RTC_isLeapYear+0x64>
  }
  else if((y + 2000) % 100 != 0)
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <RTC_isLeapYear+0x70>)
 80032e4:	fb83 1302 	smull	r1, r3, r3, r2
 80032e8:	1159      	asrs	r1, r3, #5
 80032ea:	17d3      	asrs	r3, r2, #31
 80032ec:	1acb      	subs	r3, r1, r3
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <RTC_isLeapYear+0x3e>
  {
    return true;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e012      	b.n	8003324 <RTC_isLeapYear+0x64>
  }
  else if((y + 2000) % 400 != 0)
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <RTC_isLeapYear+0x70>)
 8003306:	fb83 1302 	smull	r1, r3, r3, r2
 800330a:	11d9      	asrs	r1, r3, #7
 800330c:	17d3      	asrs	r3, r2, #31
 800330e:	1acb      	subs	r3, r1, r3
 8003310:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <RTC_isLeapYear+0x62>
  {
    return false;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <RTC_isLeapYear+0x64>
  }
  else return true;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	51eb851f 	.word	0x51eb851f

08003334 <Flash_init>:

void Flash_init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	/* Flash init */
	if(Flash_ReadIntType(WR_ADDR) == 0xFFFFFFFF)
 8003338:	482d      	ldr	r0, [pc, #180]	; (80033f0 <Flash_init+0xbc>)
 800333a:	f7fd fc9e 	bl	8000c7a <Flash_ReadIntType>
 800333e:	4603      	mov	r3, r0
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d106      	bne.n	8003354 <Flash_init+0x20>
	{
		Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <Flash_init+0xc0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2201      	movs	r2, #1
 800334c:	4619      	mov	r1, r3
 800334e:	4828      	ldr	r0, [pc, #160]	; (80033f0 <Flash_init+0xbc>)
 8003350:	f7fd fc81 	bl	8000c56 <Flash_WriteIntType>
	}
	if(Flash_ReadIntType(RD_ADDR) == 0xFFFFFFFF)
 8003354:	4828      	ldr	r0, [pc, #160]	; (80033f8 <Flash_init+0xc4>)
 8003356:	f7fd fc90 	bl	8000c7a <Flash_ReadIntType>
 800335a:	4603      	mov	r3, r0
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d106      	bne.n	8003370 <Flash_init+0x3c>
	{
		Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <Flash_init+0xc8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	4619      	mov	r1, r3
 800336a:	4823      	ldr	r0, [pc, #140]	; (80033f8 <Flash_init+0xc4>)
 800336c:	f7fd fc73 	bl	8000c56 <Flash_WriteIntType>
	}
	if(Flash_ReadIntType(PG_ADDR) == 0xFFFFFFFF)
 8003370:	4823      	ldr	r0, [pc, #140]	; (8003400 <Flash_init+0xcc>)
 8003372:	f7fd fc82 	bl	8000c7a <Flash_ReadIntType>
 8003376:	4603      	mov	r3, r0
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d106      	bne.n	800338c <Flash_init+0x58>
	{
		Flash_WriteIntType(PG_ADDR, PAGE_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <Flash_init+0xd0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2201      	movs	r2, #1
 8003384:	4619      	mov	r1, r3
 8003386:	481e      	ldr	r0, [pc, #120]	; (8003400 <Flash_init+0xcc>)
 8003388:	f7fd fc65 	bl	8000c56 <Flash_WriteIntType>
	}
	WRITE_DATA_ADDR = Flash_ReadIntType(WR_ADDR);
 800338c:	4818      	ldr	r0, [pc, #96]	; (80033f0 <Flash_init+0xbc>)
 800338e:	f7fd fc74 	bl	8000c7a <Flash_ReadIntType>
 8003392:	4603      	mov	r3, r0
 8003394:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <Flash_init+0xc0>)
 8003396:	6013      	str	r3, [r2, #0]
	READ_DATA_ADDR = Flash_ReadIntType(RD_ADDR);
 8003398:	4817      	ldr	r0, [pc, #92]	; (80033f8 <Flash_init+0xc4>)
 800339a:	f7fd fc6e 	bl	8000c7a <Flash_ReadIntType>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a16      	ldr	r2, [pc, #88]	; (80033fc <Flash_init+0xc8>)
 80033a2:	6013      	str	r3, [r2, #0]
	PAGE_ADDR = Flash_ReadIntType(PG_ADDR);
 80033a4:	4816      	ldr	r0, [pc, #88]	; (8003400 <Flash_init+0xcc>)
 80033a6:	f7fd fc68 	bl	8000c7a <Flash_ReadIntType>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4a15      	ldr	r2, [pc, #84]	; (8003404 <Flash_init+0xd0>)
 80033ae:	6013      	str	r3, [r2, #0]
	if(Flash_ReadIntType(MODE_RTC_ADDR) == 0xFFFFFFFF)
 80033b0:	4815      	ldr	r0, [pc, #84]	; (8003408 <Flash_init+0xd4>)
 80033b2:	f7fd fc62 	bl	8000c7a <Flash_ReadIntType>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d106      	bne.n	80033cc <Flash_init+0x98>
	{
		Flash_WriteIntType(MODE_RTC_ADDR, RTC_ALARM, FLASH_TYPEPROGRAM_HALFWORD);
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <Flash_init+0xd8>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	4619      	mov	r1, r3
 80033c6:	4810      	ldr	r0, [pc, #64]	; (8003408 <Flash_init+0xd4>)
 80033c8:	f7fd fc45 	bl	8000c56 <Flash_WriteIntType>
	}
	RTC_ALARM = Flash_ReadIntType(MODE_RTC_ADDR);
 80033cc:	480e      	ldr	r0, [pc, #56]	; (8003408 <Flash_init+0xd4>)
 80033ce:	f7fd fc54 	bl	8000c7a <Flash_ReadIntType>
 80033d2:	4603      	mov	r3, r0
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <Flash_init+0xd8>)
 80033d8:	701a      	strb	r2, [r3, #0]
	RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <Flash_init+0xdc>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	4a0c      	ldr	r2, [pc, #48]	; (8003410 <Flash_init+0xdc>)
 80033e0:	7851      	ldrb	r1, [r2, #1]
 80033e2:	2200      	movs	r2, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fdb3 	bl	8002f50 <RTC_initAlarm>
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	08010c00 	.word	0x08010c00
 80033f4:	200000f0 	.word	0x200000f0
 80033f8:	08011000 	.word	0x08011000
 80033fc:	200000f4 	.word	0x200000f4
 8003400:	08010800 	.word	0x08010800
 8003404:	200000f8 	.word	0x200000f8
 8003408:	08010400 	.word	0x08010400
 800340c:	200000be 	.word	0x200000be
 8003410:	20000b84 	.word	0x20000b84

08003414 <Flash_writeData>:

void Flash_writeData(const char* host, const char* url, const char* data)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
	memset(Flash_DataToWrite,0,strlen(Flash_DataToWrite));
 8003420:	484b      	ldr	r0, [pc, #300]	; (8003550 <Flash_writeData+0x13c>)
 8003422:	f7fc fed5 	bl	80001d0 <strlen>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	4848      	ldr	r0, [pc, #288]	; (8003550 <Flash_writeData+0x13c>)
 800342e:	f006 f885 	bl	800953c <memset>
	if((host != NULL) && (url != NULL))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <Flash_writeData+0x3c>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <Flash_writeData+0x3c>
	{
		sprintf(Flash_DataToWrite,"%s|%s|%s",host,url,data);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4943      	ldr	r1, [pc, #268]	; (8003554 <Flash_writeData+0x140>)
 8003448:	4841      	ldr	r0, [pc, #260]	; (8003550 <Flash_writeData+0x13c>)
 800344a:	f006 f87f 	bl	800954c <siprintf>
 800344e:	e011      	b.n	8003474 <Flash_writeData+0x60>
	}
	else
	{
		if(strstr(host,Host1) != NULL)
 8003450:	4941      	ldr	r1, [pc, #260]	; (8003558 <Flash_writeData+0x144>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f006 f8a2 	bl	800959c <strstr>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <Flash_writeData+0x56>
		{
			sprintf(Flash_DataToWrite,"%s||1",data);
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	493e      	ldr	r1, [pc, #248]	; (800355c <Flash_writeData+0x148>)
 8003462:	483b      	ldr	r0, [pc, #236]	; (8003550 <Flash_writeData+0x13c>)
 8003464:	f006 f872 	bl	800954c <siprintf>
 8003468:	e004      	b.n	8003474 <Flash_writeData+0x60>
		}
		else
		{
			sprintf(Flash_DataToWrite,"%s||2",data);
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	493c      	ldr	r1, [pc, #240]	; (8003560 <Flash_writeData+0x14c>)
 800346e:	4838      	ldr	r0, [pc, #224]	; (8003550 <Flash_writeData+0x13c>)
 8003470:	f006 f86c 	bl	800954c <siprintf>
		}
	}
	Flash_Unlock();
 8003474:	f7fd fbcd 	bl	8000c12 <Flash_Unlock>
	Flash_WriteDataLen = strlen(Flash_DataToWrite);
 8003478:	4835      	ldr	r0, [pc, #212]	; (8003550 <Flash_writeData+0x13c>)
 800347a:	f7fc fea9 	bl	80001d0 <strlen>
 800347e:	4603      	mov	r3, r0
 8003480:	b29a      	uxth	r2, r3
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <Flash_writeData+0x150>)
 8003484:	801a      	strh	r2, [r3, #0]
	if((WRITE_DATA_ADDR + Flash_WriteDataLen*2) >= PAGE_ADDR)
 8003486:	4b37      	ldr	r3, [pc, #220]	; (8003564 <Flash_writeData+0x150>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	461a      	mov	r2, r3
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <Flash_writeData+0x154>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	441a      	add	r2, r3
 8003494:	4b35      	ldr	r3, [pc, #212]	; (800356c <Flash_writeData+0x158>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d329      	bcc.n	80034f0 <Flash_writeData+0xdc>
	{
		if(PAGE_ADDR == MAX_PAGE_ADDR)
 800349c:	4b33      	ldr	r3, [pc, #204]	; (800356c <Flash_writeData+0x158>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a33      	ldr	r2, [pc, #204]	; (8003570 <Flash_writeData+0x15c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10b      	bne.n	80034be <Flash_writeData+0xaa>
		{
			PAGE_ADDR = MIN_PAGE_ADDR;
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <Flash_writeData+0x158>)
 80034a8:	4a32      	ldr	r2, [pc, #200]	; (8003574 <Flash_writeData+0x160>)
 80034aa:	601a      	str	r2, [r3, #0]
			WRITE_DATA_ADDR = MIN_DATA_ADDR;
 80034ac:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <Flash_writeData+0x154>)
 80034ae:	4a32      	ldr	r2, [pc, #200]	; (8003578 <Flash_writeData+0x164>)
 80034b0:	601a      	str	r2, [r3, #0]
			Flash_Erase(WRITE_DATA_ADDR);
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <Flash_writeData+0x154>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fbb1 	bl	8000c1e <Flash_Erase>
 80034bc:	e005      	b.n	80034ca <Flash_writeData+0xb6>
		}
		else
		{
			PAGE_ADDR += 0x800;
 80034be:	4b2b      	ldr	r3, [pc, #172]	; (800356c <Flash_writeData+0x158>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c6:	4a29      	ldr	r2, [pc, #164]	; (800356c <Flash_writeData+0x158>)
 80034c8:	6013      	str	r3, [r2, #0]
		}
		if(READ_DATA_ADDR > WRITE_DATA_ADDR)
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <Flash_writeData+0x168>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <Flash_writeData+0x154>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d905      	bls.n	80034e2 <Flash_writeData+0xce>
		{
			READ_DATA_ADDR = PAGE_ADDR + 0x10 - 0x800;
 80034d6:	4b25      	ldr	r3, [pc, #148]	; (800356c <Flash_writeData+0x158>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 80034de:	4a27      	ldr	r2, [pc, #156]	; (800357c <Flash_writeData+0x168>)
 80034e0:	6013      	str	r3, [r2, #0]
		}
		Flash_Unlock();
 80034e2:	f7fd fb96 	bl	8000c12 <Flash_Unlock>
		Flash_Erase(PAGE_ADDR);
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <Flash_writeData+0x158>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fb97 	bl	8000c1e <Flash_Erase>
	}
	Flash_WriteCharType(WRITE_DATA_ADDR, Flash_DataToWrite, FLASH_TYPEPROGRAM_HALFWORD);
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <Flash_writeData+0x154>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4916      	ldr	r1, [pc, #88]	; (8003550 <Flash_writeData+0x13c>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fbcd 	bl	8000c98 <Flash_WriteCharType>
	WRITE_DATA_ADDR += Flash_WriteDataLen*2+2;
 80034fe:	4b19      	ldr	r3, [pc, #100]	; (8003564 <Flash_writeData+0x150>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	3301      	adds	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	461a      	mov	r2, r3
 8003508:	4b17      	ldr	r3, [pc, #92]	; (8003568 <Flash_writeData+0x154>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4413      	add	r3, r2
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <Flash_writeData+0x154>)
 8003510:	6013      	str	r3, [r2, #0]
	Flash_Erase(WR_ADDR);
 8003512:	481b      	ldr	r0, [pc, #108]	; (8003580 <Flash_writeData+0x16c>)
 8003514:	f7fd fb83 	bl	8000c1e <Flash_Erase>
	//Luu PAGE_ADDR, WRITE_DATA_ADDR, READ_DATA_ADDR vao bo nho Flash
	Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR, FLASH_TYPEPROGRAM_WORD);
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <Flash_writeData+0x168>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2202      	movs	r2, #2
 800351e:	4619      	mov	r1, r3
 8003520:	4818      	ldr	r0, [pc, #96]	; (8003584 <Flash_writeData+0x170>)
 8003522:	f7fd fb98 	bl	8000c56 <Flash_WriteIntType>
	Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR, FLASH_TYPEPROGRAM_WORD);
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <Flash_writeData+0x154>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2202      	movs	r2, #2
 800352c:	4619      	mov	r1, r3
 800352e:	4814      	ldr	r0, [pc, #80]	; (8003580 <Flash_writeData+0x16c>)
 8003530:	f7fd fb91 	bl	8000c56 <Flash_WriteIntType>
	Flash_WriteIntType(PG_ADDR, PAGE_ADDR, FLASH_TYPEPROGRAM_WORD);
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <Flash_writeData+0x158>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2202      	movs	r2, #2
 800353a:	4619      	mov	r1, r3
 800353c:	4812      	ldr	r0, [pc, #72]	; (8003588 <Flash_writeData+0x174>)
 800353e:	f7fd fb8a 	bl	8000c56 <Flash_WriteIntType>
	Flash_Lock();
 8003542:	f7fd fb60 	bl	8000c06 <Flash_Lock>
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000bb0 	.word	0x20000bb0
 8003554:	0800ad3c 	.word	0x0800ad3c
 8003558:	20000020 	.word	0x20000020
 800355c:	0800ad48 	.word	0x0800ad48
 8003560:	0800ad50 	.word	0x0800ad50
 8003564:	2000114e 	.word	0x2000114e
 8003568:	200000f0 	.word	0x200000f0
 800356c:	200000f8 	.word	0x200000f8
 8003570:	0801fbf0 	.word	0x0801fbf0
 8003574:	080117f0 	.word	0x080117f0
 8003578:	08011400 	.word	0x08011400
 800357c:	200000f4 	.word	0x200000f4
 8003580:	08010c00 	.word	0x08010c00
 8003584:	08011000 	.word	0x08011000
 8003588:	08010800 	.word	0x08010800

0800358c <Flash_extractData>:

void Flash_extractData(char* data)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	memset(Flash_Host,0,strlen(Flash_Host));
 8003594:	4835      	ldr	r0, [pc, #212]	; (800366c <Flash_extractData+0xe0>)
 8003596:	f7fc fe1b 	bl	80001d0 <strlen>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	2100      	movs	r1, #0
 80035a0:	4832      	ldr	r0, [pc, #200]	; (800366c <Flash_extractData+0xe0>)
 80035a2:	f005 ffcb 	bl	800953c <memset>
	memset(Flash_URL,0,strlen(Flash_URL));
 80035a6:	4832      	ldr	r0, [pc, #200]	; (8003670 <Flash_extractData+0xe4>)
 80035a8:	f7fc fe12 	bl	80001d0 <strlen>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	2100      	movs	r1, #0
 80035b2:	482f      	ldr	r0, [pc, #188]	; (8003670 <Flash_extractData+0xe4>)
 80035b4:	f005 ffc2 	bl	800953c <memset>
	memset(Flash_Data,0,strlen(Flash_Data));
 80035b8:	482e      	ldr	r0, [pc, #184]	; (8003674 <Flash_extractData+0xe8>)
 80035ba:	f7fc fe09 	bl	80001d0 <strlen>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	2100      	movs	r1, #0
 80035c4:	482b      	ldr	r0, [pc, #172]	; (8003674 <Flash_extractData+0xe8>)
 80035c6:	f005 ffb9 	bl	800953c <memset>
	if(strstr(data,"||") == NULL)
 80035ca:	492b      	ldr	r1, [pc, #172]	; (8003678 <Flash_extractData+0xec>)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f005 ffe5 	bl	800959c <strstr>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11b      	bne.n	8003610 <Flash_extractData+0x84>
	{
		char* token;
		token = strtok(data,"|");
 80035d8:	4928      	ldr	r1, [pc, #160]	; (800367c <Flash_extractData+0xf0>)
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f005 fff6 	bl	80095cc <strtok>
 80035e0:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_Host,token);
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	4821      	ldr	r0, [pc, #132]	; (800366c <Flash_extractData+0xe0>)
 80035e6:	f005 ffd1 	bl	800958c <strcpy>
		token = strtok(NULL,"|");
 80035ea:	4924      	ldr	r1, [pc, #144]	; (800367c <Flash_extractData+0xf0>)
 80035ec:	2000      	movs	r0, #0
 80035ee:	f005 ffed 	bl	80095cc <strtok>
 80035f2:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_URL,token);
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	481e      	ldr	r0, [pc, #120]	; (8003670 <Flash_extractData+0xe4>)
 80035f8:	f005 ffc8 	bl	800958c <strcpy>
		token = strtok(NULL,"|");
 80035fc:	491f      	ldr	r1, [pc, #124]	; (800367c <Flash_extractData+0xf0>)
 80035fe:	2000      	movs	r0, #0
 8003600:	f005 ffe4 	bl	80095cc <strtok>
 8003604:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_Data,token);
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	481a      	ldr	r0, [pc, #104]	; (8003674 <Flash_extractData+0xe8>)
 800360a:	f005 ffbf 	bl	800958c <strcpy>
		{
			strcpy(Flash_Host,Host2);
			strcpy(Flash_URL,URL2);
		}
	}
}
 800360e:	e029      	b.n	8003664 <Flash_extractData+0xd8>
		token = strtok(data,"|");
 8003610:	491a      	ldr	r1, [pc, #104]	; (800367c <Flash_extractData+0xf0>)
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f005 ffda 	bl	80095cc <strtok>
 8003618:	60f8      	str	r0, [r7, #12]
		strcpy(Flash_Data,token);
 800361a:	68f9      	ldr	r1, [r7, #12]
 800361c:	4815      	ldr	r0, [pc, #84]	; (8003674 <Flash_extractData+0xe8>)
 800361e:	f005 ffb5 	bl	800958c <strcpy>
		token = strtok(NULL,"|");
 8003622:	4916      	ldr	r1, [pc, #88]	; (800367c <Flash_extractData+0xf0>)
 8003624:	2000      	movs	r0, #0
 8003626:	f005 ffd1 	bl	80095cc <strtok>
 800362a:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL,"|");
 800362c:	4913      	ldr	r1, [pc, #76]	; (800367c <Flash_extractData+0xf0>)
 800362e:	2000      	movs	r0, #0
 8003630:	f005 ffcc 	bl	80095cc <strtok>
 8003634:	60f8      	str	r0, [r7, #12]
		if(atoi(token) == 1)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f005 ff52 	bl	80094e0 <atoi>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <Flash_extractData+0xc8>
			strcpy(Flash_Host,Host1);
 8003642:	490f      	ldr	r1, [pc, #60]	; (8003680 <Flash_extractData+0xf4>)
 8003644:	4809      	ldr	r0, [pc, #36]	; (800366c <Flash_extractData+0xe0>)
 8003646:	f005 ffa1 	bl	800958c <strcpy>
			strcpy(Flash_URL,URL1);
 800364a:	490e      	ldr	r1, [pc, #56]	; (8003684 <Flash_extractData+0xf8>)
 800364c:	4808      	ldr	r0, [pc, #32]	; (8003670 <Flash_extractData+0xe4>)
 800364e:	f005 ff9d 	bl	800958c <strcpy>
}
 8003652:	e007      	b.n	8003664 <Flash_extractData+0xd8>
			strcpy(Flash_Host,Host2);
 8003654:	490c      	ldr	r1, [pc, #48]	; (8003688 <Flash_extractData+0xfc>)
 8003656:	4805      	ldr	r0, [pc, #20]	; (800366c <Flash_extractData+0xe0>)
 8003658:	f005 ff98 	bl	800958c <strcpy>
			strcpy(Flash_URL,URL2);
 800365c:	490b      	ldr	r1, [pc, #44]	; (800368c <Flash_extractData+0x100>)
 800365e:	4804      	ldr	r0, [pc, #16]	; (8003670 <Flash_extractData+0xe4>)
 8003660:	f005 ff94 	bl	800958c <strcpy>
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000108c 	.word	0x2000108c
 8003670:	2000111c 	.word	0x2000111c
 8003674:	20000d40 	.word	0x20000d40
 8003678:	0800ad58 	.word	0x0800ad58
 800367c:	0800aca4 	.word	0x0800aca4
 8003680:	20000020 	.word	0x20000020
 8003684:	20000000 	.word	0x20000000
 8003688:	20000060 	.word	0x20000060
 800368c:	20000040 	.word	0x20000040

08003690 <RS485_readLiquidLevelTransmitter>:
	return -32767;
}

// don vi met
float RS485_readLiquidLevelTransmitter(uint8_t Modbus_Addr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b092      	sub	sp, #72	; 0x48
 8003694:	af02      	add	r7, sp, #8
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
	#if (IWDOG == 1)
	HAL_IWDG_Refresh(&hiwdg);
	#endif
	uint8_t ReceivedBuff[10] ={0};
 800369a:	2300      	movs	r3, #0
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 800369e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	809a      	strh	r2, [r3, #4]
	uint16_t sensorValue=0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
	RS485Query_t m_RS485Query=
 80036ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80036bc:	2303      	movs	r3, #3
 80036be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80036c2:	2304      	movs	r3, #4
 80036c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80036c6:	2301      	movs	r3, #1
 80036c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		.slaveAddress = Modbus_Addr,
		.mbFunction 	= Read_HoldingRegister,
		.regAddress 	= 0x04,
		.regCount		= 0x01
	};
	for(uint8_t j=0;j<3;j++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80036d0:	e038      	b.n	8003744 <RS485_readLiquidLevelTransmitter+0xb4>
	{
		RS485_transmit(m_RS485Query);
 80036d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036da:	f7fd fced 	bl	80010b8 <RS485_transmit>
		if(HAL_UART_Receive(&huart3,(uint8_t*)ReceivedBuff, 7, 1000) == HAL_OK)
 80036de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80036e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e6:	2207      	movs	r2, #7
 80036e8:	481d      	ldr	r0, [pc, #116]	; (8003760 <RS485_readLiquidLevelTransmitter+0xd0>)
 80036ea:	f004 feef 	bl	80084cc <HAL_UART_Receive>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11e      	bne.n	8003732 <RS485_readLiquidLevelTransmitter+0xa2>
		{
			RS485Data_t LiquidLevelTransmitter;
			if(RS485_analysis(&LiquidLevelTransmitter, m_RS485Query, (uint8_t*)ReceivedBuff, 7) == 1)
 80036f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036f8:	f107 0008 	add.w	r0, r7, #8
 80036fc:	2207      	movs	r2, #7
 80036fe:	9200      	str	r2, [sp, #0]
 8003700:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003704:	ca06      	ldmia	r2, {r1, r2}
 8003706:	f7fd fd63 	bl	80011d0 <RS485_analysis>
 800370a:	4603      	mov	r3, r0
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10e      	bne.n	800372e <RS485_readLiquidLevelTransmitter+0x9e>
			{
				sensorValue = LiquidLevelTransmitter.dataReg[0];
 8003710:	89bb      	ldrh	r3, [r7, #12]
 8003712:	87bb      	strh	r3, [r7, #60]	; 0x3c
				HAL_Delay(200);
 8003714:	20c8      	movs	r0, #200	; 0xc8
 8003716:	f000 fe6f 	bl	80043f8 <HAL_Delay>
				return (float)(sensorValue)/100;
 800371a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003724:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003764 <RS485_readLiquidLevelTransmitter+0xd4>
 8003728:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800372c:	e010      	b.n	8003750 <RS485_readLiquidLevelTransmitter+0xc0>
			}
			else
			{
				__NOP();
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <RS485_readLiquidLevelTransmitter+0xa4>
			}
		}
		else
		{
			__NOP();
 8003732:	bf00      	nop
		}
		HAL_Delay(200);
 8003734:	20c8      	movs	r0, #200	; 0xc8
 8003736:	f000 fe5f 	bl	80043f8 <HAL_Delay>
	for(uint8_t j=0;j<3;j++)
 800373a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800373e:	3301      	adds	r3, #1
 8003740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003744:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003748:	2b02      	cmp	r3, #2
 800374a:	d9c2      	bls.n	80036d2 <RS485_readLiquidLevelTransmitter+0x42>
	}
	return -32767;
 800374c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003768 <RS485_readLiquidLevelTransmitter+0xd8>
 8003750:	eef0 7a47 	vmov.f32	s15, s14
}
 8003754:	eeb0 0a67 	vmov.f32	s0, s15
 8003758:	3740      	adds	r7, #64	; 0x40
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000fb8 	.word	0x20000fb8
 8003764:	42c80000 	.word	0x42c80000
 8003768:	c6fffe00 	.word	0xc6fffe00
 800376c:	00000000 	.word	0x00000000

08003770 <Sensor_getADCValue>:

float Sensor_getADCValue(uint8_t channel)
{
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)Sensor_ADCval, 2);
 800377a:	2202      	movs	r2, #2
 800377c:	49a6      	ldr	r1, [pc, #664]	; (8003a18 <Sensor_getADCValue+0x2a8>)
 800377e:	48a7      	ldr	r0, [pc, #668]	; (8003a1c <Sensor_getADCValue+0x2ac>)
 8003780:	f001 f85c 	bl	800483c <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 8003784:	2032      	movs	r0, #50	; 0x32
 8003786:	f000 fe37 	bl	80043f8 <HAL_Delay>
	// Lay NSAMPLE mau
	for(uint8_t i=0; i<NSAMPLE; i++)
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e00d      	b.n	80037ac <Sensor_getADCValue+0x3c>
	{
		ADC_ArrayVal[i] = Sensor_ADCval[channel];
 8003790:	79fa      	ldrb	r2, [r7, #7]
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	49a0      	ldr	r1, [pc, #640]	; (8003a18 <Sensor_getADCValue+0x2a8>)
 8003796:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800379a:	4aa1      	ldr	r2, [pc, #644]	; (8003a20 <Sensor_getADCValue+0x2b0>)
 800379c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_Delay(2);
 80037a0:	2002      	movs	r0, #2
 80037a2:	f000 fe29 	bl	80043f8 <HAL_Delay>
	for(uint8_t i=0; i<NSAMPLE; i++)
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	3301      	adds	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b31      	cmp	r3, #49	; 0x31
 80037b0:	d9ee      	bls.n	8003790 <Sensor_getADCValue+0x20>
	}
	//Sap xep theo gia tri tang dan
	insertionSort(ADC_ArrayVal, NSAMPLE);
 80037b2:	2132      	movs	r1, #50	; 0x32
 80037b4:	489a      	ldr	r0, [pc, #616]	; (8003a20 <Sensor_getADCValue+0x2b0>)
 80037b6:	f000 fa3d 	bl	8003c34 <insertionSort>
	// Tinh trung binh gia tri khoang giua
	ADC_Count = ADC_Avr = 0;
 80037ba:	4b9a      	ldr	r3, [pc, #616]	; (8003a24 <Sensor_getADCValue+0x2b4>)
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	4b99      	ldr	r3, [pc, #612]	; (8003a28 <Sensor_getADCValue+0x2b8>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = NSAMPLE/4+1; i < NSAMPLE*3/4+1; i++)
 80037c8:	230d      	movs	r3, #13
 80037ca:	73bb      	strb	r3, [r7, #14]
 80037cc:	e018      	b.n	8003800 <Sensor_getADCValue+0x90>
	{
		ADC_Avr += ADC_ArrayVal[i];
 80037ce:	7bbb      	ldrb	r3, [r7, #14]
 80037d0:	4a93      	ldr	r2, [pc, #588]	; (8003a20 <Sensor_getADCValue+0x2b0>)
 80037d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037de:	4b91      	ldr	r3, [pc, #580]	; (8003a24 <Sensor_getADCValue+0x2b4>)
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e8:	4b8e      	ldr	r3, [pc, #568]	; (8003a24 <Sensor_getADCValue+0x2b4>)
 80037ea:	edc3 7a00 	vstr	s15, [r3]
		ADC_Count++;
 80037ee:	4b8e      	ldr	r3, [pc, #568]	; (8003a28 <Sensor_getADCValue+0x2b8>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4b8c      	ldr	r3, [pc, #560]	; (8003a28 <Sensor_getADCValue+0x2b8>)
 80037f8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = NSAMPLE/4+1; i < NSAMPLE*3/4+1; i++)
 80037fa:	7bbb      	ldrb	r3, [r7, #14]
 80037fc:	3301      	adds	r3, #1
 80037fe:	73bb      	strb	r3, [r7, #14]
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	2b25      	cmp	r3, #37	; 0x25
 8003804:	d9e3      	bls.n	80037ce <Sensor_getADCValue+0x5e>
	}
	ADC_Avr /= ADC_Count;
 8003806:	4b87      	ldr	r3, [pc, #540]	; (8003a24 <Sensor_getADCValue+0x2b4>)
 8003808:	edd3 6a00 	vldr	s13, [r3]
 800380c:	4b86      	ldr	r3, [pc, #536]	; (8003a28 <Sensor_getADCValue+0x2b8>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800381c:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <Sensor_getADCValue+0x2b4>)
 800381e:	edc3 7a00 	vstr	s15, [r3]
	Sensor_Current = (ADC_Avr*VOLPOWER/4095)*10;
 8003822:	4b80      	ldr	r3, [pc, #512]	; (8003a24 <Sensor_getADCValue+0x2b4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fe8e 	bl	8000548 <__aeabi_f2d>
 800382c:	a36a      	add	r3, pc, #424	; (adr r3, 80039d8 <Sensor_getADCValue+0x268>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f7fc fee1 	bl	80005f8 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	a368      	add	r3, pc, #416	; (adr r3, 80039e0 <Sensor_getADCValue+0x270>)
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f7fd f802 	bl	800084c <__aeabi_ddiv>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	4b75      	ldr	r3, [pc, #468]	; (8003a2c <Sensor_getADCValue+0x2bc>)
 8003856:	f7fc fecf 	bl	80005f8 <__aeabi_dmul>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	f7fd f963 	bl	8000b2c <__aeabi_d2f>
 8003866:	4603      	mov	r3, r0
 8003868:	4a71      	ldr	r2, [pc, #452]	; (8003a30 <Sensor_getADCValue+0x2c0>)
 800386a:	6013      	str	r3, [r2, #0]
	ADC_Count = ADC_Avr = 0;
 800386c:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <Sensor_getADCValue+0x2b4>)
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	4b6c      	ldr	r3, [pc, #432]	; (8003a28 <Sensor_getADCValue+0x2b8>)
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<NSAMPLE; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	737b      	strb	r3, [r7, #13]
 800387e:	e007      	b.n	8003890 <Sensor_getADCValue+0x120>
	{
		ADC_ArrayVal[i] = 0;
 8003880:	7b7b      	ldrb	r3, [r7, #13]
 8003882:	4a67      	ldr	r2, [pc, #412]	; (8003a20 <Sensor_getADCValue+0x2b0>)
 8003884:	2100      	movs	r1, #0
 8003886:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<NSAMPLE; i++)
 800388a:	7b7b      	ldrb	r3, [r7, #13]
 800388c:	3301      	adds	r3, #1
 800388e:	737b      	strb	r3, [r7, #13]
 8003890:	7b7b      	ldrb	r3, [r7, #13]
 8003892:	2b31      	cmp	r3, #49	; 0x31
 8003894:	d9f4      	bls.n	8003880 <Sensor_getADCValue+0x110>
	}
	HAL_ADC_Stop_DMA(&hadc2);
 8003896:	4861      	ldr	r0, [pc, #388]	; (8003a1c <Sensor_getADCValue+0x2ac>)
 8003898:	f001 f8ec 	bl	8004a74 <HAL_ADC_Stop_DMA>
	HAL_Delay(10);
 800389c:	200a      	movs	r0, #10
 800389e:	f000 fdab 	bl	80043f8 <HAL_Delay>
	if(channel == 0)
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13f      	bne.n	8003928 <Sensor_getADCValue+0x1b8>
	{
		Sensor_CalibCurrent = -0.00008*Sensor_Current*Sensor_Current + \
 80038a8:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <Sensor_getADCValue+0x2c0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fe4b 	bl	8000548 <__aeabi_f2d>
 80038b2:	a34d      	add	r3, pc, #308	; (adr r3, 80039e8 <Sensor_getADCValue+0x278>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fc fe9e 	bl	80005f8 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4614      	mov	r4, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	4b5a      	ldr	r3, [pc, #360]	; (8003a30 <Sensor_getADCValue+0x2c0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fc fe3d 	bl	8000548 <__aeabi_f2d>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4620      	mov	r0, r4
 80038d4:	4629      	mov	r1, r5
 80038d6:	f7fc fe8f 	bl	80005f8 <__aeabi_dmul>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4614      	mov	r4, r2
 80038e0:	461d      	mov	r5, r3
													1.0024*Sensor_Current + 0.0137;
 80038e2:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <Sensor_getADCValue+0x2c0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fc fe2e 	bl	8000548 <__aeabi_f2d>
 80038ec:	a340      	add	r3, pc, #256	; (adr r3, 80039f0 <Sensor_getADCValue+0x280>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fe81 	bl	80005f8 <__aeabi_dmul>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
		Sensor_CalibCurrent = -0.00008*Sensor_Current*Sensor_Current + \
 80038fa:	4620      	mov	r0, r4
 80038fc:	4629      	mov	r1, r5
 80038fe:	f7fc fcc5 	bl	800028c <__adddf3>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
													1.0024*Sensor_Current + 0.0137;
 800390a:	a33b      	add	r3, pc, #236	; (adr r3, 80039f8 <Sensor_getADCValue+0x288>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f7fc fcbc 	bl	800028c <__adddf3>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	f7fd f906 	bl	8000b2c <__aeabi_d2f>
 8003920:	4603      	mov	r3, r0
		Sensor_CalibCurrent = -0.00008*Sensor_Current*Sensor_Current + \
 8003922:	4a44      	ldr	r2, [pc, #272]	; (8003a34 <Sensor_getADCValue+0x2c4>)
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e041      	b.n	80039ac <Sensor_getADCValue+0x23c>
	}
	else if(channel == 1)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d13e      	bne.n	80039ac <Sensor_getADCValue+0x23c>
	{
		Sensor_CalibCurrent = -0.0001*Sensor_Current*Sensor_Current + \
 800392e:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <Sensor_getADCValue+0x2c0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fe08 	bl	8000548 <__aeabi_f2d>
 8003938:	a331      	add	r3, pc, #196	; (adr r3, 8003a00 <Sensor_getADCValue+0x290>)
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	f7fc fe5b 	bl	80005f8 <__aeabi_dmul>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4614      	mov	r4, r2
 8003948:	461d      	mov	r5, r3
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <Sensor_getADCValue+0x2c0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fc fdfa 	bl	8000548 <__aeabi_f2d>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4620      	mov	r0, r4
 800395a:	4629      	mov	r1, r5
 800395c:	f7fc fe4c 	bl	80005f8 <__aeabi_dmul>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
													1.0013*Sensor_Current + 0.0066;
 8003968:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <Sensor_getADCValue+0x2c0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fdeb 	bl	8000548 <__aeabi_f2d>
 8003972:	a325      	add	r3, pc, #148	; (adr r3, 8003a08 <Sensor_getADCValue+0x298>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f7fc fe3e 	bl	80005f8 <__aeabi_dmul>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
		Sensor_CalibCurrent = -0.0001*Sensor_Current*Sensor_Current + \
 8003980:	4620      	mov	r0, r4
 8003982:	4629      	mov	r1, r5
 8003984:	f7fc fc82 	bl	800028c <__adddf3>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
													1.0013*Sensor_Current + 0.0066;
 8003990:	a31f      	add	r3, pc, #124	; (adr r3, 8003a10 <Sensor_getADCValue+0x2a0>)
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f7fc fc79 	bl	800028c <__adddf3>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7fd f8c3 	bl	8000b2c <__aeabi_d2f>
 80039a6:	4603      	mov	r3, r0
		Sensor_CalibCurrent = -0.0001*Sensor_Current*Sensor_Current + \
 80039a8:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <Sensor_getADCValue+0x2c4>)
 80039aa:	6013      	str	r3, [r2, #0]
	}
	if((int)Sensor_CalibCurrent != 0) return Sensor_CalibCurrent;
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <Sensor_getADCValue+0x2c4>)
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b6:	ee17 3a90 	vmov	r3, s15
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <Sensor_getADCValue+0x254>
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <Sensor_getADCValue+0x2c4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	e001      	b.n	80039c8 <Sensor_getADCValue+0x258>
	return 0.0;
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	ee07 3a90 	vmov	s15, r3
}
 80039cc:	eeb0 0a67 	vmov.f32	s0, s15
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bdb0      	pop	{r4, r5, r7, pc}
 80039d6:	bf00      	nop
 80039d8:	66666666 	.word	0x66666666
 80039dc:	400a6666 	.word	0x400a6666
 80039e0:	00000000 	.word	0x00000000
 80039e4:	40affe00 	.word	0x40affe00
 80039e8:	88e368f1 	.word	0x88e368f1
 80039ec:	bf14f8b5 	.word	0xbf14f8b5
 80039f0:	95182a99 	.word	0x95182a99
 80039f4:	3ff009d4 	.word	0x3ff009d4
 80039f8:	dfa43fe6 	.word	0xdfa43fe6
 80039fc:	3f8c0ebe 	.word	0x3f8c0ebe
 8003a00:	eb1c432d 	.word	0xeb1c432d
 8003a04:	bf1a36e2 	.word	0xbf1a36e2
 8003a08:	2617c1be 	.word	0x2617c1be
 8003a0c:	3ff00553 	.word	0x3ff00553
 8003a10:	02752546 	.word	0x02752546
 8003a14:	3f7b089a 	.word	0x3f7b089a
 8003a18:	20000f5c 	.word	0x20000f5c
 8003a1c:	2000103c 	.word	0x2000103c
 8003a20:	20000eec 	.word	0x20000eec
 8003a24:	20000f50 	.word	0x20000f50
 8003a28:	20000ee8 	.word	0x20000ee8
 8003a2c:	40240000 	.word	0x40240000
 8003a30:	20000f54 	.word	0x20000f54
 8003a34:	20000f58 	.word	0x20000f58

08003a38 <ADC_map>:

float ADC_map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a42:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a46:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a4a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a4e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003a52:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a56:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a5e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003a62:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a66:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a6a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a72:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a82:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003a86:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <PWR_ctrlPwrSensor>:

void PWR_ctrlPwrSensor(Pwr_State status)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CTR_PWR_SS_GPIO_Port, CTR_PWR_SS_Pin, status? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ab4:	f002 fc0e 	bl	80062d4 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8003ab8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003abc:	f000 fc9c 	bl	80043f8 <HAL_Delay>
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <PWR_getPwrSupply>:

void PWR_getPwrSupply(uint8_t channel)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start_DMA(&hadc4, (uint32_t*) ADC_value, 2);
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4950      	ldr	r1, [pc, #320]	; (8003c18 <PWR_getPwrSupply+0x150>)
 8003ad6:	4851      	ldr	r0, [pc, #324]	; (8003c1c <PWR_getPwrSupply+0x154>)
 8003ad8:	f000 feb0 	bl	800483c <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8003adc:	2001      	movs	r0, #1
 8003ade:	f000 fc8b 	bl	80043f8 <HAL_Delay>
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
 8003ae6:	e00d      	b.n	8003b04 <PWR_getPwrSupply+0x3c>
	{
		ADC_ArrayVal[i] = ADC_value[channel];
 8003ae8:	79fa      	ldrb	r2, [r7, #7]
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	494a      	ldr	r1, [pc, #296]	; (8003c18 <PWR_getPwrSupply+0x150>)
 8003aee:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003af2:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <PWR_getPwrSupply+0x158>)
 8003af4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_Delay(2);
 8003af8:	2002      	movs	r0, #2
 8003afa:	f000 fc7d 	bl	80043f8 <HAL_Delay>
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	3301      	adds	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b31      	cmp	r3, #49	; 0x31
 8003b08:	d9ee      	bls.n	8003ae8 <PWR_getPwrSupply+0x20>
	}
	//Sap xep theo gia tri tang dan
	insertionSort(ADC_ArrayVal, NSAMPLE);
 8003b0a:	2132      	movs	r1, #50	; 0x32
 8003b0c:	4844      	ldr	r0, [pc, #272]	; (8003c20 <PWR_getPwrSupply+0x158>)
 8003b0e:	f000 f891 	bl	8003c34 <insertionSort>
	// Tinh trung binh gia tri khoang giua
	ADC_Count = ADC_Avr = 0;
 8003b12:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <PWR_getPwrSupply+0x15c>)
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <PWR_getPwrSupply+0x160>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = NSAMPLE/4+1; i < NSAMPLE*3/4+1; i++)
 8003b20:	230d      	movs	r3, #13
 8003b22:	73bb      	strb	r3, [r7, #14]
 8003b24:	e018      	b.n	8003b58 <PWR_getPwrSupply+0x90>
	{
		ADC_Avr += ADC_ArrayVal[i];
 8003b26:	7bbb      	ldrb	r3, [r7, #14]
 8003b28:	4a3d      	ldr	r2, [pc, #244]	; (8003c20 <PWR_getPwrSupply+0x158>)
 8003b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <PWR_getPwrSupply+0x15c>)
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b40:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <PWR_getPwrSupply+0x15c>)
 8003b42:	edc3 7a00 	vstr	s15, [r3]
		ADC_Count++;
 8003b46:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <PWR_getPwrSupply+0x160>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <PWR_getPwrSupply+0x160>)
 8003b50:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = NSAMPLE/4+1; i < NSAMPLE*3/4+1; i++)
 8003b52:	7bbb      	ldrb	r3, [r7, #14]
 8003b54:	3301      	adds	r3, #1
 8003b56:	73bb      	strb	r3, [r7, #14]
 8003b58:	7bbb      	ldrb	r3, [r7, #14]
 8003b5a:	2b25      	cmp	r3, #37	; 0x25
 8003b5c:	d9e3      	bls.n	8003b26 <PWR_getPwrSupply+0x5e>
	}
	ADC_Avr /= ADC_Count;
 8003b5e:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <PWR_getPwrSupply+0x15c>)
 8003b60:	edd3 6a00 	vldr	s13, [r3]
 8003b64:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <PWR_getPwrSupply+0x160>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <PWR_getPwrSupply+0x15c>)
 8003b76:	edc3 7a00 	vstr	s15, [r3]
	Voltage = CALCULATE_VIN(ADC_Avr);
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <PWR_getPwrSupply+0x15c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fce2 	bl	8000548 <__aeabi_f2d>
 8003b84:	a320      	add	r3, pc, #128	; (adr r3, 8003c08 <PWR_getPwrSupply+0x140>)
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f7fc fd35 	bl	80005f8 <__aeabi_dmul>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <PWR_getPwrSupply+0x164>)
 8003b9c:	f7fc fd2c 	bl	80005f8 <__aeabi_dmul>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	a319      	add	r3, pc, #100	; (adr r3, 8003c10 <PWR_getPwrSupply+0x148>)
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f7fc fe4d 	bl	800084c <__aeabi_ddiv>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f7fc ffb7 	bl	8000b2c <__aeabi_d2f>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <PWR_getPwrSupply+0x168>)
 8003bc2:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	737b      	strb	r3, [r7, #13]
 8003bc8:	e007      	b.n	8003bda <PWR_getPwrSupply+0x112>
	{
		ADC_ArrayVal[i] = 0;
 8003bca:	7b7b      	ldrb	r3, [r7, #13]
 8003bcc:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <PWR_getPwrSupply+0x158>)
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003bd4:	7b7b      	ldrb	r3, [r7, #13]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	737b      	strb	r3, [r7, #13]
 8003bda:	7b7b      	ldrb	r3, [r7, #13]
 8003bdc:	2b31      	cmp	r3, #49	; 0x31
 8003bde:	d9f4      	bls.n	8003bca <PWR_getPwrSupply+0x102>
	}
	ADC_Count = ADC_Avr = 0;
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <PWR_getPwrSupply+0x15c>)
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <PWR_getPwrSupply+0x160>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc4);
 8003bee:	480b      	ldr	r0, [pc, #44]	; (8003c1c <PWR_getPwrSupply+0x154>)
 8003bf0:	f000 ff40 	bl	8004a74 <HAL_ADC_Stop_DMA>
	HAL_Delay(10);
 8003bf4:	200a      	movs	r0, #10
 8003bf6:	f000 fbff 	bl	80043f8 <HAL_Delay>
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	f3af 8000 	nop.w
 8003c08:	66666666 	.word	0x66666666
 8003c0c:	400a6666 	.word	0x400a6666
 8003c10:	00000000 	.word	0x00000000
 8003c14:	40e3fec0 	.word	0x40e3fec0
 8003c18:	20000edc 	.word	0x20000edc
 8003c1c:	200011d4 	.word	0x200011d4
 8003c20:	20000eec 	.word	0x20000eec
 8003c24:	20000f50 	.word	0x20000f50
 8003c28:	20000ee8 	.word	0x20000ee8
 8003c2c:	404c8000 	.word	0x404c8000
 8003c30:	20000ee4 	.word	0x20000ee4

08003c34 <insertionSort>:

void insertionSort(uint16_t arr[], int n)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	int i, key, j;
	for (i = 1; i < n; i++)
 8003c3e:	2301      	movs	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e02e      	b.n	8003ca2 <insertionSort+0x6e>
	{
		key = arr[i];
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
		j = i - 1;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	613b      	str	r3, [r7, #16]
		while (j >= 0 && arr[j] > key) {
 8003c56:	e00d      	b.n	8003c74 <insertionSort+0x40>
				arr[j + 1] = arr[j];
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	441a      	add	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	440b      	add	r3, r1
 8003c6a:	8812      	ldrh	r2, [r2, #0]
 8003c6c:	801a      	strh	r2, [r3, #0]
				j = j - 1;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
		while (j >= 0 && arr[j] > key) {
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db08      	blt.n	8003c8c <insertionSort+0x58>
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	dbe5      	blt.n	8003c58 <insertionSort+0x24>
		}
		arr[j + 1] = key;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < n; i++)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	dbcc      	blt.n	8003c44 <insertionSort+0x10>
	}
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <insertionSort_2>:

void insertionSort_2(float arr[], int n)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	int i, j;
	float key;
	for (i = 1; i < n; i++)
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e031      	b.n	8003d2c <insertionSort_2+0x74>
	{
		key = arr[i];
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
		j = i - 1;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	613b      	str	r3, [r7, #16]
		while (j >= 0 && arr[j] > key) {
 8003cda:	e00d      	b.n	8003cf8 <insertionSort_2+0x40>
				arr[j + 1] = arr[j];
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	441a      	add	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	440b      	add	r3, r1
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	601a      	str	r2, [r3, #0]
				j = j - 1;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
		while (j >= 0 && arr[j] > key) {
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db0c      	blt.n	8003d18 <insertionSort_2+0x60>
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	d4e1      	bmi.n	8003cdc <insertionSort_2+0x24>
		}
		arr[j + 1] = key;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	601a      	str	r2, [r3, #0]
	for (i = 1; i < n; i++)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	dbc9      	blt.n	8003cc8 <insertionSort_2+0x10>
	}
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d46:	b672      	cpsid	i
}
 8003d48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d4a:	e7fe      	b.n	8003d4a <Error_Handler+0x8>

08003d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_MspInit+0x44>)
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <HAL_MspInit+0x44>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6193      	str	r3, [r2, #24]
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <HAL_MspInit+0x44>)
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_MspInit+0x44>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <HAL_MspInit+0x44>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d74:	61d3      	str	r3, [r2, #28]
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_MspInit+0x44>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000

08003d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08c      	sub	sp, #48	; 0x30
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 031c 	add.w	r3, r7, #28
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a53      	ldr	r2, [pc, #332]	; (8003f00 <HAL_ADC_MspInit+0x16c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d14d      	bne.n	8003e52 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003db6:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6153      	str	r3, [r2, #20]
 8003dc2:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	4b4d      	ldr	r3, [pc, #308]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	4a4c      	ldr	r2, [pc, #304]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd8:	6153      	str	r3, [r2, #20]
 8003dda:	4b4a      	ldr	r3, [pc, #296]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003de6:	2360      	movs	r3, #96	; 0x60
 8003de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dea:	2303      	movs	r3, #3
 8003dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df2:	f107 031c 	add.w	r3, r7, #28
 8003df6:	4619      	mov	r1, r3
 8003df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dfc:	f002 f8d8 	bl	8005fb0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8003e00:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e02:	4a42      	ldr	r2, [pc, #264]	; (8003f0c <HAL_ADC_MspInit+0x178>)
 8003e04:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e06:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e0c:	4b3e      	ldr	r3, [pc, #248]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003e12:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e14:	2280      	movs	r2, #128	; 0x80
 8003e16:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e18:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e1e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e20:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e26:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003e28:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003e34:	4834      	ldr	r0, [pc, #208]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e36:	f001 fcb8 	bl	80057aa <HAL_DMA_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8003e40:	f7ff ff7f 	bl	8003d42 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
 8003e4a:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <HAL_ADC_MspInit+0x174>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8003e50:	e051      	b.n	8003ef6 <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC4)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2e      	ldr	r2, [pc, #184]	; (8003f10 <HAL_ADC_MspInit+0x17c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d14c      	bne.n	8003ef6 <HAL_ADC_MspInit+0x162>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e66:	6153      	str	r3, [r2, #20]
 8003e68:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e74:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e7e:	6153      	str	r3, [r2, #20]
 8003e80:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_ADC_MspInit+0x170>)
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_SOLAR_Pin|ADC_VIN_Pin;
 8003e8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e92:	2303      	movs	r3, #3
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9a:	f107 031c 	add.w	r3, r7, #28
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	481c      	ldr	r0, [pc, #112]	; (8003f14 <HAL_ADC_MspInit+0x180>)
 8003ea2:	f002 f885 	bl	8005fb0 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_ADC_MspInit+0x188>)
 8003eaa:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eac:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003eba:	2280      	movs	r2, #128	; 0x80
 8003ebc:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ebe:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ec4:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ecc:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8003eda:	480f      	ldr	r0, [pc, #60]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003edc:	f001 fc65 	bl	80057aa <HAL_DMA_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_ADC_MspInit+0x156>
      Error_Handler();
 8003ee6:	f7ff ff2c 	bl	8003d42 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
 8003ef0:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_ADC_MspInit+0x184>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003ef6:	bf00      	nop
 8003ef8:	3730      	adds	r7, #48	; 0x30
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	50000100 	.word	0x50000100
 8003f04:	40021000 	.word	0x40021000
 8003f08:	20001224 	.word	0x20001224
 8003f0c:	40020408 	.word	0x40020408
 8003f10:	50000500 	.word	0x50000500
 8003f14:	48000400 	.word	0x48000400
 8003f18:	20000f74 	.word	0x20000f74
 8003f1c:	4002041c 	.word	0x4002041c

08003f20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <HAL_RTC_MspInit+0x50>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d119      	bne.n	8003f66 <HAL_RTC_MspInit+0x46>
 8003f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f36:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f40:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RTC_MspInit+0x54>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	461a      	mov	r2, r3
 8003f52:	2301      	movs	r3, #1
 8003f54:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003f56:	2200      	movs	r2, #0
 8003f58:	2100      	movs	r1, #0
 8003f5a:	2029      	movs	r0, #41	; 0x29
 8003f5c:	f001 fbef 	bl	800573e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003f60:	2029      	movs	r0, #41	; 0x29
 8003f62:	f001 fc08 	bl	8005776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40002800 	.word	0x40002800
 8003f74:	10908100 	.word	0x10908100

08003f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a33      	ldr	r2, [pc, #204]	; (8004064 <HAL_UART_MspInit+0xec>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d131      	bne.n	8003ffe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f9a:	4b33      	ldr	r3, [pc, #204]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	4a32      	ldr	r2, [pc, #200]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa4:	61d3      	str	r3, [r2, #28]
 8003fa6:	4b30      	ldr	r3, [pc, #192]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbc:	6153      	str	r3, [r2, #20]
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_RX_Pin|SIM_TX_Pin;
 8003fca:	230c      	movs	r3, #12
 8003fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fda:	2307      	movs	r3, #7
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fe8:	f001 ffe2 	bl	8005fb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003fec:	2200      	movs	r2, #0
 8003fee:	2100      	movs	r1, #0
 8003ff0:	2026      	movs	r0, #38	; 0x26
 8003ff2:	f001 fba4 	bl	800573e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ff6:	2026      	movs	r0, #38	; 0x26
 8003ff8:	f001 fbbd 	bl	8005776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ffc:	e02d      	b.n	800405a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1a      	ldr	r2, [pc, #104]	; (800406c <HAL_UART_MspInit+0xf4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d128      	bne.n	800405a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004008:	4b17      	ldr	r3, [pc, #92]	; (8004068 <HAL_UART_MspInit+0xf0>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4a16      	ldr	r2, [pc, #88]	; (8004068 <HAL_UART_MspInit+0xf0>)
 800400e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004012:	61d3      	str	r3, [r2, #28]
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	4a10      	ldr	r2, [pc, #64]	; (8004068 <HAL_UART_MspInit+0xf0>)
 8004026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402a:	6153      	str	r3, [r2, #20]
 800402c:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <HAL_UART_MspInit+0xf0>)
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 8004038:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800403c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004046:	2303      	movs	r3, #3
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800404a:	2307      	movs	r3, #7
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404e:	f107 031c 	add.w	r3, r7, #28
 8004052:	4619      	mov	r1, r3
 8004054:	4806      	ldr	r0, [pc, #24]	; (8004070 <HAL_UART_MspInit+0xf8>)
 8004056:	f001 ffab 	bl	8005fb0 <HAL_GPIO_Init>
}
 800405a:	bf00      	nop
 800405c:	3730      	adds	r7, #48	; 0x30
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40004400 	.word	0x40004400
 8004068:	40021000 	.word	0x40021000
 800406c:	40004800 	.word	0x40004800
 8004070:	48000400 	.word	0x48000400

08004074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004078:	e7fe      	b.n	8004078 <NMI_Handler+0x4>

0800407a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800407e:	e7fe      	b.n	800407e <HardFault_Handler+0x4>

08004080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <MemManage_Handler+0x4>

08004086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800408a:	e7fe      	b.n	800408a <BusFault_Handler+0x4>

0800408c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004090:	e7fe      	b.n	8004090 <UsageFault_Handler+0x4>

08004092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c0:	f000 f97a 	bl	80043b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80040cc:	2002      	movs	r0, #2
 80040ce:	f002 f919 	bl	8006304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040dc:	4802      	ldr	r0, [pc, #8]	; (80040e8 <USART2_IRQHandler+0x10>)
 80040de:	f004 faf1 	bl	80086c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20001150 	.word	0x20001150

080040ec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <RTC_Alarm_IRQHandler+0x10>)
 80040f2:	f003 fff7 	bl	80080e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	200010fc 	.word	0x200010fc

08004100 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004104:	4802      	ldr	r0, [pc, #8]	; (8004110 <DMA2_Channel1_IRQHandler+0x10>)
 8004106:	f001 fc6d 	bl	80059e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20001224 	.word	0x20001224

08004114 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <DMA2_Channel2_IRQHandler+0x10>)
 800411a:	f001 fc63 	bl	80059e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000f74 	.word	0x20000f74

08004128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
	return 1;
 800412c:	2301      	movs	r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_kill>:

int _kill(int pid, int sig)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004142:	f005 f9d1 	bl	80094e8 <__errno>
 8004146:	4603      	mov	r3, r0
 8004148:	2216      	movs	r2, #22
 800414a:	601a      	str	r2, [r3, #0]
	return -1;
 800414c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_exit>:

void _exit (int status)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004160:	f04f 31ff 	mov.w	r1, #4294967295
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ffe7 	bl	8004138 <_kill>
	while (1) {}		/* Make sure we hang here */
 800416a:	e7fe      	b.n	800416a <_exit+0x12>

0800416c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e00a      	b.n	8004194 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800417e:	f3af 8000 	nop.w
 8004182:	4601      	mov	r1, r0
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	60ba      	str	r2, [r7, #8]
 800418a:	b2ca      	uxtb	r2, r1
 800418c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	dbf0      	blt.n	800417e <_read+0x12>
	}

return len;
 800419c:	687b      	ldr	r3, [r7, #4]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b086      	sub	sp, #24
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e009      	b.n	80041cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	60ba      	str	r2, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3301      	adds	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	dbf1      	blt.n	80041b8 <_write+0x12>
	}
	return len;
 80041d4:	687b      	ldr	r3, [r7, #4]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <_close>:

int _close(int file)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
	return -1;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004206:	605a      	str	r2, [r3, #4]
	return 0;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_isatty>:

int _isatty(int file)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
	return 1;
 800421e:	2301      	movs	r3, #1
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
	return 0;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <_sbrk+0x5c>)
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <_sbrk+0x60>)
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <_sbrk+0x64>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <_sbrk+0x64>)
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <_sbrk+0x68>)
 8004268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <_sbrk+0x64>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d207      	bcs.n	8004288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004278:	f005 f936 	bl	80094e8 <__errno>
 800427c:	4603      	mov	r3, r0
 800427e:	220c      	movs	r2, #12
 8004280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	e009      	b.n	800429c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <_sbrk+0x64>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <_sbrk+0x64>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <_sbrk+0x64>)
 8004298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	2000a000 	.word	0x2000a000
 80042a8:	00000400 	.word	0x00000400
 80042ac:	20000f64 	.word	0x20000f64
 80042b0:	200012a0 	.word	0x200012a0

080042b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <SystemInit+0x20>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <SystemInit+0x20>)
 80042c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004310 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042dc:	480d      	ldr	r0, [pc, #52]	; (8004314 <LoopForever+0x6>)
  ldr r1, =_edata
 80042de:	490e      	ldr	r1, [pc, #56]	; (8004318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042e0:	4a0e      	ldr	r2, [pc, #56]	; (800431c <LoopForever+0xe>)
  movs r3, #0
 80042e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042e4:	e002      	b.n	80042ec <LoopCopyDataInit>

080042e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ea:	3304      	adds	r3, #4

080042ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f0:	d3f9      	bcc.n	80042e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042f4:	4c0b      	ldr	r4, [pc, #44]	; (8004324 <LoopForever+0x16>)
  movs r3, #0
 80042f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f8:	e001      	b.n	80042fe <LoopFillZerobss>

080042fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042fc:	3204      	adds	r2, #4

080042fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004300:	d3fb      	bcc.n	80042fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004302:	f7ff ffd7 	bl	80042b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004306:	f005 f8f5 	bl	80094f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800430a:	f7fd fb65 	bl	80019d8 <main>

0800430e <LoopForever>:

LoopForever:
    b LoopForever
 800430e:	e7fe      	b.n	800430e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004310:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004318:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 800431c:	0800afe8 	.word	0x0800afe8
  ldr r2, =_sbss
 8004320:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8004324:	200012a0 	.word	0x200012a0

08004328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC1_2_IRQHandler>
	...

0800432c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004330:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_Init+0x28>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a07      	ldr	r2, [pc, #28]	; (8004354 <HAL_Init+0x28>)
 8004336:	f043 0310 	orr.w	r3, r3, #16
 800433a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800433c:	2003      	movs	r0, #3
 800433e:	f001 f9f3 	bl	8005728 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004342:	2000      	movs	r0, #0
 8004344:	f000 f808 	bl	8004358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004348:	f7ff fd00 	bl	8003d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000

08004358 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_InitTick+0x54>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_InitTick+0x58>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	4619      	mov	r1, r3
 800436a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800436e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fa0b 	bl	8005792 <HAL_SYSTICK_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e00e      	b.n	80043a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b0f      	cmp	r3, #15
 800438a:	d80a      	bhi.n	80043a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800438c:	2200      	movs	r2, #0
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	f001 f9d3 	bl	800573e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004398:	4a06      	ldr	r2, [pc, #24]	; (80043b4 <HAL_InitTick+0x5c>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000104 	.word	0x20000104
 80043b0:	2000010c 	.word	0x2000010c
 80043b4:	20000108 	.word	0x20000108

080043b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_IncTick+0x20>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_IncTick+0x24>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_IncTick+0x24>)
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	2000010c 	.word	0x2000010c
 80043dc:	20001268 	.word	0x20001268

080043e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_GetTick+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20001268 	.word	0x20001268

080043f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004400:	f7ff ffee 	bl	80043e0 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d005      	beq.n	800441e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_Delay+0x44>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800441e:	bf00      	nop
 8004420:	f7ff ffde 	bl	80043e0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d8f7      	bhi.n	8004420 <HAL_Delay+0x28>
  {
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	2000010c 	.word	0x2000010c

08004440 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b09a      	sub	sp, #104	; 0x68
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e1c9      	b.n	8004830 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d176      	bne.n	800459c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d152      	bne.n	800455c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fc5f 	bl	8003d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d13b      	bne.n	800455c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 ff41 	bl	800536c <ADC_Disable>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d12f      	bne.n	800455c <HAL_ADC_Init+0xe0>
 80044fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004500:	2b00      	cmp	r3, #0
 8004502:	d12b      	bne.n	800455c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800450c:	f023 0302 	bic.w	r3, r3, #2
 8004510:	f043 0202 	orr.w	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004526:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004536:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004538:	4b86      	ldr	r3, [pc, #536]	; (8004754 <HAL_ADC_Init+0x2d8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a86      	ldr	r2, [pc, #536]	; (8004758 <HAL_ADC_Init+0x2dc>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	0c9a      	lsrs	r2, r3, #18
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800454e:	e002      	b.n	8004556 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3b01      	subs	r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f9      	bne.n	8004550 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004578:	d110      	bne.n	800459c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f023 0312 	bic.w	r3, r3, #18
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f040 8136 	bne.w	8004816 <HAL_ADC_Init+0x39a>
 80045aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8131 	bne.w	8004816 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f040 8129 	bne.w	8004816 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045cc:	f043 0202 	orr.w	r2, r3, #2
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045dc:	d004      	beq.n	80045e8 <HAL_ADC_Init+0x16c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a5e      	ldr	r2, [pc, #376]	; (800475c <HAL_ADC_Init+0x2e0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_Init+0x170>
 80045e8:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_ADC_Init+0x2e4>)
 80045ea:	e000      	b.n	80045ee <HAL_ADC_Init+0x172>
 80045ec:	4b5d      	ldr	r3, [pc, #372]	; (8004764 <HAL_ADC_Init+0x2e8>)
 80045ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f8:	d102      	bne.n	8004600 <HAL_ADC_Init+0x184>
 80045fa:	4b58      	ldr	r3, [pc, #352]	; (800475c <HAL_ADC_Init+0x2e0>)
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e01a      	b.n	8004636 <HAL_ADC_Init+0x1ba>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a55      	ldr	r2, [pc, #340]	; (800475c <HAL_ADC_Init+0x2e0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d103      	bne.n	8004612 <HAL_ADC_Init+0x196>
 800460a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e011      	b.n	8004636 <HAL_ADC_Init+0x1ba>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a54      	ldr	r2, [pc, #336]	; (8004768 <HAL_ADC_Init+0x2ec>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d102      	bne.n	8004622 <HAL_ADC_Init+0x1a6>
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_ADC_Init+0x2f0>)
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e009      	b.n	8004636 <HAL_ADC_Init+0x1ba>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a51      	ldr	r2, [pc, #324]	; (800476c <HAL_ADC_Init+0x2f0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d102      	bne.n	8004632 <HAL_ADC_Init+0x1b6>
 800462c:	4b4e      	ldr	r3, [pc, #312]	; (8004768 <HAL_ADC_Init+0x2ec>)
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e001      	b.n	8004636 <HAL_ADC_Init+0x1ba>
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d108      	bne.n	8004656 <HAL_ADC_Init+0x1da>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_ADC_Init+0x1da>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_ADC_Init+0x1dc>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11c      	bne.n	8004696 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800465c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <HAL_ADC_Init+0x202>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_ADC_Init+0x202>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_ADC_Init+0x204>
 800467e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	431a      	orrs	r2, r3
 8004692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004694:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7e5b      	ldrb	r3, [r3, #25]
 800469a:	035b      	lsls	r3, r3, #13
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046a0:	2a01      	cmp	r2, #1
 80046a2:	d002      	beq.n	80046aa <HAL_ADC_Init+0x22e>
 80046a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046a8:	e000      	b.n	80046ac <HAL_ADC_Init+0x230>
 80046aa:	2200      	movs	r2, #0
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046bc:	4313      	orrs	r3, r2
 80046be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d11b      	bne.n	8004702 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	7e5b      	ldrb	r3, [r3, #25]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	3b01      	subs	r3, #1
 80046d8:	045a      	lsls	r2, r3, #17
 80046da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046dc:	4313      	orrs	r3, r2
 80046de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e2:	663b      	str	r3, [r7, #96]	; 0x60
 80046e4:	e00d      	b.n	8004702 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	f043 0201 	orr.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	2b01      	cmp	r3, #1
 8004708:	d03a      	beq.n	8004780 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a16      	ldr	r2, [pc, #88]	; (8004768 <HAL_ADC_Init+0x2ec>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_ADC_Init+0x2a2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a14      	ldr	r2, [pc, #80]	; (800476c <HAL_ADC_Init+0x2f0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d128      	bne.n	8004770 <HAL_ADC_Init+0x2f4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004726:	d012      	beq.n	800474e <HAL_ADC_Init+0x2d2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004730:	d00a      	beq.n	8004748 <HAL_ADC_Init+0x2cc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800473a:	d002      	beq.n	8004742 <HAL_ADC_Init+0x2c6>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	e018      	b.n	8004774 <HAL_ADC_Init+0x2f8>
 8004742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004746:	e015      	b.n	8004774 <HAL_ADC_Init+0x2f8>
 8004748:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800474c:	e012      	b.n	8004774 <HAL_ADC_Init+0x2f8>
 800474e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004752:	e00f      	b.n	8004774 <HAL_ADC_Init+0x2f8>
 8004754:	20000104 	.word	0x20000104
 8004758:	431bde83 	.word	0x431bde83
 800475c:	50000100 	.word	0x50000100
 8004760:	50000300 	.word	0x50000300
 8004764:	50000700 	.word	0x50000700
 8004768:	50000400 	.word	0x50000400
 800476c:	50000500 	.word	0x50000500
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004778:	4313      	orrs	r3, r2
 800477a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800477c:	4313      	orrs	r3, r2
 800477e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b00      	cmp	r3, #0
 800478c:	d114      	bne.n	80047b8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479c:	f023 0302 	bic.w	r3, r3, #2
 80047a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	7e1b      	ldrb	r3, [r3, #24]
 80047a6:	039a      	lsls	r2, r3, #14
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047b4:	4313      	orrs	r3, r2
 80047b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <HAL_ADC_Init+0x3bc>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047c8:	430b      	orrs	r3, r1
 80047ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10c      	bne.n	80047ee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f023 010f 	bic.w	r1, r3, #15
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	1e5a      	subs	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
 80047ec:	e007      	b.n	80047fe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 020f 	bic.w	r2, r2, #15
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f023 0303 	bic.w	r3, r3, #3
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
 8004814:	e00a      	b.n	800482c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f023 0312 	bic.w	r3, r3, #18
 800481e:	f043 0210 	orr.w	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004826:	2301      	movs	r3, #1
 8004828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800482c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004830:	4618      	mov	r0, r3
 8004832:	3768      	adds	r7, #104	; 0x68
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	fff0c007 	.word	0xfff0c007

0800483c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 80f7 	bne.w	8004a4a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_ADC_Start_DMA+0x2e>
 8004866:	2302      	movs	r3, #2
 8004868:	e0f2      	b.n	8004a50 <HAL_ADC_Start_DMA+0x214>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800487a:	d004      	beq.n	8004886 <HAL_ADC_Start_DMA+0x4a>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a75      	ldr	r2, [pc, #468]	; (8004a58 <HAL_ADC_Start_DMA+0x21c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d109      	bne.n	800489a <HAL_ADC_Start_DMA+0x5e>
 8004886:	4b75      	ldr	r3, [pc, #468]	; (8004a5c <HAL_ADC_Start_DMA+0x220>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e008      	b.n	80048ac <HAL_ADC_Start_DMA+0x70>
 800489a:	4b71      	ldr	r3, [pc, #452]	; (8004a60 <HAL_ADC_Start_DMA+0x224>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80c5 	beq.w	8004a3c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fcfc 	bl	80052b0 <ADC_Enable>
 80048b8:	4603      	mov	r3, r0
 80048ba:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 80b7 	bne.w	8004a32 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048e0:	d004      	beq.n	80048ec <HAL_ADC_Start_DMA+0xb0>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a5c      	ldr	r2, [pc, #368]	; (8004a58 <HAL_ADC_Start_DMA+0x21c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d106      	bne.n	80048fa <HAL_ADC_Start_DMA+0xbe>
 80048ec:	4b5b      	ldr	r3, [pc, #364]	; (8004a5c <HAL_ADC_Start_DMA+0x220>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <HAL_ADC_Start_DMA+0xde>
 80048f8:	e005      	b.n	8004906 <HAL_ADC_Start_DMA+0xca>
 80048fa:	4b59      	ldr	r3, [pc, #356]	; (8004a60 <HAL_ADC_Start_DMA+0x224>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_ADC_Start_DMA+0xde>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800490e:	d004      	beq.n	800491a <HAL_ADC_Start_DMA+0xde>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a53      	ldr	r2, [pc, #332]	; (8004a64 <HAL_ADC_Start_DMA+0x228>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d115      	bne.n	8004946 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d036      	beq.n	80049a2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800493c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004944:	e02d      	b.n	80049a2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800495a:	d004      	beq.n	8004966 <HAL_ADC_Start_DMA+0x12a>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a3d      	ldr	r2, [pc, #244]	; (8004a58 <HAL_ADC_Start_DMA+0x21c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10a      	bne.n	800497c <HAL_ADC_Start_DMA+0x140>
 8004966:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e008      	b.n	800498e <HAL_ADC_Start_DMA+0x152>
 800497c:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <HAL_ADC_Start_DMA+0x228>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800499a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	d106      	bne.n	80049be <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f023 0206 	bic.w	r2, r3, #6
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
 80049bc:	e002      	b.n	80049c4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <HAL_ADC_Start_DMA+0x22c>)
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_ADC_Start_DMA+0x230>)
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_ADC_Start_DMA+0x234>)
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	221c      	movs	r2, #28
 80049ea:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0210 	orr.w	r2, r2, #16
 80049fa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3340      	adds	r3, #64	; 0x40
 8004a16:	4619      	mov	r1, r3
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f000 ff0c 	bl	8005838 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0204 	orr.w	r2, r2, #4
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	e00d      	b.n	8004a4e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a3a:	e008      	b.n	8004a4e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a48:	e001      	b.n	8004a4e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	50000100 	.word	0x50000100
 8004a5c:	50000300 	.word	0x50000300
 8004a60:	50000700 	.word	0x50000700
 8004a64:	50000400 	.word	0x50000400
 8004a68:	080051e5 	.word	0x080051e5
 8004a6c:	0800525f 	.word	0x0800525f
 8004a70:	0800527b 	.word	0x0800527b

08004a74 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_ADC_Stop_DMA+0x1a>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e050      	b.n	8004b30 <HAL_ADC_Stop_DMA+0xbc>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004a96:	216c      	movs	r1, #108	; 0x6c
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fcc7 	bl	800542c <ADC_ConversionStop>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d13e      	bne.n	8004b26 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 ff14 	bl	80058f6 <HAL_DMA_Abort>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0210 	bic.w	r2, r2, #16
 8004af2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fc36 	bl	800536c <ADC_Disable>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e002      	b.n	8004b0c <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fc30 	bl	800536c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	f043 0201 	orr.w	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADCEx_Calibration_Start+0x1c>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e057      	b.n	8004c04 <HAL_ADCEx_Calibration_Start+0xcc>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fc05 	bl	800536c <ADC_Disable>
 8004b62:	4603      	mov	r3, r0
 8004b64:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d146      	bne.n	8004bfa <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004b80:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b96:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ba6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004ba8:	f7ff fc1a 	bl	80043e0 <HAL_GetTick>
 8004bac:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bae:	e014      	b.n	8004bda <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004bb0:	f7ff fc16 	bl	80043e0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b0a      	cmp	r3, #10
 8004bbc:	d90d      	bls.n	8004bda <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f023 0312 	bic.w	r3, r3, #18
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e014      	b.n	8004c04 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be8:	d0e2      	beq.n	8004bb0 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	f043 0201 	orr.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b09b      	sub	sp, #108	; 0x6c
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x22>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e2cb      	b.n	80051c6 <HAL_ADC_ConfigChannel+0x5ba>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f040 82af 	bne.w	80051a4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d81c      	bhi.n	8004c88 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	461a      	mov	r2, r3
 8004c62:	231f      	movs	r3, #31
 8004c64:	4093      	lsls	r3, r2
 8004c66:	43db      	mvns	r3, r3
 8004c68:	4019      	ands	r1, r3
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
 8004c86:	e063      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b09      	cmp	r3, #9
 8004c8e:	d81e      	bhi.n	8004cce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	4413      	add	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	3b1e      	subs	r3, #30
 8004ca4:	221f      	movs	r2, #31
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	4019      	ands	r1, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	3b1e      	subs	r3, #30
 8004cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	635a      	str	r2, [r3, #52]	; 0x34
 8004ccc:	e040      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b0e      	cmp	r3, #14
 8004cd4:	d81e      	bhi.n	8004d14 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	3b3c      	subs	r3, #60	; 0x3c
 8004cea:	221f      	movs	r2, #31
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	4019      	ands	r1, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	3b3c      	subs	r3, #60	; 0x3c
 8004d06:	fa00 f203 	lsl.w	r2, r0, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
 8004d12:	e01d      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	3b5a      	subs	r3, #90	; 0x5a
 8004d28:	221f      	movs	r2, #31
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	4019      	ands	r1, r3
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	4413      	add	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	3b5a      	subs	r3, #90	; 0x5a
 8004d44:	fa00 f203 	lsl.w	r2, r0, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 80e5 	bne.w	8004f2a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b09      	cmp	r3, #9
 8004d66:	d91c      	bls.n	8004da2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	3b1e      	subs	r3, #30
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	4019      	ands	r1, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6898      	ldr	r0, [r3, #8]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	3b1e      	subs	r3, #30
 8004d94:	fa00 f203 	lsl.w	r2, r0, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	619a      	str	r2, [r3, #24]
 8004da0:	e019      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6959      	ldr	r1, [r3, #20]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4413      	add	r3, r2
 8004db2:	2207      	movs	r2, #7
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	4019      	ands	r1, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	6898      	ldr	r0, [r3, #8]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	fa00 f203 	lsl.w	r2, r0, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	08db      	lsrs	r3, r3, #3
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d84f      	bhi.n	8004e98 <HAL_ADC_ConfigChannel+0x28c>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <HAL_ADC_ConfigChannel+0x1f4>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e33 	.word	0x08004e33
 8004e08:	08004e55 	.word	0x08004e55
 8004e0c:	08004e77 	.word	0x08004e77
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e16:	4b9f      	ldr	r3, [pc, #636]	; (8005094 <HAL_ADC_ConfigChannel+0x488>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	0691      	lsls	r1, r2, #26
 8004e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e22:	430a      	orrs	r2, r1
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e30:	e07e      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e38:	4b96      	ldr	r3, [pc, #600]	; (8005094 <HAL_ADC_ConfigChannel+0x488>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	0691      	lsls	r1, r2, #26
 8004e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e44:	430a      	orrs	r2, r1
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e50:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e52:	e06d      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e5a:	4b8e      	ldr	r3, [pc, #568]	; (8005094 <HAL_ADC_ConfigChannel+0x488>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	0691      	lsls	r1, r2, #26
 8004e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e66:	430a      	orrs	r2, r1
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e72:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e74:	e05c      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e7c:	4b85      	ldr	r3, [pc, #532]	; (8005094 <HAL_ADC_ConfigChannel+0x488>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	0691      	lsls	r1, r2, #26
 8004e86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e94:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e96:	e04b      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	069b      	lsls	r3, r3, #26
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d107      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004eba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	069b      	lsls	r3, r3, #26
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d107      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ede:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	069b      	lsls	r3, r3, #26
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d107      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f02:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	069b      	lsls	r3, r3, #26
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d10a      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f26:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004f28:	e001      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004f2a:	bf00      	nop
 8004f2c:	e000      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004f2e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d108      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x344>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x344>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x346>
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 8131 	bne.w	80051ba <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d00f      	beq.n	8004f80 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43da      	mvns	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	400a      	ands	r2, r1
 8004f7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004f7e:	e049      	b.n	8005014 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b09      	cmp	r3, #9
 8004fa0:	d91c      	bls.n	8004fdc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6999      	ldr	r1, [r3, #24]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3b1b      	subs	r3, #27
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	4019      	ands	r1, r3
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6898      	ldr	r0, [r3, #8]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	3b1b      	subs	r3, #27
 8004fce:	fa00 f203 	lsl.w	r2, r0, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	619a      	str	r2, [r3, #24]
 8004fda:	e01b      	b.n	8005014 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6959      	ldr	r1, [r3, #20]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	2207      	movs	r2, #7
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	4019      	ands	r1, r3
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6898      	ldr	r0, [r3, #8]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	fa00 f203 	lsl.w	r2, r0, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800501c:	d004      	beq.n	8005028 <HAL_ADC_ConfigChannel+0x41c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <HAL_ADC_ConfigChannel+0x48c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <HAL_ADC_ConfigChannel+0x420>
 8005028:	4b1c      	ldr	r3, [pc, #112]	; (800509c <HAL_ADC_ConfigChannel+0x490>)
 800502a:	e000      	b.n	800502e <HAL_ADC_ConfigChannel+0x422>
 800502c:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <HAL_ADC_ConfigChannel+0x494>)
 800502e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b10      	cmp	r3, #16
 8005036:	d105      	bne.n	8005044 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005040:	2b00      	cmp	r3, #0
 8005042:	d015      	beq.n	8005070 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005048:	2b11      	cmp	r3, #17
 800504a:	d105      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800504c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800505c:	2b12      	cmp	r3, #18
 800505e:	f040 80ac 	bne.w	80051ba <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 80a5 	bne.w	80051ba <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005078:	d102      	bne.n	8005080 <HAL_ADC_ConfigChannel+0x474>
 800507a:	4b07      	ldr	r3, [pc, #28]	; (8005098 <HAL_ADC_ConfigChannel+0x48c>)
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e023      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x4bc>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a04      	ldr	r2, [pc, #16]	; (8005098 <HAL_ADC_ConfigChannel+0x48c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10c      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x498>
 800508a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e01a      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x4bc>
 8005092:	bf00      	nop
 8005094:	83fff000 	.word	0x83fff000
 8005098:	50000100 	.word	0x50000100
 800509c:	50000300 	.word	0x50000300
 80050a0:	50000700 	.word	0x50000700
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a4a      	ldr	r2, [pc, #296]	; (80051d4 <HAL_ADC_ConfigChannel+0x5c8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d102      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x4a8>
 80050ae:	4b4a      	ldr	r3, [pc, #296]	; (80051d8 <HAL_ADC_ConfigChannel+0x5cc>)
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	e009      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x4bc>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a47      	ldr	r2, [pc, #284]	; (80051d8 <HAL_ADC_ConfigChannel+0x5cc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d102      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x4b8>
 80050be:	4b45      	ldr	r3, [pc, #276]	; (80051d4 <HAL_ADC_ConfigChannel+0x5c8>)
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e001      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x4bc>
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d108      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x4dc>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x4dc>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_ADC_ConfigChannel+0x4de>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d150      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d010      	beq.n	8005116 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d107      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x504>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x504>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_ADC_ConfigChannel+0x506>
 8005110:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005112:	2b00      	cmp	r3, #0
 8005114:	d13c      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b10      	cmp	r3, #16
 800511c:	d11d      	bne.n	800515a <HAL_ADC_ConfigChannel+0x54e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005126:	d118      	bne.n	800515a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005132:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005134:	4b29      	ldr	r3, [pc, #164]	; (80051dc <HAL_ADC_ConfigChannel+0x5d0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a29      	ldr	r2, [pc, #164]	; (80051e0 <HAL_ADC_ConfigChannel+0x5d4>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	0c9a      	lsrs	r2, r3, #18
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800514a:	e002      	b.n	8005152 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3b01      	subs	r3, #1
 8005150:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f9      	bne.n	800514c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005158:	e02e      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b11      	cmp	r3, #17
 8005160:	d10b      	bne.n	800517a <HAL_ADC_ConfigChannel+0x56e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800516a:	d106      	bne.n	800517a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800516c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005176:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005178:	e01e      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b12      	cmp	r3, #18
 8005180:	d11a      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800518a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800518e:	e013      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	f043 0220 	orr.w	r2, r3, #32
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80051a2:	e00a      	b.n	80051ba <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80051b6:	e000      	b.n	80051ba <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80051b8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80051c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	376c      	adds	r7, #108	; 0x6c
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	50000400 	.word	0x50000400
 80051d8:	50000500 	.word	0x50000500
 80051dc:	20000104 	.word	0x20000104
 80051e0:	431bde83 	.word	0x431bde83

080051e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d126      	bne.n	800524c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005214:	2b00      	cmp	r3, #0
 8005216:	d115      	bne.n	8005244 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800521c:	2b00      	cmp	r3, #0
 800521e:	d111      	bne.n	8005244 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f043 0201 	orr.w	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff f8fb 	bl	8004440 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800524a:	e004      	b.n	8005256 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff f8f1 	bl	8004454 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005298:	f043 0204 	orr.w	r2, r3, #4
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff f8e1 	bl	8004468 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d108      	bne.n	80052dc <ADC_Enable+0x2c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <ADC_Enable+0x2c>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <ADC_Enable+0x2e>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d13c      	bne.n	800535c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	4b1f      	ldr	r3, [pc, #124]	; (8005368 <ADC_Enable+0xb8>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f043 0210 	orr.w	r2, r3, #16
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e028      	b.n	800535e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800531c:	f7ff f860 	bl	80043e0 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005322:	e014      	b.n	800534e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005324:	f7ff f85c 	bl	80043e0 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d90d      	bls.n	800534e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0210 	orr.w	r2, r3, #16
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	f043 0201 	orr.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e007      	b.n	800535e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d1e3      	bne.n	8005324 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	8000003f 	.word	0x8000003f

0800536c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d108      	bne.n	8005398 <ADC_Disable+0x2c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <ADC_Disable+0x2c>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <ADC_Disable+0x2e>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d040      	beq.n	8005420 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 030d 	and.w	r3, r3, #13
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10f      	bne.n	80053cc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0202 	orr.w	r2, r2, #2
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2203      	movs	r2, #3
 80053c2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80053c4:	f7ff f80c 	bl	80043e0 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80053ca:	e022      	b.n	8005412 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f043 0210 	orr.w	r2, r3, #16
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	f043 0201 	orr.w	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e01c      	b.n	8005422 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053e8:	f7fe fffa 	bl	80043e0 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d90d      	bls.n	8005412 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f043 0210 	orr.w	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	f043 0201 	orr.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e007      	b.n	8005422 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b01      	cmp	r3, #1
 800541e:	d0e3      	beq.n	80053e8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 030c 	and.w	r3, r3, #12
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8094 	beq.w	800557a <ADC_ConversionStop+0x14e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005460:	d12a      	bne.n	80054b8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005466:	2b01      	cmp	r3, #1
 8005468:	d126      	bne.n	80054b8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800546e:	2b01      	cmp	r3, #1
 8005470:	d122      	bne.n	80054b8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8005472:	230c      	movs	r3, #12
 8005474:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005476:	e014      	b.n	80054a2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4a42      	ldr	r2, [pc, #264]	; (8005584 <ADC_ConversionStop+0x158>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d90d      	bls.n	800549c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	f043 0210 	orr.w	r2, r3, #16
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005490:	f043 0201 	orr.w	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e06f      	b.n	800557c <ADC_ConversionStop+0x150>
        }
        Conversion_Timeout_CPU_cycles ++;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3301      	adds	r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d1e3      	bne.n	8005478 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2240      	movs	r2, #64	; 0x40
 80054b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b60      	cmp	r3, #96	; 0x60
 80054bc:	d015      	beq.n	80054ea <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d10e      	bne.n	80054ea <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d107      	bne.n	80054ea <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0210 	orr.w	r2, r2, #16
 80054e8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	d015      	beq.n	800551c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d10e      	bne.n	800551c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005508:	2b00      	cmp	r3, #0
 800550a:	d107      	bne.n	800551c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0220 	orr.w	r2, r2, #32
 800551a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b60      	cmp	r3, #96	; 0x60
 8005520:	d005      	beq.n	800552e <ADC_ConversionStop+0x102>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b6c      	cmp	r3, #108	; 0x6c
 8005526:	d105      	bne.n	8005534 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005528:	230c      	movs	r3, #12
 800552a:	617b      	str	r3, [r7, #20]
        break;
 800552c:	e005      	b.n	800553a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800552e:	2308      	movs	r3, #8
 8005530:	617b      	str	r3, [r7, #20]
        break;
 8005532:	e002      	b.n	800553a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005534:	2304      	movs	r3, #4
 8005536:	617b      	str	r3, [r7, #20]
        break;
 8005538:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800553a:	f7fe ff51 	bl	80043e0 <HAL_GetTick>
 800553e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005540:	e014      	b.n	800556c <ADC_ConversionStop+0x140>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005542:	f7fe ff4d 	bl	80043e0 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b0b      	cmp	r3, #11
 800554e:	d90d      	bls.n	800556c <ADC_ConversionStop+0x140>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	f043 0210 	orr.w	r2, r3, #16
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	f043 0201 	orr.w	r2, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e007      	b.n	800557c <ADC_ConversionStop+0x150>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e3      	bne.n	8005542 <ADC_ConversionStop+0x116>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	000993ff 	.word	0x000993ff

08005588 <__NVIC_SetPriorityGrouping>:
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <__NVIC_SetPriorityGrouping+0x44>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055a4:	4013      	ands	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055ba:	4a04      	ldr	r2, [pc, #16]	; (80055cc <__NVIC_SetPriorityGrouping+0x44>)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	60d3      	str	r3, [r2, #12]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	e000ed00 	.word	0xe000ed00

080055d0 <__NVIC_GetPriorityGrouping>:
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <__NVIC_GetPriorityGrouping+0x18>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	f003 0307 	and.w	r3, r3, #7
}
 80055de:	4618      	mov	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <__NVIC_EnableIRQ>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	db0b      	blt.n	8005616 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	f003 021f 	and.w	r2, r3, #31
 8005604:	4907      	ldr	r1, [pc, #28]	; (8005624 <__NVIC_EnableIRQ+0x38>)
 8005606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2001      	movs	r0, #1
 800560e:	fa00 f202 	lsl.w	r2, r0, r2
 8005612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	e000e100 	.word	0xe000e100

08005628 <__NVIC_SetPriority>:
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	6039      	str	r1, [r7, #0]
 8005632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005638:	2b00      	cmp	r3, #0
 800563a:	db0a      	blt.n	8005652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	b2da      	uxtb	r2, r3
 8005640:	490c      	ldr	r1, [pc, #48]	; (8005674 <__NVIC_SetPriority+0x4c>)
 8005642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005646:	0112      	lsls	r2, r2, #4
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	440b      	add	r3, r1
 800564c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005650:	e00a      	b.n	8005668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	4908      	ldr	r1, [pc, #32]	; (8005678 <__NVIC_SetPriority+0x50>)
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	3b04      	subs	r3, #4
 8005660:	0112      	lsls	r2, r2, #4
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	440b      	add	r3, r1
 8005666:	761a      	strb	r2, [r3, #24]
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	e000e100 	.word	0xe000e100
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <NVIC_EncodePriority>:
{
 800567c:	b480      	push	{r7}
 800567e:	b089      	sub	sp, #36	; 0x24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f1c3 0307 	rsb	r3, r3, #7
 8005696:	2b04      	cmp	r3, #4
 8005698:	bf28      	it	cs
 800569a:	2304      	movcs	r3, #4
 800569c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3304      	adds	r3, #4
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d902      	bls.n	80056ac <NVIC_EncodePriority+0x30>
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3b03      	subs	r3, #3
 80056aa:	e000      	b.n	80056ae <NVIC_EncodePriority+0x32>
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b0:	f04f 32ff 	mov.w	r2, #4294967295
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43da      	mvns	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	401a      	ands	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056c4:	f04f 31ff 	mov.w	r1, #4294967295
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fa01 f303 	lsl.w	r3, r1, r3
 80056ce:	43d9      	mvns	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d4:	4313      	orrs	r3, r2
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3724      	adds	r7, #36	; 0x24
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056f4:	d301      	bcc.n	80056fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056f6:	2301      	movs	r3, #1
 80056f8:	e00f      	b.n	800571a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056fa:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <SysTick_Config+0x40>)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3b01      	subs	r3, #1
 8005700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005702:	210f      	movs	r1, #15
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	f7ff ff8e 	bl	8005628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <SysTick_Config+0x40>)
 800570e:	2200      	movs	r2, #0
 8005710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005712:	4b04      	ldr	r3, [pc, #16]	; (8005724 <SysTick_Config+0x40>)
 8005714:	2207      	movs	r2, #7
 8005716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	e000e010 	.word	0xe000e010

08005728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ff29 	bl	8005588 <__NVIC_SetPriorityGrouping>
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	af00      	add	r7, sp, #0
 8005744:	4603      	mov	r3, r0
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005750:	f7ff ff3e 	bl	80055d0 <__NVIC_GetPriorityGrouping>
 8005754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	6978      	ldr	r0, [r7, #20]
 800575c:	f7ff ff8e 	bl	800567c <NVIC_EncodePriority>
 8005760:	4602      	mov	r2, r0
 8005762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff ff5d 	bl	8005628 <__NVIC_SetPriority>
}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	4603      	mov	r3, r0
 800577e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ff31 	bl	80055ec <__NVIC_EnableIRQ>
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff ffa2 	bl	80056e4 <SysTick_Config>
 80057a0:	4603      	mov	r3, r0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e037      	b.n	8005830 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80057da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80057e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9b8 	bl	8005b88 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}  
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_DMA_Start_IT+0x20>
 8005854:	2302      	movs	r3, #2
 8005856:	e04a      	b.n	80058ee <HAL_DMA_Start_IT+0xb6>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005866:	2b01      	cmp	r3, #1
 8005868:	d13a      	bne.n	80058e0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f94b 	bl	8005b2a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d008      	beq.n	80058ae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 020e 	orr.w	r2, r2, #14
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	e00f      	b.n	80058ce <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 020a 	orr.w	r2, r2, #10
 80058bc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0204 	bic.w	r2, r2, #4
 80058cc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e005      	b.n	80058ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
 80058ea:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
} 
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005904:	2b02      	cmp	r3, #2
 8005906:	d008      	beq.n	800591a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2204      	movs	r2, #4
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e020      	b.n	800595c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 020e 	bic.w	r2, r2, #14
 8005928:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f202 	lsl.w	r2, r1, r2
 8005948:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800597a:	2b02      	cmp	r3, #2
 800597c:	d005      	beq.n	800598a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2204      	movs	r2, #4
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	e027      	b.n	80059da <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 020e 	bic.w	r2, r2, #14
 8005998:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	2101      	movs	r1, #1
 80059b4:	fa01 f202 	lsl.w	r2, r1, r2
 80059b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
    } 
  }
  return status;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	2204      	movs	r2, #4
 8005a02:	409a      	lsls	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d024      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x72>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01f      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d107      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0204 	bic.w	r2, r2, #4
 8005a32:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a42:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d06a      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005a54:	e065      	b.n	8005b22 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02c      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0xdc>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d027      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 020a 	bic.w	r2, r2, #10
 8005a8c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d035      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005abe:	e030      	b.n	8005b22 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	409a      	lsls	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d028      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x13e>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d023      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 020e 	bic.w	r2, r2, #14
 8005ae8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	2101      	movs	r1, #1
 8005af4:	fa01 f202 	lsl.w	r2, r1, r2
 8005af8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
    }
  }
}  
 8005b20:	e7ff      	b.n	8005b22 <HAL_DMA_IRQHandler+0x13e>
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f202 	lsl.w	r2, r1, r2
 8005b46:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d108      	bne.n	8005b6a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b68:	e007      	b.n	8005b7a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	60da      	str	r2, [r3, #12]
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <DMA_CalcBaseAndBitshift+0x60>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d80f      	bhi.n	8005bbc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <DMA_CalcBaseAndBitshift+0x64>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4a12      	ldr	r2, [pc, #72]	; (8005bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	009a      	lsls	r2, r3, #2
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a0f      	ldr	r2, [pc, #60]	; (8005bf4 <DMA_CalcBaseAndBitshift+0x6c>)
 8005bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005bba:	e00e      	b.n	8005bda <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <DMA_CalcBaseAndBitshift+0x70>)
 8005bc4:	4413      	add	r3, r2
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <DMA_CalcBaseAndBitshift+0x74>)
 8005bd8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40020407 	.word	0x40020407
 8005bec:	bffdfff8 	.word	0xbffdfff8
 8005bf0:	cccccccd 	.word	0xcccccccd
 8005bf4:	40020000 	.word	0x40020000
 8005bf8:	bffdfbf8 	.word	0xbffdfbf8
 8005bfc:	40020400 	.word	0x40020400

08005c00 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <HAL_FLASH_Program+0xd8>)
 8005c1c:	7e1b      	ldrb	r3, [r3, #24]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_FLASH_Program+0x26>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e054      	b.n	8005cd0 <HAL_FLASH_Program+0xd0>
 8005c26:	4b2c      	ldr	r3, [pc, #176]	; (8005cd8 <HAL_FLASH_Program+0xd8>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c30:	f000 f8a8 	bl	8005d84 <FLASH_WaitForLastOperation>
 8005c34:	4603      	mov	r3, r0
 8005c36:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d144      	bne.n	8005cc8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d102      	bne.n	8005c4a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005c44:	2301      	movs	r3, #1
 8005c46:	757b      	strb	r3, [r7, #21]
 8005c48:	e007      	b.n	8005c5a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d102      	bne.n	8005c56 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005c50:	2302      	movs	r3, #2
 8005c52:	757b      	strb	r3, [r7, #21]
 8005c54:	e001      	b.n	8005c5a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005c56:	2304      	movs	r3, #4
 8005c58:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	75bb      	strb	r3, [r7, #22]
 8005c5e:	e02d      	b.n	8005cbc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005c60:	7dbb      	ldrb	r3, [r7, #22]
 8005c62:	005a      	lsls	r2, r3, #1
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	eb02 0c03 	add.w	ip, r2, r3
 8005c6a:	7dbb      	ldrb	r3, [r7, #22]
 8005c6c:	0119      	lsls	r1, r3, #4
 8005c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c72:	f1c1 0620 	rsb	r6, r1, #32
 8005c76:	f1a1 0020 	sub.w	r0, r1, #32
 8005c7a:	fa22 f401 	lsr.w	r4, r2, r1
 8005c7e:	fa03 f606 	lsl.w	r6, r3, r6
 8005c82:	4334      	orrs	r4, r6
 8005c84:	fa23 f000 	lsr.w	r0, r3, r0
 8005c88:	4304      	orrs	r4, r0
 8005c8a:	fa23 f501 	lsr.w	r5, r3, r1
 8005c8e:	b2a3      	uxth	r3, r4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4660      	mov	r0, ip
 8005c94:	f000 f85a 	bl	8005d4c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c9c:	f000 f872 	bl	8005d84 <FLASH_WaitForLastOperation>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <HAL_FLASH_Program+0xdc>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <HAL_FLASH_Program+0xdc>)
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d107      	bne.n	8005cc6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005cb6:	7dbb      	ldrb	r3, [r7, #22]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	75bb      	strb	r3, [r7, #22]
 8005cbc:	7dba      	ldrb	r2, [r7, #22]
 8005cbe:	7d7b      	ldrb	r3, [r7, #21]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d3cd      	bcc.n	8005c60 <HAL_FLASH_Program+0x60>
 8005cc4:	e000      	b.n	8005cc8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005cc6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <HAL_FLASH_Program+0xd8>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	761a      	strb	r2, [r3, #24]

  return status;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd8:	20001270 	.word	0x20001270
 8005cdc:	40022000 	.word	0x40022000

08005ce0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005cea:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <HAL_FLASH_Unlock+0x40>)
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <HAL_FLASH_Unlock+0x40>)
 8005cf8:	4a0a      	ldr	r2, [pc, #40]	; (8005d24 <HAL_FLASH_Unlock+0x44>)
 8005cfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cfc:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <HAL_FLASH_Unlock+0x40>)
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <HAL_FLASH_Unlock+0x48>)
 8005d00:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005d02:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <HAL_FLASH_Unlock+0x40>)
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005d12:	79fb      	ldrb	r3, [r7, #7]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40022000 	.word	0x40022000
 8005d24:	45670123 	.word	0x45670123
 8005d28:	cdef89ab 	.word	0xcdef89ab

08005d2c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <HAL_FLASH_Lock+0x1c>)
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <HAL_FLASH_Lock+0x1c>)
 8005d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	40022000 	.word	0x40022000

08005d4c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d58:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <FLASH_Program_HalfWord+0x30>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <FLASH_Program_HalfWord+0x34>)
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	4a07      	ldr	r2, [pc, #28]	; (8005d80 <FLASH_Program_HalfWord+0x34>)
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	887a      	ldrh	r2, [r7, #2]
 8005d6e:	801a      	strh	r2, [r3, #0]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20001270 	.word	0x20001270
 8005d80:	40022000 	.word	0x40022000

08005d84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005d8c:	f7fe fb28 	bl	80043e0 <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d92:	e010      	b.n	8005db6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d00c      	beq.n	8005db6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <FLASH_WaitForLastOperation+0x2e>
 8005da2:	f7fe fb1d 	bl	80043e0 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d201      	bcs.n	8005db6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e01f      	b.n	8005df6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005db6:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <FLASH_WaitForLastOperation+0x7c>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d0e8      	beq.n	8005d94 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <FLASH_WaitForLastOperation+0x7c>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d102      	bne.n	8005dd4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <FLASH_WaitForLastOperation+0x7c>)
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <FLASH_WaitForLastOperation+0x7c>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d005      	beq.n	8005dec <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <FLASH_WaitForLastOperation+0x7c>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d103      	bne.n	8005df4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005dec:	f000 f80a 	bl	8005e04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40022000 	.word	0x40022000

08005e04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <FLASH_SetErrorCode+0x5c>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b10      	cmp	r3, #16
 8005e18:	d109      	bne.n	8005e2e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005e1a:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <FLASH_SetErrorCode+0x60>)
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f043 0302 	orr.w	r3, r3, #2
 8005e22:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <FLASH_SetErrorCode+0x60>)
 8005e24:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f043 0310 	orr.w	r3, r3, #16
 8005e2c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <FLASH_SetErrorCode+0x5c>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d109      	bne.n	8005e4e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <FLASH_SetErrorCode+0x60>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f043 0301 	orr.w	r3, r3, #1
 8005e42:	4a08      	ldr	r2, [pc, #32]	; (8005e64 <FLASH_SetErrorCode+0x60>)
 8005e44:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005e4e:	4a04      	ldr	r2, [pc, #16]	; (8005e60 <FLASH_SetErrorCode+0x5c>)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60d3      	str	r3, [r2, #12]
}  
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40022000 	.word	0x40022000
 8005e64:	20001270 	.word	0x20001270

08005e68 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e7a:	4b2e      	ldr	r3, [pc, #184]	; (8005f34 <HAL_FLASHEx_Erase+0xcc>)
 8005e7c:	7e1b      	ldrb	r3, [r3, #24]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_FLASHEx_Erase+0x1e>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e052      	b.n	8005f2c <HAL_FLASHEx_Erase+0xc4>
 8005e86:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <HAL_FLASHEx_Erase+0xcc>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d115      	bne.n	8005ec0 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e98:	f7ff ff74 	bl	8005d84 <FLASH_WaitForLastOperation>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d140      	bne.n	8005f24 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8005ea2:	f000 f84b 	bl	8005f3c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ea6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005eaa:	f7ff ff6b 	bl	8005d84 <FLASH_WaitForLastOperation>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005eb2:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <HAL_FLASHEx_Erase+0xd0>)
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <HAL_FLASHEx_Erase+0xd0>)
 8005eb8:	f023 0304 	bic.w	r3, r3, #4
 8005ebc:	6113      	str	r3, [r2, #16]
 8005ebe:	e031      	b.n	8005f24 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005ec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ec4:	f7ff ff5e 	bl	8005d84 <FLASH_WaitForLastOperation>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d12a      	bne.n	8005f24 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	e019      	b.n	8005f12 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005ede:	68b8      	ldr	r0, [r7, #8]
 8005ee0:	f000 f846 	bl	8005f70 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ee4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ee8:	f7ff ff4c 	bl	8005d84 <FLASH_WaitForLastOperation>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005ef0:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <HAL_FLASHEx_Erase+0xd0>)
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <HAL_FLASHEx_Erase+0xd0>)
 8005ef6:	f023 0302 	bic.w	r3, r3, #2
 8005efa:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	601a      	str	r2, [r3, #0]
            break;
 8005f08:	e00c      	b.n	8005f24 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f10:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	02da      	lsls	r2, r3, #11
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d3dc      	bcc.n	8005ede <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_FLASHEx_Erase+0xcc>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	761a      	strb	r2, [r3, #24]

  return status;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20001270 	.word	0x20001270
 8005f38:	40022000 	.word	0x40022000

08005f3c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f40:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <FLASH_MassErase+0x2c>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <FLASH_MassErase+0x30>)
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <FLASH_MassErase+0x30>)
 8005f4c:	f043 0304 	orr.w	r3, r3, #4
 8005f50:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f52:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <FLASH_MassErase+0x30>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <FLASH_MassErase+0x30>)
 8005f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f5c:	6113      	str	r3, [r2, #16]
}
 8005f5e:	bf00      	nop
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	20001270 	.word	0x20001270
 8005f6c:	40022000 	.word	0x40022000

08005f70 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f78:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <FLASH_PageErase+0x38>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <FLASH_PageErase+0x3c>)
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <FLASH_PageErase+0x3c>)
 8005f84:	f043 0302 	orr.w	r3, r3, #2
 8005f88:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005f8a:	4a08      	ldr	r2, [pc, #32]	; (8005fac <FLASH_PageErase+0x3c>)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <FLASH_PageErase+0x3c>)
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	4a05      	ldr	r2, [pc, #20]	; (8005fac <FLASH_PageErase+0x3c>)
 8005f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f9a:	6113      	str	r3, [r2, #16]
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	20001270 	.word	0x20001270
 8005fac:	40022000 	.word	0x40022000

08005fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fbe:	e154      	b.n	800626a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fcc:	4013      	ands	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8146 	beq.w	8006264 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d00b      	beq.n	8005ff8 <HAL_GPIO_Init+0x48>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d007      	beq.n	8005ff8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fec:	2b11      	cmp	r3, #17
 8005fee:	d003      	beq.n	8005ff8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b12      	cmp	r3, #18
 8005ff6:	d130      	bne.n	800605a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	2203      	movs	r2, #3
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	43db      	mvns	r3, r3
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4013      	ands	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800602e:	2201      	movs	r2, #1
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4013      	ands	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f003 0201 	and.w	r2, r3, #1
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	2203      	movs	r2, #3
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4013      	ands	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d003      	beq.n	800609a <HAL_GPIO_Init+0xea>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b12      	cmp	r3, #18
 8006098:	d123      	bne.n	80060e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	08da      	lsrs	r2, r3, #3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3208      	adds	r2, #8
 80060a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	220f      	movs	r2, #15
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43db      	mvns	r3, r3
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4013      	ands	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	08da      	lsrs	r2, r3, #3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3208      	adds	r2, #8
 80060dc:	6939      	ldr	r1, [r7, #16]
 80060de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	2203      	movs	r2, #3
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4013      	ands	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 0203 	and.w	r2, r3, #3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80a0 	beq.w	8006264 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006124:	4b58      	ldr	r3, [pc, #352]	; (8006288 <HAL_GPIO_Init+0x2d8>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	4a57      	ldr	r2, [pc, #348]	; (8006288 <HAL_GPIO_Init+0x2d8>)
 800612a:	f043 0301 	orr.w	r3, r3, #1
 800612e:	6193      	str	r3, [r2, #24]
 8006130:	4b55      	ldr	r3, [pc, #340]	; (8006288 <HAL_GPIO_Init+0x2d8>)
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800613c:	4a53      	ldr	r2, [pc, #332]	; (800628c <HAL_GPIO_Init+0x2dc>)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	089b      	lsrs	r3, r3, #2
 8006142:	3302      	adds	r3, #2
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	220f      	movs	r2, #15
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006166:	d019      	beq.n	800619c <HAL_GPIO_Init+0x1ec>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a49      	ldr	r2, [pc, #292]	; (8006290 <HAL_GPIO_Init+0x2e0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <HAL_GPIO_Init+0x1e8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a48      	ldr	r2, [pc, #288]	; (8006294 <HAL_GPIO_Init+0x2e4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00d      	beq.n	8006194 <HAL_GPIO_Init+0x1e4>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a47      	ldr	r2, [pc, #284]	; (8006298 <HAL_GPIO_Init+0x2e8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d007      	beq.n	8006190 <HAL_GPIO_Init+0x1e0>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a46      	ldr	r2, [pc, #280]	; (800629c <HAL_GPIO_Init+0x2ec>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d101      	bne.n	800618c <HAL_GPIO_Init+0x1dc>
 8006188:	2304      	movs	r3, #4
 800618a:	e008      	b.n	800619e <HAL_GPIO_Init+0x1ee>
 800618c:	2305      	movs	r3, #5
 800618e:	e006      	b.n	800619e <HAL_GPIO_Init+0x1ee>
 8006190:	2303      	movs	r3, #3
 8006192:	e004      	b.n	800619e <HAL_GPIO_Init+0x1ee>
 8006194:	2302      	movs	r3, #2
 8006196:	e002      	b.n	800619e <HAL_GPIO_Init+0x1ee>
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <HAL_GPIO_Init+0x1ee>
 800619c:	2300      	movs	r3, #0
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	f002 0203 	and.w	r2, r2, #3
 80061a4:	0092      	lsls	r2, r2, #2
 80061a6:	4093      	lsls	r3, r2
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80061ae:	4937      	ldr	r1, [pc, #220]	; (800628c <HAL_GPIO_Init+0x2dc>)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	3302      	adds	r3, #2
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061bc:	4b38      	ldr	r3, [pc, #224]	; (80062a0 <HAL_GPIO_Init+0x2f0>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	43db      	mvns	r3, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4013      	ands	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80061e0:	4a2f      	ldr	r2, [pc, #188]	; (80062a0 <HAL_GPIO_Init+0x2f0>)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80061e6:	4b2e      	ldr	r3, [pc, #184]	; (80062a0 <HAL_GPIO_Init+0x2f0>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	43db      	mvns	r3, r3
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4013      	ands	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800620a:	4a25      	ldr	r2, [pc, #148]	; (80062a0 <HAL_GPIO_Init+0x2f0>)
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006210:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <HAL_GPIO_Init+0x2f0>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	43db      	mvns	r3, r3
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4013      	ands	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006234:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <HAL_GPIO_Init+0x2f0>)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800623a:	4b19      	ldr	r3, [pc, #100]	; (80062a0 <HAL_GPIO_Init+0x2f0>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	43db      	mvns	r3, r3
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800625e:	4a10      	ldr	r2, [pc, #64]	; (80062a0 <HAL_GPIO_Init+0x2f0>)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	3301      	adds	r3, #1
 8006268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	fa22 f303 	lsr.w	r3, r2, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	f47f aea3 	bne.w	8005fc0 <HAL_GPIO_Init+0x10>
  }
}
 800627a:	bf00      	nop
 800627c:	bf00      	nop
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40021000 	.word	0x40021000
 800628c:	40010000 	.word	0x40010000
 8006290:	48000400 	.word	0x48000400
 8006294:	48000800 	.word	0x48000800
 8006298:	48000c00 	.word	0x48000c00
 800629c:	48001000 	.word	0x48001000
 80062a0:	40010400 	.word	0x40010400

080062a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
 80062c0:	e001      	b.n	80062c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	807b      	strh	r3, [r7, #2]
 80062e0:	4613      	mov	r3, r2
 80062e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062e4:	787b      	ldrb	r3, [r7, #1]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80062f0:	e002      	b.n	80062f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80062f2:	887a      	ldrh	r2, [r7, #2]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800630e:	4b08      	ldr	r3, [pc, #32]	; (8006330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006310:	695a      	ldr	r2, [r3, #20]
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	4013      	ands	r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800631a:	4a05      	ldr	r2, [pc, #20]	; (8006330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	4618      	mov	r0, r3
 8006324:	f7fb fac6 	bl	80018b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40010400 	.word	0x40010400

08006334 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a04      	ldr	r2, [pc, #16]	; (8006350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800633e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006342:	6013      	str	r3, [r2, #0]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40007000 	.word	0x40007000

08006354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800635a:	af00      	add	r7, sp, #0
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	f000 bef4 	b.w	8007156 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800636e:	1d3b      	adds	r3, r7, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 816a 	beq.w	8006652 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800637e:	4bb3      	ldr	r3, [pc, #716]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	2b04      	cmp	r3, #4
 8006388:	d00c      	beq.n	80063a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800638a:	4bb0      	ldr	r3, [pc, #704]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f003 030c 	and.w	r3, r3, #12
 8006392:	2b08      	cmp	r3, #8
 8006394:	d159      	bne.n	800644a <HAL_RCC_OscConfig+0xf6>
 8006396:	4bad      	ldr	r3, [pc, #692]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800639e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a2:	d152      	bne.n	800644a <HAL_RCC_OscConfig+0xf6>
 80063a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80063b0:	fa93 f3a3 	rbit	r3, r3
 80063b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80063b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063bc:	fab3 f383 	clz	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d102      	bne.n	80063d6 <HAL_RCC_OscConfig+0x82>
 80063d0:	4b9e      	ldr	r3, [pc, #632]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	e015      	b.n	8006402 <HAL_RCC_OscConfig+0xae>
 80063d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80063e2:	fa93 f3a3 	rbit	r3, r3
 80063e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80063ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80063f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80063f6:	fa93 f3a3 	rbit	r3, r3
 80063fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80063fe:	4b93      	ldr	r3, [pc, #588]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006406:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800640a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800640e:	fa92 f2a2 	rbit	r2, r2
 8006412:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006416:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800641a:	fab2 f282 	clz	r2, r2
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	f042 0220 	orr.w	r2, r2, #32
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	f002 021f 	and.w	r2, r2, #31
 800642a:	2101      	movs	r1, #1
 800642c:	fa01 f202 	lsl.w	r2, r1, r2
 8006430:	4013      	ands	r3, r2
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 810c 	beq.w	8006650 <HAL_RCC_OscConfig+0x2fc>
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f040 8106 	bne.w	8006650 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	f000 be86 	b.w	8007156 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800644a:	1d3b      	adds	r3, r7, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006454:	d106      	bne.n	8006464 <HAL_RCC_OscConfig+0x110>
 8006456:	4b7d      	ldr	r3, [pc, #500]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a7c      	ldr	r2, [pc, #496]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 800645c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e030      	b.n	80064c6 <HAL_RCC_OscConfig+0x172>
 8006464:	1d3b      	adds	r3, r7, #4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <HAL_RCC_OscConfig+0x134>
 800646e:	4b77      	ldr	r3, [pc, #476]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a76      	ldr	r2, [pc, #472]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4b74      	ldr	r3, [pc, #464]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a73      	ldr	r2, [pc, #460]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e01e      	b.n	80064c6 <HAL_RCC_OscConfig+0x172>
 8006488:	1d3b      	adds	r3, r7, #4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006492:	d10c      	bne.n	80064ae <HAL_RCC_OscConfig+0x15a>
 8006494:	4b6d      	ldr	r3, [pc, #436]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a6c      	ldr	r2, [pc, #432]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 800649a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	4b6a      	ldr	r3, [pc, #424]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a69      	ldr	r2, [pc, #420]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80064a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	e00b      	b.n	80064c6 <HAL_RCC_OscConfig+0x172>
 80064ae:	4b67      	ldr	r3, [pc, #412]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a66      	ldr	r2, [pc, #408]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80064b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	4b64      	ldr	r3, [pc, #400]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a63      	ldr	r2, [pc, #396]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80064c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064c6:	4b61      	ldr	r3, [pc, #388]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	f023 020f 	bic.w	r2, r3, #15
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	495d      	ldr	r1, [pc, #372]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d059      	beq.n	8006598 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e4:	f7fd ff7c 	bl	80043e0 <HAL_GetTick>
 80064e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ec:	e00a      	b.n	8006504 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064ee:	f7fd ff77 	bl	80043e0 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	; 0x64
 80064fc:	d902      	bls.n	8006504 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	f000 be29 	b.w	8007156 <HAL_RCC_OscConfig+0xe02>
 8006504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006508:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006510:	fa93 f3a3 	rbit	r3, r3
 8006514:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006518:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651c:	fab3 f383 	clz	r3, r3
 8006520:	b2db      	uxtb	r3, r3
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d102      	bne.n	8006536 <HAL_RCC_OscConfig+0x1e2>
 8006530:	4b46      	ldr	r3, [pc, #280]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	e015      	b.n	8006562 <HAL_RCC_OscConfig+0x20e>
 8006536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800653a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006542:	fa93 f3a3 	rbit	r3, r3
 8006546:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800654a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800654e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006552:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006556:	fa93 f3a3 	rbit	r3, r3
 800655a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800655e:	4b3b      	ldr	r3, [pc, #236]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006566:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800656a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800656e:	fa92 f2a2 	rbit	r2, r2
 8006572:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006576:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800657a:	fab2 f282 	clz	r2, r2
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	f042 0220 	orr.w	r2, r2, #32
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	f002 021f 	and.w	r2, r2, #31
 800658a:	2101      	movs	r1, #1
 800658c:	fa01 f202 	lsl.w	r2, r1, r2
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0ab      	beq.n	80064ee <HAL_RCC_OscConfig+0x19a>
 8006596:	e05c      	b.n	8006652 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006598:	f7fd ff22 	bl	80043e0 <HAL_GetTick>
 800659c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065a0:	e00a      	b.n	80065b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065a2:	f7fd ff1d 	bl	80043e0 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b64      	cmp	r3, #100	; 0x64
 80065b0:	d902      	bls.n	80065b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	f000 bdcf 	b.w	8007156 <HAL_RCC_OscConfig+0xe02>
 80065b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80065c4:	fa93 f3a3 	rbit	r3, r3
 80065c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80065cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065d0:	fab3 f383 	clz	r3, r3
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f043 0301 	orr.w	r3, r3, #1
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d102      	bne.n	80065ea <HAL_RCC_OscConfig+0x296>
 80065e4:	4b19      	ldr	r3, [pc, #100]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	e015      	b.n	8006616 <HAL_RCC_OscConfig+0x2c2>
 80065ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80065f6:	fa93 f3a3 	rbit	r3, r3
 80065fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80065fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006602:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006606:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800660a:	fa93 f3a3 	rbit	r3, r3
 800660e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006612:	4b0e      	ldr	r3, [pc, #56]	; (800664c <HAL_RCC_OscConfig+0x2f8>)
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800661a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800661e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006622:	fa92 f2a2 	rbit	r2, r2
 8006626:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800662a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800662e:	fab2 f282 	clz	r2, r2
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	f042 0220 	orr.w	r2, r2, #32
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	f002 021f 	and.w	r2, r2, #31
 800663e:	2101      	movs	r1, #1
 8006640:	fa01 f202 	lsl.w	r2, r1, r2
 8006644:	4013      	ands	r3, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ab      	bne.n	80065a2 <HAL_RCC_OscConfig+0x24e>
 800664a:	e002      	b.n	8006652 <HAL_RCC_OscConfig+0x2fe>
 800664c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 816f 	beq.w	8006940 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006662:	4bd0      	ldr	r3, [pc, #832]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f003 030c 	and.w	r3, r3, #12
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800666e:	4bcd      	ldr	r3, [pc, #820]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	2b08      	cmp	r3, #8
 8006678:	d16c      	bne.n	8006754 <HAL_RCC_OscConfig+0x400>
 800667a:	4bca      	ldr	r3, [pc, #808]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d166      	bne.n	8006754 <HAL_RCC_OscConfig+0x400>
 8006686:	2302      	movs	r3, #2
 8006688:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006690:	fa93 f3a3 	rbit	r3, r3
 8006694:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006698:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800669c:	fab3 f383 	clz	r3, r3
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d102      	bne.n	80066b6 <HAL_RCC_OscConfig+0x362>
 80066b0:	4bbc      	ldr	r3, [pc, #752]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	e013      	b.n	80066de <HAL_RCC_OscConfig+0x38a>
 80066b6:	2302      	movs	r3, #2
 80066b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80066c0:	fa93 f3a3 	rbit	r3, r3
 80066c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80066c8:	2302      	movs	r3, #2
 80066ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80066ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80066d2:	fa93 f3a3 	rbit	r3, r3
 80066d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80066da:	4bb2      	ldr	r3, [pc, #712]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	2202      	movs	r2, #2
 80066e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80066e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80066e8:	fa92 f2a2 	rbit	r2, r2
 80066ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80066f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80066f4:	fab2 f282 	clz	r2, r2
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	f042 0220 	orr.w	r2, r2, #32
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	f002 021f 	and.w	r2, r2, #31
 8006704:	2101      	movs	r1, #1
 8006706:	fa01 f202 	lsl.w	r2, r1, r2
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <HAL_RCC_OscConfig+0x3cc>
 8006710:	1d3b      	adds	r3, r7, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d002      	beq.n	8006720 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f000 bd1b 	b.w	8007156 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4ba0      	ldr	r3, [pc, #640]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006728:	1d3b      	adds	r3, r7, #4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	21f8      	movs	r1, #248	; 0xf8
 8006730:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006734:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006738:	fa91 f1a1 	rbit	r1, r1
 800673c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006740:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006744:	fab1 f181 	clz	r1, r1
 8006748:	b2c9      	uxtb	r1, r1
 800674a:	408b      	lsls	r3, r1
 800674c:	4995      	ldr	r1, [pc, #596]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006752:	e0f5      	b.n	8006940 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006754:	1d3b      	adds	r3, r7, #4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 8085 	beq.w	800686a <HAL_RCC_OscConfig+0x516>
 8006760:	2301      	movs	r3, #1
 8006762:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006766:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800676a:	fa93 f3a3 	rbit	r3, r3
 800676e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006772:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006776:	fab3 f383 	clz	r3, r3
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006780:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	461a      	mov	r2, r3
 8006788:	2301      	movs	r3, #1
 800678a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678c:	f7fd fe28 	bl	80043e0 <HAL_GetTick>
 8006790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006794:	e00a      	b.n	80067ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006796:	f7fd fe23 	bl	80043e0 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d902      	bls.n	80067ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	f000 bcd5 	b.w	8007156 <HAL_RCC_OscConfig+0xe02>
 80067ac:	2302      	movs	r3, #2
 80067ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80067b6:	fa93 f3a3 	rbit	r3, r3
 80067ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80067be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c2:	fab3 f383 	clz	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d102      	bne.n	80067dc <HAL_RCC_OscConfig+0x488>
 80067d6:	4b73      	ldr	r3, [pc, #460]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	e013      	b.n	8006804 <HAL_RCC_OscConfig+0x4b0>
 80067dc:	2302      	movs	r3, #2
 80067de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80067e6:	fa93 f3a3 	rbit	r3, r3
 80067ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80067ee:	2302      	movs	r3, #2
 80067f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80067f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80067f8:	fa93 f3a3 	rbit	r3, r3
 80067fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006800:	4b68      	ldr	r3, [pc, #416]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	2202      	movs	r2, #2
 8006806:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800680a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800680e:	fa92 f2a2 	rbit	r2, r2
 8006812:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006816:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800681a:	fab2 f282 	clz	r2, r2
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	f042 0220 	orr.w	r2, r2, #32
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	f002 021f 	and.w	r2, r2, #31
 800682a:	2101      	movs	r1, #1
 800682c:	fa01 f202 	lsl.w	r2, r1, r2
 8006830:	4013      	ands	r3, r2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0af      	beq.n	8006796 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006836:	4b5b      	ldr	r3, [pc, #364]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800683e:	1d3b      	adds	r3, r7, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	21f8      	movs	r1, #248	; 0xf8
 8006846:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800684e:	fa91 f1a1 	rbit	r1, r1
 8006852:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006856:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800685a:	fab1 f181 	clz	r1, r1
 800685e:	b2c9      	uxtb	r1, r1
 8006860:	408b      	lsls	r3, r1
 8006862:	4950      	ldr	r1, [pc, #320]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 8006864:	4313      	orrs	r3, r2
 8006866:	600b      	str	r3, [r1, #0]
 8006868:	e06a      	b.n	8006940 <HAL_RCC_OscConfig+0x5ec>
 800686a:	2301      	movs	r3, #1
 800686c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006870:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006874:	fa93 f3a3 	rbit	r3, r3
 8006878:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800687c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006880:	fab3 f383 	clz	r3, r3
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800688a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	461a      	mov	r2, r3
 8006892:	2300      	movs	r3, #0
 8006894:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006896:	f7fd fda3 	bl	80043e0 <HAL_GetTick>
 800689a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068a0:	f7fd fd9e 	bl	80043e0 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d902      	bls.n	80068b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	f000 bc50 	b.w	8007156 <HAL_RCC_OscConfig+0xe02>
 80068b6:	2302      	movs	r3, #2
 80068b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068c0:	fa93 f3a3 	rbit	r3, r3
 80068c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80068c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068cc:	fab3 f383 	clz	r3, r3
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d102      	bne.n	80068e6 <HAL_RCC_OscConfig+0x592>
 80068e0:	4b30      	ldr	r3, [pc, #192]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	e013      	b.n	800690e <HAL_RCC_OscConfig+0x5ba>
 80068e6:	2302      	movs	r3, #2
 80068e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068f0:	fa93 f3a3 	rbit	r3, r3
 80068f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068f8:	2302      	movs	r3, #2
 80068fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80068fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006902:	fa93 f3a3 	rbit	r3, r3
 8006906:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800690a:	4b26      	ldr	r3, [pc, #152]	; (80069a4 <HAL_RCC_OscConfig+0x650>)
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	2202      	movs	r2, #2
 8006910:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006914:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006918:	fa92 f2a2 	rbit	r2, r2
 800691c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006920:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006924:	fab2 f282 	clz	r2, r2
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	f042 0220 	orr.w	r2, r2, #32
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	f002 021f 	and.w	r2, r2, #31
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f202 	lsl.w	r2, r1, r2
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1af      	bne.n	80068a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006940:	1d3b      	adds	r3, r7, #4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80da 	beq.w	8006b04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006950:	1d3b      	adds	r3, r7, #4
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d069      	beq.n	8006a2e <HAL_RCC_OscConfig+0x6da>
 800695a:	2301      	movs	r3, #1
 800695c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006960:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006964:	fa93 f3a3 	rbit	r3, r3
 8006968:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800696c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006970:	fab3 f383 	clz	r3, r3
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_RCC_OscConfig+0x654>)
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	461a      	mov	r2, r3
 8006980:	2301      	movs	r3, #1
 8006982:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006984:	f7fd fd2c 	bl	80043e0 <HAL_GetTick>
 8006988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800698c:	e00e      	b.n	80069ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800698e:	f7fd fd27 	bl	80043e0 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d906      	bls.n	80069ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e3d9      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
 80069a2:	bf00      	nop
 80069a4:	40021000 	.word	0x40021000
 80069a8:	10908120 	.word	0x10908120
 80069ac:	2302      	movs	r3, #2
 80069ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069b6:	fa93 f3a3 	rbit	r3, r3
 80069ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80069c2:	2202      	movs	r2, #2
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	fa93 f2a3 	rbit	r2, r3
 80069d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80069da:	2202      	movs	r2, #2
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	fa93 f2a3 	rbit	r2, r3
 80069e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80069ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ee:	4ba5      	ldr	r3, [pc, #660]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 80069f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80069f6:	2102      	movs	r1, #2
 80069f8:	6019      	str	r1, [r3, #0]
 80069fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	fa93 f1a3 	rbit	r1, r3
 8006a04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006a08:	6019      	str	r1, [r3, #0]
  return result;
 8006a0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	fab3 f383 	clz	r3, r3
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2101      	movs	r1, #1
 8006a22:	fa01 f303 	lsl.w	r3, r1, r3
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0b0      	beq.n	800698e <HAL_RCC_OscConfig+0x63a>
 8006a2c:	e06a      	b.n	8006b04 <HAL_RCC_OscConfig+0x7b0>
 8006a2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006a32:	2201      	movs	r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	fa93 f2a3 	rbit	r2, r3
 8006a40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a44:	601a      	str	r2, [r3, #0]
  return result;
 8006a46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a4c:	fab3 f383 	clz	r3, r3
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	4b8c      	ldr	r3, [pc, #560]	; (8006c88 <HAL_RCC_OscConfig+0x934>)
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a60:	f7fd fcbe 	bl	80043e0 <HAL_GetTick>
 8006a64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a68:	e009      	b.n	8006a7e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a6a:	f7fd fcb9 	bl	80043e0 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e36b      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
 8006a7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006a82:	2202      	movs	r2, #2
 8006a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	fa93 f2a3 	rbit	r2, r3
 8006a90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	fa93 f2a3 	rbit	r2, r3
 8006aa8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	fa93 f2a3 	rbit	r2, r3
 8006ac0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006ac4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac6:	4b6f      	ldr	r3, [pc, #444]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ace:	2102      	movs	r1, #2
 8006ad0:	6019      	str	r1, [r3, #0]
 8006ad2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	fa93 f1a3 	rbit	r1, r3
 8006adc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ae0:	6019      	str	r1, [r3, #0]
  return result;
 8006ae2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	fab3 f383 	clz	r3, r3
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	2101      	movs	r1, #1
 8006afa:	fa01 f303 	lsl.w	r3, r1, r3
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1b2      	bne.n	8006a6a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8158 	beq.w	8006dc4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b1a:	4b5a      	ldr	r3, [pc, #360]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d112      	bne.n	8006b4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b26:	4b57      	ldr	r3, [pc, #348]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	4a56      	ldr	r2, [pc, #344]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b30:	61d3      	str	r3, [r2, #28]
 8006b32:	4b54      	ldr	r3, [pc, #336]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006b3a:	f107 0308 	add.w	r3, r7, #8
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4c:	4b4f      	ldr	r3, [pc, #316]	; (8006c8c <HAL_RCC_OscConfig+0x938>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d11a      	bne.n	8006b8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b58:	4b4c      	ldr	r3, [pc, #304]	; (8006c8c <HAL_RCC_OscConfig+0x938>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a4b      	ldr	r2, [pc, #300]	; (8006c8c <HAL_RCC_OscConfig+0x938>)
 8006b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b64:	f7fd fc3c 	bl	80043e0 <HAL_GetTick>
 8006b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6c:	e009      	b.n	8006b82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b6e:	f7fd fc37 	bl	80043e0 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b64      	cmp	r3, #100	; 0x64
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e2e9      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b82:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <HAL_RCC_OscConfig+0x938>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0ef      	beq.n	8006b6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d106      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x852>
 8006b98:	4b3a      	ldr	r3, [pc, #232]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	4a39      	ldr	r2, [pc, #228]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006b9e:	f043 0301 	orr.w	r3, r3, #1
 8006ba2:	6213      	str	r3, [r2, #32]
 8006ba4:	e02f      	b.n	8006c06 <HAL_RCC_OscConfig+0x8b2>
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10c      	bne.n	8006bca <HAL_RCC_OscConfig+0x876>
 8006bb0:	4b34      	ldr	r3, [pc, #208]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	4a33      	ldr	r2, [pc, #204]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bb6:	f023 0301 	bic.w	r3, r3, #1
 8006bba:	6213      	str	r3, [r2, #32]
 8006bbc:	4b31      	ldr	r3, [pc, #196]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	4a30      	ldr	r2, [pc, #192]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bc2:	f023 0304 	bic.w	r3, r3, #4
 8006bc6:	6213      	str	r3, [r2, #32]
 8006bc8:	e01d      	b.n	8006c06 <HAL_RCC_OscConfig+0x8b2>
 8006bca:	1d3b      	adds	r3, r7, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d10c      	bne.n	8006bee <HAL_RCC_OscConfig+0x89a>
 8006bd4:	4b2b      	ldr	r3, [pc, #172]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bda:	f043 0304 	orr.w	r3, r3, #4
 8006bde:	6213      	str	r3, [r2, #32]
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	6213      	str	r3, [r2, #32]
 8006bec:	e00b      	b.n	8006c06 <HAL_RCC_OscConfig+0x8b2>
 8006bee:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	4a24      	ldr	r2, [pc, #144]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	6213      	str	r3, [r2, #32]
 8006bfa:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006c00:	f023 0304 	bic.w	r3, r3, #4
 8006c04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c06:	1d3b      	adds	r3, r7, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d06b      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c10:	f7fd fbe6 	bl	80043e0 <HAL_GetTick>
 8006c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c18:	e00b      	b.n	8006c32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c1a:	f7fd fbe1 	bl	80043e0 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e291      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
 8006c32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006c36:	2202      	movs	r2, #2
 8006c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	fa93 f2a3 	rbit	r2, r3
 8006c44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006c4e:	2202      	movs	r2, #2
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	fa93 f2a3 	rbit	r2, r3
 8006c5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006c60:	601a      	str	r2, [r3, #0]
  return result;
 8006c62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006c66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c68:	fab3 f383 	clz	r3, r3
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	f043 0302 	orr.w	r3, r3, #2
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d109      	bne.n	8006c90 <HAL_RCC_OscConfig+0x93c>
 8006c7c:	4b01      	ldr	r3, [pc, #4]	; (8006c84 <HAL_RCC_OscConfig+0x930>)
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	e014      	b.n	8006cac <HAL_RCC_OscConfig+0x958>
 8006c82:	bf00      	nop
 8006c84:	40021000 	.word	0x40021000
 8006c88:	10908120 	.word	0x10908120
 8006c8c:	40007000 	.word	0x40007000
 8006c90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006c94:	2202      	movs	r2, #2
 8006c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	fa93 f2a3 	rbit	r2, r3
 8006ca2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	4bbb      	ldr	r3, [pc, #748]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	6011      	str	r1, [r2, #0]
 8006cb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	fa92 f1a2 	rbit	r1, r2
 8006cbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006cc2:	6011      	str	r1, [r2, #0]
  return result;
 8006cc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	fab2 f282 	clz	r2, r2
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	f002 021f 	and.w	r2, r2, #31
 8006cda:	2101      	movs	r1, #1
 8006cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d099      	beq.n	8006c1a <HAL_RCC_OscConfig+0x8c6>
 8006ce6:	e063      	b.n	8006db0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce8:	f7fd fb7a 	bl	80043e0 <HAL_GetTick>
 8006cec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cf0:	e00b      	b.n	8006d0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cf2:	f7fd fb75 	bl	80043e0 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e225      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
 8006d0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006d0e:	2202      	movs	r2, #2
 8006d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	fa93 f2a3 	rbit	r2, r3
 8006d1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d26:	2202      	movs	r2, #2
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	fa93 f2a3 	rbit	r2, r3
 8006d34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d38:	601a      	str	r2, [r3, #0]
  return result;
 8006d3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d40:	fab3 f383 	clz	r3, r3
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	f043 0302 	orr.w	r3, r3, #2
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d102      	bne.n	8006d5a <HAL_RCC_OscConfig+0xa06>
 8006d54:	4b90      	ldr	r3, [pc, #576]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	e00d      	b.n	8006d76 <HAL_RCC_OscConfig+0xa22>
 8006d5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006d5e:	2202      	movs	r2, #2
 8006d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	fa93 f2a3 	rbit	r2, r3
 8006d6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	4b89      	ldr	r3, [pc, #548]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006d7a:	2102      	movs	r1, #2
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006d82:	6812      	ldr	r2, [r2, #0]
 8006d84:	fa92 f1a2 	rbit	r1, r2
 8006d88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006d8c:	6011      	str	r1, [r2, #0]
  return result;
 8006d8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006d92:	6812      	ldr	r2, [r2, #0]
 8006d94:	fab2 f282 	clz	r2, r2
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	f002 021f 	and.w	r2, r2, #31
 8006da4:	2101      	movs	r1, #1
 8006da6:	fa01 f202 	lsl.w	r2, r1, r2
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1a0      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006db0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d105      	bne.n	8006dc4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db8:	4b77      	ldr	r3, [pc, #476]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	4a76      	ldr	r2, [pc, #472]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dc4:	1d3b      	adds	r3, r7, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 81c2 	beq.w	8007154 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dd0:	4b71      	ldr	r3, [pc, #452]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 030c 	and.w	r3, r3, #12
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	f000 819c 	beq.w	8007116 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	f040 8114 	bne.w	8007012 <HAL_RCC_OscConfig+0xcbe>
 8006dea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006dee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	fa93 f2a3 	rbit	r2, r3
 8006dfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e02:	601a      	str	r2, [r3, #0]
  return result;
 8006e04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e0a:	fab3 f383 	clz	r3, r3
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e20:	f7fd fade 	bl	80043e0 <HAL_GetTick>
 8006e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e28:	e009      	b.n	8006e3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e2a:	f7fd fad9 	bl	80043e0 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e18b      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
 8006e3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	fa93 f2a3 	rbit	r2, r3
 8006e52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e56:	601a      	str	r2, [r3, #0]
  return result;
 8006e58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e5e:	fab3 f383 	clz	r3, r3
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	095b      	lsrs	r3, r3, #5
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d102      	bne.n	8006e78 <HAL_RCC_OscConfig+0xb24>
 8006e72:	4b49      	ldr	r3, [pc, #292]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	e01b      	b.n	8006eb0 <HAL_RCC_OscConfig+0xb5c>
 8006e78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	fa93 f2a3 	rbit	r2, r3
 8006e8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	fa93 f2a3 	rbit	r2, r3
 8006ea6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	4b3a      	ldr	r3, [pc, #232]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006eb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006eb8:	6011      	str	r1, [r2, #0]
 8006eba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006ebe:	6812      	ldr	r2, [r2, #0]
 8006ec0:	fa92 f1a2 	rbit	r1, r2
 8006ec4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006ec8:	6011      	str	r1, [r2, #0]
  return result;
 8006eca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006ece:	6812      	ldr	r2, [r2, #0]
 8006ed0:	fab2 f282 	clz	r2, r2
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	f042 0220 	orr.w	r2, r2, #32
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	f002 021f 	and.w	r2, r2, #31
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d19e      	bne.n	8006e2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eec:	4b2a      	ldr	r3, [pc, #168]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006efa:	1d3b      	adds	r3, r7, #4
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	430b      	orrs	r3, r1
 8006f02:	4925      	ldr	r1, [pc, #148]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	604b      	str	r3, [r1, #4]
 8006f08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	fa93 f2a3 	rbit	r2, r3
 8006f1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f20:	601a      	str	r2, [r3, #0]
  return result;
 8006f22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f26:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f28:	fab3 f383 	clz	r3, r3
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3e:	f7fd fa4f 	bl	80043e0 <HAL_GetTick>
 8006f42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f46:	e009      	b.n	8006f5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f48:	f7fd fa4a 	bl	80043e0 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e0fc      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
 8006f5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	fa93 f2a3 	rbit	r2, r3
 8006f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006f74:	601a      	str	r2, [r3, #0]
  return result;
 8006f76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f7c:	fab3 f383 	clz	r3, r3
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d105      	bne.n	8006f9c <HAL_RCC_OscConfig+0xc48>
 8006f90:	4b01      	ldr	r3, [pc, #4]	; (8006f98 <HAL_RCC_OscConfig+0xc44>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	e01e      	b.n	8006fd4 <HAL_RCC_OscConfig+0xc80>
 8006f96:	bf00      	nop
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	fa93 f2a3 	rbit	r2, r3
 8006fb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	fa93 f2a3 	rbit	r2, r3
 8006fca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	4b63      	ldr	r3, [pc, #396]	; (8007160 <HAL_RCC_OscConfig+0xe0c>)
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006fd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006fdc:	6011      	str	r1, [r2, #0]
 8006fde:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	fa92 f1a2 	rbit	r1, r2
 8006fe8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006fec:	6011      	str	r1, [r2, #0]
  return result;
 8006fee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	fab2 f282 	clz	r2, r2
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	f042 0220 	orr.w	r2, r2, #32
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	f002 021f 	and.w	r2, r2, #31
 8007004:	2101      	movs	r1, #1
 8007006:	fa01 f202 	lsl.w	r2, r1, r2
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d09b      	beq.n	8006f48 <HAL_RCC_OscConfig+0xbf4>
 8007010:	e0a0      	b.n	8007154 <HAL_RCC_OscConfig+0xe00>
 8007012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007016:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800701a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	fa93 f2a3 	rbit	r2, r3
 8007026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800702a:	601a      	str	r2, [r3, #0]
  return result;
 800702c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007030:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007032:	fab3 f383 	clz	r3, r3
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800703c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	461a      	mov	r2, r3
 8007044:	2300      	movs	r3, #0
 8007046:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007048:	f7fd f9ca 	bl	80043e0 <HAL_GetTick>
 800704c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007050:	e009      	b.n	8007066 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007052:	f7fd f9c5 	bl	80043e0 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e077      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
 8007066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800706a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800706e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	fa93 f2a3 	rbit	r2, r3
 800707a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800707e:	601a      	str	r2, [r3, #0]
  return result;
 8007080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007084:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007086:	fab3 f383 	clz	r3, r3
 800708a:	b2db      	uxtb	r3, r3
 800708c:	095b      	lsrs	r3, r3, #5
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b01      	cmp	r3, #1
 8007098:	d102      	bne.n	80070a0 <HAL_RCC_OscConfig+0xd4c>
 800709a:	4b31      	ldr	r3, [pc, #196]	; (8007160 <HAL_RCC_OscConfig+0xe0c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	e01b      	b.n	80070d8 <HAL_RCC_OscConfig+0xd84>
 80070a0:	f107 0320 	add.w	r3, r7, #32
 80070a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070aa:	f107 0320 	add.w	r3, r7, #32
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	fa93 f2a3 	rbit	r2, r3
 80070b4:	f107 031c 	add.w	r3, r7, #28
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	f107 0318 	add.w	r3, r7, #24
 80070be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	f107 0318 	add.w	r3, r7, #24
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	fa93 f2a3 	rbit	r2, r3
 80070ce:	f107 0314 	add.w	r3, r7, #20
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	4b22      	ldr	r3, [pc, #136]	; (8007160 <HAL_RCC_OscConfig+0xe0c>)
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	f107 0210 	add.w	r2, r7, #16
 80070dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80070e0:	6011      	str	r1, [r2, #0]
 80070e2:	f107 0210 	add.w	r2, r7, #16
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	fa92 f1a2 	rbit	r1, r2
 80070ec:	f107 020c 	add.w	r2, r7, #12
 80070f0:	6011      	str	r1, [r2, #0]
  return result;
 80070f2:	f107 020c 	add.w	r2, r7, #12
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	fab2 f282 	clz	r2, r2
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	f042 0220 	orr.w	r2, r2, #32
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	f002 021f 	and.w	r2, r2, #31
 8007108:	2101      	movs	r1, #1
 800710a:	fa01 f202 	lsl.w	r2, r1, r2
 800710e:	4013      	ands	r3, r2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d19e      	bne.n	8007052 <HAL_RCC_OscConfig+0xcfe>
 8007114:	e01e      	b.n	8007154 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007116:	1d3b      	adds	r3, r7, #4
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e018      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007124:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <HAL_RCC_OscConfig+0xe0c>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800712c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007130:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007134:	1d3b      	adds	r3, r7, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	429a      	cmp	r2, r3
 800713c:	d108      	bne.n	8007150 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800713e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007142:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007146:	1d3b      	adds	r3, r7, #4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800714c:	429a      	cmp	r2, r3
 800714e:	d001      	beq.n	8007154 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e000      	b.n	8007156 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40021000 	.word	0x40021000

08007164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b09e      	sub	sp, #120	; 0x78
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e162      	b.n	8007442 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800717c:	4b90      	ldr	r3, [pc, #576]	; (80073c0 <HAL_RCC_ClockConfig+0x25c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d910      	bls.n	80071ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718a:	4b8d      	ldr	r3, [pc, #564]	; (80073c0 <HAL_RCC_ClockConfig+0x25c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 0207 	bic.w	r2, r3, #7
 8007192:	498b      	ldr	r1, [pc, #556]	; (80073c0 <HAL_RCC_ClockConfig+0x25c>)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	4313      	orrs	r3, r2
 8007198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b89      	ldr	r3, [pc, #548]	; (80073c0 <HAL_RCC_ClockConfig+0x25c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e14a      	b.n	8007442 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071b8:	4b82      	ldr	r3, [pc, #520]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	497f      	ldr	r1, [pc, #508]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 80dc 	beq.w	8007390 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d13c      	bne.n	800725a <HAL_RCC_ClockConfig+0xf6>
 80071e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071e8:	fa93 f3a3 	rbit	r3, r3
 80071ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80071ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f0:	fab3 f383 	clz	r3, r3
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	d102      	bne.n	800720a <HAL_RCC_ClockConfig+0xa6>
 8007204:	4b6f      	ldr	r3, [pc, #444]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	e00f      	b.n	800722a <HAL_RCC_ClockConfig+0xc6>
 800720a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800720e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007212:	fa93 f3a3 	rbit	r3, r3
 8007216:	667b      	str	r3, [r7, #100]	; 0x64
 8007218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800721c:	663b      	str	r3, [r7, #96]	; 0x60
 800721e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007220:	fa93 f3a3 	rbit	r3, r3
 8007224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007226:	4b67      	ldr	r3, [pc, #412]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800722e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007232:	fa92 f2a2 	rbit	r2, r2
 8007236:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800723a:	fab2 f282 	clz	r2, r2
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	f042 0220 	orr.w	r2, r2, #32
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	f002 021f 	and.w	r2, r2, #31
 800724a:	2101      	movs	r1, #1
 800724c:	fa01 f202 	lsl.w	r2, r1, r2
 8007250:	4013      	ands	r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d17b      	bne.n	800734e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e0f3      	b.n	8007442 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d13c      	bne.n	80072dc <HAL_RCC_ClockConfig+0x178>
 8007262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007266:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800726a:	fa93 f3a3 	rbit	r3, r3
 800726e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007272:	fab3 f383 	clz	r3, r3
 8007276:	b2db      	uxtb	r3, r3
 8007278:	095b      	lsrs	r3, r3, #5
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b01      	cmp	r3, #1
 8007284:	d102      	bne.n	800728c <HAL_RCC_ClockConfig+0x128>
 8007286:	4b4f      	ldr	r3, [pc, #316]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	e00f      	b.n	80072ac <HAL_RCC_ClockConfig+0x148>
 800728c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007290:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007294:	fa93 f3a3 	rbit	r3, r3
 8007298:	647b      	str	r3, [r7, #68]	; 0x44
 800729a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800729e:	643b      	str	r3, [r7, #64]	; 0x40
 80072a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a2:	fa93 f3a3 	rbit	r3, r3
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a8:	4b46      	ldr	r3, [pc, #280]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80072b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b4:	fa92 f2a2 	rbit	r2, r2
 80072b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80072ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072bc:	fab2 f282 	clz	r2, r2
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	f042 0220 	orr.w	r2, r2, #32
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	f002 021f 	and.w	r2, r2, #31
 80072cc:	2101      	movs	r1, #1
 80072ce:	fa01 f202 	lsl.w	r2, r1, r2
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d13a      	bne.n	800734e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0b2      	b.n	8007442 <HAL_RCC_ClockConfig+0x2de>
 80072dc:	2302      	movs	r3, #2
 80072de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	fa93 f3a3 	rbit	r3, r3
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ea:	fab3 f383 	clz	r3, r3
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d102      	bne.n	8007304 <HAL_RCC_ClockConfig+0x1a0>
 80072fe:	4b31      	ldr	r3, [pc, #196]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	e00d      	b.n	8007320 <HAL_RCC_ClockConfig+0x1bc>
 8007304:	2302      	movs	r3, #2
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	fa93 f3a3 	rbit	r3, r3
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
 8007310:	2302      	movs	r3, #2
 8007312:	623b      	str	r3, [r7, #32]
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	fa93 f3a3 	rbit	r3, r3
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2202      	movs	r2, #2
 8007322:	61ba      	str	r2, [r7, #24]
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	fa92 f2a2 	rbit	r2, r2
 800732a:	617a      	str	r2, [r7, #20]
  return result;
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	fab2 f282 	clz	r2, r2
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	f042 0220 	orr.w	r2, r2, #32
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	f002 021f 	and.w	r2, r2, #31
 800733e:	2101      	movs	r1, #1
 8007340:	fa01 f202 	lsl.w	r2, r1, r2
 8007344:	4013      	ands	r3, r2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e079      	b.n	8007442 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800734e:	4b1d      	ldr	r3, [pc, #116]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f023 0203 	bic.w	r2, r3, #3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	491a      	ldr	r1, [pc, #104]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 800735c:	4313      	orrs	r3, r2
 800735e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007360:	f7fd f83e 	bl	80043e0 <HAL_GetTick>
 8007364:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007366:	e00a      	b.n	800737e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007368:	f7fd f83a 	bl	80043e0 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f241 3288 	movw	r2, #5000	; 0x1388
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e061      	b.n	8007442 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <HAL_RCC_ClockConfig+0x260>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f003 020c 	and.w	r2, r3, #12
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	429a      	cmp	r2, r3
 800738e:	d1eb      	bne.n	8007368 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <HAL_RCC_ClockConfig+0x25c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d214      	bcs.n	80073c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739e:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <HAL_RCC_ClockConfig+0x25c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f023 0207 	bic.w	r2, r3, #7
 80073a6:	4906      	ldr	r1, [pc, #24]	; (80073c0 <HAL_RCC_ClockConfig+0x25c>)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ae:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <HAL_RCC_ClockConfig+0x25c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d005      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e040      	b.n	8007442 <HAL_RCC_ClockConfig+0x2de>
 80073c0:	40022000 	.word	0x40022000
 80073c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073d4:	4b1d      	ldr	r3, [pc, #116]	; (800744c <HAL_RCC_ClockConfig+0x2e8>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	491a      	ldr	r1, [pc, #104]	; (800744c <HAL_RCC_ClockConfig+0x2e8>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073f2:	4b16      	ldr	r3, [pc, #88]	; (800744c <HAL_RCC_ClockConfig+0x2e8>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4912      	ldr	r1, [pc, #72]	; (800744c <HAL_RCC_ClockConfig+0x2e8>)
 8007402:	4313      	orrs	r3, r2
 8007404:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007406:	f000 f829 	bl	800745c <HAL_RCC_GetSysClockFreq>
 800740a:	4601      	mov	r1, r0
 800740c:	4b0f      	ldr	r3, [pc, #60]	; (800744c <HAL_RCC_ClockConfig+0x2e8>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007414:	22f0      	movs	r2, #240	; 0xf0
 8007416:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	fa92 f2a2 	rbit	r2, r2
 800741e:	60fa      	str	r2, [r7, #12]
  return result;
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	fab2 f282 	clz	r2, r2
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	40d3      	lsrs	r3, r2
 800742a:	4a09      	ldr	r2, [pc, #36]	; (8007450 <HAL_RCC_ClockConfig+0x2ec>)
 800742c:	5cd3      	ldrb	r3, [r2, r3]
 800742e:	fa21 f303 	lsr.w	r3, r1, r3
 8007432:	4a08      	ldr	r2, [pc, #32]	; (8007454 <HAL_RCC_ClockConfig+0x2f0>)
 8007434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007436:	4b08      	ldr	r3, [pc, #32]	; (8007458 <HAL_RCC_ClockConfig+0x2f4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f7fc ff8c 	bl	8004358 <HAL_InitTick>
  
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3778      	adds	r7, #120	; 0x78
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40021000 	.word	0x40021000
 8007450:	0800ad5c 	.word	0x0800ad5c
 8007454:	20000104 	.word	0x20000104
 8007458:	20000108 	.word	0x20000108

0800745c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800745c:	b480      	push	{r7}
 800745e:	b08b      	sub	sp, #44	; 0x2c
 8007460:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	2300      	movs	r3, #0
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007476:	4b29      	ldr	r3, [pc, #164]	; (800751c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	f003 030c 	and.w	r3, r3, #12
 8007482:	2b04      	cmp	r3, #4
 8007484:	d002      	beq.n	800748c <HAL_RCC_GetSysClockFreq+0x30>
 8007486:	2b08      	cmp	r3, #8
 8007488:	d003      	beq.n	8007492 <HAL_RCC_GetSysClockFreq+0x36>
 800748a:	e03c      	b.n	8007506 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800748c:	4b24      	ldr	r3, [pc, #144]	; (8007520 <HAL_RCC_GetSysClockFreq+0xc4>)
 800748e:	623b      	str	r3, [r7, #32]
      break;
 8007490:	e03c      	b.n	800750c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007498:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800749c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	fa92 f2a2 	rbit	r2, r2
 80074a4:	607a      	str	r2, [r7, #4]
  return result;
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	fab2 f282 	clz	r2, r2
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	40d3      	lsrs	r3, r2
 80074b0:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <HAL_RCC_GetSysClockFreq+0xc8>)
 80074b2:	5cd3      	ldrb	r3, [r2, r3]
 80074b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <HAL_RCC_GetSysClockFreq+0xc0>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	220f      	movs	r2, #15
 80074c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	fa92 f2a2 	rbit	r2, r2
 80074c8:	60fa      	str	r2, [r7, #12]
  return result;
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	fab2 f282 	clz	r2, r2
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	40d3      	lsrs	r3, r2
 80074d4:	4a14      	ldr	r2, [pc, #80]	; (8007528 <HAL_RCC_GetSysClockFreq+0xcc>)
 80074d6:	5cd3      	ldrb	r3, [r2, r3]
 80074d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80074e4:	4a0e      	ldr	r2, [pc, #56]	; (8007520 <HAL_RCC_GetSysClockFreq+0xc4>)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
 80074f4:	e004      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	4a0c      	ldr	r2, [pc, #48]	; (800752c <HAL_RCC_GetSysClockFreq+0xd0>)
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	623b      	str	r3, [r7, #32]
      break;
 8007504:	e002      	b.n	800750c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007508:	623b      	str	r3, [r7, #32]
      break;
 800750a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800750c:	6a3b      	ldr	r3, [r7, #32]
}
 800750e:	4618      	mov	r0, r3
 8007510:	372c      	adds	r7, #44	; 0x2c
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40021000 	.word	0x40021000
 8007520:	007a1200 	.word	0x007a1200
 8007524:	0800ad74 	.word	0x0800ad74
 8007528:	0800ad84 	.word	0x0800ad84
 800752c:	003d0900 	.word	0x003d0900

08007530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007534:	4b03      	ldr	r3, [pc, #12]	; (8007544 <HAL_RCC_GetHCLKFreq+0x14>)
 8007536:	681b      	ldr	r3, [r3, #0]
}
 8007538:	4618      	mov	r0, r3
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000104 	.word	0x20000104

08007548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800754e:	f7ff ffef 	bl	8007530 <HAL_RCC_GetHCLKFreq>
 8007552:	4601      	mov	r1, r0
 8007554:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800755c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007560:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	fa92 f2a2 	rbit	r2, r2
 8007568:	603a      	str	r2, [r7, #0]
  return result;
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	fab2 f282 	clz	r2, r2
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	40d3      	lsrs	r3, r2
 8007574:	4a04      	ldr	r2, [pc, #16]	; (8007588 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007576:	5cd3      	ldrb	r3, [r2, r3]
 8007578:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40021000 	.word	0x40021000
 8007588:	0800ad6c 	.word	0x0800ad6c

0800758c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007592:	f7ff ffcd 	bl	8007530 <HAL_RCC_GetHCLKFreq>
 8007596:	4601      	mov	r1, r0
 8007598:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80075a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80075a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	fa92 f2a2 	rbit	r2, r2
 80075ac:	603a      	str	r2, [r7, #0]
  return result;
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	fab2 f282 	clz	r2, r2
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	40d3      	lsrs	r3, r2
 80075b8:	4a04      	ldr	r2, [pc, #16]	; (80075cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80075ba:	5cd3      	ldrb	r3, [r2, r3]
 80075bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40021000 	.word	0x40021000
 80075cc:	0800ad6c 	.word	0x0800ad6c

080075d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b092      	sub	sp, #72	; 0x48
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 80d4 	beq.w	800779c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075f4:	4b4e      	ldr	r3, [pc, #312]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10e      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007600:	4b4b      	ldr	r3, [pc, #300]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	4a4a      	ldr	r2, [pc, #296]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760a:	61d3      	str	r3, [r2, #28]
 800760c:	4b48      	ldr	r3, [pc, #288]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007614:	60bb      	str	r3, [r7, #8]
 8007616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800761e:	4b45      	ldr	r3, [pc, #276]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007626:	2b00      	cmp	r3, #0
 8007628:	d118      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800762a:	4b42      	ldr	r3, [pc, #264]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a41      	ldr	r2, [pc, #260]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007634:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007636:	f7fc fed3 	bl	80043e0 <HAL_GetTick>
 800763a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800763c:	e008      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800763e:	f7fc fecf 	bl	80043e0 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b64      	cmp	r3, #100	; 0x64
 800764a:	d901      	bls.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e169      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007650:	4b38      	ldr	r3, [pc, #224]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800765c:	4b34      	ldr	r3, [pc, #208]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007664:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8084 	beq.w	8007776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007678:	429a      	cmp	r2, r3
 800767a:	d07c      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800767c:	4b2c      	ldr	r3, [pc, #176]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800768a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	fa93 f3a3 	rbit	r3, r3
 8007692:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007696:	fab3 f383 	clz	r3, r3
 800769a:	b2db      	uxtb	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	4b26      	ldr	r3, [pc, #152]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	461a      	mov	r2, r3
 80076a6:	2301      	movs	r3, #1
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	fa93 f3a3 	rbit	r3, r3
 80076b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80076b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076ba:	fab3 f383 	clz	r3, r3
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b1d      	ldr	r3, [pc, #116]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	461a      	mov	r2, r3
 80076ca:	2300      	movs	r3, #0
 80076cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80076ce:	4a18      	ldr	r2, [pc, #96]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80076d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d04b      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076de:	f7fc fe7f 	bl	80043e0 <HAL_GetTick>
 80076e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076e4:	e00a      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e6:	f7fc fe7b 	bl	80043e0 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d901      	bls.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e113      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80076fc:	2302      	movs	r3, #2
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	fa93 f3a3 	rbit	r3, r3
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
 8007708:	2302      	movs	r3, #2
 800770a:	623b      	str	r3, [r7, #32]
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	fa93 f3a3 	rbit	r3, r3
 8007712:	61fb      	str	r3, [r7, #28]
  return result;
 8007714:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007716:	fab3 f383 	clz	r3, r3
 800771a:	b2db      	uxtb	r3, r3
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f043 0302 	orr.w	r3, r3, #2
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d108      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800772a:	4b01      	ldr	r3, [pc, #4]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	e00d      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007730:	40021000 	.word	0x40021000
 8007734:	40007000 	.word	0x40007000
 8007738:	10908100 	.word	0x10908100
 800773c:	2302      	movs	r3, #2
 800773e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	fa93 f3a3 	rbit	r3, r3
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	4b78      	ldr	r3, [pc, #480]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2202      	movs	r2, #2
 800774e:	613a      	str	r2, [r7, #16]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	fa92 f2a2 	rbit	r2, r2
 8007756:	60fa      	str	r2, [r7, #12]
  return result;
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	fab2 f282 	clz	r2, r2
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	f002 021f 	and.w	r2, r2, #31
 800776a:	2101      	movs	r1, #1
 800776c:	fa01 f202 	lsl.w	r2, r1, r2
 8007770:	4013      	ands	r3, r2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0b7      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007776:	4b6d      	ldr	r3, [pc, #436]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	496a      	ldr	r1, [pc, #424]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007784:	4313      	orrs	r3, r2
 8007786:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800778c:	2b01      	cmp	r3, #1
 800778e:	d105      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007790:	4b66      	ldr	r3, [pc, #408]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	4a65      	ldr	r2, [pc, #404]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800779a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077a8:	4b60      	ldr	r3, [pc, #384]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ac:	f023 0203 	bic.w	r2, r3, #3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	495d      	ldr	r1, [pc, #372]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d008      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077c6:	4b59      	ldr	r3, [pc, #356]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	4956      	ldr	r1, [pc, #344]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077e4:	4b51      	ldr	r3, [pc, #324]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	494e      	ldr	r1, [pc, #312]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d008      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007802:	4b4a      	ldr	r3, [pc, #296]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	f023 0210 	bic.w	r2, r3, #16
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	4947      	ldr	r1, [pc, #284]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007810:	4313      	orrs	r3, r2
 8007812:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d008      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007820:	4b42      	ldr	r3, [pc, #264]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	493f      	ldr	r1, [pc, #252]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800783e:	4b3b      	ldr	r3, [pc, #236]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f023 0220 	bic.w	r2, r3, #32
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	4938      	ldr	r1, [pc, #224]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800784c:	4313      	orrs	r3, r2
 800784e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0308 	and.w	r3, r3, #8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800785c:	4b33      	ldr	r3, [pc, #204]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	4930      	ldr	r1, [pc, #192]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800786a:	4313      	orrs	r3, r2
 800786c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0310 	and.w	r3, r3, #16
 8007876:	2b00      	cmp	r3, #0
 8007878:	d008      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800787a:	4b2c      	ldr	r3, [pc, #176]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	4929      	ldr	r1, [pc, #164]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007888:	4313      	orrs	r3, r2
 800788a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007898:	4b24      	ldr	r3, [pc, #144]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	4921      	ldr	r1, [pc, #132]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80078b6:	4b1d      	ldr	r3, [pc, #116]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	491a      	ldr	r1, [pc, #104]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d008      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80078d4:	4b15      	ldr	r3, [pc, #84]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	4912      	ldr	r1, [pc, #72]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80078f2:	4b0e      	ldr	r3, [pc, #56]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	490b      	ldr	r1, [pc, #44]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007900:	4313      	orrs	r3, r2
 8007902:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d008      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007910:	4b06      	ldr	r3, [pc, #24]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	4903      	ldr	r1, [pc, #12]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800791e:	4313      	orrs	r3, r2
 8007920:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3748      	adds	r7, #72	; 0x48
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40021000 	.word	0x40021000

08007930 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e083      	b.n	8007a4a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	7f5b      	ldrb	r3, [r3, #29]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fc fae4 	bl	8003f20 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	22ca      	movs	r2, #202	; 0xca
 8007964:	625a      	str	r2, [r3, #36]	; 0x24
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2253      	movs	r2, #83	; 0x53
 800796c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc26 	bl	80081c0 <RTC_EnterInitMode>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	22ff      	movs	r2, #255	; 0xff
 8007980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2204      	movs	r2, #4
 8007986:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e05e      	b.n	8007a4a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800799a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6899      	ldr	r1, [r3, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	68d2      	ldr	r2, [r2, #12]
 80079c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6919      	ldr	r1, [r3, #16]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	041a      	lsls	r2, r3, #16
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10e      	bne.n	8007a18 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fbb8 	bl	8008170 <HAL_RTC_WaitForSynchro>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d008      	beq.n	8007a18 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	22ff      	movs	r2, #255	; 0xff
 8007a0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2204      	movs	r2, #4
 8007a12:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e018      	b.n	8007a4a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a26:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	22ff      	movs	r2, #255	; 0xff
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007a48:	2300      	movs	r3, #0
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a52:	b590      	push	{r4, r7, lr}
 8007a54:	b087      	sub	sp, #28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	7f1b      	ldrb	r3, [r3, #28]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_RTC_SetTime+0x1c>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e0aa      	b.n	8007bc4 <HAL_RTC_SetTime+0x172>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2202      	movs	r2, #2
 8007a78:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d126      	bne.n	8007ace <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2200      	movs	r2, #0
 8007a92:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 fbbd 	bl	8008218 <RTC_ByteToBcd2>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fbb6 	bl	8008218 <RTC_ByteToBcd2>
 8007aac:	4603      	mov	r3, r0
 8007aae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007ab0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	789b      	ldrb	r3, [r3, #2]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fbae 	bl	8008218 <RTC_ByteToBcd2>
 8007abc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007abe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	78db      	ldrb	r3, [r3, #3]
 8007ac6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e018      	b.n	8007b00 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d102      	bne.n	8007ae2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007aee:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007af4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	78db      	ldrb	r3, [r3, #3]
 8007afa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	22ca      	movs	r2, #202	; 0xca
 8007b06:	625a      	str	r2, [r3, #36]	; 0x24
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2253      	movs	r2, #83	; 0x53
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 fb55 	bl	80081c0 <RTC_EnterInitMode>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	22ff      	movs	r2, #255	; 0xff
 8007b22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2204      	movs	r2, #4
 8007b28:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e047      	b.n	8007bc4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b42:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6899      	ldr	r1, [r3, #8]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b7a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d111      	bne.n	8007bae <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 faf0 	bl	8008170 <HAL_RTC_WaitForSynchro>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00b      	beq.n	8007bae <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	22ff      	movs	r2, #255	; 0xff
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e00a      	b.n	8007bc4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	22ff      	movs	r2, #255	; 0xff
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
  }
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	371c      	adds	r7, #28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd90      	pop	{r4, r7, pc}

08007bcc <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007bfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007c02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	0c1b      	lsrs	r3, r3, #16
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	0a1b      	lsrs	r3, r3, #8
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	0c1b      	lsrs	r3, r3, #16
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11a      	bne.n	8007c7e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fb01 	bl	8008254 <RTC_Bcd2ToByte>
 8007c52:	4603      	mov	r3, r0
 8007c54:	461a      	mov	r2, r3
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 faf8 	bl	8008254 <RTC_Bcd2ToByte>
 8007c64:	4603      	mov	r3, r0
 8007c66:	461a      	mov	r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	789b      	ldrb	r3, [r3, #2]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 faef 	bl	8008254 <RTC_Bcd2ToByte>
 8007c76:	4603      	mov	r3, r0
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c88:	b590      	push	{r4, r7, lr}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	7f1b      	ldrb	r3, [r3, #28]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d101      	bne.n	8007ca4 <HAL_RTC_SetDate+0x1c>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e094      	b.n	8007dce <HAL_RTC_SetDate+0x146>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2202      	movs	r2, #2
 8007cae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10e      	bne.n	8007cd4 <HAL_RTC_SetDate+0x4c>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	785b      	ldrb	r3, [r3, #1]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d008      	beq.n	8007cd4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	f023 0310 	bic.w	r3, r3, #16
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	330a      	adds	r3, #10
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d11c      	bne.n	8007d14 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	78db      	ldrb	r3, [r3, #3]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fa9a 	bl	8008218 <RTC_ByteToBcd2>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fa93 	bl	8008218 <RTC_ByteToBcd2>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007cf6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	789b      	ldrb	r3, [r3, #2]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fa8b 	bl	8008218 <RTC_ByteToBcd2>
 8007d02:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007d04:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	e00e      	b.n	8007d32 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	78db      	ldrb	r3, [r3, #3]
 8007d18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d20:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007d26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	22ca      	movs	r2, #202	; 0xca
 8007d38:	625a      	str	r2, [r3, #36]	; 0x24
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2253      	movs	r2, #83	; 0x53
 8007d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 fa3c 	bl	80081c0 <RTC_EnterInitMode>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	22ff      	movs	r2, #255	; 0xff
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2204      	movs	r2, #4
 8007d5a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e033      	b.n	8007dce <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d84:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d111      	bne.n	8007db8 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f9eb 	bl	8008170 <HAL_RTC_WaitForSynchro>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	22ff      	movs	r2, #255	; 0xff
 8007da6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2204      	movs	r2, #4
 8007dac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e00a      	b.n	8007dce <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	22ff      	movs	r2, #255	; 0xff
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
  }
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd90      	pop	{r4, r7, pc}

08007dd6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007df0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007df4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	0c1b      	lsrs	r3, r3, #16
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	0a1b      	lsrs	r3, r3, #8
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	f003 031f 	and.w	r3, r3, #31
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	0b5b      	lsrs	r3, r3, #13
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d11a      	bne.n	8007e6a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	78db      	ldrb	r3, [r3, #3]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fa0b 	bl	8008254 <RTC_Bcd2ToByte>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	461a      	mov	r2, r3
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fa02 	bl	8008254 <RTC_Bcd2ToByte>
 8007e50:	4603      	mov	r3, r0
 8007e52:	461a      	mov	r2, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	789b      	ldrb	r3, [r3, #2]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f9f9 	bl	8008254 <RTC_Bcd2ToByte>
 8007e62:	4603      	mov	r3, r0
 8007e64:	461a      	mov	r2, r3
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007e74:	b590      	push	{r4, r7, lr}
 8007e76:	b089      	sub	sp, #36	; 0x24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	7f1b      	ldrb	r3, [r3, #28]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_RTC_SetAlarm_IT+0x24>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e11f      	b.n	80080d8 <HAL_RTC_SetAlarm_IT+0x264>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d137      	bne.n	8007f1a <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f9a8 	bl	8008218 <RTC_ByteToBcd2>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f9a1 	bl	8008218 <RTC_ByteToBcd2>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007eda:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	789b      	ldrb	r3, [r3, #2]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 f999 	bl	8008218 <RTC_ByteToBcd2>
 8007ee6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007ee8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	78db      	ldrb	r3, [r3, #3]
 8007ef0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007ef2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f98b 	bl	8008218 <RTC_ByteToBcd2>
 8007f02:	4603      	mov	r3, r0
 8007f04:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007f06:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007f0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007f14:	4313      	orrs	r3, r2
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	e023      	b.n	8007f62 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007f3a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007f40:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	78db      	ldrb	r3, [r3, #3]
 8007f46:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007f48:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007f52:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007f58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	22ca      	movs	r2, #202	; 0xca
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2253      	movs	r2, #83	; 0x53
 8007f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f86:	d148      	bne.n	800801a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f96:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007fa8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007faa:	f7fc fa19 	bl	80043e0 <HAL_GetTick>
 8007fae:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007fb0:	e013      	b.n	8007fda <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007fb2:	f7fc fa15 	bl	80043e0 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fc0:	d90b      	bls.n	8007fda <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	22ff      	movs	r2, #255	; 0xff
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2203      	movs	r2, #3
 8007fce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e07e      	b.n	80080d8 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0e4      	beq.n	8007fb2 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008006:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008016:	609a      	str	r2, [r3, #8]
 8008018:	e047      	b.n	80080aa <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008028:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f462 7220 	orn	r2, r2, #640	; 0x280
 800803a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800803c:	f7fc f9d0 	bl	80043e0 <HAL_GetTick>
 8008040:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008042:	e013      	b.n	800806c <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008044:	f7fc f9cc 	bl	80043e0 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008052:	d90b      	bls.n	800806c <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	22ff      	movs	r2, #255	; 0xff
 800805a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2203      	movs	r2, #3
 8008060:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e035      	b.n	80080d8 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0e4      	beq.n	8008044 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008098:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080a8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80080b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080b4:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80080b6:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <HAL_RTC_SetAlarm_IT+0x26c>)
 80080bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080c0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	22ff      	movs	r2, #255	; 0xff
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3724      	adds	r7, #36	; 0x24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd90      	pop	{r4, r7, pc}
 80080e0:	40010400 	.word	0x40010400

080080e4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d012      	beq.n	8008120 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00b      	beq.n	8008120 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7f9 fc25 	bl	8001958 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800811e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d012      	beq.n	8008154 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f8d9 	bl	80082f4 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	b2da      	uxtb	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008152:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <HAL_RTC_AlarmIRQHandler+0x88>)
 8008156:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800815a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	775a      	strb	r2, [r3, #29]
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40010400 	.word	0x40010400

08008170 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800818a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800818c:	f7fc f928 	bl	80043e0 <HAL_GetTick>
 8008190:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008192:	e009      	b.n	80081a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008194:	f7fc f924 	bl	80043e0 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081a2:	d901      	bls.n	80081a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e007      	b.n	80081b8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0ee      	beq.n	8008194 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d119      	bne.n	800820e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f04f 32ff 	mov.w	r2, #4294967295
 80081e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80081e4:	f7fc f8fc 	bl	80043e0 <HAL_GetTick>
 80081e8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80081ea:	e009      	b.n	8008200 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80081ec:	f7fc f8f8 	bl	80043e0 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081fa:	d901      	bls.n	8008200 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e007      	b.n	8008210 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0ee      	beq.n	80081ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008226:	e005      	b.n	8008234 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3301      	adds	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	3b0a      	subs	r3, #10
 8008232:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b09      	cmp	r3, #9
 8008238:	d8f6      	bhi.n	8008228 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	b2da      	uxtb	r2, r3
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	4313      	orrs	r3, r2
 8008246:	b2db      	uxtb	r3, r3
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800825e:	2300      	movs	r3, #0
 8008260:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	091b      	lsrs	r3, r3, #4
 8008266:	b2db      	uxtb	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	b2da      	uxtb	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	4413      	add	r3, r2
 8008282:	b2db      	uxtb	r3, r3
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3350      	adds	r3, #80	; 0x50
 80082a6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4413      	add	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	601a      	str	r2, [r3, #0]
}
 80082b8:	bf00      	nop
 80082ba:	371c      	adds	r7, #28
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3350      	adds	r3, #80	; 0x50
 80082d8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e040      	b.n	800839c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fb fe24 	bl	8003f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2224      	movs	r2, #36	; 0x24
 8008334:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0201 	bic.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fbdc 	bl	8008b04 <UART_SetConfig>
 800834c:	4603      	mov	r3, r0
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e022      	b.n	800839c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fda4 	bl	8008eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fe2b 	bl	8008ff0 <UART_CheckIdleState>
 800839a:	4603      	mov	r3, r0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08a      	sub	sp, #40	; 0x28
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	4613      	mov	r3, r2
 80083b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	f040 8082 	bne.w	80084c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <HAL_UART_Transmit+0x26>
 80083c4:	88fb      	ldrh	r3, [r7, #6]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e07a      	b.n	80084c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_UART_Transmit+0x38>
 80083d8:	2302      	movs	r3, #2
 80083da:	e073      	b.n	80084c4 <HAL_UART_Transmit+0x120>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2221      	movs	r2, #33	; 0x21
 80083f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083f2:	f7fb fff5 	bl	80043e0 <HAL_GetTick>
 80083f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	88fa      	ldrh	r2, [r7, #6]
 8008404:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008410:	d108      	bne.n	8008424 <HAL_UART_Transmit+0x80>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d104      	bne.n	8008424 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	61bb      	str	r3, [r7, #24]
 8008422:	e003      	b.n	800842c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008428:	2300      	movs	r3, #0
 800842a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008434:	e02d      	b.n	8008492 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2200      	movs	r2, #0
 800843e:	2180      	movs	r1, #128	; 0x80
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fe1e 	bl	8009082 <UART_WaitOnFlagUntilTimeout>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e039      	b.n	80084c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	881a      	ldrh	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008462:	b292      	uxth	r2, r2
 8008464:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	3302      	adds	r3, #2
 800846a:	61bb      	str	r3, [r7, #24]
 800846c:	e008      	b.n	8008480 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	781a      	ldrb	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	b292      	uxth	r2, r2
 8008478:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	3301      	adds	r3, #1
 800847e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008486:	b29b      	uxth	r3, r3
 8008488:	3b01      	subs	r3, #1
 800848a:	b29a      	uxth	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1cb      	bne.n	8008436 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2200      	movs	r2, #0
 80084a6:	2140      	movs	r1, #64	; 0x40
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fdea 	bl	8009082 <UART_WaitOnFlagUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e005      	b.n	80084c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2220      	movs	r2, #32
 80084bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	e000      	b.n	80084c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80084c2:	2302      	movs	r3, #2
  }
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	; 0x28
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	603b      	str	r3, [r7, #0]
 80084d8:	4613      	mov	r3, r2
 80084da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	f040 80ac 	bne.w	800863e <HAL_UART_Receive+0x172>
  {
    if ((pData == NULL) || (Size == 0U))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <HAL_UART_Receive+0x26>
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e0a4      	b.n	8008640 <HAL_UART_Receive+0x174>
    }

    __HAL_LOCK(huart);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_UART_Receive+0x38>
 8008500:	2302      	movs	r3, #2
 8008502:	e09d      	b.n	8008640 <HAL_UART_Receive+0x174>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2222      	movs	r2, #34	; 0x22
 8008518:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008520:	f7fb ff5e 	bl	80043e0 <HAL_GetTick>
 8008524:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	88fa      	ldrh	r2, [r7, #6]
 800852a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	88fa      	ldrh	r2, [r7, #6]
 8008532:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853e:	d10e      	bne.n	800855e <HAL_UART_Receive+0x92>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d105      	bne.n	8008554 <HAL_UART_Receive+0x88>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800854e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008552:	e01a      	b.n	800858a <HAL_UART_Receive+0xbe>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	22ff      	movs	r2, #255	; 0xff
 8008558:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800855c:	e015      	b.n	800858a <HAL_UART_Receive+0xbe>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10d      	bne.n	8008582 <HAL_UART_Receive+0xb6>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <HAL_UART_Receive+0xac>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	22ff      	movs	r2, #255	; 0xff
 8008572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008576:	e008      	b.n	800858a <HAL_UART_Receive+0xbe>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	227f      	movs	r2, #127	; 0x7f
 800857c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008580:	e003      	b.n	800858a <HAL_UART_Receive+0xbe>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008590:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859a:	d108      	bne.n	80085ae <HAL_UART_Receive+0xe2>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <HAL_UART_Receive+0xe2>
    {
      pdata8bits  = NULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	e003      	b.n	80085b6 <HAL_UART_Receive+0xea>
    }
    else
    {
      pdata8bits  = pData;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80085be:	e033      	b.n	8008628 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2200      	movs	r2, #0
 80085c8:	2120      	movs	r1, #32
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fd59 	bl	8009082 <UART_WaitOnFlagUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <HAL_UART_Receive+0x10e>
      {
        return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e032      	b.n	8008640 <HAL_UART_Receive+0x174>
      }
      if (pdata8bits == NULL)
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10c      	bne.n	80085fa <HAL_UART_Receive+0x12e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	8a7b      	ldrh	r3, [r7, #18]
 80085ea:	4013      	ands	r3, r2
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	3302      	adds	r3, #2
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	e00d      	b.n	8008616 <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008600:	b29b      	uxth	r3, r3
 8008602:	b2da      	uxtb	r2, r3
 8008604:	8a7b      	ldrh	r3, [r7, #18]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	4013      	ands	r3, r2
 800860a:	b2da      	uxtb	r2, r3
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	3301      	adds	r3, #1
 8008614:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1c5      	bne.n	80085c0 <HAL_UART_Receive+0xf4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	e000      	b.n	8008640 <HAL_UART_Receive+0x174>
  }
  else
  {
    return HAL_BUSY;
 800863e:	2302      	movs	r3, #2
  }
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800865a:	2b20      	cmp	r3, #32
 800865c:	d12c      	bne.n	80086b8 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <HAL_UART_Receive_IT+0x22>
 8008664:	88fb      	ldrh	r3, [r7, #6]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e025      	b.n	80086ba <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_UART_Receive_IT+0x34>
 8008678:	2302      	movs	r3, #2
 800867a:	e01e      	b.n	80086ba <HAL_UART_Receive_IT+0x72>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d007      	beq.n	80086a8 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80086a6:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	461a      	mov	r2, r3
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fd64 	bl	800917c <UART_Start_Receive_IT>
 80086b4:	4603      	mov	r3, r0
 80086b6:	e000      	b.n	80086ba <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80086b8:	2302      	movs	r3, #2
  }
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80086ea:	4013      	ands	r3, r2
 80086ec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d113      	bne.n	800871c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00e      	beq.n	800871c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 81cc 	beq.w	8008aaa <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
      }
      return;
 800871a:	e1c6      	b.n	8008aaa <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80e3 	beq.w	80088ea <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	4ba5      	ldr	r3, [pc, #660]	; (80089c8 <HAL_UART_IRQHandler+0x304>)
 8008732:	4013      	ands	r3, r2
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80d8 	beq.w	80088ea <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d010      	beq.n	8008766 <HAL_UART_IRQHandler+0xa2>
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2201      	movs	r2, #1
 8008754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800875c:	f043 0201 	orr.w	r2, r3, #1
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d010      	beq.n	8008792 <HAL_UART_IRQHandler+0xce>
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2202      	movs	r2, #2
 8008780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008788:	f043 0204 	orr.w	r2, r3, #4
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d010      	beq.n	80087be <HAL_UART_IRQHandler+0xfa>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00b      	beq.n	80087be <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2204      	movs	r2, #4
 80087ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087b4:	f043 0202 	orr.w	r2, r3, #2
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d015      	beq.n	80087f4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d104      	bne.n	80087dc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00b      	beq.n	80087f4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2208      	movs	r2, #8
 80087e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ea:	f043 0208 	orr.w	r2, r3, #8
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d011      	beq.n	8008822 <HAL_UART_IRQHandler+0x15e>
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008818:	f043 0220 	orr.w	r2, r3, #32
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 8140 	beq.w	8008aae <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00c      	beq.n	8008852 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b00      	cmp	r3, #0
 8008840:	d007      	beq.n	8008852 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008858:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008864:	2b40      	cmp	r3, #64	; 0x40
 8008866:	d004      	beq.n	8008872 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800886e:	2b00      	cmp	r3, #0
 8008870:	d031      	beq.n	80088d6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fcf8 	bl	8009268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008882:	2b40      	cmp	r3, #64	; 0x40
 8008884:	d123      	bne.n	80088ce <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008894:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889a:	2b00      	cmp	r3, #0
 800889c:	d013      	beq.n	80088c6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a2:	4a4a      	ldr	r2, [pc, #296]	; (80089cc <HAL_UART_IRQHandler+0x308>)
 80088a4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fd f85c 	bl	8005968 <HAL_DMA_Abort_IT>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d017      	beq.n	80088e6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	e00f      	b.n	80088e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f906 	bl	8008ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088cc:	e00b      	b.n	80088e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f902 	bl	8008ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d4:	e007      	b.n	80088e6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f8fe 	bl	8008ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80088e4:	e0e3      	b.n	8008aae <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e6:	bf00      	nop
    return;
 80088e8:	e0e1      	b.n	8008aae <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	f040 80a7 	bne.w	8008a42 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f003 0310 	and.w	r3, r3, #16
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 80a1 	beq.w	8008a42 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f003 0310 	and.w	r3, r3, #16
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 809b 	beq.w	8008a42 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2210      	movs	r2, #16
 8008912:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891e:	2b40      	cmp	r3, #64	; 0x40
 8008920:	d156      	bne.n	80089d0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800892c:	893b      	ldrh	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80bf 	beq.w	8008ab2 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800893a:	893a      	ldrh	r2, [r7, #8]
 800893c:	429a      	cmp	r2, r3
 800893e:	f080 80b8 	bcs.w	8008ab2 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	893a      	ldrh	r2, [r7, #8]
 8008946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b20      	cmp	r3, #32
 8008952:	d02a      	beq.n	80089aa <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008962:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0201 	bic.w	r2, r2, #1
 8008972:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008982:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0210 	bic.w	r2, r2, #16
 800899e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fc ffa6 	bl	80058f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f894 	bl	8008aec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80089c4:	e075      	b.n	8008ab2 <HAL_UART_IRQHandler+0x3ee>
 80089c6:	bf00      	nop
 80089c8:	04000120 	.word	0x04000120
 80089cc:	080092c7 	.word	0x080092c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089dc:	b29b      	uxth	r3, r3
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d063      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 80089ee:	897b      	ldrh	r3, [r7, #10]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d060      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a02:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0201 	bic.w	r2, r2, #1
 8008a12:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2220      	movs	r2, #32
 8008a18:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0210 	bic.w	r2, r2, #16
 8008a34:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a36:	897b      	ldrh	r3, [r7, #10]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f856 	bl	8008aec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008a40:	e039      	b.n	8008ab6 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00d      	beq.n	8008a68 <HAL_UART_IRQHandler+0x3a4>
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d008      	beq.n	8008a68 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fd33 	bl	80094cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a66:	e029      	b.n	8008abc <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00d      	beq.n	8008a8e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d008      	beq.n	8008a8e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d01a      	beq.n	8008aba <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
    }
    return;
 8008a8c:	e015      	b.n	8008aba <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d011      	beq.n	8008abc <HAL_UART_IRQHandler+0x3f8>
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00c      	beq.n	8008abc <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fc25 	bl	80092f2 <UART_EndTransmit_IT>
    return;
 8008aa8:	e008      	b.n	8008abc <HAL_UART_IRQHandler+0x3f8>
      return;
 8008aaa:	bf00      	nop
 8008aac:	e006      	b.n	8008abc <HAL_UART_IRQHandler+0x3f8>
    return;
 8008aae:	bf00      	nop
 8008ab0:	e004      	b.n	8008abc <HAL_UART_IRQHandler+0x3f8>
      return;
 8008ab2:	bf00      	nop
 8008ab4:	e002      	b.n	8008abc <HAL_UART_IRQHandler+0x3f8>
      return;
 8008ab6:	bf00      	nop
 8008ab8:	e000      	b.n	8008abc <HAL_UART_IRQHandler+0x3f8>
    return;
 8008aba:	bf00      	nop
  }

}
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop

08008ac4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008b32:	f023 030c 	bic.w	r3, r3, #12
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6812      	ldr	r2, [r2, #0]
 8008b3a:	6979      	ldr	r1, [r7, #20]
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4aae      	ldr	r2, [pc, #696]	; (8008e38 <UART_SetConfig+0x334>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d120      	bne.n	8008bc6 <UART_SetConfig+0xc2>
 8008b84:	4bad      	ldr	r3, [pc, #692]	; (8008e3c <UART_SetConfig+0x338>)
 8008b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b88:	f003 0303 	and.w	r3, r3, #3
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d817      	bhi.n	8008bc0 <UART_SetConfig+0xbc>
 8008b90:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <UART_SetConfig+0x94>)
 8008b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b96:	bf00      	nop
 8008b98:	08008ba9 	.word	0x08008ba9
 8008b9c:	08008bb5 	.word	0x08008bb5
 8008ba0:	08008bbb 	.word	0x08008bbb
 8008ba4:	08008baf 	.word	0x08008baf
 8008ba8:	2301      	movs	r3, #1
 8008baa:	77fb      	strb	r3, [r7, #31]
 8008bac:	e0b5      	b.n	8008d1a <UART_SetConfig+0x216>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	77fb      	strb	r3, [r7, #31]
 8008bb2:	e0b2      	b.n	8008d1a <UART_SetConfig+0x216>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	77fb      	strb	r3, [r7, #31]
 8008bb8:	e0af      	b.n	8008d1a <UART_SetConfig+0x216>
 8008bba:	2308      	movs	r3, #8
 8008bbc:	77fb      	strb	r3, [r7, #31]
 8008bbe:	e0ac      	b.n	8008d1a <UART_SetConfig+0x216>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	77fb      	strb	r3, [r7, #31]
 8008bc4:	e0a9      	b.n	8008d1a <UART_SetConfig+0x216>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a9d      	ldr	r2, [pc, #628]	; (8008e40 <UART_SetConfig+0x33c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d124      	bne.n	8008c1a <UART_SetConfig+0x116>
 8008bd0:	4b9a      	ldr	r3, [pc, #616]	; (8008e3c <UART_SetConfig+0x338>)
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bdc:	d011      	beq.n	8008c02 <UART_SetConfig+0xfe>
 8008bde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008be2:	d817      	bhi.n	8008c14 <UART_SetConfig+0x110>
 8008be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008be8:	d011      	beq.n	8008c0e <UART_SetConfig+0x10a>
 8008bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bee:	d811      	bhi.n	8008c14 <UART_SetConfig+0x110>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <UART_SetConfig+0xf8>
 8008bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf8:	d006      	beq.n	8008c08 <UART_SetConfig+0x104>
 8008bfa:	e00b      	b.n	8008c14 <UART_SetConfig+0x110>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	77fb      	strb	r3, [r7, #31]
 8008c00:	e08b      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c02:	2302      	movs	r3, #2
 8008c04:	77fb      	strb	r3, [r7, #31]
 8008c06:	e088      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	77fb      	strb	r3, [r7, #31]
 8008c0c:	e085      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c0e:	2308      	movs	r3, #8
 8008c10:	77fb      	strb	r3, [r7, #31]
 8008c12:	e082      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c14:	2310      	movs	r3, #16
 8008c16:	77fb      	strb	r3, [r7, #31]
 8008c18:	e07f      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a89      	ldr	r2, [pc, #548]	; (8008e44 <UART_SetConfig+0x340>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d124      	bne.n	8008c6e <UART_SetConfig+0x16a>
 8008c24:	4b85      	ldr	r3, [pc, #532]	; (8008e3c <UART_SetConfig+0x338>)
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008c2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008c30:	d011      	beq.n	8008c56 <UART_SetConfig+0x152>
 8008c32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008c36:	d817      	bhi.n	8008c68 <UART_SetConfig+0x164>
 8008c38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c3c:	d011      	beq.n	8008c62 <UART_SetConfig+0x15e>
 8008c3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c42:	d811      	bhi.n	8008c68 <UART_SetConfig+0x164>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <UART_SetConfig+0x14c>
 8008c48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c4c:	d006      	beq.n	8008c5c <UART_SetConfig+0x158>
 8008c4e:	e00b      	b.n	8008c68 <UART_SetConfig+0x164>
 8008c50:	2300      	movs	r3, #0
 8008c52:	77fb      	strb	r3, [r7, #31]
 8008c54:	e061      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c56:	2302      	movs	r3, #2
 8008c58:	77fb      	strb	r3, [r7, #31]
 8008c5a:	e05e      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	77fb      	strb	r3, [r7, #31]
 8008c60:	e05b      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c62:	2308      	movs	r3, #8
 8008c64:	77fb      	strb	r3, [r7, #31]
 8008c66:	e058      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	77fb      	strb	r3, [r7, #31]
 8008c6c:	e055      	b.n	8008d1a <UART_SetConfig+0x216>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a75      	ldr	r2, [pc, #468]	; (8008e48 <UART_SetConfig+0x344>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d124      	bne.n	8008cc2 <UART_SetConfig+0x1be>
 8008c78:	4b70      	ldr	r3, [pc, #448]	; (8008e3c <UART_SetConfig+0x338>)
 8008c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008c80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c84:	d011      	beq.n	8008caa <UART_SetConfig+0x1a6>
 8008c86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c8a:	d817      	bhi.n	8008cbc <UART_SetConfig+0x1b8>
 8008c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c90:	d011      	beq.n	8008cb6 <UART_SetConfig+0x1b2>
 8008c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c96:	d811      	bhi.n	8008cbc <UART_SetConfig+0x1b8>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <UART_SetConfig+0x1a0>
 8008c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ca0:	d006      	beq.n	8008cb0 <UART_SetConfig+0x1ac>
 8008ca2:	e00b      	b.n	8008cbc <UART_SetConfig+0x1b8>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	77fb      	strb	r3, [r7, #31]
 8008ca8:	e037      	b.n	8008d1a <UART_SetConfig+0x216>
 8008caa:	2302      	movs	r3, #2
 8008cac:	77fb      	strb	r3, [r7, #31]
 8008cae:	e034      	b.n	8008d1a <UART_SetConfig+0x216>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	77fb      	strb	r3, [r7, #31]
 8008cb4:	e031      	b.n	8008d1a <UART_SetConfig+0x216>
 8008cb6:	2308      	movs	r3, #8
 8008cb8:	77fb      	strb	r3, [r7, #31]
 8008cba:	e02e      	b.n	8008d1a <UART_SetConfig+0x216>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	77fb      	strb	r3, [r7, #31]
 8008cc0:	e02b      	b.n	8008d1a <UART_SetConfig+0x216>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a61      	ldr	r2, [pc, #388]	; (8008e4c <UART_SetConfig+0x348>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d124      	bne.n	8008d16 <UART_SetConfig+0x212>
 8008ccc:	4b5b      	ldr	r3, [pc, #364]	; (8008e3c <UART_SetConfig+0x338>)
 8008cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008cd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cd8:	d011      	beq.n	8008cfe <UART_SetConfig+0x1fa>
 8008cda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cde:	d817      	bhi.n	8008d10 <UART_SetConfig+0x20c>
 8008ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ce4:	d011      	beq.n	8008d0a <UART_SetConfig+0x206>
 8008ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cea:	d811      	bhi.n	8008d10 <UART_SetConfig+0x20c>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <UART_SetConfig+0x1f4>
 8008cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf4:	d006      	beq.n	8008d04 <UART_SetConfig+0x200>
 8008cf6:	e00b      	b.n	8008d10 <UART_SetConfig+0x20c>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	77fb      	strb	r3, [r7, #31]
 8008cfc:	e00d      	b.n	8008d1a <UART_SetConfig+0x216>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	77fb      	strb	r3, [r7, #31]
 8008d02:	e00a      	b.n	8008d1a <UART_SetConfig+0x216>
 8008d04:	2304      	movs	r3, #4
 8008d06:	77fb      	strb	r3, [r7, #31]
 8008d08:	e007      	b.n	8008d1a <UART_SetConfig+0x216>
 8008d0a:	2308      	movs	r3, #8
 8008d0c:	77fb      	strb	r3, [r7, #31]
 8008d0e:	e004      	b.n	8008d1a <UART_SetConfig+0x216>
 8008d10:	2310      	movs	r3, #16
 8008d12:	77fb      	strb	r3, [r7, #31]
 8008d14:	e001      	b.n	8008d1a <UART_SetConfig+0x216>
 8008d16:	2310      	movs	r3, #16
 8008d18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d22:	d15c      	bne.n	8008dde <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8008d24:	7ffb      	ldrb	r3, [r7, #31]
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d827      	bhi.n	8008d7a <UART_SetConfig+0x276>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <UART_SetConfig+0x22c>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d55 	.word	0x08008d55
 8008d34:	08008d5d 	.word	0x08008d5d
 8008d38:	08008d65 	.word	0x08008d65
 8008d3c:	08008d7b 	.word	0x08008d7b
 8008d40:	08008d6b 	.word	0x08008d6b
 8008d44:	08008d7b 	.word	0x08008d7b
 8008d48:	08008d7b 	.word	0x08008d7b
 8008d4c:	08008d7b 	.word	0x08008d7b
 8008d50:	08008d73 	.word	0x08008d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d54:	f7fe fbf8 	bl	8007548 <HAL_RCC_GetPCLK1Freq>
 8008d58:	61b8      	str	r0, [r7, #24]
        break;
 8008d5a:	e013      	b.n	8008d84 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d5c:	f7fe fc16 	bl	800758c <HAL_RCC_GetPCLK2Freq>
 8008d60:	61b8      	str	r0, [r7, #24]
        break;
 8008d62:	e00f      	b.n	8008d84 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d64:	4b3a      	ldr	r3, [pc, #232]	; (8008e50 <UART_SetConfig+0x34c>)
 8008d66:	61bb      	str	r3, [r7, #24]
        break;
 8008d68:	e00c      	b.n	8008d84 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d6a:	f7fe fb77 	bl	800745c <HAL_RCC_GetSysClockFreq>
 8008d6e:	61b8      	str	r0, [r7, #24]
        break;
 8008d70:	e008      	b.n	8008d84 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d76:	61bb      	str	r3, [r7, #24]
        break;
 8008d78:	e004      	b.n	8008d84 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	77bb      	strb	r3, [r7, #30]
        break;
 8008d82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 8085 	beq.w	8008e96 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	005a      	lsls	r2, r3, #1
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	085b      	lsrs	r3, r3, #1
 8008d96:	441a      	add	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	2b0f      	cmp	r3, #15
 8008da8:	d916      	bls.n	8008dd8 <UART_SetConfig+0x2d4>
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db0:	d212      	bcs.n	8008dd8 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	f023 030f 	bic.w	r3, r3, #15
 8008dba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	89fb      	ldrh	r3, [r7, #14]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	89fa      	ldrh	r2, [r7, #14]
 8008dd4:	60da      	str	r2, [r3, #12]
 8008dd6:	e05e      	b.n	8008e96 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	77bb      	strb	r3, [r7, #30]
 8008ddc:	e05b      	b.n	8008e96 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dde:	7ffb      	ldrb	r3, [r7, #31]
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d837      	bhi.n	8008e54 <UART_SetConfig+0x350>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <UART_SetConfig+0x2e8>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e19 	.word	0x08008e19
 8008df4:	08008e21 	.word	0x08008e21
 8008df8:	08008e55 	.word	0x08008e55
 8008dfc:	08008e27 	.word	0x08008e27
 8008e00:	08008e55 	.word	0x08008e55
 8008e04:	08008e55 	.word	0x08008e55
 8008e08:	08008e55 	.word	0x08008e55
 8008e0c:	08008e2f 	.word	0x08008e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e10:	f7fe fb9a 	bl	8007548 <HAL_RCC_GetPCLK1Freq>
 8008e14:	61b8      	str	r0, [r7, #24]
        break;
 8008e16:	e022      	b.n	8008e5e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e18:	f7fe fbb8 	bl	800758c <HAL_RCC_GetPCLK2Freq>
 8008e1c:	61b8      	str	r0, [r7, #24]
        break;
 8008e1e:	e01e      	b.n	8008e5e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e20:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <UART_SetConfig+0x34c>)
 8008e22:	61bb      	str	r3, [r7, #24]
        break;
 8008e24:	e01b      	b.n	8008e5e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e26:	f7fe fb19 	bl	800745c <HAL_RCC_GetSysClockFreq>
 8008e2a:	61b8      	str	r0, [r7, #24]
        break;
 8008e2c:	e017      	b.n	8008e5e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e32:	61bb      	str	r3, [r7, #24]
        break;
 8008e34:	e013      	b.n	8008e5e <UART_SetConfig+0x35a>
 8008e36:	bf00      	nop
 8008e38:	40013800 	.word	0x40013800
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	40004400 	.word	0x40004400
 8008e44:	40004800 	.word	0x40004800
 8008e48:	40004c00 	.word	0x40004c00
 8008e4c:	40005000 	.word	0x40005000
 8008e50:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	77bb      	strb	r3, [r7, #30]
        break;
 8008e5c:	bf00      	nop
    }

    if (pclk != 0U)
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d018      	beq.n	8008e96 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	085a      	lsrs	r2, r3, #1
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	441a      	add	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b0f      	cmp	r3, #15
 8008e7e:	d908      	bls.n	8008e92 <UART_SetConfig+0x38e>
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e86:	d204      	bcs.n	8008e92 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	60da      	str	r2, [r3, #12]
 8008e90:	e001      	b.n	8008e96 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ea2:	7fbb      	ldrb	r3, [r7, #30]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00a      	beq.n	8008ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00a      	beq.n	8008f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	f003 0308 	and.w	r3, r3, #8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00a      	beq.n	8008f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01a      	beq.n	8008fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008faa:	d10a      	bne.n	8008fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	605a      	str	r2, [r3, #4]
  }
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009000:	f7fb f9ee 	bl	80043e0 <HAL_GetTick>
 8009004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b08      	cmp	r3, #8
 8009012:	d10e      	bne.n	8009032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f82d 	bl	8009082 <UART_WaitOnFlagUntilTimeout>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e023      	b.n	800907a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b04      	cmp	r3, #4
 800903e:	d10e      	bne.n	800905e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f817 	bl	8009082 <UART_WaitOnFlagUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e00d      	b.n	800907a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2220      	movs	r2, #32
 8009062:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	603b      	str	r3, [r7, #0]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009092:	e05e      	b.n	8009152 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909a:	d05a      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800909c:	f7fb f9a0 	bl	80043e0 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d302      	bcc.n	80090b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d11b      	bne.n	80090ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0201 	bic.w	r2, r2, #1
 80090d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2220      	movs	r2, #32
 80090d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2220      	movs	r2, #32
 80090dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e043      	b.n	8009172 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d02c      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009106:	d124      	bne.n	8009152 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009110:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009120:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0201 	bic.w	r2, r2, #1
 8009130:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2220      	movs	r2, #32
 8009136:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2220      	movs	r2, #32
 8009142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e00f      	b.n	8009172 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69da      	ldr	r2, [r3, #28]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	4013      	ands	r3, r2
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	429a      	cmp	r2, r3
 8009160:	bf0c      	ite	eq
 8009162:	2301      	moveq	r3, #1
 8009164:	2300      	movne	r3, #0
 8009166:	b2db      	uxtb	r3, r3
 8009168:	461a      	mov	r2, r3
 800916a:	79fb      	ldrb	r3, [r7, #7]
 800916c:	429a      	cmp	r2, r3
 800916e:	d091      	beq.n	8009094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	4613      	mov	r3, r2
 8009188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	88fa      	ldrh	r2, [r7, #6]
 8009194:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ae:	d10e      	bne.n	80091ce <UART_Start_Receive_IT+0x52>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d105      	bne.n	80091c4 <UART_Start_Receive_IT+0x48>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80091be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091c2:	e01a      	b.n	80091fa <UART_Start_Receive_IT+0x7e>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	22ff      	movs	r2, #255	; 0xff
 80091c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091cc:	e015      	b.n	80091fa <UART_Start_Receive_IT+0x7e>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10d      	bne.n	80091f2 <UART_Start_Receive_IT+0x76>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d104      	bne.n	80091e8 <UART_Start_Receive_IT+0x6c>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	22ff      	movs	r2, #255	; 0xff
 80091e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091e6:	e008      	b.n	80091fa <UART_Start_Receive_IT+0x7e>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	227f      	movs	r2, #127	; 0x7f
 80091ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091f0:	e003      	b.n	80091fa <UART_Start_Receive_IT+0x7e>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2222      	movs	r2, #34	; 0x22
 8009206:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689a      	ldr	r2, [r3, #8]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009220:	d107      	bne.n	8009232 <UART_Start_Receive_IT+0xb6>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <UART_Start_Receive_IT+0xe4>)
 800922e:	665a      	str	r2, [r3, #100]	; 0x64
 8009230:	e002      	b.n	8009238 <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4a0b      	ldr	r2, [pc, #44]	; (8009264 <UART_Start_Receive_IT+0xe8>)
 8009236:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800924e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	080093f9 	.word	0x080093f9
 8009264:	08009325 	.word	0x08009325

08009268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800927e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0201 	bic.w	r2, r2, #1
 800928e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009294:	2b01      	cmp	r3, #1
 8009296:	d107      	bne.n	80092a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0210 	bic.w	r2, r2, #16
 80092a6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2220      	movs	r2, #32
 80092ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f7ff fbf7 	bl	8008ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009308:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2220      	movs	r2, #32
 800930e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff fbd4 	bl	8008ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009332:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009338:	2b22      	cmp	r3, #34	; 0x22
 800933a:	d151      	bne.n	80093e0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009342:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009344:	89bb      	ldrh	r3, [r7, #12]
 8009346:	b2d9      	uxtb	r1, r3
 8009348:	89fb      	ldrh	r3, [r7, #14]
 800934a:	b2da      	uxtb	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009350:	400a      	ands	r2, r1
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009366:	b29b      	uxth	r3, r3
 8009368:	3b01      	subs	r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009378:	b29b      	uxth	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d138      	bne.n	80093f0 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800938c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 0201 	bic.w	r2, r2, #1
 800939c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d10f      	bne.n	80093d2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f022 0210 	bic.w	r2, r2, #16
 80093c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff fb8e 	bl	8008aec <HAL_UARTEx_RxEventCallback>
 80093d0:	e002      	b.n	80093d8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7f8 f8a4 	bl	8001520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093de:	e007      	b.n	80093f0 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f042 0208 	orr.w	r2, r2, #8
 80093ee:	619a      	str	r2, [r3, #24]
}
 80093f0:	bf00      	nop
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009406:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800940c:	2b22      	cmp	r3, #34	; 0x22
 800940e:	d151      	bne.n	80094b4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009416:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800941e:	89ba      	ldrh	r2, [r7, #12]
 8009420:	89fb      	ldrh	r3, [r7, #14]
 8009422:	4013      	ands	r3, r2
 8009424:	b29a      	uxth	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	1c9a      	adds	r2, r3, #2
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800943a:	b29b      	uxth	r3, r3
 800943c:	3b01      	subs	r3, #1
 800943e:	b29a      	uxth	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800944c:	b29b      	uxth	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d138      	bne.n	80094c4 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009460:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 0201 	bic.w	r2, r2, #1
 8009470:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2220      	movs	r2, #32
 8009476:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009482:	2b01      	cmp	r3, #1
 8009484:	d10f      	bne.n	80094a6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0210 	bic.w	r2, r2, #16
 8009494:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fb24 	bl	8008aec <HAL_UARTEx_RxEventCallback>
 80094a4:	e002      	b.n	80094ac <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7f8 f83a 	bl	8001520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094b2:	e007      	b.n	80094c4 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699a      	ldr	r2, [r3, #24]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0208 	orr.w	r2, r2, #8
 80094c2:	619a      	str	r2, [r3, #24]
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <atoi>:
 80094e0:	220a      	movs	r2, #10
 80094e2:	2100      	movs	r1, #0
 80094e4:	f000 b952 	b.w	800978c <strtol>

080094e8 <__errno>:
 80094e8:	4b01      	ldr	r3, [pc, #4]	; (80094f0 <__errno+0x8>)
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	20000110 	.word	0x20000110

080094f4 <__libc_init_array>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	4d0d      	ldr	r5, [pc, #52]	; (800952c <__libc_init_array+0x38>)
 80094f8:	4c0d      	ldr	r4, [pc, #52]	; (8009530 <__libc_init_array+0x3c>)
 80094fa:	1b64      	subs	r4, r4, r5
 80094fc:	10a4      	asrs	r4, r4, #2
 80094fe:	2600      	movs	r6, #0
 8009500:	42a6      	cmp	r6, r4
 8009502:	d109      	bne.n	8009518 <__libc_init_array+0x24>
 8009504:	4d0b      	ldr	r5, [pc, #44]	; (8009534 <__libc_init_array+0x40>)
 8009506:	4c0c      	ldr	r4, [pc, #48]	; (8009538 <__libc_init_array+0x44>)
 8009508:	f001 fabe 	bl	800aa88 <_init>
 800950c:	1b64      	subs	r4, r4, r5
 800950e:	10a4      	asrs	r4, r4, #2
 8009510:	2600      	movs	r6, #0
 8009512:	42a6      	cmp	r6, r4
 8009514:	d105      	bne.n	8009522 <__libc_init_array+0x2e>
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	f855 3b04 	ldr.w	r3, [r5], #4
 800951c:	4798      	blx	r3
 800951e:	3601      	adds	r6, #1
 8009520:	e7ee      	b.n	8009500 <__libc_init_array+0xc>
 8009522:	f855 3b04 	ldr.w	r3, [r5], #4
 8009526:	4798      	blx	r3
 8009528:	3601      	adds	r6, #1
 800952a:	e7f2      	b.n	8009512 <__libc_init_array+0x1e>
 800952c:	0800afe0 	.word	0x0800afe0
 8009530:	0800afe0 	.word	0x0800afe0
 8009534:	0800afe0 	.word	0x0800afe0
 8009538:	0800afe4 	.word	0x0800afe4

0800953c <memset>:
 800953c:	4402      	add	r2, r0
 800953e:	4603      	mov	r3, r0
 8009540:	4293      	cmp	r3, r2
 8009542:	d100      	bne.n	8009546 <memset+0xa>
 8009544:	4770      	bx	lr
 8009546:	f803 1b01 	strb.w	r1, [r3], #1
 800954a:	e7f9      	b.n	8009540 <memset+0x4>

0800954c <siprintf>:
 800954c:	b40e      	push	{r1, r2, r3}
 800954e:	b500      	push	{lr}
 8009550:	b09c      	sub	sp, #112	; 0x70
 8009552:	ab1d      	add	r3, sp, #116	; 0x74
 8009554:	9002      	str	r0, [sp, #8]
 8009556:	9006      	str	r0, [sp, #24]
 8009558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800955c:	4809      	ldr	r0, [pc, #36]	; (8009584 <siprintf+0x38>)
 800955e:	9107      	str	r1, [sp, #28]
 8009560:	9104      	str	r1, [sp, #16]
 8009562:	4909      	ldr	r1, [pc, #36]	; (8009588 <siprintf+0x3c>)
 8009564:	f853 2b04 	ldr.w	r2, [r3], #4
 8009568:	9105      	str	r1, [sp, #20]
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	a902      	add	r1, sp, #8
 8009570:	f000 fa54 	bl	8009a1c <_svfiprintf_r>
 8009574:	9b02      	ldr	r3, [sp, #8]
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	b01c      	add	sp, #112	; 0x70
 800957c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009580:	b003      	add	sp, #12
 8009582:	4770      	bx	lr
 8009584:	20000110 	.word	0x20000110
 8009588:	ffff0208 	.word	0xffff0208

0800958c <strcpy>:
 800958c:	4603      	mov	r3, r0
 800958e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009592:	f803 2b01 	strb.w	r2, [r3], #1
 8009596:	2a00      	cmp	r2, #0
 8009598:	d1f9      	bne.n	800958e <strcpy+0x2>
 800959a:	4770      	bx	lr

0800959c <strstr>:
 800959c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800959e:	780c      	ldrb	r4, [r1, #0]
 80095a0:	b164      	cbz	r4, 80095bc <strstr+0x20>
 80095a2:	4603      	mov	r3, r0
 80095a4:	781a      	ldrb	r2, [r3, #0]
 80095a6:	4618      	mov	r0, r3
 80095a8:	1c5e      	adds	r6, r3, #1
 80095aa:	b90a      	cbnz	r2, 80095b0 <strstr+0x14>
 80095ac:	4610      	mov	r0, r2
 80095ae:	e005      	b.n	80095bc <strstr+0x20>
 80095b0:	4294      	cmp	r4, r2
 80095b2:	d108      	bne.n	80095c6 <strstr+0x2a>
 80095b4:	460d      	mov	r5, r1
 80095b6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80095ba:	b902      	cbnz	r2, 80095be <strstr+0x22>
 80095bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095be:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80095c2:	4297      	cmp	r7, r2
 80095c4:	d0f7      	beq.n	80095b6 <strstr+0x1a>
 80095c6:	4633      	mov	r3, r6
 80095c8:	e7ec      	b.n	80095a4 <strstr+0x8>
	...

080095cc <strtok>:
 80095cc:	4b16      	ldr	r3, [pc, #88]	; (8009628 <strtok+0x5c>)
 80095ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095d0:	681e      	ldr	r6, [r3, #0]
 80095d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80095d4:	4605      	mov	r5, r0
 80095d6:	b9fc      	cbnz	r4, 8009618 <strtok+0x4c>
 80095d8:	2050      	movs	r0, #80	; 0x50
 80095da:	9101      	str	r1, [sp, #4]
 80095dc:	f000 f910 	bl	8009800 <malloc>
 80095e0:	9901      	ldr	r1, [sp, #4]
 80095e2:	65b0      	str	r0, [r6, #88]	; 0x58
 80095e4:	4602      	mov	r2, r0
 80095e6:	b920      	cbnz	r0, 80095f2 <strtok+0x26>
 80095e8:	4b10      	ldr	r3, [pc, #64]	; (800962c <strtok+0x60>)
 80095ea:	4811      	ldr	r0, [pc, #68]	; (8009630 <strtok+0x64>)
 80095ec:	2157      	movs	r1, #87	; 0x57
 80095ee:	f000 f8d7 	bl	80097a0 <__assert_func>
 80095f2:	e9c0 4400 	strd	r4, r4, [r0]
 80095f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80095fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80095fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009602:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009606:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800960a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800960e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009612:	6184      	str	r4, [r0, #24]
 8009614:	7704      	strb	r4, [r0, #28]
 8009616:	6244      	str	r4, [r0, #36]	; 0x24
 8009618:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800961a:	2301      	movs	r3, #1
 800961c:	4628      	mov	r0, r5
 800961e:	b002      	add	sp, #8
 8009620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009624:	f000 b806 	b.w	8009634 <__strtok_r>
 8009628:	20000110 	.word	0x20000110
 800962c:	0800ad98 	.word	0x0800ad98
 8009630:	0800adaf 	.word	0x0800adaf

08009634 <__strtok_r>:
 8009634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009636:	b908      	cbnz	r0, 800963c <__strtok_r+0x8>
 8009638:	6810      	ldr	r0, [r2, #0]
 800963a:	b188      	cbz	r0, 8009660 <__strtok_r+0x2c>
 800963c:	4604      	mov	r4, r0
 800963e:	4620      	mov	r0, r4
 8009640:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009644:	460f      	mov	r7, r1
 8009646:	f817 6b01 	ldrb.w	r6, [r7], #1
 800964a:	b91e      	cbnz	r6, 8009654 <__strtok_r+0x20>
 800964c:	b965      	cbnz	r5, 8009668 <__strtok_r+0x34>
 800964e:	6015      	str	r5, [r2, #0]
 8009650:	4628      	mov	r0, r5
 8009652:	e005      	b.n	8009660 <__strtok_r+0x2c>
 8009654:	42b5      	cmp	r5, r6
 8009656:	d1f6      	bne.n	8009646 <__strtok_r+0x12>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f0      	bne.n	800963e <__strtok_r+0xa>
 800965c:	6014      	str	r4, [r2, #0]
 800965e:	7003      	strb	r3, [r0, #0]
 8009660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009662:	461c      	mov	r4, r3
 8009664:	e00c      	b.n	8009680 <__strtok_r+0x4c>
 8009666:	b915      	cbnz	r5, 800966e <__strtok_r+0x3a>
 8009668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800966c:	460e      	mov	r6, r1
 800966e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009672:	42ab      	cmp	r3, r5
 8009674:	d1f7      	bne.n	8009666 <__strtok_r+0x32>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0f3      	beq.n	8009662 <__strtok_r+0x2e>
 800967a:	2300      	movs	r3, #0
 800967c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009680:	6014      	str	r4, [r2, #0]
 8009682:	e7ed      	b.n	8009660 <__strtok_r+0x2c>

08009684 <_strtol_l.isra.0>:
 8009684:	2b01      	cmp	r3, #1
 8009686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800968a:	d001      	beq.n	8009690 <_strtol_l.isra.0+0xc>
 800968c:	2b24      	cmp	r3, #36	; 0x24
 800968e:	d906      	bls.n	800969e <_strtol_l.isra.0+0x1a>
 8009690:	f7ff ff2a 	bl	80094e8 <__errno>
 8009694:	2316      	movs	r3, #22
 8009696:	6003      	str	r3, [r0, #0]
 8009698:	2000      	movs	r0, #0
 800969a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969e:	4f3a      	ldr	r7, [pc, #232]	; (8009788 <_strtol_l.isra.0+0x104>)
 80096a0:	468e      	mov	lr, r1
 80096a2:	4676      	mov	r6, lr
 80096a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80096a8:	5de5      	ldrb	r5, [r4, r7]
 80096aa:	f015 0508 	ands.w	r5, r5, #8
 80096ae:	d1f8      	bne.n	80096a2 <_strtol_l.isra.0+0x1e>
 80096b0:	2c2d      	cmp	r4, #45	; 0x2d
 80096b2:	d134      	bne.n	800971e <_strtol_l.isra.0+0x9a>
 80096b4:	f89e 4000 	ldrb.w	r4, [lr]
 80096b8:	f04f 0801 	mov.w	r8, #1
 80096bc:	f106 0e02 	add.w	lr, r6, #2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d05c      	beq.n	800977e <_strtol_l.isra.0+0xfa>
 80096c4:	2b10      	cmp	r3, #16
 80096c6:	d10c      	bne.n	80096e2 <_strtol_l.isra.0+0x5e>
 80096c8:	2c30      	cmp	r4, #48	; 0x30
 80096ca:	d10a      	bne.n	80096e2 <_strtol_l.isra.0+0x5e>
 80096cc:	f89e 4000 	ldrb.w	r4, [lr]
 80096d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096d4:	2c58      	cmp	r4, #88	; 0x58
 80096d6:	d14d      	bne.n	8009774 <_strtol_l.isra.0+0xf0>
 80096d8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80096dc:	2310      	movs	r3, #16
 80096de:	f10e 0e02 	add.w	lr, lr, #2
 80096e2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80096e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80096ea:	2600      	movs	r6, #0
 80096ec:	fbbc f9f3 	udiv	r9, ip, r3
 80096f0:	4635      	mov	r5, r6
 80096f2:	fb03 ca19 	mls	sl, r3, r9, ip
 80096f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80096fa:	2f09      	cmp	r7, #9
 80096fc:	d818      	bhi.n	8009730 <_strtol_l.isra.0+0xac>
 80096fe:	463c      	mov	r4, r7
 8009700:	42a3      	cmp	r3, r4
 8009702:	dd24      	ble.n	800974e <_strtol_l.isra.0+0xca>
 8009704:	2e00      	cmp	r6, #0
 8009706:	db1f      	blt.n	8009748 <_strtol_l.isra.0+0xc4>
 8009708:	45a9      	cmp	r9, r5
 800970a:	d31d      	bcc.n	8009748 <_strtol_l.isra.0+0xc4>
 800970c:	d101      	bne.n	8009712 <_strtol_l.isra.0+0x8e>
 800970e:	45a2      	cmp	sl, r4
 8009710:	db1a      	blt.n	8009748 <_strtol_l.isra.0+0xc4>
 8009712:	fb05 4503 	mla	r5, r5, r3, r4
 8009716:	2601      	movs	r6, #1
 8009718:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800971c:	e7eb      	b.n	80096f6 <_strtol_l.isra.0+0x72>
 800971e:	2c2b      	cmp	r4, #43	; 0x2b
 8009720:	bf08      	it	eq
 8009722:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009726:	46a8      	mov	r8, r5
 8009728:	bf08      	it	eq
 800972a:	f106 0e02 	addeq.w	lr, r6, #2
 800972e:	e7c7      	b.n	80096c0 <_strtol_l.isra.0+0x3c>
 8009730:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009734:	2f19      	cmp	r7, #25
 8009736:	d801      	bhi.n	800973c <_strtol_l.isra.0+0xb8>
 8009738:	3c37      	subs	r4, #55	; 0x37
 800973a:	e7e1      	b.n	8009700 <_strtol_l.isra.0+0x7c>
 800973c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009740:	2f19      	cmp	r7, #25
 8009742:	d804      	bhi.n	800974e <_strtol_l.isra.0+0xca>
 8009744:	3c57      	subs	r4, #87	; 0x57
 8009746:	e7db      	b.n	8009700 <_strtol_l.isra.0+0x7c>
 8009748:	f04f 36ff 	mov.w	r6, #4294967295
 800974c:	e7e4      	b.n	8009718 <_strtol_l.isra.0+0x94>
 800974e:	2e00      	cmp	r6, #0
 8009750:	da05      	bge.n	800975e <_strtol_l.isra.0+0xda>
 8009752:	2322      	movs	r3, #34	; 0x22
 8009754:	6003      	str	r3, [r0, #0]
 8009756:	4665      	mov	r5, ip
 8009758:	b942      	cbnz	r2, 800976c <_strtol_l.isra.0+0xe8>
 800975a:	4628      	mov	r0, r5
 800975c:	e79d      	b.n	800969a <_strtol_l.isra.0+0x16>
 800975e:	f1b8 0f00 	cmp.w	r8, #0
 8009762:	d000      	beq.n	8009766 <_strtol_l.isra.0+0xe2>
 8009764:	426d      	negs	r5, r5
 8009766:	2a00      	cmp	r2, #0
 8009768:	d0f7      	beq.n	800975a <_strtol_l.isra.0+0xd6>
 800976a:	b10e      	cbz	r6, 8009770 <_strtol_l.isra.0+0xec>
 800976c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009770:	6011      	str	r1, [r2, #0]
 8009772:	e7f2      	b.n	800975a <_strtol_l.isra.0+0xd6>
 8009774:	2430      	movs	r4, #48	; 0x30
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1b3      	bne.n	80096e2 <_strtol_l.isra.0+0x5e>
 800977a:	2308      	movs	r3, #8
 800977c:	e7b1      	b.n	80096e2 <_strtol_l.isra.0+0x5e>
 800977e:	2c30      	cmp	r4, #48	; 0x30
 8009780:	d0a4      	beq.n	80096cc <_strtol_l.isra.0+0x48>
 8009782:	230a      	movs	r3, #10
 8009784:	e7ad      	b.n	80096e2 <_strtol_l.isra.0+0x5e>
 8009786:	bf00      	nop
 8009788:	0800ae4d 	.word	0x0800ae4d

0800978c <strtol>:
 800978c:	4613      	mov	r3, r2
 800978e:	460a      	mov	r2, r1
 8009790:	4601      	mov	r1, r0
 8009792:	4802      	ldr	r0, [pc, #8]	; (800979c <strtol+0x10>)
 8009794:	6800      	ldr	r0, [r0, #0]
 8009796:	f7ff bf75 	b.w	8009684 <_strtol_l.isra.0>
 800979a:	bf00      	nop
 800979c:	20000110 	.word	0x20000110

080097a0 <__assert_func>:
 80097a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097a2:	4614      	mov	r4, r2
 80097a4:	461a      	mov	r2, r3
 80097a6:	4b09      	ldr	r3, [pc, #36]	; (80097cc <__assert_func+0x2c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4605      	mov	r5, r0
 80097ac:	68d8      	ldr	r0, [r3, #12]
 80097ae:	b14c      	cbz	r4, 80097c4 <__assert_func+0x24>
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <__assert_func+0x30>)
 80097b2:	9100      	str	r1, [sp, #0]
 80097b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097b8:	4906      	ldr	r1, [pc, #24]	; (80097d4 <__assert_func+0x34>)
 80097ba:	462b      	mov	r3, r5
 80097bc:	f000 f80e 	bl	80097dc <fiprintf>
 80097c0:	f000 fdea 	bl	800a398 <abort>
 80097c4:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <__assert_func+0x38>)
 80097c6:	461c      	mov	r4, r3
 80097c8:	e7f3      	b.n	80097b2 <__assert_func+0x12>
 80097ca:	bf00      	nop
 80097cc:	20000110 	.word	0x20000110
 80097d0:	0800ae10 	.word	0x0800ae10
 80097d4:	0800ae1d 	.word	0x0800ae1d
 80097d8:	0800ae4b 	.word	0x0800ae4b

080097dc <fiprintf>:
 80097dc:	b40e      	push	{r1, r2, r3}
 80097de:	b503      	push	{r0, r1, lr}
 80097e0:	4601      	mov	r1, r0
 80097e2:	ab03      	add	r3, sp, #12
 80097e4:	4805      	ldr	r0, [pc, #20]	; (80097fc <fiprintf+0x20>)
 80097e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	f000 fa3f 	bl	8009c70 <_vfiprintf_r>
 80097f2:	b002      	add	sp, #8
 80097f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f8:	b003      	add	sp, #12
 80097fa:	4770      	bx	lr
 80097fc:	20000110 	.word	0x20000110

08009800 <malloc>:
 8009800:	4b02      	ldr	r3, [pc, #8]	; (800980c <malloc+0xc>)
 8009802:	4601      	mov	r1, r0
 8009804:	6818      	ldr	r0, [r3, #0]
 8009806:	f000 b853 	b.w	80098b0 <_malloc_r>
 800980a:	bf00      	nop
 800980c:	20000110 	.word	0x20000110

08009810 <_free_r>:
 8009810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009812:	2900      	cmp	r1, #0
 8009814:	d048      	beq.n	80098a8 <_free_r+0x98>
 8009816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800981a:	9001      	str	r0, [sp, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	f1a1 0404 	sub.w	r4, r1, #4
 8009822:	bfb8      	it	lt
 8009824:	18e4      	addlt	r4, r4, r3
 8009826:	f001 f805 	bl	800a834 <__malloc_lock>
 800982a:	4a20      	ldr	r2, [pc, #128]	; (80098ac <_free_r+0x9c>)
 800982c:	9801      	ldr	r0, [sp, #4]
 800982e:	6813      	ldr	r3, [r2, #0]
 8009830:	4615      	mov	r5, r2
 8009832:	b933      	cbnz	r3, 8009842 <_free_r+0x32>
 8009834:	6063      	str	r3, [r4, #4]
 8009836:	6014      	str	r4, [r2, #0]
 8009838:	b003      	add	sp, #12
 800983a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800983e:	f000 bfff 	b.w	800a840 <__malloc_unlock>
 8009842:	42a3      	cmp	r3, r4
 8009844:	d90b      	bls.n	800985e <_free_r+0x4e>
 8009846:	6821      	ldr	r1, [r4, #0]
 8009848:	1862      	adds	r2, r4, r1
 800984a:	4293      	cmp	r3, r2
 800984c:	bf04      	itt	eq
 800984e:	681a      	ldreq	r2, [r3, #0]
 8009850:	685b      	ldreq	r3, [r3, #4]
 8009852:	6063      	str	r3, [r4, #4]
 8009854:	bf04      	itt	eq
 8009856:	1852      	addeq	r2, r2, r1
 8009858:	6022      	streq	r2, [r4, #0]
 800985a:	602c      	str	r4, [r5, #0]
 800985c:	e7ec      	b.n	8009838 <_free_r+0x28>
 800985e:	461a      	mov	r2, r3
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	b10b      	cbz	r3, 8009868 <_free_r+0x58>
 8009864:	42a3      	cmp	r3, r4
 8009866:	d9fa      	bls.n	800985e <_free_r+0x4e>
 8009868:	6811      	ldr	r1, [r2, #0]
 800986a:	1855      	adds	r5, r2, r1
 800986c:	42a5      	cmp	r5, r4
 800986e:	d10b      	bne.n	8009888 <_free_r+0x78>
 8009870:	6824      	ldr	r4, [r4, #0]
 8009872:	4421      	add	r1, r4
 8009874:	1854      	adds	r4, r2, r1
 8009876:	42a3      	cmp	r3, r4
 8009878:	6011      	str	r1, [r2, #0]
 800987a:	d1dd      	bne.n	8009838 <_free_r+0x28>
 800987c:	681c      	ldr	r4, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	6053      	str	r3, [r2, #4]
 8009882:	4421      	add	r1, r4
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	e7d7      	b.n	8009838 <_free_r+0x28>
 8009888:	d902      	bls.n	8009890 <_free_r+0x80>
 800988a:	230c      	movs	r3, #12
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	e7d3      	b.n	8009838 <_free_r+0x28>
 8009890:	6825      	ldr	r5, [r4, #0]
 8009892:	1961      	adds	r1, r4, r5
 8009894:	428b      	cmp	r3, r1
 8009896:	bf04      	itt	eq
 8009898:	6819      	ldreq	r1, [r3, #0]
 800989a:	685b      	ldreq	r3, [r3, #4]
 800989c:	6063      	str	r3, [r4, #4]
 800989e:	bf04      	itt	eq
 80098a0:	1949      	addeq	r1, r1, r5
 80098a2:	6021      	streq	r1, [r4, #0]
 80098a4:	6054      	str	r4, [r2, #4]
 80098a6:	e7c7      	b.n	8009838 <_free_r+0x28>
 80098a8:	b003      	add	sp, #12
 80098aa:	bd30      	pop	{r4, r5, pc}
 80098ac:	20000f68 	.word	0x20000f68

080098b0 <_malloc_r>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	1ccd      	adds	r5, r1, #3
 80098b4:	f025 0503 	bic.w	r5, r5, #3
 80098b8:	3508      	adds	r5, #8
 80098ba:	2d0c      	cmp	r5, #12
 80098bc:	bf38      	it	cc
 80098be:	250c      	movcc	r5, #12
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	4606      	mov	r6, r0
 80098c4:	db01      	blt.n	80098ca <_malloc_r+0x1a>
 80098c6:	42a9      	cmp	r1, r5
 80098c8:	d903      	bls.n	80098d2 <_malloc_r+0x22>
 80098ca:	230c      	movs	r3, #12
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	2000      	movs	r0, #0
 80098d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d2:	f000 ffaf 	bl	800a834 <__malloc_lock>
 80098d6:	4921      	ldr	r1, [pc, #132]	; (800995c <_malloc_r+0xac>)
 80098d8:	680a      	ldr	r2, [r1, #0]
 80098da:	4614      	mov	r4, r2
 80098dc:	b99c      	cbnz	r4, 8009906 <_malloc_r+0x56>
 80098de:	4f20      	ldr	r7, [pc, #128]	; (8009960 <_malloc_r+0xb0>)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	b923      	cbnz	r3, 80098ee <_malloc_r+0x3e>
 80098e4:	4621      	mov	r1, r4
 80098e6:	4630      	mov	r0, r6
 80098e8:	f000 fc86 	bl	800a1f8 <_sbrk_r>
 80098ec:	6038      	str	r0, [r7, #0]
 80098ee:	4629      	mov	r1, r5
 80098f0:	4630      	mov	r0, r6
 80098f2:	f000 fc81 	bl	800a1f8 <_sbrk_r>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	d123      	bne.n	8009942 <_malloc_r+0x92>
 80098fa:	230c      	movs	r3, #12
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 ff9e 	bl	800a840 <__malloc_unlock>
 8009904:	e7e3      	b.n	80098ce <_malloc_r+0x1e>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	1b5b      	subs	r3, r3, r5
 800990a:	d417      	bmi.n	800993c <_malloc_r+0x8c>
 800990c:	2b0b      	cmp	r3, #11
 800990e:	d903      	bls.n	8009918 <_malloc_r+0x68>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	441c      	add	r4, r3
 8009914:	6025      	str	r5, [r4, #0]
 8009916:	e004      	b.n	8009922 <_malloc_r+0x72>
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	42a2      	cmp	r2, r4
 800991c:	bf0c      	ite	eq
 800991e:	600b      	streq	r3, [r1, #0]
 8009920:	6053      	strne	r3, [r2, #4]
 8009922:	4630      	mov	r0, r6
 8009924:	f000 ff8c 	bl	800a840 <__malloc_unlock>
 8009928:	f104 000b 	add.w	r0, r4, #11
 800992c:	1d23      	adds	r3, r4, #4
 800992e:	f020 0007 	bic.w	r0, r0, #7
 8009932:	1ac2      	subs	r2, r0, r3
 8009934:	d0cc      	beq.n	80098d0 <_malloc_r+0x20>
 8009936:	1a1b      	subs	r3, r3, r0
 8009938:	50a3      	str	r3, [r4, r2]
 800993a:	e7c9      	b.n	80098d0 <_malloc_r+0x20>
 800993c:	4622      	mov	r2, r4
 800993e:	6864      	ldr	r4, [r4, #4]
 8009940:	e7cc      	b.n	80098dc <_malloc_r+0x2c>
 8009942:	1cc4      	adds	r4, r0, #3
 8009944:	f024 0403 	bic.w	r4, r4, #3
 8009948:	42a0      	cmp	r0, r4
 800994a:	d0e3      	beq.n	8009914 <_malloc_r+0x64>
 800994c:	1a21      	subs	r1, r4, r0
 800994e:	4630      	mov	r0, r6
 8009950:	f000 fc52 	bl	800a1f8 <_sbrk_r>
 8009954:	3001      	adds	r0, #1
 8009956:	d1dd      	bne.n	8009914 <_malloc_r+0x64>
 8009958:	e7cf      	b.n	80098fa <_malloc_r+0x4a>
 800995a:	bf00      	nop
 800995c:	20000f68 	.word	0x20000f68
 8009960:	20000f6c 	.word	0x20000f6c

08009964 <__ssputs_r>:
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	688e      	ldr	r6, [r1, #8]
 800996a:	429e      	cmp	r6, r3
 800996c:	4682      	mov	sl, r0
 800996e:	460c      	mov	r4, r1
 8009970:	4690      	mov	r8, r2
 8009972:	461f      	mov	r7, r3
 8009974:	d838      	bhi.n	80099e8 <__ssputs_r+0x84>
 8009976:	898a      	ldrh	r2, [r1, #12]
 8009978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800997c:	d032      	beq.n	80099e4 <__ssputs_r+0x80>
 800997e:	6825      	ldr	r5, [r4, #0]
 8009980:	6909      	ldr	r1, [r1, #16]
 8009982:	eba5 0901 	sub.w	r9, r5, r1
 8009986:	6965      	ldr	r5, [r4, #20]
 8009988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800998c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009990:	3301      	adds	r3, #1
 8009992:	444b      	add	r3, r9
 8009994:	106d      	asrs	r5, r5, #1
 8009996:	429d      	cmp	r5, r3
 8009998:	bf38      	it	cc
 800999a:	461d      	movcc	r5, r3
 800999c:	0553      	lsls	r3, r2, #21
 800999e:	d531      	bpl.n	8009a04 <__ssputs_r+0xa0>
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7ff ff85 	bl	80098b0 <_malloc_r>
 80099a6:	4606      	mov	r6, r0
 80099a8:	b950      	cbnz	r0, 80099c0 <__ssputs_r+0x5c>
 80099aa:	230c      	movs	r3, #12
 80099ac:	f8ca 3000 	str.w	r3, [sl]
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c0:	6921      	ldr	r1, [r4, #16]
 80099c2:	464a      	mov	r2, r9
 80099c4:	f000 ff0e 	bl	800a7e4 <memcpy>
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	6126      	str	r6, [r4, #16]
 80099d6:	6165      	str	r5, [r4, #20]
 80099d8:	444e      	add	r6, r9
 80099da:	eba5 0509 	sub.w	r5, r5, r9
 80099de:	6026      	str	r6, [r4, #0]
 80099e0:	60a5      	str	r5, [r4, #8]
 80099e2:	463e      	mov	r6, r7
 80099e4:	42be      	cmp	r6, r7
 80099e6:	d900      	bls.n	80099ea <__ssputs_r+0x86>
 80099e8:	463e      	mov	r6, r7
 80099ea:	4632      	mov	r2, r6
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	4641      	mov	r1, r8
 80099f0:	f000 ff06 	bl	800a800 <memmove>
 80099f4:	68a3      	ldr	r3, [r4, #8]
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	1b9b      	subs	r3, r3, r6
 80099fa:	4432      	add	r2, r6
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	6022      	str	r2, [r4, #0]
 8009a00:	2000      	movs	r0, #0
 8009a02:	e7db      	b.n	80099bc <__ssputs_r+0x58>
 8009a04:	462a      	mov	r2, r5
 8009a06:	f000 ff21 	bl	800a84c <_realloc_r>
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d1e1      	bne.n	80099d4 <__ssputs_r+0x70>
 8009a10:	6921      	ldr	r1, [r4, #16]
 8009a12:	4650      	mov	r0, sl
 8009a14:	f7ff fefc 	bl	8009810 <_free_r>
 8009a18:	e7c7      	b.n	80099aa <__ssputs_r+0x46>
	...

08009a1c <_svfiprintf_r>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	4698      	mov	r8, r3
 8009a22:	898b      	ldrh	r3, [r1, #12]
 8009a24:	061b      	lsls	r3, r3, #24
 8009a26:	b09d      	sub	sp, #116	; 0x74
 8009a28:	4607      	mov	r7, r0
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	d50e      	bpl.n	8009a4e <_svfiprintf_r+0x32>
 8009a30:	690b      	ldr	r3, [r1, #16]
 8009a32:	b963      	cbnz	r3, 8009a4e <_svfiprintf_r+0x32>
 8009a34:	2140      	movs	r1, #64	; 0x40
 8009a36:	f7ff ff3b 	bl	80098b0 <_malloc_r>
 8009a3a:	6028      	str	r0, [r5, #0]
 8009a3c:	6128      	str	r0, [r5, #16]
 8009a3e:	b920      	cbnz	r0, 8009a4a <_svfiprintf_r+0x2e>
 8009a40:	230c      	movs	r3, #12
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	e0d1      	b.n	8009bee <_svfiprintf_r+0x1d2>
 8009a4a:	2340      	movs	r3, #64	; 0x40
 8009a4c:	616b      	str	r3, [r5, #20]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9309      	str	r3, [sp, #36]	; 0x24
 8009a52:	2320      	movs	r3, #32
 8009a54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a5c:	2330      	movs	r3, #48	; 0x30
 8009a5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c08 <_svfiprintf_r+0x1ec>
 8009a62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a66:	f04f 0901 	mov.w	r9, #1
 8009a6a:	4623      	mov	r3, r4
 8009a6c:	469a      	mov	sl, r3
 8009a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a72:	b10a      	cbz	r2, 8009a78 <_svfiprintf_r+0x5c>
 8009a74:	2a25      	cmp	r2, #37	; 0x25
 8009a76:	d1f9      	bne.n	8009a6c <_svfiprintf_r+0x50>
 8009a78:	ebba 0b04 	subs.w	fp, sl, r4
 8009a7c:	d00b      	beq.n	8009a96 <_svfiprintf_r+0x7a>
 8009a7e:	465b      	mov	r3, fp
 8009a80:	4622      	mov	r2, r4
 8009a82:	4629      	mov	r1, r5
 8009a84:	4638      	mov	r0, r7
 8009a86:	f7ff ff6d 	bl	8009964 <__ssputs_r>
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f000 80aa 	beq.w	8009be4 <_svfiprintf_r+0x1c8>
 8009a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a92:	445a      	add	r2, fp
 8009a94:	9209      	str	r2, [sp, #36]	; 0x24
 8009a96:	f89a 3000 	ldrb.w	r3, [sl]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 80a2 	beq.w	8009be4 <_svfiprintf_r+0x1c8>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aaa:	f10a 0a01 	add.w	sl, sl, #1
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	9307      	str	r3, [sp, #28]
 8009ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8009ab8:	4654      	mov	r4, sl
 8009aba:	2205      	movs	r2, #5
 8009abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac0:	4851      	ldr	r0, [pc, #324]	; (8009c08 <_svfiprintf_r+0x1ec>)
 8009ac2:	f7f6 fb8d 	bl	80001e0 <memchr>
 8009ac6:	9a04      	ldr	r2, [sp, #16]
 8009ac8:	b9d8      	cbnz	r0, 8009b02 <_svfiprintf_r+0xe6>
 8009aca:	06d0      	lsls	r0, r2, #27
 8009acc:	bf44      	itt	mi
 8009ace:	2320      	movmi	r3, #32
 8009ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad4:	0711      	lsls	r1, r2, #28
 8009ad6:	bf44      	itt	mi
 8009ad8:	232b      	movmi	r3, #43	; 0x2b
 8009ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ade:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae4:	d015      	beq.n	8009b12 <_svfiprintf_r+0xf6>
 8009ae6:	9a07      	ldr	r2, [sp, #28]
 8009ae8:	4654      	mov	r4, sl
 8009aea:	2000      	movs	r0, #0
 8009aec:	f04f 0c0a 	mov.w	ip, #10
 8009af0:	4621      	mov	r1, r4
 8009af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009af6:	3b30      	subs	r3, #48	; 0x30
 8009af8:	2b09      	cmp	r3, #9
 8009afa:	d94e      	bls.n	8009b9a <_svfiprintf_r+0x17e>
 8009afc:	b1b0      	cbz	r0, 8009b2c <_svfiprintf_r+0x110>
 8009afe:	9207      	str	r2, [sp, #28]
 8009b00:	e014      	b.n	8009b2c <_svfiprintf_r+0x110>
 8009b02:	eba0 0308 	sub.w	r3, r0, r8
 8009b06:	fa09 f303 	lsl.w	r3, r9, r3
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	46a2      	mov	sl, r4
 8009b10:	e7d2      	b.n	8009ab8 <_svfiprintf_r+0x9c>
 8009b12:	9b03      	ldr	r3, [sp, #12]
 8009b14:	1d19      	adds	r1, r3, #4
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	9103      	str	r1, [sp, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	bfbb      	ittet	lt
 8009b1e:	425b      	neglt	r3, r3
 8009b20:	f042 0202 	orrlt.w	r2, r2, #2
 8009b24:	9307      	strge	r3, [sp, #28]
 8009b26:	9307      	strlt	r3, [sp, #28]
 8009b28:	bfb8      	it	lt
 8009b2a:	9204      	strlt	r2, [sp, #16]
 8009b2c:	7823      	ldrb	r3, [r4, #0]
 8009b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b30:	d10c      	bne.n	8009b4c <_svfiprintf_r+0x130>
 8009b32:	7863      	ldrb	r3, [r4, #1]
 8009b34:	2b2a      	cmp	r3, #42	; 0x2a
 8009b36:	d135      	bne.n	8009ba4 <_svfiprintf_r+0x188>
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	1d1a      	adds	r2, r3, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	9203      	str	r2, [sp, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bfb8      	it	lt
 8009b44:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b48:	3402      	adds	r4, #2
 8009b4a:	9305      	str	r3, [sp, #20]
 8009b4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c18 <_svfiprintf_r+0x1fc>
 8009b50:	7821      	ldrb	r1, [r4, #0]
 8009b52:	2203      	movs	r2, #3
 8009b54:	4650      	mov	r0, sl
 8009b56:	f7f6 fb43 	bl	80001e0 <memchr>
 8009b5a:	b140      	cbz	r0, 8009b6e <_svfiprintf_r+0x152>
 8009b5c:	2340      	movs	r3, #64	; 0x40
 8009b5e:	eba0 000a 	sub.w	r0, r0, sl
 8009b62:	fa03 f000 	lsl.w	r0, r3, r0
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	4303      	orrs	r3, r0
 8009b6a:	3401      	adds	r4, #1
 8009b6c:	9304      	str	r3, [sp, #16]
 8009b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b72:	4826      	ldr	r0, [pc, #152]	; (8009c0c <_svfiprintf_r+0x1f0>)
 8009b74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b78:	2206      	movs	r2, #6
 8009b7a:	f7f6 fb31 	bl	80001e0 <memchr>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d038      	beq.n	8009bf4 <_svfiprintf_r+0x1d8>
 8009b82:	4b23      	ldr	r3, [pc, #140]	; (8009c10 <_svfiprintf_r+0x1f4>)
 8009b84:	bb1b      	cbnz	r3, 8009bce <_svfiprintf_r+0x1b2>
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	3307      	adds	r3, #7
 8009b8a:	f023 0307 	bic.w	r3, r3, #7
 8009b8e:	3308      	adds	r3, #8
 8009b90:	9303      	str	r3, [sp, #12]
 8009b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b94:	4433      	add	r3, r6
 8009b96:	9309      	str	r3, [sp, #36]	; 0x24
 8009b98:	e767      	b.n	8009a6a <_svfiprintf_r+0x4e>
 8009b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	2001      	movs	r0, #1
 8009ba2:	e7a5      	b.n	8009af0 <_svfiprintf_r+0xd4>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	3401      	adds	r4, #1
 8009ba8:	9305      	str	r3, [sp, #20]
 8009baa:	4619      	mov	r1, r3
 8009bac:	f04f 0c0a 	mov.w	ip, #10
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb6:	3a30      	subs	r2, #48	; 0x30
 8009bb8:	2a09      	cmp	r2, #9
 8009bba:	d903      	bls.n	8009bc4 <_svfiprintf_r+0x1a8>
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0c5      	beq.n	8009b4c <_svfiprintf_r+0x130>
 8009bc0:	9105      	str	r1, [sp, #20]
 8009bc2:	e7c3      	b.n	8009b4c <_svfiprintf_r+0x130>
 8009bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bc8:	4604      	mov	r4, r0
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e7f0      	b.n	8009bb0 <_svfiprintf_r+0x194>
 8009bce:	ab03      	add	r3, sp, #12
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	462a      	mov	r2, r5
 8009bd4:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <_svfiprintf_r+0x1f8>)
 8009bd6:	a904      	add	r1, sp, #16
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f3af 8000 	nop.w
 8009bde:	1c42      	adds	r2, r0, #1
 8009be0:	4606      	mov	r6, r0
 8009be2:	d1d6      	bne.n	8009b92 <_svfiprintf_r+0x176>
 8009be4:	89ab      	ldrh	r3, [r5, #12]
 8009be6:	065b      	lsls	r3, r3, #25
 8009be8:	f53f af2c 	bmi.w	8009a44 <_svfiprintf_r+0x28>
 8009bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bee:	b01d      	add	sp, #116	; 0x74
 8009bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	ab03      	add	r3, sp, #12
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <_svfiprintf_r+0x1f8>)
 8009bfc:	a904      	add	r1, sp, #16
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f000 f9d4 	bl	8009fac <_printf_i>
 8009c04:	e7eb      	b.n	8009bde <_svfiprintf_r+0x1c2>
 8009c06:	bf00      	nop
 8009c08:	0800af4d 	.word	0x0800af4d
 8009c0c:	0800af57 	.word	0x0800af57
 8009c10:	00000000 	.word	0x00000000
 8009c14:	08009965 	.word	0x08009965
 8009c18:	0800af53 	.word	0x0800af53

08009c1c <__sfputc_r>:
 8009c1c:	6893      	ldr	r3, [r2, #8]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	b410      	push	{r4}
 8009c24:	6093      	str	r3, [r2, #8]
 8009c26:	da08      	bge.n	8009c3a <__sfputc_r+0x1e>
 8009c28:	6994      	ldr	r4, [r2, #24]
 8009c2a:	42a3      	cmp	r3, r4
 8009c2c:	db01      	blt.n	8009c32 <__sfputc_r+0x16>
 8009c2e:	290a      	cmp	r1, #10
 8009c30:	d103      	bne.n	8009c3a <__sfputc_r+0x1e>
 8009c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c36:	f000 baef 	b.w	800a218 <__swbuf_r>
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	1c58      	adds	r0, r3, #1
 8009c3e:	6010      	str	r0, [r2, #0]
 8009c40:	7019      	strb	r1, [r3, #0]
 8009c42:	4608      	mov	r0, r1
 8009c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <__sfputs_r>:
 8009c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	460f      	mov	r7, r1
 8009c50:	4614      	mov	r4, r2
 8009c52:	18d5      	adds	r5, r2, r3
 8009c54:	42ac      	cmp	r4, r5
 8009c56:	d101      	bne.n	8009c5c <__sfputs_r+0x12>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e007      	b.n	8009c6c <__sfputs_r+0x22>
 8009c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c60:	463a      	mov	r2, r7
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7ff ffda 	bl	8009c1c <__sfputc_r>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	d1f3      	bne.n	8009c54 <__sfputs_r+0xa>
 8009c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c70 <_vfiprintf_r>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	460d      	mov	r5, r1
 8009c76:	b09d      	sub	sp, #116	; 0x74
 8009c78:	4614      	mov	r4, r2
 8009c7a:	4698      	mov	r8, r3
 8009c7c:	4606      	mov	r6, r0
 8009c7e:	b118      	cbz	r0, 8009c88 <_vfiprintf_r+0x18>
 8009c80:	6983      	ldr	r3, [r0, #24]
 8009c82:	b90b      	cbnz	r3, 8009c88 <_vfiprintf_r+0x18>
 8009c84:	f000 fcaa 	bl	800a5dc <__sinit>
 8009c88:	4b89      	ldr	r3, [pc, #548]	; (8009eb0 <_vfiprintf_r+0x240>)
 8009c8a:	429d      	cmp	r5, r3
 8009c8c:	d11b      	bne.n	8009cc6 <_vfiprintf_r+0x56>
 8009c8e:	6875      	ldr	r5, [r6, #4]
 8009c90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c92:	07d9      	lsls	r1, r3, #31
 8009c94:	d405      	bmi.n	8009ca2 <_vfiprintf_r+0x32>
 8009c96:	89ab      	ldrh	r3, [r5, #12]
 8009c98:	059a      	lsls	r2, r3, #22
 8009c9a:	d402      	bmi.n	8009ca2 <_vfiprintf_r+0x32>
 8009c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c9e:	f000 fd3b 	bl	800a718 <__retarget_lock_acquire_recursive>
 8009ca2:	89ab      	ldrh	r3, [r5, #12]
 8009ca4:	071b      	lsls	r3, r3, #28
 8009ca6:	d501      	bpl.n	8009cac <_vfiprintf_r+0x3c>
 8009ca8:	692b      	ldr	r3, [r5, #16]
 8009caa:	b9eb      	cbnz	r3, 8009ce8 <_vfiprintf_r+0x78>
 8009cac:	4629      	mov	r1, r5
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f000 fb04 	bl	800a2bc <__swsetup_r>
 8009cb4:	b1c0      	cbz	r0, 8009ce8 <_vfiprintf_r+0x78>
 8009cb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cb8:	07dc      	lsls	r4, r3, #31
 8009cba:	d50e      	bpl.n	8009cda <_vfiprintf_r+0x6a>
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	b01d      	add	sp, #116	; 0x74
 8009cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc6:	4b7b      	ldr	r3, [pc, #492]	; (8009eb4 <_vfiprintf_r+0x244>)
 8009cc8:	429d      	cmp	r5, r3
 8009cca:	d101      	bne.n	8009cd0 <_vfiprintf_r+0x60>
 8009ccc:	68b5      	ldr	r5, [r6, #8]
 8009cce:	e7df      	b.n	8009c90 <_vfiprintf_r+0x20>
 8009cd0:	4b79      	ldr	r3, [pc, #484]	; (8009eb8 <_vfiprintf_r+0x248>)
 8009cd2:	429d      	cmp	r5, r3
 8009cd4:	bf08      	it	eq
 8009cd6:	68f5      	ldreq	r5, [r6, #12]
 8009cd8:	e7da      	b.n	8009c90 <_vfiprintf_r+0x20>
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	0598      	lsls	r0, r3, #22
 8009cde:	d4ed      	bmi.n	8009cbc <_vfiprintf_r+0x4c>
 8009ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ce2:	f000 fd1a 	bl	800a71a <__retarget_lock_release_recursive>
 8009ce6:	e7e9      	b.n	8009cbc <_vfiprintf_r+0x4c>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	2320      	movs	r3, #32
 8009cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cf6:	2330      	movs	r3, #48	; 0x30
 8009cf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ebc <_vfiprintf_r+0x24c>
 8009cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d00:	f04f 0901 	mov.w	r9, #1
 8009d04:	4623      	mov	r3, r4
 8009d06:	469a      	mov	sl, r3
 8009d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d0c:	b10a      	cbz	r2, 8009d12 <_vfiprintf_r+0xa2>
 8009d0e:	2a25      	cmp	r2, #37	; 0x25
 8009d10:	d1f9      	bne.n	8009d06 <_vfiprintf_r+0x96>
 8009d12:	ebba 0b04 	subs.w	fp, sl, r4
 8009d16:	d00b      	beq.n	8009d30 <_vfiprintf_r+0xc0>
 8009d18:	465b      	mov	r3, fp
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff ff93 	bl	8009c4a <__sfputs_r>
 8009d24:	3001      	adds	r0, #1
 8009d26:	f000 80aa 	beq.w	8009e7e <_vfiprintf_r+0x20e>
 8009d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d2c:	445a      	add	r2, fp
 8009d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d30:	f89a 3000 	ldrb.w	r3, [sl]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 80a2 	beq.w	8009e7e <_vfiprintf_r+0x20e>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d44:	f10a 0a01 	add.w	sl, sl, #1
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d50:	931a      	str	r3, [sp, #104]	; 0x68
 8009d52:	4654      	mov	r4, sl
 8009d54:	2205      	movs	r2, #5
 8009d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5a:	4858      	ldr	r0, [pc, #352]	; (8009ebc <_vfiprintf_r+0x24c>)
 8009d5c:	f7f6 fa40 	bl	80001e0 <memchr>
 8009d60:	9a04      	ldr	r2, [sp, #16]
 8009d62:	b9d8      	cbnz	r0, 8009d9c <_vfiprintf_r+0x12c>
 8009d64:	06d1      	lsls	r1, r2, #27
 8009d66:	bf44      	itt	mi
 8009d68:	2320      	movmi	r3, #32
 8009d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d6e:	0713      	lsls	r3, r2, #28
 8009d70:	bf44      	itt	mi
 8009d72:	232b      	movmi	r3, #43	; 0x2b
 8009d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d78:	f89a 3000 	ldrb.w	r3, [sl]
 8009d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d7e:	d015      	beq.n	8009dac <_vfiprintf_r+0x13c>
 8009d80:	9a07      	ldr	r2, [sp, #28]
 8009d82:	4654      	mov	r4, sl
 8009d84:	2000      	movs	r0, #0
 8009d86:	f04f 0c0a 	mov.w	ip, #10
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d90:	3b30      	subs	r3, #48	; 0x30
 8009d92:	2b09      	cmp	r3, #9
 8009d94:	d94e      	bls.n	8009e34 <_vfiprintf_r+0x1c4>
 8009d96:	b1b0      	cbz	r0, 8009dc6 <_vfiprintf_r+0x156>
 8009d98:	9207      	str	r2, [sp, #28]
 8009d9a:	e014      	b.n	8009dc6 <_vfiprintf_r+0x156>
 8009d9c:	eba0 0308 	sub.w	r3, r0, r8
 8009da0:	fa09 f303 	lsl.w	r3, r9, r3
 8009da4:	4313      	orrs	r3, r2
 8009da6:	9304      	str	r3, [sp, #16]
 8009da8:	46a2      	mov	sl, r4
 8009daa:	e7d2      	b.n	8009d52 <_vfiprintf_r+0xe2>
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	1d19      	adds	r1, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9103      	str	r1, [sp, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfbb      	ittet	lt
 8009db8:	425b      	neglt	r3, r3
 8009dba:	f042 0202 	orrlt.w	r2, r2, #2
 8009dbe:	9307      	strge	r3, [sp, #28]
 8009dc0:	9307      	strlt	r3, [sp, #28]
 8009dc2:	bfb8      	it	lt
 8009dc4:	9204      	strlt	r2, [sp, #16]
 8009dc6:	7823      	ldrb	r3, [r4, #0]
 8009dc8:	2b2e      	cmp	r3, #46	; 0x2e
 8009dca:	d10c      	bne.n	8009de6 <_vfiprintf_r+0x176>
 8009dcc:	7863      	ldrb	r3, [r4, #1]
 8009dce:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd0:	d135      	bne.n	8009e3e <_vfiprintf_r+0x1ce>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	1d1a      	adds	r2, r3, #4
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	9203      	str	r2, [sp, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfb8      	it	lt
 8009dde:	f04f 33ff 	movlt.w	r3, #4294967295
 8009de2:	3402      	adds	r4, #2
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ecc <_vfiprintf_r+0x25c>
 8009dea:	7821      	ldrb	r1, [r4, #0]
 8009dec:	2203      	movs	r2, #3
 8009dee:	4650      	mov	r0, sl
 8009df0:	f7f6 f9f6 	bl	80001e0 <memchr>
 8009df4:	b140      	cbz	r0, 8009e08 <_vfiprintf_r+0x198>
 8009df6:	2340      	movs	r3, #64	; 0x40
 8009df8:	eba0 000a 	sub.w	r0, r0, sl
 8009dfc:	fa03 f000 	lsl.w	r0, r3, r0
 8009e00:	9b04      	ldr	r3, [sp, #16]
 8009e02:	4303      	orrs	r3, r0
 8009e04:	3401      	adds	r4, #1
 8009e06:	9304      	str	r3, [sp, #16]
 8009e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0c:	482c      	ldr	r0, [pc, #176]	; (8009ec0 <_vfiprintf_r+0x250>)
 8009e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e12:	2206      	movs	r2, #6
 8009e14:	f7f6 f9e4 	bl	80001e0 <memchr>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d03f      	beq.n	8009e9c <_vfiprintf_r+0x22c>
 8009e1c:	4b29      	ldr	r3, [pc, #164]	; (8009ec4 <_vfiprintf_r+0x254>)
 8009e1e:	bb1b      	cbnz	r3, 8009e68 <_vfiprintf_r+0x1f8>
 8009e20:	9b03      	ldr	r3, [sp, #12]
 8009e22:	3307      	adds	r3, #7
 8009e24:	f023 0307 	bic.w	r3, r3, #7
 8009e28:	3308      	adds	r3, #8
 8009e2a:	9303      	str	r3, [sp, #12]
 8009e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2e:	443b      	add	r3, r7
 8009e30:	9309      	str	r3, [sp, #36]	; 0x24
 8009e32:	e767      	b.n	8009d04 <_vfiprintf_r+0x94>
 8009e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e38:	460c      	mov	r4, r1
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	e7a5      	b.n	8009d8a <_vfiprintf_r+0x11a>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	3401      	adds	r4, #1
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	4619      	mov	r1, r3
 8009e46:	f04f 0c0a 	mov.w	ip, #10
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e50:	3a30      	subs	r2, #48	; 0x30
 8009e52:	2a09      	cmp	r2, #9
 8009e54:	d903      	bls.n	8009e5e <_vfiprintf_r+0x1ee>
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0c5      	beq.n	8009de6 <_vfiprintf_r+0x176>
 8009e5a:	9105      	str	r1, [sp, #20]
 8009e5c:	e7c3      	b.n	8009de6 <_vfiprintf_r+0x176>
 8009e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e62:	4604      	mov	r4, r0
 8009e64:	2301      	movs	r3, #1
 8009e66:	e7f0      	b.n	8009e4a <_vfiprintf_r+0x1da>
 8009e68:	ab03      	add	r3, sp, #12
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4b16      	ldr	r3, [pc, #88]	; (8009ec8 <_vfiprintf_r+0x258>)
 8009e70:	a904      	add	r1, sp, #16
 8009e72:	4630      	mov	r0, r6
 8009e74:	f3af 8000 	nop.w
 8009e78:	4607      	mov	r7, r0
 8009e7a:	1c78      	adds	r0, r7, #1
 8009e7c:	d1d6      	bne.n	8009e2c <_vfiprintf_r+0x1bc>
 8009e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e80:	07d9      	lsls	r1, r3, #31
 8009e82:	d405      	bmi.n	8009e90 <_vfiprintf_r+0x220>
 8009e84:	89ab      	ldrh	r3, [r5, #12]
 8009e86:	059a      	lsls	r2, r3, #22
 8009e88:	d402      	bmi.n	8009e90 <_vfiprintf_r+0x220>
 8009e8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e8c:	f000 fc45 	bl	800a71a <__retarget_lock_release_recursive>
 8009e90:	89ab      	ldrh	r3, [r5, #12]
 8009e92:	065b      	lsls	r3, r3, #25
 8009e94:	f53f af12 	bmi.w	8009cbc <_vfiprintf_r+0x4c>
 8009e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e9a:	e711      	b.n	8009cc0 <_vfiprintf_r+0x50>
 8009e9c:	ab03      	add	r3, sp, #12
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	462a      	mov	r2, r5
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <_vfiprintf_r+0x258>)
 8009ea4:	a904      	add	r1, sp, #16
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f000 f880 	bl	8009fac <_printf_i>
 8009eac:	e7e4      	b.n	8009e78 <_vfiprintf_r+0x208>
 8009eae:	bf00      	nop
 8009eb0:	0800afa0 	.word	0x0800afa0
 8009eb4:	0800afc0 	.word	0x0800afc0
 8009eb8:	0800af80 	.word	0x0800af80
 8009ebc:	0800af4d 	.word	0x0800af4d
 8009ec0:	0800af57 	.word	0x0800af57
 8009ec4:	00000000 	.word	0x00000000
 8009ec8:	08009c4b 	.word	0x08009c4b
 8009ecc:	0800af53 	.word	0x0800af53

08009ed0 <_printf_common>:
 8009ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	4699      	mov	r9, r3
 8009ed8:	688a      	ldr	r2, [r1, #8]
 8009eda:	690b      	ldr	r3, [r1, #16]
 8009edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	bfb8      	it	lt
 8009ee4:	4613      	movlt	r3, r2
 8009ee6:	6033      	str	r3, [r6, #0]
 8009ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eec:	4607      	mov	r7, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	b10a      	cbz	r2, 8009ef6 <_printf_common+0x26>
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	6033      	str	r3, [r6, #0]
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	0699      	lsls	r1, r3, #26
 8009efa:	bf42      	ittt	mi
 8009efc:	6833      	ldrmi	r3, [r6, #0]
 8009efe:	3302      	addmi	r3, #2
 8009f00:	6033      	strmi	r3, [r6, #0]
 8009f02:	6825      	ldr	r5, [r4, #0]
 8009f04:	f015 0506 	ands.w	r5, r5, #6
 8009f08:	d106      	bne.n	8009f18 <_printf_common+0x48>
 8009f0a:	f104 0a19 	add.w	sl, r4, #25
 8009f0e:	68e3      	ldr	r3, [r4, #12]
 8009f10:	6832      	ldr	r2, [r6, #0]
 8009f12:	1a9b      	subs	r3, r3, r2
 8009f14:	42ab      	cmp	r3, r5
 8009f16:	dc26      	bgt.n	8009f66 <_printf_common+0x96>
 8009f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f1c:	1e13      	subs	r3, r2, #0
 8009f1e:	6822      	ldr	r2, [r4, #0]
 8009f20:	bf18      	it	ne
 8009f22:	2301      	movne	r3, #1
 8009f24:	0692      	lsls	r2, r2, #26
 8009f26:	d42b      	bmi.n	8009f80 <_printf_common+0xb0>
 8009f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	4638      	mov	r0, r7
 8009f30:	47c0      	blx	r8
 8009f32:	3001      	adds	r0, #1
 8009f34:	d01e      	beq.n	8009f74 <_printf_common+0xa4>
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	68e5      	ldr	r5, [r4, #12]
 8009f3a:	6832      	ldr	r2, [r6, #0]
 8009f3c:	f003 0306 	and.w	r3, r3, #6
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	bf08      	it	eq
 8009f44:	1aad      	subeq	r5, r5, r2
 8009f46:	68a3      	ldr	r3, [r4, #8]
 8009f48:	6922      	ldr	r2, [r4, #16]
 8009f4a:	bf0c      	ite	eq
 8009f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f50:	2500      	movne	r5, #0
 8009f52:	4293      	cmp	r3, r2
 8009f54:	bfc4      	itt	gt
 8009f56:	1a9b      	subgt	r3, r3, r2
 8009f58:	18ed      	addgt	r5, r5, r3
 8009f5a:	2600      	movs	r6, #0
 8009f5c:	341a      	adds	r4, #26
 8009f5e:	42b5      	cmp	r5, r6
 8009f60:	d11a      	bne.n	8009f98 <_printf_common+0xc8>
 8009f62:	2000      	movs	r0, #0
 8009f64:	e008      	b.n	8009f78 <_printf_common+0xa8>
 8009f66:	2301      	movs	r3, #1
 8009f68:	4652      	mov	r2, sl
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	47c0      	blx	r8
 8009f70:	3001      	adds	r0, #1
 8009f72:	d103      	bne.n	8009f7c <_printf_common+0xac>
 8009f74:	f04f 30ff 	mov.w	r0, #4294967295
 8009f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7c:	3501      	adds	r5, #1
 8009f7e:	e7c6      	b.n	8009f0e <_printf_common+0x3e>
 8009f80:	18e1      	adds	r1, r4, r3
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	2030      	movs	r0, #48	; 0x30
 8009f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f8a:	4422      	add	r2, r4
 8009f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f94:	3302      	adds	r3, #2
 8009f96:	e7c7      	b.n	8009f28 <_printf_common+0x58>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	4622      	mov	r2, r4
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	47c0      	blx	r8
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d0e6      	beq.n	8009f74 <_printf_common+0xa4>
 8009fa6:	3601      	adds	r6, #1
 8009fa8:	e7d9      	b.n	8009f5e <_printf_common+0x8e>
	...

08009fac <_printf_i>:
 8009fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb0:	460c      	mov	r4, r1
 8009fb2:	4691      	mov	r9, r2
 8009fb4:	7e27      	ldrb	r7, [r4, #24]
 8009fb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fb8:	2f78      	cmp	r7, #120	; 0x78
 8009fba:	4680      	mov	r8, r0
 8009fbc:	469a      	mov	sl, r3
 8009fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc2:	d807      	bhi.n	8009fd4 <_printf_i+0x28>
 8009fc4:	2f62      	cmp	r7, #98	; 0x62
 8009fc6:	d80a      	bhi.n	8009fde <_printf_i+0x32>
 8009fc8:	2f00      	cmp	r7, #0
 8009fca:	f000 80d8 	beq.w	800a17e <_printf_i+0x1d2>
 8009fce:	2f58      	cmp	r7, #88	; 0x58
 8009fd0:	f000 80a3 	beq.w	800a11a <_printf_i+0x16e>
 8009fd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fdc:	e03a      	b.n	800a054 <_printf_i+0xa8>
 8009fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fe2:	2b15      	cmp	r3, #21
 8009fe4:	d8f6      	bhi.n	8009fd4 <_printf_i+0x28>
 8009fe6:	a001      	add	r0, pc, #4	; (adr r0, 8009fec <_printf_i+0x40>)
 8009fe8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009fec:	0800a045 	.word	0x0800a045
 8009ff0:	0800a059 	.word	0x0800a059
 8009ff4:	08009fd5 	.word	0x08009fd5
 8009ff8:	08009fd5 	.word	0x08009fd5
 8009ffc:	08009fd5 	.word	0x08009fd5
 800a000:	08009fd5 	.word	0x08009fd5
 800a004:	0800a059 	.word	0x0800a059
 800a008:	08009fd5 	.word	0x08009fd5
 800a00c:	08009fd5 	.word	0x08009fd5
 800a010:	08009fd5 	.word	0x08009fd5
 800a014:	08009fd5 	.word	0x08009fd5
 800a018:	0800a165 	.word	0x0800a165
 800a01c:	0800a089 	.word	0x0800a089
 800a020:	0800a147 	.word	0x0800a147
 800a024:	08009fd5 	.word	0x08009fd5
 800a028:	08009fd5 	.word	0x08009fd5
 800a02c:	0800a187 	.word	0x0800a187
 800a030:	08009fd5 	.word	0x08009fd5
 800a034:	0800a089 	.word	0x0800a089
 800a038:	08009fd5 	.word	0x08009fd5
 800a03c:	08009fd5 	.word	0x08009fd5
 800a040:	0800a14f 	.word	0x0800a14f
 800a044:	680b      	ldr	r3, [r1, #0]
 800a046:	1d1a      	adds	r2, r3, #4
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	600a      	str	r2, [r1, #0]
 800a04c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a054:	2301      	movs	r3, #1
 800a056:	e0a3      	b.n	800a1a0 <_printf_i+0x1f4>
 800a058:	6825      	ldr	r5, [r4, #0]
 800a05a:	6808      	ldr	r0, [r1, #0]
 800a05c:	062e      	lsls	r6, r5, #24
 800a05e:	f100 0304 	add.w	r3, r0, #4
 800a062:	d50a      	bpl.n	800a07a <_printf_i+0xce>
 800a064:	6805      	ldr	r5, [r0, #0]
 800a066:	600b      	str	r3, [r1, #0]
 800a068:	2d00      	cmp	r5, #0
 800a06a:	da03      	bge.n	800a074 <_printf_i+0xc8>
 800a06c:	232d      	movs	r3, #45	; 0x2d
 800a06e:	426d      	negs	r5, r5
 800a070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a074:	485e      	ldr	r0, [pc, #376]	; (800a1f0 <_printf_i+0x244>)
 800a076:	230a      	movs	r3, #10
 800a078:	e019      	b.n	800a0ae <_printf_i+0x102>
 800a07a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a07e:	6805      	ldr	r5, [r0, #0]
 800a080:	600b      	str	r3, [r1, #0]
 800a082:	bf18      	it	ne
 800a084:	b22d      	sxthne	r5, r5
 800a086:	e7ef      	b.n	800a068 <_printf_i+0xbc>
 800a088:	680b      	ldr	r3, [r1, #0]
 800a08a:	6825      	ldr	r5, [r4, #0]
 800a08c:	1d18      	adds	r0, r3, #4
 800a08e:	6008      	str	r0, [r1, #0]
 800a090:	0628      	lsls	r0, r5, #24
 800a092:	d501      	bpl.n	800a098 <_printf_i+0xec>
 800a094:	681d      	ldr	r5, [r3, #0]
 800a096:	e002      	b.n	800a09e <_printf_i+0xf2>
 800a098:	0669      	lsls	r1, r5, #25
 800a09a:	d5fb      	bpl.n	800a094 <_printf_i+0xe8>
 800a09c:	881d      	ldrh	r5, [r3, #0]
 800a09e:	4854      	ldr	r0, [pc, #336]	; (800a1f0 <_printf_i+0x244>)
 800a0a0:	2f6f      	cmp	r7, #111	; 0x6f
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2308      	moveq	r3, #8
 800a0a6:	230a      	movne	r3, #10
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0ae:	6866      	ldr	r6, [r4, #4]
 800a0b0:	60a6      	str	r6, [r4, #8]
 800a0b2:	2e00      	cmp	r6, #0
 800a0b4:	bfa2      	ittt	ge
 800a0b6:	6821      	ldrge	r1, [r4, #0]
 800a0b8:	f021 0104 	bicge.w	r1, r1, #4
 800a0bc:	6021      	strge	r1, [r4, #0]
 800a0be:	b90d      	cbnz	r5, 800a0c4 <_printf_i+0x118>
 800a0c0:	2e00      	cmp	r6, #0
 800a0c2:	d04d      	beq.n	800a160 <_printf_i+0x1b4>
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0ca:	fb03 5711 	mls	r7, r3, r1, r5
 800a0ce:	5dc7      	ldrb	r7, [r0, r7]
 800a0d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0d4:	462f      	mov	r7, r5
 800a0d6:	42bb      	cmp	r3, r7
 800a0d8:	460d      	mov	r5, r1
 800a0da:	d9f4      	bls.n	800a0c6 <_printf_i+0x11a>
 800a0dc:	2b08      	cmp	r3, #8
 800a0de:	d10b      	bne.n	800a0f8 <_printf_i+0x14c>
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	07df      	lsls	r7, r3, #31
 800a0e4:	d508      	bpl.n	800a0f8 <_printf_i+0x14c>
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	6861      	ldr	r1, [r4, #4]
 800a0ea:	4299      	cmp	r1, r3
 800a0ec:	bfde      	ittt	le
 800a0ee:	2330      	movle	r3, #48	; 0x30
 800a0f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0f8:	1b92      	subs	r2, r2, r6
 800a0fa:	6122      	str	r2, [r4, #16]
 800a0fc:	f8cd a000 	str.w	sl, [sp]
 800a100:	464b      	mov	r3, r9
 800a102:	aa03      	add	r2, sp, #12
 800a104:	4621      	mov	r1, r4
 800a106:	4640      	mov	r0, r8
 800a108:	f7ff fee2 	bl	8009ed0 <_printf_common>
 800a10c:	3001      	adds	r0, #1
 800a10e:	d14c      	bne.n	800a1aa <_printf_i+0x1fe>
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	b004      	add	sp, #16
 800a116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a11a:	4835      	ldr	r0, [pc, #212]	; (800a1f0 <_printf_i+0x244>)
 800a11c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	680e      	ldr	r6, [r1, #0]
 800a124:	061f      	lsls	r7, r3, #24
 800a126:	f856 5b04 	ldr.w	r5, [r6], #4
 800a12a:	600e      	str	r6, [r1, #0]
 800a12c:	d514      	bpl.n	800a158 <_printf_i+0x1ac>
 800a12e:	07d9      	lsls	r1, r3, #31
 800a130:	bf44      	itt	mi
 800a132:	f043 0320 	orrmi.w	r3, r3, #32
 800a136:	6023      	strmi	r3, [r4, #0]
 800a138:	b91d      	cbnz	r5, 800a142 <_printf_i+0x196>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	f023 0320 	bic.w	r3, r3, #32
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	2310      	movs	r3, #16
 800a144:	e7b0      	b.n	800a0a8 <_printf_i+0xfc>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	f043 0320 	orr.w	r3, r3, #32
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	2378      	movs	r3, #120	; 0x78
 800a150:	4828      	ldr	r0, [pc, #160]	; (800a1f4 <_printf_i+0x248>)
 800a152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a156:	e7e3      	b.n	800a120 <_printf_i+0x174>
 800a158:	065e      	lsls	r6, r3, #25
 800a15a:	bf48      	it	mi
 800a15c:	b2ad      	uxthmi	r5, r5
 800a15e:	e7e6      	b.n	800a12e <_printf_i+0x182>
 800a160:	4616      	mov	r6, r2
 800a162:	e7bb      	b.n	800a0dc <_printf_i+0x130>
 800a164:	680b      	ldr	r3, [r1, #0]
 800a166:	6826      	ldr	r6, [r4, #0]
 800a168:	6960      	ldr	r0, [r4, #20]
 800a16a:	1d1d      	adds	r5, r3, #4
 800a16c:	600d      	str	r5, [r1, #0]
 800a16e:	0635      	lsls	r5, r6, #24
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	d501      	bpl.n	800a178 <_printf_i+0x1cc>
 800a174:	6018      	str	r0, [r3, #0]
 800a176:	e002      	b.n	800a17e <_printf_i+0x1d2>
 800a178:	0671      	lsls	r1, r6, #25
 800a17a:	d5fb      	bpl.n	800a174 <_printf_i+0x1c8>
 800a17c:	8018      	strh	r0, [r3, #0]
 800a17e:	2300      	movs	r3, #0
 800a180:	6123      	str	r3, [r4, #16]
 800a182:	4616      	mov	r6, r2
 800a184:	e7ba      	b.n	800a0fc <_printf_i+0x150>
 800a186:	680b      	ldr	r3, [r1, #0]
 800a188:	1d1a      	adds	r2, r3, #4
 800a18a:	600a      	str	r2, [r1, #0]
 800a18c:	681e      	ldr	r6, [r3, #0]
 800a18e:	6862      	ldr	r2, [r4, #4]
 800a190:	2100      	movs	r1, #0
 800a192:	4630      	mov	r0, r6
 800a194:	f7f6 f824 	bl	80001e0 <memchr>
 800a198:	b108      	cbz	r0, 800a19e <_printf_i+0x1f2>
 800a19a:	1b80      	subs	r0, r0, r6
 800a19c:	6060      	str	r0, [r4, #4]
 800a19e:	6863      	ldr	r3, [r4, #4]
 800a1a0:	6123      	str	r3, [r4, #16]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a8:	e7a8      	b.n	800a0fc <_printf_i+0x150>
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	47d0      	blx	sl
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d0ab      	beq.n	800a110 <_printf_i+0x164>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	079b      	lsls	r3, r3, #30
 800a1bc:	d413      	bmi.n	800a1e6 <_printf_i+0x23a>
 800a1be:	68e0      	ldr	r0, [r4, #12]
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	4298      	cmp	r0, r3
 800a1c4:	bfb8      	it	lt
 800a1c6:	4618      	movlt	r0, r3
 800a1c8:	e7a4      	b.n	800a114 <_printf_i+0x168>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	47d0      	blx	sl
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d09b      	beq.n	800a110 <_printf_i+0x164>
 800a1d8:	3501      	adds	r5, #1
 800a1da:	68e3      	ldr	r3, [r4, #12]
 800a1dc:	9903      	ldr	r1, [sp, #12]
 800a1de:	1a5b      	subs	r3, r3, r1
 800a1e0:	42ab      	cmp	r3, r5
 800a1e2:	dcf2      	bgt.n	800a1ca <_printf_i+0x21e>
 800a1e4:	e7eb      	b.n	800a1be <_printf_i+0x212>
 800a1e6:	2500      	movs	r5, #0
 800a1e8:	f104 0619 	add.w	r6, r4, #25
 800a1ec:	e7f5      	b.n	800a1da <_printf_i+0x22e>
 800a1ee:	bf00      	nop
 800a1f0:	0800af5e 	.word	0x0800af5e
 800a1f4:	0800af6f 	.word	0x0800af6f

0800a1f8 <_sbrk_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4d06      	ldr	r5, [pc, #24]	; (800a214 <_sbrk_r+0x1c>)
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	4604      	mov	r4, r0
 800a200:	4608      	mov	r0, r1
 800a202:	602b      	str	r3, [r5, #0]
 800a204:	f7fa f820 	bl	8004248 <_sbrk>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d102      	bne.n	800a212 <_sbrk_r+0x1a>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	b103      	cbz	r3, 800a212 <_sbrk_r+0x1a>
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	bd38      	pop	{r3, r4, r5, pc}
 800a214:	2000129c 	.word	0x2000129c

0800a218 <__swbuf_r>:
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21a:	460e      	mov	r6, r1
 800a21c:	4614      	mov	r4, r2
 800a21e:	4605      	mov	r5, r0
 800a220:	b118      	cbz	r0, 800a22a <__swbuf_r+0x12>
 800a222:	6983      	ldr	r3, [r0, #24]
 800a224:	b90b      	cbnz	r3, 800a22a <__swbuf_r+0x12>
 800a226:	f000 f9d9 	bl	800a5dc <__sinit>
 800a22a:	4b21      	ldr	r3, [pc, #132]	; (800a2b0 <__swbuf_r+0x98>)
 800a22c:	429c      	cmp	r4, r3
 800a22e:	d12b      	bne.n	800a288 <__swbuf_r+0x70>
 800a230:	686c      	ldr	r4, [r5, #4]
 800a232:	69a3      	ldr	r3, [r4, #24]
 800a234:	60a3      	str	r3, [r4, #8]
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	071a      	lsls	r2, r3, #28
 800a23a:	d52f      	bpl.n	800a29c <__swbuf_r+0x84>
 800a23c:	6923      	ldr	r3, [r4, #16]
 800a23e:	b36b      	cbz	r3, 800a29c <__swbuf_r+0x84>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	6820      	ldr	r0, [r4, #0]
 800a244:	1ac0      	subs	r0, r0, r3
 800a246:	6963      	ldr	r3, [r4, #20]
 800a248:	b2f6      	uxtb	r6, r6
 800a24a:	4283      	cmp	r3, r0
 800a24c:	4637      	mov	r7, r6
 800a24e:	dc04      	bgt.n	800a25a <__swbuf_r+0x42>
 800a250:	4621      	mov	r1, r4
 800a252:	4628      	mov	r0, r5
 800a254:	f000 f92e 	bl	800a4b4 <_fflush_r>
 800a258:	bb30      	cbnz	r0, 800a2a8 <__swbuf_r+0x90>
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	60a3      	str	r3, [r4, #8]
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	6022      	str	r2, [r4, #0]
 800a266:	701e      	strb	r6, [r3, #0]
 800a268:	6963      	ldr	r3, [r4, #20]
 800a26a:	3001      	adds	r0, #1
 800a26c:	4283      	cmp	r3, r0
 800a26e:	d004      	beq.n	800a27a <__swbuf_r+0x62>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	07db      	lsls	r3, r3, #31
 800a274:	d506      	bpl.n	800a284 <__swbuf_r+0x6c>
 800a276:	2e0a      	cmp	r6, #10
 800a278:	d104      	bne.n	800a284 <__swbuf_r+0x6c>
 800a27a:	4621      	mov	r1, r4
 800a27c:	4628      	mov	r0, r5
 800a27e:	f000 f919 	bl	800a4b4 <_fflush_r>
 800a282:	b988      	cbnz	r0, 800a2a8 <__swbuf_r+0x90>
 800a284:	4638      	mov	r0, r7
 800a286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a288:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <__swbuf_r+0x9c>)
 800a28a:	429c      	cmp	r4, r3
 800a28c:	d101      	bne.n	800a292 <__swbuf_r+0x7a>
 800a28e:	68ac      	ldr	r4, [r5, #8]
 800a290:	e7cf      	b.n	800a232 <__swbuf_r+0x1a>
 800a292:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <__swbuf_r+0xa0>)
 800a294:	429c      	cmp	r4, r3
 800a296:	bf08      	it	eq
 800a298:	68ec      	ldreq	r4, [r5, #12]
 800a29a:	e7ca      	b.n	800a232 <__swbuf_r+0x1a>
 800a29c:	4621      	mov	r1, r4
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 f80c 	bl	800a2bc <__swsetup_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d0cb      	beq.n	800a240 <__swbuf_r+0x28>
 800a2a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a2ac:	e7ea      	b.n	800a284 <__swbuf_r+0x6c>
 800a2ae:	bf00      	nop
 800a2b0:	0800afa0 	.word	0x0800afa0
 800a2b4:	0800afc0 	.word	0x0800afc0
 800a2b8:	0800af80 	.word	0x0800af80

0800a2bc <__swsetup_r>:
 800a2bc:	4b32      	ldr	r3, [pc, #200]	; (800a388 <__swsetup_r+0xcc>)
 800a2be:	b570      	push	{r4, r5, r6, lr}
 800a2c0:	681d      	ldr	r5, [r3, #0]
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	b125      	cbz	r5, 800a2d2 <__swsetup_r+0x16>
 800a2c8:	69ab      	ldr	r3, [r5, #24]
 800a2ca:	b913      	cbnz	r3, 800a2d2 <__swsetup_r+0x16>
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f000 f985 	bl	800a5dc <__sinit>
 800a2d2:	4b2e      	ldr	r3, [pc, #184]	; (800a38c <__swsetup_r+0xd0>)
 800a2d4:	429c      	cmp	r4, r3
 800a2d6:	d10f      	bne.n	800a2f8 <__swsetup_r+0x3c>
 800a2d8:	686c      	ldr	r4, [r5, #4]
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2e0:	0719      	lsls	r1, r3, #28
 800a2e2:	d42c      	bmi.n	800a33e <__swsetup_r+0x82>
 800a2e4:	06dd      	lsls	r5, r3, #27
 800a2e6:	d411      	bmi.n	800a30c <__swsetup_r+0x50>
 800a2e8:	2309      	movs	r3, #9
 800a2ea:	6033      	str	r3, [r6, #0]
 800a2ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f6:	e03e      	b.n	800a376 <__swsetup_r+0xba>
 800a2f8:	4b25      	ldr	r3, [pc, #148]	; (800a390 <__swsetup_r+0xd4>)
 800a2fa:	429c      	cmp	r4, r3
 800a2fc:	d101      	bne.n	800a302 <__swsetup_r+0x46>
 800a2fe:	68ac      	ldr	r4, [r5, #8]
 800a300:	e7eb      	b.n	800a2da <__swsetup_r+0x1e>
 800a302:	4b24      	ldr	r3, [pc, #144]	; (800a394 <__swsetup_r+0xd8>)
 800a304:	429c      	cmp	r4, r3
 800a306:	bf08      	it	eq
 800a308:	68ec      	ldreq	r4, [r5, #12]
 800a30a:	e7e6      	b.n	800a2da <__swsetup_r+0x1e>
 800a30c:	0758      	lsls	r0, r3, #29
 800a30e:	d512      	bpl.n	800a336 <__swsetup_r+0x7a>
 800a310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a312:	b141      	cbz	r1, 800a326 <__swsetup_r+0x6a>
 800a314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a318:	4299      	cmp	r1, r3
 800a31a:	d002      	beq.n	800a322 <__swsetup_r+0x66>
 800a31c:	4630      	mov	r0, r6
 800a31e:	f7ff fa77 	bl	8009810 <_free_r>
 800a322:	2300      	movs	r3, #0
 800a324:	6363      	str	r3, [r4, #52]	; 0x34
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a32c:	81a3      	strh	r3, [r4, #12]
 800a32e:	2300      	movs	r3, #0
 800a330:	6063      	str	r3, [r4, #4]
 800a332:	6923      	ldr	r3, [r4, #16]
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	f043 0308 	orr.w	r3, r3, #8
 800a33c:	81a3      	strh	r3, [r4, #12]
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	b94b      	cbnz	r3, 800a356 <__swsetup_r+0x9a>
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a34c:	d003      	beq.n	800a356 <__swsetup_r+0x9a>
 800a34e:	4621      	mov	r1, r4
 800a350:	4630      	mov	r0, r6
 800a352:	f000 fa07 	bl	800a764 <__smakebuf_r>
 800a356:	89a0      	ldrh	r0, [r4, #12]
 800a358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a35c:	f010 0301 	ands.w	r3, r0, #1
 800a360:	d00a      	beq.n	800a378 <__swsetup_r+0xbc>
 800a362:	2300      	movs	r3, #0
 800a364:	60a3      	str	r3, [r4, #8]
 800a366:	6963      	ldr	r3, [r4, #20]
 800a368:	425b      	negs	r3, r3
 800a36a:	61a3      	str	r3, [r4, #24]
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	b943      	cbnz	r3, 800a382 <__swsetup_r+0xc6>
 800a370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a374:	d1ba      	bne.n	800a2ec <__swsetup_r+0x30>
 800a376:	bd70      	pop	{r4, r5, r6, pc}
 800a378:	0781      	lsls	r1, r0, #30
 800a37a:	bf58      	it	pl
 800a37c:	6963      	ldrpl	r3, [r4, #20]
 800a37e:	60a3      	str	r3, [r4, #8]
 800a380:	e7f4      	b.n	800a36c <__swsetup_r+0xb0>
 800a382:	2000      	movs	r0, #0
 800a384:	e7f7      	b.n	800a376 <__swsetup_r+0xba>
 800a386:	bf00      	nop
 800a388:	20000110 	.word	0x20000110
 800a38c:	0800afa0 	.word	0x0800afa0
 800a390:	0800afc0 	.word	0x0800afc0
 800a394:	0800af80 	.word	0x0800af80

0800a398 <abort>:
 800a398:	b508      	push	{r3, lr}
 800a39a:	2006      	movs	r0, #6
 800a39c:	f000 faa4 	bl	800a8e8 <raise>
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	f7f9 fed9 	bl	8004158 <_exit>
	...

0800a3a8 <__sflush_r>:
 800a3a8:	898a      	ldrh	r2, [r1, #12]
 800a3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	0710      	lsls	r0, r2, #28
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	d458      	bmi.n	800a468 <__sflush_r+0xc0>
 800a3b6:	684b      	ldr	r3, [r1, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	dc05      	bgt.n	800a3c8 <__sflush_r+0x20>
 800a3bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dc02      	bgt.n	800a3c8 <__sflush_r+0x20>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ca:	2e00      	cmp	r6, #0
 800a3cc:	d0f9      	beq.n	800a3c2 <__sflush_r+0x1a>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3d4:	682f      	ldr	r7, [r5, #0]
 800a3d6:	602b      	str	r3, [r5, #0]
 800a3d8:	d032      	beq.n	800a440 <__sflush_r+0x98>
 800a3da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	075a      	lsls	r2, r3, #29
 800a3e0:	d505      	bpl.n	800a3ee <__sflush_r+0x46>
 800a3e2:	6863      	ldr	r3, [r4, #4]
 800a3e4:	1ac0      	subs	r0, r0, r3
 800a3e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3e8:	b10b      	cbz	r3, 800a3ee <__sflush_r+0x46>
 800a3ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3ec:	1ac0      	subs	r0, r0, r3
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3f4:	6a21      	ldr	r1, [r4, #32]
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	47b0      	blx	r6
 800a3fa:	1c43      	adds	r3, r0, #1
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	d106      	bne.n	800a40e <__sflush_r+0x66>
 800a400:	6829      	ldr	r1, [r5, #0]
 800a402:	291d      	cmp	r1, #29
 800a404:	d82c      	bhi.n	800a460 <__sflush_r+0xb8>
 800a406:	4a2a      	ldr	r2, [pc, #168]	; (800a4b0 <__sflush_r+0x108>)
 800a408:	40ca      	lsrs	r2, r1
 800a40a:	07d6      	lsls	r6, r2, #31
 800a40c:	d528      	bpl.n	800a460 <__sflush_r+0xb8>
 800a40e:	2200      	movs	r2, #0
 800a410:	6062      	str	r2, [r4, #4]
 800a412:	04d9      	lsls	r1, r3, #19
 800a414:	6922      	ldr	r2, [r4, #16]
 800a416:	6022      	str	r2, [r4, #0]
 800a418:	d504      	bpl.n	800a424 <__sflush_r+0x7c>
 800a41a:	1c42      	adds	r2, r0, #1
 800a41c:	d101      	bne.n	800a422 <__sflush_r+0x7a>
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	b903      	cbnz	r3, 800a424 <__sflush_r+0x7c>
 800a422:	6560      	str	r0, [r4, #84]	; 0x54
 800a424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a426:	602f      	str	r7, [r5, #0]
 800a428:	2900      	cmp	r1, #0
 800a42a:	d0ca      	beq.n	800a3c2 <__sflush_r+0x1a>
 800a42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a430:	4299      	cmp	r1, r3
 800a432:	d002      	beq.n	800a43a <__sflush_r+0x92>
 800a434:	4628      	mov	r0, r5
 800a436:	f7ff f9eb 	bl	8009810 <_free_r>
 800a43a:	2000      	movs	r0, #0
 800a43c:	6360      	str	r0, [r4, #52]	; 0x34
 800a43e:	e7c1      	b.n	800a3c4 <__sflush_r+0x1c>
 800a440:	6a21      	ldr	r1, [r4, #32]
 800a442:	2301      	movs	r3, #1
 800a444:	4628      	mov	r0, r5
 800a446:	47b0      	blx	r6
 800a448:	1c41      	adds	r1, r0, #1
 800a44a:	d1c7      	bne.n	800a3dc <__sflush_r+0x34>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0c4      	beq.n	800a3dc <__sflush_r+0x34>
 800a452:	2b1d      	cmp	r3, #29
 800a454:	d001      	beq.n	800a45a <__sflush_r+0xb2>
 800a456:	2b16      	cmp	r3, #22
 800a458:	d101      	bne.n	800a45e <__sflush_r+0xb6>
 800a45a:	602f      	str	r7, [r5, #0]
 800a45c:	e7b1      	b.n	800a3c2 <__sflush_r+0x1a>
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	e7ad      	b.n	800a3c4 <__sflush_r+0x1c>
 800a468:	690f      	ldr	r7, [r1, #16]
 800a46a:	2f00      	cmp	r7, #0
 800a46c:	d0a9      	beq.n	800a3c2 <__sflush_r+0x1a>
 800a46e:	0793      	lsls	r3, r2, #30
 800a470:	680e      	ldr	r6, [r1, #0]
 800a472:	bf08      	it	eq
 800a474:	694b      	ldreq	r3, [r1, #20]
 800a476:	600f      	str	r7, [r1, #0]
 800a478:	bf18      	it	ne
 800a47a:	2300      	movne	r3, #0
 800a47c:	eba6 0807 	sub.w	r8, r6, r7
 800a480:	608b      	str	r3, [r1, #8]
 800a482:	f1b8 0f00 	cmp.w	r8, #0
 800a486:	dd9c      	ble.n	800a3c2 <__sflush_r+0x1a>
 800a488:	6a21      	ldr	r1, [r4, #32]
 800a48a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a48c:	4643      	mov	r3, r8
 800a48e:	463a      	mov	r2, r7
 800a490:	4628      	mov	r0, r5
 800a492:	47b0      	blx	r6
 800a494:	2800      	cmp	r0, #0
 800a496:	dc06      	bgt.n	800a4a6 <__sflush_r+0xfe>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a49e:	81a3      	strh	r3, [r4, #12]
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	e78e      	b.n	800a3c4 <__sflush_r+0x1c>
 800a4a6:	4407      	add	r7, r0
 800a4a8:	eba8 0800 	sub.w	r8, r8, r0
 800a4ac:	e7e9      	b.n	800a482 <__sflush_r+0xda>
 800a4ae:	bf00      	nop
 800a4b0:	20400001 	.word	0x20400001

0800a4b4 <_fflush_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	690b      	ldr	r3, [r1, #16]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b913      	cbnz	r3, 800a4c4 <_fflush_r+0x10>
 800a4be:	2500      	movs	r5, #0
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	b118      	cbz	r0, 800a4ce <_fflush_r+0x1a>
 800a4c6:	6983      	ldr	r3, [r0, #24]
 800a4c8:	b90b      	cbnz	r3, 800a4ce <_fflush_r+0x1a>
 800a4ca:	f000 f887 	bl	800a5dc <__sinit>
 800a4ce:	4b14      	ldr	r3, [pc, #80]	; (800a520 <_fflush_r+0x6c>)
 800a4d0:	429c      	cmp	r4, r3
 800a4d2:	d11b      	bne.n	800a50c <_fflush_r+0x58>
 800a4d4:	686c      	ldr	r4, [r5, #4]
 800a4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0ef      	beq.n	800a4be <_fflush_r+0xa>
 800a4de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4e0:	07d0      	lsls	r0, r2, #31
 800a4e2:	d404      	bmi.n	800a4ee <_fflush_r+0x3a>
 800a4e4:	0599      	lsls	r1, r3, #22
 800a4e6:	d402      	bmi.n	800a4ee <_fflush_r+0x3a>
 800a4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ea:	f000 f915 	bl	800a718 <__retarget_lock_acquire_recursive>
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	f7ff ff59 	bl	800a3a8 <__sflush_r>
 800a4f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f8:	07da      	lsls	r2, r3, #31
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	d4e0      	bmi.n	800a4c0 <_fflush_r+0xc>
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	059b      	lsls	r3, r3, #22
 800a502:	d4dd      	bmi.n	800a4c0 <_fflush_r+0xc>
 800a504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a506:	f000 f908 	bl	800a71a <__retarget_lock_release_recursive>
 800a50a:	e7d9      	b.n	800a4c0 <_fflush_r+0xc>
 800a50c:	4b05      	ldr	r3, [pc, #20]	; (800a524 <_fflush_r+0x70>)
 800a50e:	429c      	cmp	r4, r3
 800a510:	d101      	bne.n	800a516 <_fflush_r+0x62>
 800a512:	68ac      	ldr	r4, [r5, #8]
 800a514:	e7df      	b.n	800a4d6 <_fflush_r+0x22>
 800a516:	4b04      	ldr	r3, [pc, #16]	; (800a528 <_fflush_r+0x74>)
 800a518:	429c      	cmp	r4, r3
 800a51a:	bf08      	it	eq
 800a51c:	68ec      	ldreq	r4, [r5, #12]
 800a51e:	e7da      	b.n	800a4d6 <_fflush_r+0x22>
 800a520:	0800afa0 	.word	0x0800afa0
 800a524:	0800afc0 	.word	0x0800afc0
 800a528:	0800af80 	.word	0x0800af80

0800a52c <std>:
 800a52c:	2300      	movs	r3, #0
 800a52e:	b510      	push	{r4, lr}
 800a530:	4604      	mov	r4, r0
 800a532:	e9c0 3300 	strd	r3, r3, [r0]
 800a536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a53a:	6083      	str	r3, [r0, #8]
 800a53c:	8181      	strh	r1, [r0, #12]
 800a53e:	6643      	str	r3, [r0, #100]	; 0x64
 800a540:	81c2      	strh	r2, [r0, #14]
 800a542:	6183      	str	r3, [r0, #24]
 800a544:	4619      	mov	r1, r3
 800a546:	2208      	movs	r2, #8
 800a548:	305c      	adds	r0, #92	; 0x5c
 800a54a:	f7fe fff7 	bl	800953c <memset>
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <std+0x38>)
 800a550:	6263      	str	r3, [r4, #36]	; 0x24
 800a552:	4b05      	ldr	r3, [pc, #20]	; (800a568 <std+0x3c>)
 800a554:	62a3      	str	r3, [r4, #40]	; 0x28
 800a556:	4b05      	ldr	r3, [pc, #20]	; (800a56c <std+0x40>)
 800a558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a55a:	4b05      	ldr	r3, [pc, #20]	; (800a570 <std+0x44>)
 800a55c:	6224      	str	r4, [r4, #32]
 800a55e:	6323      	str	r3, [r4, #48]	; 0x30
 800a560:	bd10      	pop	{r4, pc}
 800a562:	bf00      	nop
 800a564:	0800a921 	.word	0x0800a921
 800a568:	0800a943 	.word	0x0800a943
 800a56c:	0800a97b 	.word	0x0800a97b
 800a570:	0800a99f 	.word	0x0800a99f

0800a574 <_cleanup_r>:
 800a574:	4901      	ldr	r1, [pc, #4]	; (800a57c <_cleanup_r+0x8>)
 800a576:	f000 b8af 	b.w	800a6d8 <_fwalk_reent>
 800a57a:	bf00      	nop
 800a57c:	0800a4b5 	.word	0x0800a4b5

0800a580 <__sfmoreglue>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	1e4a      	subs	r2, r1, #1
 800a584:	2568      	movs	r5, #104	; 0x68
 800a586:	4355      	muls	r5, r2
 800a588:	460e      	mov	r6, r1
 800a58a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a58e:	f7ff f98f 	bl	80098b0 <_malloc_r>
 800a592:	4604      	mov	r4, r0
 800a594:	b140      	cbz	r0, 800a5a8 <__sfmoreglue+0x28>
 800a596:	2100      	movs	r1, #0
 800a598:	e9c0 1600 	strd	r1, r6, [r0]
 800a59c:	300c      	adds	r0, #12
 800a59e:	60a0      	str	r0, [r4, #8]
 800a5a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5a4:	f7fe ffca 	bl	800953c <memset>
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}

0800a5ac <__sfp_lock_acquire>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	; (800a5b4 <__sfp_lock_acquire+0x8>)
 800a5ae:	f000 b8b3 	b.w	800a718 <__retarget_lock_acquire_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	20001298 	.word	0x20001298

0800a5b8 <__sfp_lock_release>:
 800a5b8:	4801      	ldr	r0, [pc, #4]	; (800a5c0 <__sfp_lock_release+0x8>)
 800a5ba:	f000 b8ae 	b.w	800a71a <__retarget_lock_release_recursive>
 800a5be:	bf00      	nop
 800a5c0:	20001298 	.word	0x20001298

0800a5c4 <__sinit_lock_acquire>:
 800a5c4:	4801      	ldr	r0, [pc, #4]	; (800a5cc <__sinit_lock_acquire+0x8>)
 800a5c6:	f000 b8a7 	b.w	800a718 <__retarget_lock_acquire_recursive>
 800a5ca:	bf00      	nop
 800a5cc:	20001293 	.word	0x20001293

0800a5d0 <__sinit_lock_release>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__sinit_lock_release+0x8>)
 800a5d2:	f000 b8a2 	b.w	800a71a <__retarget_lock_release_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	20001293 	.word	0x20001293

0800a5dc <__sinit>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	4604      	mov	r4, r0
 800a5e0:	f7ff fff0 	bl	800a5c4 <__sinit_lock_acquire>
 800a5e4:	69a3      	ldr	r3, [r4, #24]
 800a5e6:	b11b      	cbz	r3, 800a5f0 <__sinit+0x14>
 800a5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ec:	f7ff bff0 	b.w	800a5d0 <__sinit_lock_release>
 800a5f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a5f6:	4b13      	ldr	r3, [pc, #76]	; (800a644 <__sinit+0x68>)
 800a5f8:	4a13      	ldr	r2, [pc, #76]	; (800a648 <__sinit+0x6c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	bf04      	itt	eq
 800a602:	2301      	moveq	r3, #1
 800a604:	61a3      	streq	r3, [r4, #24]
 800a606:	4620      	mov	r0, r4
 800a608:	f000 f820 	bl	800a64c <__sfp>
 800a60c:	6060      	str	r0, [r4, #4]
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 f81c 	bl	800a64c <__sfp>
 800a614:	60a0      	str	r0, [r4, #8]
 800a616:	4620      	mov	r0, r4
 800a618:	f000 f818 	bl	800a64c <__sfp>
 800a61c:	2200      	movs	r2, #0
 800a61e:	60e0      	str	r0, [r4, #12]
 800a620:	2104      	movs	r1, #4
 800a622:	6860      	ldr	r0, [r4, #4]
 800a624:	f7ff ff82 	bl	800a52c <std>
 800a628:	68a0      	ldr	r0, [r4, #8]
 800a62a:	2201      	movs	r2, #1
 800a62c:	2109      	movs	r1, #9
 800a62e:	f7ff ff7d 	bl	800a52c <std>
 800a632:	68e0      	ldr	r0, [r4, #12]
 800a634:	2202      	movs	r2, #2
 800a636:	2112      	movs	r1, #18
 800a638:	f7ff ff78 	bl	800a52c <std>
 800a63c:	2301      	movs	r3, #1
 800a63e:	61a3      	str	r3, [r4, #24]
 800a640:	e7d2      	b.n	800a5e8 <__sinit+0xc>
 800a642:	bf00      	nop
 800a644:	0800ad94 	.word	0x0800ad94
 800a648:	0800a575 	.word	0x0800a575

0800a64c <__sfp>:
 800a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64e:	4607      	mov	r7, r0
 800a650:	f7ff ffac 	bl	800a5ac <__sfp_lock_acquire>
 800a654:	4b1e      	ldr	r3, [pc, #120]	; (800a6d0 <__sfp+0x84>)
 800a656:	681e      	ldr	r6, [r3, #0]
 800a658:	69b3      	ldr	r3, [r6, #24]
 800a65a:	b913      	cbnz	r3, 800a662 <__sfp+0x16>
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7ff ffbd 	bl	800a5dc <__sinit>
 800a662:	3648      	adds	r6, #72	; 0x48
 800a664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a668:	3b01      	subs	r3, #1
 800a66a:	d503      	bpl.n	800a674 <__sfp+0x28>
 800a66c:	6833      	ldr	r3, [r6, #0]
 800a66e:	b30b      	cbz	r3, 800a6b4 <__sfp+0x68>
 800a670:	6836      	ldr	r6, [r6, #0]
 800a672:	e7f7      	b.n	800a664 <__sfp+0x18>
 800a674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a678:	b9d5      	cbnz	r5, 800a6b0 <__sfp+0x64>
 800a67a:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <__sfp+0x88>)
 800a67c:	60e3      	str	r3, [r4, #12]
 800a67e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a682:	6665      	str	r5, [r4, #100]	; 0x64
 800a684:	f000 f847 	bl	800a716 <__retarget_lock_init_recursive>
 800a688:	f7ff ff96 	bl	800a5b8 <__sfp_lock_release>
 800a68c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a694:	6025      	str	r5, [r4, #0]
 800a696:	61a5      	str	r5, [r4, #24]
 800a698:	2208      	movs	r2, #8
 800a69a:	4629      	mov	r1, r5
 800a69c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6a0:	f7fe ff4c 	bl	800953c <memset>
 800a6a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b0:	3468      	adds	r4, #104	; 0x68
 800a6b2:	e7d9      	b.n	800a668 <__sfp+0x1c>
 800a6b4:	2104      	movs	r1, #4
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7ff ff62 	bl	800a580 <__sfmoreglue>
 800a6bc:	4604      	mov	r4, r0
 800a6be:	6030      	str	r0, [r6, #0]
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d1d5      	bne.n	800a670 <__sfp+0x24>
 800a6c4:	f7ff ff78 	bl	800a5b8 <__sfp_lock_release>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	e7ee      	b.n	800a6ac <__sfp+0x60>
 800a6ce:	bf00      	nop
 800a6d0:	0800ad94 	.word	0x0800ad94
 800a6d4:	ffff0001 	.word	0xffff0001

0800a6d8 <_fwalk_reent>:
 800a6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6dc:	4606      	mov	r6, r0
 800a6de:	4688      	mov	r8, r1
 800a6e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6e4:	2700      	movs	r7, #0
 800a6e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6ea:	f1b9 0901 	subs.w	r9, r9, #1
 800a6ee:	d505      	bpl.n	800a6fc <_fwalk_reent+0x24>
 800a6f0:	6824      	ldr	r4, [r4, #0]
 800a6f2:	2c00      	cmp	r4, #0
 800a6f4:	d1f7      	bne.n	800a6e6 <_fwalk_reent+0xe>
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fc:	89ab      	ldrh	r3, [r5, #12]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d907      	bls.n	800a712 <_fwalk_reent+0x3a>
 800a702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a706:	3301      	adds	r3, #1
 800a708:	d003      	beq.n	800a712 <_fwalk_reent+0x3a>
 800a70a:	4629      	mov	r1, r5
 800a70c:	4630      	mov	r0, r6
 800a70e:	47c0      	blx	r8
 800a710:	4307      	orrs	r7, r0
 800a712:	3568      	adds	r5, #104	; 0x68
 800a714:	e7e9      	b.n	800a6ea <_fwalk_reent+0x12>

0800a716 <__retarget_lock_init_recursive>:
 800a716:	4770      	bx	lr

0800a718 <__retarget_lock_acquire_recursive>:
 800a718:	4770      	bx	lr

0800a71a <__retarget_lock_release_recursive>:
 800a71a:	4770      	bx	lr

0800a71c <__swhatbuf_r>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	460e      	mov	r6, r1
 800a720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a724:	2900      	cmp	r1, #0
 800a726:	b096      	sub	sp, #88	; 0x58
 800a728:	4614      	mov	r4, r2
 800a72a:	461d      	mov	r5, r3
 800a72c:	da07      	bge.n	800a73e <__swhatbuf_r+0x22>
 800a72e:	2300      	movs	r3, #0
 800a730:	602b      	str	r3, [r5, #0]
 800a732:	89b3      	ldrh	r3, [r6, #12]
 800a734:	061a      	lsls	r2, r3, #24
 800a736:	d410      	bmi.n	800a75a <__swhatbuf_r+0x3e>
 800a738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73c:	e00e      	b.n	800a75c <__swhatbuf_r+0x40>
 800a73e:	466a      	mov	r2, sp
 800a740:	f000 f954 	bl	800a9ec <_fstat_r>
 800a744:	2800      	cmp	r0, #0
 800a746:	dbf2      	blt.n	800a72e <__swhatbuf_r+0x12>
 800a748:	9a01      	ldr	r2, [sp, #4]
 800a74a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a74e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a752:	425a      	negs	r2, r3
 800a754:	415a      	adcs	r2, r3
 800a756:	602a      	str	r2, [r5, #0]
 800a758:	e7ee      	b.n	800a738 <__swhatbuf_r+0x1c>
 800a75a:	2340      	movs	r3, #64	; 0x40
 800a75c:	2000      	movs	r0, #0
 800a75e:	6023      	str	r3, [r4, #0]
 800a760:	b016      	add	sp, #88	; 0x58
 800a762:	bd70      	pop	{r4, r5, r6, pc}

0800a764 <__smakebuf_r>:
 800a764:	898b      	ldrh	r3, [r1, #12]
 800a766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a768:	079d      	lsls	r5, r3, #30
 800a76a:	4606      	mov	r6, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	d507      	bpl.n	800a780 <__smakebuf_r+0x1c>
 800a770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	6123      	str	r3, [r4, #16]
 800a778:	2301      	movs	r3, #1
 800a77a:	6163      	str	r3, [r4, #20]
 800a77c:	b002      	add	sp, #8
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	ab01      	add	r3, sp, #4
 800a782:	466a      	mov	r2, sp
 800a784:	f7ff ffca 	bl	800a71c <__swhatbuf_r>
 800a788:	9900      	ldr	r1, [sp, #0]
 800a78a:	4605      	mov	r5, r0
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff f88f 	bl	80098b0 <_malloc_r>
 800a792:	b948      	cbnz	r0, 800a7a8 <__smakebuf_r+0x44>
 800a794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a798:	059a      	lsls	r2, r3, #22
 800a79a:	d4ef      	bmi.n	800a77c <__smakebuf_r+0x18>
 800a79c:	f023 0303 	bic.w	r3, r3, #3
 800a7a0:	f043 0302 	orr.w	r3, r3, #2
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	e7e3      	b.n	800a770 <__smakebuf_r+0xc>
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <__smakebuf_r+0x7c>)
 800a7aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	6020      	str	r0, [r4, #0]
 800a7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b4:	81a3      	strh	r3, [r4, #12]
 800a7b6:	9b00      	ldr	r3, [sp, #0]
 800a7b8:	6163      	str	r3, [r4, #20]
 800a7ba:	9b01      	ldr	r3, [sp, #4]
 800a7bc:	6120      	str	r0, [r4, #16]
 800a7be:	b15b      	cbz	r3, 800a7d8 <__smakebuf_r+0x74>
 800a7c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f000 f923 	bl	800aa10 <_isatty_r>
 800a7ca:	b128      	cbz	r0, 800a7d8 <__smakebuf_r+0x74>
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f023 0303 	bic.w	r3, r3, #3
 800a7d2:	f043 0301 	orr.w	r3, r3, #1
 800a7d6:	81a3      	strh	r3, [r4, #12]
 800a7d8:	89a0      	ldrh	r0, [r4, #12]
 800a7da:	4305      	orrs	r5, r0
 800a7dc:	81a5      	strh	r5, [r4, #12]
 800a7de:	e7cd      	b.n	800a77c <__smakebuf_r+0x18>
 800a7e0:	0800a575 	.word	0x0800a575

0800a7e4 <memcpy>:
 800a7e4:	440a      	add	r2, r1
 800a7e6:	4291      	cmp	r1, r2
 800a7e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7ec:	d100      	bne.n	800a7f0 <memcpy+0xc>
 800a7ee:	4770      	bx	lr
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7fa:	4291      	cmp	r1, r2
 800a7fc:	d1f9      	bne.n	800a7f2 <memcpy+0xe>
 800a7fe:	bd10      	pop	{r4, pc}

0800a800 <memmove>:
 800a800:	4288      	cmp	r0, r1
 800a802:	b510      	push	{r4, lr}
 800a804:	eb01 0402 	add.w	r4, r1, r2
 800a808:	d902      	bls.n	800a810 <memmove+0x10>
 800a80a:	4284      	cmp	r4, r0
 800a80c:	4623      	mov	r3, r4
 800a80e:	d807      	bhi.n	800a820 <memmove+0x20>
 800a810:	1e43      	subs	r3, r0, #1
 800a812:	42a1      	cmp	r1, r4
 800a814:	d008      	beq.n	800a828 <memmove+0x28>
 800a816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a81e:	e7f8      	b.n	800a812 <memmove+0x12>
 800a820:	4402      	add	r2, r0
 800a822:	4601      	mov	r1, r0
 800a824:	428a      	cmp	r2, r1
 800a826:	d100      	bne.n	800a82a <memmove+0x2a>
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a832:	e7f7      	b.n	800a824 <memmove+0x24>

0800a834 <__malloc_lock>:
 800a834:	4801      	ldr	r0, [pc, #4]	; (800a83c <__malloc_lock+0x8>)
 800a836:	f7ff bf6f 	b.w	800a718 <__retarget_lock_acquire_recursive>
 800a83a:	bf00      	nop
 800a83c:	20001294 	.word	0x20001294

0800a840 <__malloc_unlock>:
 800a840:	4801      	ldr	r0, [pc, #4]	; (800a848 <__malloc_unlock+0x8>)
 800a842:	f7ff bf6a 	b.w	800a71a <__retarget_lock_release_recursive>
 800a846:	bf00      	nop
 800a848:	20001294 	.word	0x20001294

0800a84c <_realloc_r>:
 800a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84e:	4607      	mov	r7, r0
 800a850:	4614      	mov	r4, r2
 800a852:	460e      	mov	r6, r1
 800a854:	b921      	cbnz	r1, 800a860 <_realloc_r+0x14>
 800a856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a85a:	4611      	mov	r1, r2
 800a85c:	f7ff b828 	b.w	80098b0 <_malloc_r>
 800a860:	b922      	cbnz	r2, 800a86c <_realloc_r+0x20>
 800a862:	f7fe ffd5 	bl	8009810 <_free_r>
 800a866:	4625      	mov	r5, r4
 800a868:	4628      	mov	r0, r5
 800a86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a86c:	f000 f8f2 	bl	800aa54 <_malloc_usable_size_r>
 800a870:	42a0      	cmp	r0, r4
 800a872:	d20f      	bcs.n	800a894 <_realloc_r+0x48>
 800a874:	4621      	mov	r1, r4
 800a876:	4638      	mov	r0, r7
 800a878:	f7ff f81a 	bl	80098b0 <_malloc_r>
 800a87c:	4605      	mov	r5, r0
 800a87e:	2800      	cmp	r0, #0
 800a880:	d0f2      	beq.n	800a868 <_realloc_r+0x1c>
 800a882:	4631      	mov	r1, r6
 800a884:	4622      	mov	r2, r4
 800a886:	f7ff ffad 	bl	800a7e4 <memcpy>
 800a88a:	4631      	mov	r1, r6
 800a88c:	4638      	mov	r0, r7
 800a88e:	f7fe ffbf 	bl	8009810 <_free_r>
 800a892:	e7e9      	b.n	800a868 <_realloc_r+0x1c>
 800a894:	4635      	mov	r5, r6
 800a896:	e7e7      	b.n	800a868 <_realloc_r+0x1c>

0800a898 <_raise_r>:
 800a898:	291f      	cmp	r1, #31
 800a89a:	b538      	push	{r3, r4, r5, lr}
 800a89c:	4604      	mov	r4, r0
 800a89e:	460d      	mov	r5, r1
 800a8a0:	d904      	bls.n	800a8ac <_raise_r+0x14>
 800a8a2:	2316      	movs	r3, #22
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8ae:	b112      	cbz	r2, 800a8b6 <_raise_r+0x1e>
 800a8b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8b4:	b94b      	cbnz	r3, 800a8ca <_raise_r+0x32>
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f830 	bl	800a91c <_getpid_r>
 800a8bc:	462a      	mov	r2, r5
 800a8be:	4601      	mov	r1, r0
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8c6:	f000 b817 	b.w	800a8f8 <_kill_r>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d00a      	beq.n	800a8e4 <_raise_r+0x4c>
 800a8ce:	1c59      	adds	r1, r3, #1
 800a8d0:	d103      	bne.n	800a8da <_raise_r+0x42>
 800a8d2:	2316      	movs	r3, #22
 800a8d4:	6003      	str	r3, [r0, #0]
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	e7e7      	b.n	800a8aa <_raise_r+0x12>
 800a8da:	2400      	movs	r4, #0
 800a8dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	4798      	blx	r3
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e7e0      	b.n	800a8aa <_raise_r+0x12>

0800a8e8 <raise>:
 800a8e8:	4b02      	ldr	r3, [pc, #8]	; (800a8f4 <raise+0xc>)
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	f7ff bfd3 	b.w	800a898 <_raise_r>
 800a8f2:	bf00      	nop
 800a8f4:	20000110 	.word	0x20000110

0800a8f8 <_kill_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4d07      	ldr	r5, [pc, #28]	; (800a918 <_kill_r+0x20>)
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	4611      	mov	r1, r2
 800a904:	602b      	str	r3, [r5, #0]
 800a906:	f7f9 fc17 	bl	8004138 <_kill>
 800a90a:	1c43      	adds	r3, r0, #1
 800a90c:	d102      	bne.n	800a914 <_kill_r+0x1c>
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	b103      	cbz	r3, 800a914 <_kill_r+0x1c>
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	2000129c 	.word	0x2000129c

0800a91c <_getpid_r>:
 800a91c:	f7f9 bc04 	b.w	8004128 <_getpid>

0800a920 <__sread>:
 800a920:	b510      	push	{r4, lr}
 800a922:	460c      	mov	r4, r1
 800a924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a928:	f000 f89c 	bl	800aa64 <_read_r>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	bfab      	itete	ge
 800a930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a932:	89a3      	ldrhlt	r3, [r4, #12]
 800a934:	181b      	addge	r3, r3, r0
 800a936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a93a:	bfac      	ite	ge
 800a93c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a93e:	81a3      	strhlt	r3, [r4, #12]
 800a940:	bd10      	pop	{r4, pc}

0800a942 <__swrite>:
 800a942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a946:	461f      	mov	r7, r3
 800a948:	898b      	ldrh	r3, [r1, #12]
 800a94a:	05db      	lsls	r3, r3, #23
 800a94c:	4605      	mov	r5, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	4616      	mov	r6, r2
 800a952:	d505      	bpl.n	800a960 <__swrite+0x1e>
 800a954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a958:	2302      	movs	r3, #2
 800a95a:	2200      	movs	r2, #0
 800a95c:	f000 f868 	bl	800aa30 <_lseek_r>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a96a:	81a3      	strh	r3, [r4, #12]
 800a96c:	4632      	mov	r2, r6
 800a96e:	463b      	mov	r3, r7
 800a970:	4628      	mov	r0, r5
 800a972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a976:	f000 b817 	b.w	800a9a8 <_write_r>

0800a97a <__sseek>:
 800a97a:	b510      	push	{r4, lr}
 800a97c:	460c      	mov	r4, r1
 800a97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a982:	f000 f855 	bl	800aa30 <_lseek_r>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	bf15      	itete	ne
 800a98c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a98e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a996:	81a3      	strheq	r3, [r4, #12]
 800a998:	bf18      	it	ne
 800a99a:	81a3      	strhne	r3, [r4, #12]
 800a99c:	bd10      	pop	{r4, pc}

0800a99e <__sclose>:
 800a99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a2:	f000 b813 	b.w	800a9cc <_close_r>
	...

0800a9a8 <_write_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d07      	ldr	r5, [pc, #28]	; (800a9c8 <_write_r+0x20>)
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	4608      	mov	r0, r1
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	602a      	str	r2, [r5, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f7f9 fbf5 	bl	80041a6 <_write>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_write_r+0x1e>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_write_r+0x1e>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	2000129c 	.word	0x2000129c

0800a9cc <_close_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d06      	ldr	r5, [pc, #24]	; (800a9e8 <_close_r+0x1c>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	f7f9 fc01 	bl	80041de <_close>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_close_r+0x1a>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_close_r+0x1a>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	2000129c 	.word	0x2000129c

0800a9ec <_fstat_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4d07      	ldr	r5, [pc, #28]	; (800aa0c <_fstat_r+0x20>)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	602b      	str	r3, [r5, #0]
 800a9fa:	f7f9 fbfc 	bl	80041f6 <_fstat>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	d102      	bne.n	800aa08 <_fstat_r+0x1c>
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	b103      	cbz	r3, 800aa08 <_fstat_r+0x1c>
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	bd38      	pop	{r3, r4, r5, pc}
 800aa0a:	bf00      	nop
 800aa0c:	2000129c 	.word	0x2000129c

0800aa10 <_isatty_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d06      	ldr	r5, [pc, #24]	; (800aa2c <_isatty_r+0x1c>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	4604      	mov	r4, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	f7f9 fbfb 	bl	8004216 <_isatty>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_isatty_r+0x1a>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_isatty_r+0x1a>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	2000129c 	.word	0x2000129c

0800aa30 <_lseek_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d07      	ldr	r5, [pc, #28]	; (800aa50 <_lseek_r+0x20>)
 800aa34:	4604      	mov	r4, r0
 800aa36:	4608      	mov	r0, r1
 800aa38:	4611      	mov	r1, r2
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	602a      	str	r2, [r5, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f7f9 fbf4 	bl	800422c <_lseek>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d102      	bne.n	800aa4e <_lseek_r+0x1e>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	b103      	cbz	r3, 800aa4e <_lseek_r+0x1e>
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	2000129c 	.word	0x2000129c

0800aa54 <_malloc_usable_size_r>:
 800aa54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa58:	1f18      	subs	r0, r3, #4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	bfbc      	itt	lt
 800aa5e:	580b      	ldrlt	r3, [r1, r0]
 800aa60:	18c0      	addlt	r0, r0, r3
 800aa62:	4770      	bx	lr

0800aa64 <_read_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4d07      	ldr	r5, [pc, #28]	; (800aa84 <_read_r+0x20>)
 800aa68:	4604      	mov	r4, r0
 800aa6a:	4608      	mov	r0, r1
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	2200      	movs	r2, #0
 800aa70:	602a      	str	r2, [r5, #0]
 800aa72:	461a      	mov	r2, r3
 800aa74:	f7f9 fb7a 	bl	800416c <_read>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	d102      	bne.n	800aa82 <_read_r+0x1e>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	b103      	cbz	r3, 800aa82 <_read_r+0x1e>
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	bd38      	pop	{r3, r4, r5, pc}
 800aa84:	2000129c 	.word	0x2000129c

0800aa88 <_init>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	bf00      	nop
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr

0800aa94 <_fini>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	bf00      	nop
 800aa98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9a:	bc08      	pop	{r3}
 800aa9c:	469e      	mov	lr, r3
 800aa9e:	4770      	bx	lr
