
KTTV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800c5a8  0800c5a8  0001c5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd3c  0800cd3c  000202e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cd3c  0800cd3c  000202e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cd3c  0800cd3c  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd40  0800cd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800cd44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001128  200002e0  0800d024  000202e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001408  0800d024  00021408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c1c  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000383d  00000000  00000000  00036f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0003a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  0003b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213ab  00000000  00000000  0003c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159bc  00000000  00000000  0005db1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf031  00000000  00000000  000734d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132508  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005594  00000000  00000000  0013255c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c58c 	.word	0x0800c58c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	0800c58c 	.word	0x0800c58c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <Flash_delBuff>:
#include "FLASH_STM32.h"
#include "stdio.h"
uint8_t lengthPage;

void Flash_delBuff(char* data, uint16_t len)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e007      	b.n	8000c6a <Flash_delBuff+0x22>
	{
		data[i] = 0;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	3301      	adds	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f2      	bhi.n	8000c5a <Flash_delBuff+0x12>
	}
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <Flash_Lock>:

void Flash_Lock()
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 8000c86:	f005 f8d5 	bl	8005e34 <HAL_FLASH_Lock>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <Flash_Unlock>:

void Flash_Unlock()
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000c92:	f005 f8a9 	bl	8005de8 <HAL_FLASH_Unlock>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <Flash_Erase>:
  return sector;
}
#endif

void Flash_Erase(uint32_t addr)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
			//print log here
			__NOP();
		}
	#else
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PageError = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.PageAddress = addr;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	613b      	str	r3, [r7, #16]
		EraseInitStruct.NbPages     = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8000cb2:	f107 0208 	add.w	r2, r7, #8
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f005 f957 	bl	8005f70 <HAL_FLASHEx_Erase>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d000      	beq.n	8000cca <Flash_Erase+0x30>
		{
			//print log here
			__NOP();
 8000cc8:	bf00      	nop
		}
	#endif
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <Flash_WriteIntType>:

void Flash_WriteIntType(uint32_t addr, uint32_t data, uint32_t typeprogram)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Program(typeprogram, addr, data);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	68f9      	ldr	r1, [r7, #12]
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f005 f80d 	bl	8005d08 <HAL_FLASH_Program>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <Flash_ReadIntType>:

uint32_t Flash_ReadIntType(uint32_t addr)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	uint32_t* val = (uint32_t *)addr;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]
	return *val;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <Flash_WriteCharType>:

void Flash_WriteCharType(uint32_t addr, char* data, uint8_t typeprogram)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71fb      	strb	r3, [r7, #7]
	uint16_t i;
	FLASH->CR |= FLASH_CR_PG;
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <Flash_WriteCharType+0x98>)
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	4a21      	ldr	r2, [pc, #132]	; (8000dac <Flash_WriteCharType+0x98>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6113      	str	r3, [r2, #16]
	int var = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
	lengthPage = strlen(data);
 8000d32:	68b8      	ldr	r0, [r7, #8]
 8000d34:	f7ff fa4c 	bl	80001d0 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <Flash_WriteCharType+0x9c>)
 8000d3e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<lengthPage; i+=1)
 8000d40:	2300      	movs	r3, #0
 8000d42:	82fb      	strh	r3, [r7, #22]
 8000d44:	e01a      	b.n	8000d7c <Flash_WriteCharType+0x68>
	{
		while((FLASH->SR&FLASH_SR_BSY)){};
 8000d46:	bf00      	nop
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <Flash_WriteCharType+0x98>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f9      	bne.n	8000d48 <Flash_WriteCharType+0x34>
		var = (int)data[i];
 8000d54:	8afb      	ldrh	r3, [r7, #22]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	613b      	str	r3, [r7, #16]
			//Print log here
			break;
		}
		#else
		{
			HAL_FLASH_Program(typeprogram, (addr + i*2), var);
 8000d5e:	79f8      	ldrb	r0, [r7, #7]
 8000d60:	8afb      	ldrh	r3, [r7, #22]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	461a      	mov	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	18d1      	adds	r1, r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d72:	f004 ffc9 	bl	8005d08 <HAL_FLASH_Program>
	for(i=0; i<lengthPage; i+=1)
 8000d76:	8afb      	ldrh	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	82fb      	strh	r3, [r7, #22]
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <Flash_WriteCharType+0x9c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	8afa      	ldrh	r2, [r7, #22]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d3de      	bcc.n	8000d46 <Flash_WriteCharType+0x32>
		}
		#endif
	}
	while((FLASH->SR&FLASH_SR_BSY)){};
 8000d88:	bf00      	nop
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <Flash_WriteCharType+0x98>)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f9      	bne.n	8000d8a <Flash_WriteCharType+0x76>
	FLASH->CR &= ~FLASH_CR_PG;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <Flash_WriteCharType+0x98>)
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <Flash_WriteCharType+0x98>)
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	6113      	str	r3, [r2, #16]
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000
 8000db0:	200010d8 	.word	0x200010d8

08000db4 <Flash_ReadCharType>:

uint32_t Flash_ReadCharType(char* dataOut, uint32_t addr, uint8_t typeprogram)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	71fb      	strb	r3, [r7, #7]
	Flash_delBuff(dataOut, strlen(dataOut));
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f7ff fa04 	bl	80001d0 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4619      	mov	r1, r3
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff ff3a 	bl	8000c48 <Flash_delBuff>
	uint32_t ind = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
	uint32_t count = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
	uint32_t sizearea = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
	#if _FLASHTYPE_ == SECTOR
		sizearea = SIZE_OF_SECTOR;
	#else
		sizearea = SIZE_OF_PAGE;
 8000de0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000de4:	617b      	str	r3, [r7, #20]
	#endif
	for(ind = addr; ind < addr+sizearea; )
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e014      	b.n	8000e16 <Flash_ReadCharType+0x62>
	{
		if((unsigned char)Flash_ReadIntType(ind) == 0xFF) break;
 8000dec:	69f8      	ldr	r0, [r7, #28]
 8000dee:	f7ff ff82 	bl	8000cf6 <Flash_ReadIntType>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2bff      	cmp	r3, #255	; 0xff
 8000df8:	d014      	beq.n	8000e24 <Flash_ReadCharType+0x70>
		else
		{
			dataOut[count++] = Flash_ReadIntType(ind);
 8000dfa:	69f8      	ldr	r0, [r7, #28]
 8000dfc:	f7ff ff7b 	bl	8000cf6 <Flash_ReadIntType>
 8000e00:	4601      	mov	r1, r0
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	61ba      	str	r2, [r7, #24]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2ca      	uxtb	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]
		{
			ind=ind+0x02;
		}
		#else
		{
			ind=ind+0x02;
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	3302      	adds	r3, #2
 8000e14:	61fb      	str	r3, [r7, #28]
	for(ind = addr; ind < addr+sizearea; )
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3e4      	bcc.n	8000dec <Flash_ReadCharType+0x38>
 8000e22:	e000      	b.n	8000e26 <Flash_ReadCharType+0x72>
		if((unsigned char)Flash_ReadIntType(ind) == 0xFF) break;
 8000e24:	bf00      	nop
		}
		#endif
	}
	return count;
 8000e26:	69bb      	ldr	r3, [r7, #24]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HTTP_configParams>:
  * @param  None.
  * @retval RET_FAIL if configuration failed.
  * 		RET_OK if configuration successful.
  */
STATUS HTTP_configParams(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	Sim_send("AT+CGDCONT=cid,\"ip\",\"APN\"\r",strlen("AT+CGDCONT=cid,\"ip\",\"APN\"\r"));
 8000e34:	211a      	movs	r1, #26
 8000e36:	482f      	ldr	r0, [pc, #188]	; (8000ef4 <HTTP_configParams+0xc4>)
 8000e38:	f000 fc30 	bl	800169c <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8000e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e40:	2102      	movs	r1, #2
 8000e42:	482d      	ldr	r0, [pc, #180]	; (8000ef8 <HTTP_configParams+0xc8>)
 8000e44:	f000 fc8e 	bl	8001764 <Sim_checkResponseWith>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HTTP_configParams+0xcc>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000e50:	bf00      	nop
	if(ret == RET_OK)
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HTTP_configParams+0xcc>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d147      	bne.n	8000eea <HTTP_configParams+0xba>
	{
		Sim_send("AT+CGACT=1,cid\r",strlen("AT+CGACT=1,cid\r"));
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	4828      	ldr	r0, [pc, #160]	; (8000f00 <HTTP_configParams+0xd0>)
 8000e5e:	f000 fc1d 	bl	800169c <Sim_send>
		ret = Sim_checkResponseWith("OK", 2, 5000);
 8000e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e66:	2102      	movs	r1, #2
 8000e68:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <HTTP_configParams+0xc8>)
 8000e6a:	f000 fc7b 	bl	8001764 <Sim_checkResponseWith>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HTTP_configParams+0xcc>)
 8000e74:	701a      	strb	r2, [r3, #0]
		__NOP();
 8000e76:	bf00      	nop
		if(ret == RET_OK)
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HTTP_configParams+0xcc>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d134      	bne.n	8000eea <HTTP_configParams+0xba>
		{
			Sim_send("AT+HTTPINIT\r",strlen("AT+HTTPINIT\r"));
 8000e80:	210c      	movs	r1, #12
 8000e82:	4820      	ldr	r0, [pc, #128]	; (8000f04 <HTTP_configParams+0xd4>)
 8000e84:	f000 fc0a 	bl	800169c <Sim_send>
			ret = Sim_checkResponseWith("OK", 2, 5000);
 8000e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	481a      	ldr	r0, [pc, #104]	; (8000ef8 <HTTP_configParams+0xc8>)
 8000e90:	f000 fc68 	bl	8001764 <Sim_checkResponseWith>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HTTP_configParams+0xcc>)
 8000e9a:	701a      	strb	r2, [r3, #0]
			__NOP();
 8000e9c:	bf00      	nop
			if(ret == RET_FAIL)
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HTTP_configParams+0xcc>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d121      	bne.n	8000eea <HTTP_configParams+0xba>
			{
				Sim_send("AT+HTTPTERM\r",strlen("AT+HTTPTERM\r"));
 8000ea6:	210c      	movs	r1, #12
 8000ea8:	4817      	ldr	r0, [pc, #92]	; (8000f08 <HTTP_configParams+0xd8>)
 8000eaa:	f000 fbf7 	bl	800169c <Sim_send>
				ret = Sim_checkResponseWith("OK", 2, 5000);
 8000eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <HTTP_configParams+0xc8>)
 8000eb6:	f000 fc55 	bl	8001764 <Sim_checkResponseWith>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HTTP_configParams+0xcc>)
 8000ec0:	701a      	strb	r2, [r3, #0]
				__NOP();
 8000ec2:	bf00      	nop
				if(ret == RET_OK)
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HTTP_configParams+0xcc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10e      	bne.n	8000eea <HTTP_configParams+0xba>
				{
					Sim_send("AT+HTTPINIT\r",strlen("AT+HTTPINIT\r"));
 8000ecc:	210c      	movs	r1, #12
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <HTTP_configParams+0xd4>)
 8000ed0:	f000 fbe4 	bl	800169c <Sim_send>
					ret = Sim_checkResponseWith("OK", 2, 5000);
 8000ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <HTTP_configParams+0xc8>)
 8000edc:	f000 fc42 	bl	8001764 <Sim_checkResponseWith>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HTTP_configParams+0xcc>)
 8000ee6:	701a      	strb	r2, [r3, #0]
					__NOP();
 8000ee8:	bf00      	nop
				}
			}
		}
	}
	return ret;
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <HTTP_configParams+0xcc>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	0800c5a8 	.word	0x0800c5a8
 8000ef8:	0800c5c4 	.word	0x0800c5c4
 8000efc:	200010d9 	.word	0x200010d9
 8000f00:	0800c5c8 	.word	0x0800c5c8
 8000f04:	0800c5d8 	.word	0x0800c5d8
 8000f08:	0800c5e8 	.word	0x0800c5e8

08000f0c <HTTP_sendGETRequest>:
  * @param  url is URL to access.
  * @retval RET_OK if Server responds to code 200.
  * 		RET_FAIL if otherwise.
  */
STATUS HTTP_sendGETRequest(char* url)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09c      	sub	sp, #112	; 0x70
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	char cmd[100] = {0};
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2260      	movs	r2, #96	; 0x60
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f008 fb8f 	bl	8009644 <memset>
	sprintf(cmd,"AT+HTTPPARA=\"URL\",\"%s\"\r",url);
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4926      	ldr	r1, [pc, #152]	; (8000fc8 <HTTP_sendGETRequest+0xbc>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f008 fffa 	bl	8009f28 <siprintf>
	Sim_send(cmd,strlen(cmd));
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f949 	bl	80001d0 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fba7 	bl	800169c <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8000f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f52:	2102      	movs	r1, #2
 8000f54:	481d      	ldr	r0, [pc, #116]	; (8000fcc <HTTP_sendGETRequest+0xc0>)
 8000f56:	f000 fc05 	bl	8001764 <Sim_checkResponseWith>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HTTP_sendGETRequest+0xc4>)
 8000f60:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000f62:	bf00      	nop
	if(ret == RET_OK)
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <HTTP_sendGETRequest+0xc4>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d126      	bne.n	8000fba <HTTP_sendGETRequest+0xae>
	{
		Sim_send("AT+HTTPACTION=0\r",16);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <HTTP_sendGETRequest+0xc8>)
 8000f70:	f000 fb94 	bl	800169c <Sim_send>
		ret = Sim_checkResponseWith("+HTTPACTION: 0,200", 2, 30000);
 8000f74:	f247 5230 	movw	r2, #30000	; 0x7530
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <HTTP_sendGETRequest+0xcc>)
 8000f7c:	f000 fbf2 	bl	8001764 <Sim_checkResponseWith>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HTTP_sendGETRequest+0xc4>)
 8000f86:	701a      	strb	r2, [r3, #0]
		__NOP();
 8000f88:	bf00      	nop
		if(ret == RET_OK)
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HTTP_sendGETRequest+0xc4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d113      	bne.n	8000fba <HTTP_sendGETRequest+0xae>
		{
			Sim_send("AT+HTTPHEAD\r",12);
 8000f92:	210c      	movs	r1, #12
 8000f94:	4811      	ldr	r0, [pc, #68]	; (8000fdc <HTTP_sendGETRequest+0xd0>)
 8000f96:	f000 fb81 	bl	800169c <Sim_send>
			ret = Sim_checkResponseWith("200 OK", 3, 60000);
 8000f9a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <HTTP_sendGETRequest+0xd4>)
 8000fa2:	f000 fbdf 	bl	8001764 <Sim_checkResponseWith>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HTTP_sendGETRequest+0xc4>)
 8000fac:	701a      	strb	r2, [r3, #0]
			__NOP();
 8000fae:	bf00      	nop
			if(ret == RET_OK)
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HTTP_sendGETRequest+0xc4>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d100      	bne.n	8000fba <HTTP_sendGETRequest+0xae>
			{
				__NOP();
 8000fb8:	bf00      	nop
			}
		}
	}
	return ret;
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HTTP_sendGETRequest+0xc4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3770      	adds	r7, #112	; 0x70
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	0800c5f8 	.word	0x0800c5f8
 8000fcc:	0800c5c4 	.word	0x0800c5c4
 8000fd0:	200010d9 	.word	0x200010d9
 8000fd4:	0800c610 	.word	0x0800c610
 8000fd8:	0800c624 	.word	0x0800c624
 8000fdc:	0800c638 	.word	0x0800c638
 8000fe0:	0800c648 	.word	0x0800c648

08000fe4 <HTTP_readGETResponse>:
  * @param  datatoget is used to store response data from the server.
  * @retval RET_OK if read success.
  * 		RET_FAIL if read fail.
  */
STATUS HTTP_readGETResponse(char* datatoget)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	deleteBuffer(datatoget, strlen(datatoget));
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f8ef 	bl	80001d0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fb0e 	bl	8001618 <deleteBuffer>
	Sim_send("AT+HTTPHEAD\r",strlen("AT+HTTPHEAD\r"));
 8000ffc:	210c      	movs	r1, #12
 8000ffe:	481d      	ldr	r0, [pc, #116]	; (8001074 <HTTP_readGETResponse+0x90>)
 8001000:	f000 fb4c 	bl	800169c <Sim_send>
	ret = Sim_checkResponseWith("\r\nOK\r\n", 4, 60000);
 8001004:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001008:	2104      	movs	r1, #4
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <HTTP_readGETResponse+0x94>)
 800100c:	f000 fbaa 	bl	8001764 <Sim_checkResponseWith>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HTTP_readGETResponse+0x98>)
 8001016:	701a      	strb	r2, [r3, #0]
	__NOP();
 8001018:	bf00      	nop
	if(ret == RET_OK)
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HTTP_readGETResponse+0x98>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d122      	bne.n	8001068 <HTTP_readGETResponse+0x84>
	{
		char* ptr = NULL;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
		ptr = strstr((char*)Sim_Rxdata,"HTTP/");
 8001026:	4916      	ldr	r1, [pc, #88]	; (8001080 <HTTP_readGETResponse+0x9c>)
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <HTTP_readGETResponse+0xa0>)
 800102a:	f008 ffa5 	bl	8009f78 <strstr>
 800102e:	6178      	str	r0, [r7, #20]
		if(ptr != NULL)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d015      	beq.n	8001062 <HTTP_readGETResponse+0x7e>
		{
			char* ptr1 = NULL;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
			ptr1 = strstr((char*)Sim_Rxdata,"\r\nOK");
 800103a:	4913      	ldr	r1, [pc, #76]	; (8001088 <HTTP_readGETResponse+0xa4>)
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <HTTP_readGETResponse+0xa0>)
 800103e:	f008 ff9b 	bl	8009f78 <strstr>
 8001042:	6138      	str	r0, [r7, #16]
			uint16_t startpos = ptr - (char*)Sim_Rxdata;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <HTTP_readGETResponse+0xa0>)
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	81fb      	strh	r3, [r7, #14]
			uint16_t endpos = ptr1 - (char*)Sim_Rxdata;
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HTTP_readGETResponse+0xa0>)
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	81bb      	strh	r3, [r7, #12]
			subString((char*)Sim_Rxdata, datatoget, startpos, endpos);
 8001054:	89fa      	ldrh	r2, [r7, #14]
 8001056:	89bb      	ldrh	r3, [r7, #12]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <HTTP_readGETResponse+0xa0>)
 800105c:	f000 faf7 	bl	800164e <subString>
 8001060:	e002      	b.n	8001068 <HTTP_readGETResponse+0x84>
		}
		else
		{
			ret = RET_FAIL;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HTTP_readGETResponse+0x98>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
		}
	}
	return ret;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <HTTP_readGETResponse+0x98>)
 800106a:	781b      	ldrb	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	0800c638 	.word	0x0800c638
 8001078:	0800c650 	.word	0x0800c650
 800107c:	200010d9 	.word	0x200010d9
 8001080:	0800c658 	.word	0x0800c658
 8001084:	200006e8 	.word	0x200006e8
 8001088:	0800c660 	.word	0x0800c660

0800108c <RS485_EnablePin>:

#define rs485_uart huart2
extern UART_HandleTypeDef rs485_uart;

void RS485_EnablePin(RS485_PinState status)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, status?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f005 f996 	bl	80063dc <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <crcCalculation>:
uint16_t crcCalculation(uint8_t* rs485_data, int in_dx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	int i,j;
	uint16_t crc=0xFFFF;
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	81fb      	strh	r3, [r7, #14]
	uint16_t crctemp;
	for(i=0;i<in_dx;i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e026      	b.n	800111c <crcCalculation+0x64>
  {
		crc = rs485_data[i]^crc;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	4053      	eors	r3, r2
 80010dc:	81fb      	strh	r3, [r7, #14]
		for(j=1;j<9;j++)
 80010de:	2301      	movs	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	e015      	b.n	8001110 <crcCalculation+0x58>
		{
			crctemp = crc/2;
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	81bb      	strh	r3, [r7, #12]
			if(crc-crctemp*2==1)
 80010ea:	89fa      	ldrh	r2, [r7, #14]
 80010ec:	89bb      	ldrh	r3, [r7, #12]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <crcCalculation+0x4e>
			{
				crc=crctemp ^ 0xA001;
 80010f6:	89bb      	ldrh	r3, [r7, #12]
 80010f8:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80010fc:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001100:	43db      	mvns	r3, r3
 8001102:	81fb      	strh	r3, [r7, #14]
 8001104:	e001      	b.n	800110a <crcCalculation+0x52>
			}
			else
			{
				crc=crctemp;
 8001106:	89bb      	ldrh	r3, [r7, #12]
 8001108:	81fb      	strh	r3, [r7, #14]
		for(j=1;j<9;j++)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	3301      	adds	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b08      	cmp	r3, #8
 8001114:	dde6      	ble.n	80010e4 <crcCalculation+0x2c>
	for(i=0;i<in_dx;i++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbd4      	blt.n	80010ce <crcCalculation+0x16>
			}
		}
	}
	return crc;
 8001124:	89fb      	ldrh	r3, [r7, #14]
//  crctemp1 = crc/256;
//  crctemp2 = crc*256;
//  crc= crctemp1 + crctemp2;
//	crc1 =crc>>8;
//	crc2=(uint8_t)crc;
}
 8001126:	4618      	mov	r0, r3
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <RS485_transmit>:

void RS485_transmit(RS485Query_t p_RS485Query)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	463b      	mov	r3, r7
 800113c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t queryData[10];
	uint8_t ind=0;
 8001140:	2300      	movs	r3, #0
 8001142:	75fb      	strb	r3, [r7, #23]
	queryData[ind++] = p_RS485Query.slaveAddress;
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	75fa      	strb	r2, [r7, #23]
 800114a:	783a      	ldrb	r2, [r7, #0]
 800114c:	f107 0118 	add.w	r1, r7, #24
 8001150:	440b      	add	r3, r1
 8001152:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = p_RS485Query.mbFunction;
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	75fa      	strb	r2, [r7, #23]
 800115c:	787a      	ldrb	r2, [r7, #1]
 800115e:	f107 0118 	add.w	r1, r7, #24
 8001162:	440b      	add	r3, r1
 8001164:	f803 2c0c 	strb.w	r2, [r3, #-12]
	if	((p_RS485Query.mbFunction == Read_CoilStatus) 		||(p_RS485Query.mbFunction == Read_InputStatus)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d00e      	beq.n	800118c <RS485_transmit+0x58>
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d00b      	beq.n	800118c <RS485_transmit+0x58>
		|| (p_RS485Query.mbFunction == Read_HoldingRegister)||(p_RS485Query.mbFunction == Read_InputRegister)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d008      	beq.n	800118c <RS485_transmit+0x58>
 800117a:	787b      	ldrb	r3, [r7, #1]
 800117c:	2b04      	cmp	r3, #4
 800117e:	d005      	beq.n	800118c <RS485_transmit+0x58>
		|| (p_RS485Query.mbFunction == Force_SingleCoil)		||(p_RS485Query.mbFunction == Preset_SingleRegister))
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d002      	beq.n	800118c <RS485_transmit+0x58>
 8001186:	787b      	ldrb	r3, [r7, #1]
 8001188:	2b06      	cmp	r3, #6
 800118a:	d12b      	bne.n	80011e4 <RS485_transmit+0xb0>
	{
		queryData[ind++] = (uint8_t)(p_RS485Query.regAddress>>8);
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29a      	uxth	r2, r3
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	1c59      	adds	r1, r3, #1
 8001196:	75f9      	strb	r1, [r7, #23]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f107 0118 	add.w	r1, r7, #24
 800119e:	440b      	add	r3, r1
 80011a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regAddress&0xFF);
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	1c59      	adds	r1, r3, #1
 80011aa:	75f9      	strb	r1, [r7, #23]
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	f107 0118 	add.w	r1, r7, #24
 80011b2:	440b      	add	r3, r1
 80011b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regCount>>8);
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b29a      	uxth	r2, r3
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	1c59      	adds	r1, r3, #1
 80011c2:	75f9      	strb	r1, [r7, #23]
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	f107 0118 	add.w	r1, r7, #24
 80011ca:	440b      	add	r3, r1
 80011cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regCount&0xFF);
 80011d0:	88ba      	ldrh	r2, [r7, #4]
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	1c59      	adds	r1, r3, #1
 80011d6:	75f9      	strb	r1, [r7, #23]
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	f107 0118 	add.w	r1, r7, #24
 80011de:	440b      	add	r3, r1
 80011e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	else if((p_RS485Query.mbFunction == Read_ExceptionStatus) || (p_RS485Query.mbFunction == Fetch_CommEventCounter)
		||	(p_RS485Query.mbFunction == Fetch_CommEventLog))
	{
		
	}	
	p_RS485Query.crc = crcCalculation(queryData,ind);
 80011e4:	7dfa      	ldrb	r2, [r7, #23]
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff63 	bl	80010b8 <crcCalculation>
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
	queryData[ind++] = (uint8_t)(p_RS485Query.crc&0xFF);
 80011f6:	88fa      	ldrh	r2, [r7, #6]
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	1c59      	adds	r1, r3, #1
 80011fc:	75f9      	strb	r1, [r7, #23]
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f107 0118 	add.w	r1, r7, #24
 8001204:	440b      	add	r3, r1
 8001206:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = (uint8_t)(p_RS485Query.crc>>8);	
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29a      	uxth	r2, r3
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	1c59      	adds	r1, r3, #1
 8001214:	75f9      	strb	r1, [r7, #23]
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	f107 0118 	add.w	r1, r7, #24
 800121c:	440b      	add	r3, r1
 800121e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	RS485_EnablePin(TRANSMIT);
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff32 	bl	800108c <RS485_EnablePin>
	HAL_UART_Transmit(&rs485_uart, (uint8_t*)queryData,ind,1000);
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	b29a      	uxth	r2, r3
 800122c:	f107 010c 	add.w	r1, r7, #12
 8001230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <RS485_transmit+0x114>)
 8001236:	f007 f939 	bl	80084ac <HAL_UART_Transmit>
	RS485_EnablePin(RECEIVE);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff26 	bl	800108c <RS485_EnablePin>
	
}
 8001240:	bf00      	nop
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200012b8 	.word	0x200012b8

0800124c <RS485_analysis>:
	RS485_EnablePin(RECEIVE);
	
}

uint8_t RS485_analysis(RS485Data_t* m_rs485data, RS485Query_t RS485_SentStruct, uint8_t* p_RS485Data, uint8_t length)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	1d38      	adds	r0, r7, #4
 8001256:	e880 0006 	stmia.w	r0, {r1, r2}
 800125a:	603b      	str	r3, [r7, #0]
	if((length > 3)&&(p_RS485Data[0] == RS485_SentStruct.slaveAddress))
 800125c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001260:	2b03      	cmp	r3, #3
 8001262:	f240 8196 	bls.w	8001592 <RS485_analysis+0x346>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8190 	bne.w	8001592 <RS485_analysis+0x346>
	{
		uint8_t lengthData = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	74fb      	strb	r3, [r7, #19]
		uint16_t crc = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	823b      	strh	r3, [r7, #16]
		m_rs485data->Function = (RS485_Function)p_RS485Data[1];
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	709a      	strb	r2, [r3, #2]
		if(m_rs485data->Function == RS485_SentStruct.mbFunction)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	789a      	ldrb	r2, [r3, #2]
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	429a      	cmp	r2, r3
 800128c:	f040 817f 	bne.w	800158e <RS485_analysis+0x342>
		{
			m_rs485data->slaveAddress = p_RS485Data[0];
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	705a      	strb	r2, [r3, #1]
			if((p_RS485Data[1]&0x80) == 0x80)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da01      	bge.n	80012a8 <RS485_analysis+0x5c>
			{
				//return wrong function code
				return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e175      	b.n	8001594 <RS485_analysis+0x348>
			}
			else
			{
				switch (p_RS485Data[1])
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b17      	cmp	r3, #23
 80012b2:	f200 816e 	bhi.w	8001592 <RS485_analysis+0x346>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <RS485_analysis+0x70>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	0800131d 	.word	0x0800131d
 80012c0:	0800139b 	.word	0x0800139b
 80012c4:	08001419 	.word	0x08001419
 80012c8:	080014b5 	.word	0x080014b5
 80012cc:	08001593 	.word	0x08001593
 80012d0:	08001593 	.word	0x08001593
 80012d4:	08001551 	.word	0x08001551
 80012d8:	08001593 	.word	0x08001593
 80012dc:	08001593 	.word	0x08001593
 80012e0:	08001593 	.word	0x08001593
 80012e4:	08001593 	.word	0x08001593
 80012e8:	08001593 	.word	0x08001593
 80012ec:	08001593 	.word	0x08001593
 80012f0:	08001593 	.word	0x08001593
 80012f4:	08001593 	.word	0x08001593
 80012f8:	08001593 	.word	0x08001593
 80012fc:	08001593 	.word	0x08001593
 8001300:	08001593 	.word	0x08001593
 8001304:	08001593 	.word	0x08001593
 8001308:	08001593 	.word	0x08001593
 800130c:	08001593 	.word	0x08001593
 8001310:	08001593 	.word	0x08001593
 8001314:	08001593 	.word	0x08001593
 8001318:	08001593 	.word	0x08001593
				{
					case 0x01:	//Read Coil Status
						lengthData = p_RS485Data[2];
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	74fb      	strb	r3, [r7, #19]
						m_rs485data->length = lengthData;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	7cfa      	ldrb	r2, [r7, #19]
 8001326:	701a      	strb	r2, [r3, #0]
						crc =  (uint16_t)p_RS485Data[3+m_rs485data->length]|((uint16_t)p_RS485Data[4+m_rs485data->length]<<8); 
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3303      	adds	r3, #3
 800132e:	461a      	mov	r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b21a      	sxth	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	3304      	adds	r3, #4
 800133e:	4619      	mov	r1, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	440b      	add	r3, r1
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 8001350:	7cfb      	ldrb	r3, [r7, #19]
 8001352:	3303      	adds	r3, #3
 8001354:	4619      	mov	r1, r3
 8001356:	6838      	ldr	r0, [r7, #0]
 8001358:	f7ff feae 	bl	80010b8 <crcCalculation>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	8a3b      	ldrh	r3, [r7, #16]
 8001362:	4293      	cmp	r3, r2
 8001364:	d117      	bne.n	8001396 <RS485_analysis+0x14a>
						{
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
 800136a:	e00d      	b.n	8001388 <RS485_analysis+0x13c>
							{
								m_rs485data->CoilStatus[i] = p_RS485Data[3+i];
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	3303      	adds	r3, #3
 8001370:	461a      	mov	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	441a      	add	r2, r3
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	7811      	ldrb	r1, [r2, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	460a      	mov	r2, r1
 8001380:	729a      	strb	r2, [r3, #10]
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	3301      	adds	r3, #1
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	7dfa      	ldrb	r2, [r7, #23]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3ec      	bcc.n	800136c <RS485_analysis+0x120>
							}
							return 1;
 8001392:	2301      	movs	r3, #1
 8001394:	e0fe      	b.n	8001594 <RS485_analysis+0x348>
						}
						else return 0;
 8001396:	2300      	movs	r3, #0
 8001398:	e0fc      	b.n	8001594 <RS485_analysis+0x348>
					case 0x02: //Read Input Status
						lengthData = p_RS485Data[2];
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	789b      	ldrb	r3, [r3, #2]
 800139e:	74fb      	strb	r3, [r7, #19]
						m_rs485data->length = lengthData;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	7cfa      	ldrb	r2, [r7, #19]
 80013a4:	701a      	strb	r2, [r3, #0]
						crc =  (uint16_t)p_RS485Data[3+m_rs485data->length]|((uint16_t)p_RS485Data[4+m_rs485data->length]<<8); 
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3303      	adds	r3, #3
 80013ac:	461a      	mov	r2, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3304      	adds	r3, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	440b      	add	r3, r1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 80013ce:	7cfb      	ldrb	r3, [r7, #19]
 80013d0:	3303      	adds	r3, #3
 80013d2:	4619      	mov	r1, r3
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f7ff fe6f 	bl	80010b8 <crcCalculation>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	8a3b      	ldrh	r3, [r7, #16]
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d117      	bne.n	8001414 <RS485_analysis+0x1c8>
						{
							for(uint8_t i=0; i<m_rs485data->length;i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	75bb      	strb	r3, [r7, #22]
 80013e8:	e00d      	b.n	8001406 <RS485_analysis+0x1ba>
							{
								m_rs485data->CoilStatus[i] = p_RS485Data[3+i];
 80013ea:	7dbb      	ldrb	r3, [r7, #22]
 80013ec:	3303      	adds	r3, #3
 80013ee:	461a      	mov	r2, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	441a      	add	r2, r3
 80013f4:	7dbb      	ldrb	r3, [r7, #22]
 80013f6:	7811      	ldrb	r1, [r2, #0]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	460a      	mov	r2, r1
 80013fe:	729a      	strb	r2, [r3, #10]
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001400:	7dbb      	ldrb	r3, [r7, #22]
 8001402:	3301      	adds	r3, #1
 8001404:	75bb      	strb	r3, [r7, #22]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	7dba      	ldrb	r2, [r7, #22]
 800140c:	429a      	cmp	r2, r3
 800140e:	d3ec      	bcc.n	80013ea <RS485_analysis+0x19e>
							}
							return 1;
 8001410:	2301      	movs	r3, #1
 8001412:	e0bf      	b.n	8001594 <RS485_analysis+0x348>
						}
						else return 0;
 8001414:	2300      	movs	r3, #0
 8001416:	e0bd      	b.n	8001594 <RS485_analysis+0x348>
					case 0x03:	//Read Holding Register
						lengthData = p_RS485Data[2];
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	74fb      	strb	r3, [r7, #19]
						m_rs485data->length = lengthData/2;
 800141e:	7cfb      	ldrb	r3, [r7, #19]
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	701a      	strb	r2, [r3, #0]
						crc =  (uint16_t)p_RS485Data[3+lengthData]|((uint16_t)p_RS485Data[4+lengthData]<<8); 
 8001428:	7cfb      	ldrb	r3, [r7, #19]
 800142a:	3303      	adds	r3, #3
 800142c:	461a      	mov	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b21a      	sxth	r2, r3
 8001436:	7cfb      	ldrb	r3, [r7, #19]
 8001438:	3304      	adds	r3, #4
 800143a:	4619      	mov	r1, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	440b      	add	r3, r1
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b21b      	sxth	r3, r3
 800144a:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 800144c:	7cfb      	ldrb	r3, [r7, #19]
 800144e:	3303      	adds	r3, #3
 8001450:	4619      	mov	r1, r3
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f7ff fe30 	bl	80010b8 <crcCalculation>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	8a3b      	ldrh	r3, [r7, #16]
 800145e:	4293      	cmp	r3, r2
 8001460:	d126      	bne.n	80014b0 <RS485_analysis+0x264>
						{
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001462:	2300      	movs	r3, #0
 8001464:	757b      	strb	r3, [r7, #21]
 8001466:	e01c      	b.n	80014a2 <RS485_analysis+0x256>
							{
								m_rs485data->dataReg[i] = (uint16_t)(p_RS485Data[3+i*2]<<8)|p_RS485Data[4+i*2];	//Vi tri bat dau du lieu se la 3
 8001468:	7d7b      	ldrb	r3, [r7, #21]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	3303      	adds	r3, #3
 800146e:	461a      	mov	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b299      	uxth	r1, r3
 800147c:	7d7b      	ldrb	r3, [r7, #21]
 800147e:	3302      	adds	r3, #2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	461a      	mov	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	7d7b      	ldrb	r3, [r7, #21]
 800148e:	430a      	orrs	r2, r1
 8001490:	b291      	uxth	r1, r2
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	809a      	strh	r2, [r3, #4]
							for(uint8_t i=0; i<m_rs485data->length;i++)
 800149c:	7d7b      	ldrb	r3, [r7, #21]
 800149e:	3301      	adds	r3, #1
 80014a0:	757b      	strb	r3, [r7, #21]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	7d7a      	ldrb	r2, [r7, #21]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3dd      	bcc.n	8001468 <RS485_analysis+0x21c>
							}
							return 1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e071      	b.n	8001594 <RS485_analysis+0x348>
						}
						else return 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e06f      	b.n	8001594 <RS485_analysis+0x348>
					case 0x04:	//Read Input Register
						lengthData = p_RS485Data[2];
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	789b      	ldrb	r3, [r3, #2]
 80014b8:	74fb      	strb	r3, [r7, #19]
						m_rs485data->length = lengthData/2;
 80014ba:	7cfb      	ldrb	r3, [r7, #19]
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	701a      	strb	r2, [r3, #0]
						crc =  (uint16_t)p_RS485Data[3+lengthData]|((uint16_t)p_RS485Data[4+lengthData]<<8); 
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	3303      	adds	r3, #3
 80014c8:	461a      	mov	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	7cfb      	ldrb	r3, [r7, #19]
 80014d4:	3304      	adds	r3, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	440b      	add	r3, r1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
 80014ea:	3303      	adds	r3, #3
 80014ec:	4619      	mov	r1, r3
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f7ff fde2 	bl	80010b8 <crcCalculation>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	8a3b      	ldrh	r3, [r7, #16]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d126      	bne.n	800154c <RS485_analysis+0x300>
						{
							for(uint8_t i=0; i<m_rs485data->length;i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	753b      	strb	r3, [r7, #20]
 8001502:	e01c      	b.n	800153e <RS485_analysis+0x2f2>
							{
								m_rs485data->dataReg[i] = (uint16_t)(p_RS485Data[3+i*2]<<8)|p_RS485Data[4+i*2];	//Vi tri bat dau du lieu se la 3
 8001504:	7d3b      	ldrb	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	3303      	adds	r3, #3
 800150a:	461a      	mov	r2, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b299      	uxth	r1, r3
 8001518:	7d3b      	ldrb	r3, [r7, #20]
 800151a:	3302      	adds	r3, #2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	461a      	mov	r2, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b29a      	uxth	r2, r3
 8001528:	7d3b      	ldrb	r3, [r7, #20]
 800152a:	430a      	orrs	r2, r1
 800152c:	b291      	uxth	r1, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	460a      	mov	r2, r1
 8001536:	809a      	strh	r2, [r3, #4]
							for(uint8_t i=0; i<m_rs485data->length;i++)
 8001538:	7d3b      	ldrb	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	753b      	strb	r3, [r7, #20]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	7d3a      	ldrb	r2, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3dd      	bcc.n	8001504 <RS485_analysis+0x2b8>
							}
							return 1;
 8001548:	2301      	movs	r3, #1
 800154a:	e023      	b.n	8001594 <RS485_analysis+0x348>
						}
						else return 0;
 800154c:	2300      	movs	r3, #0
 800154e:	e021      	b.n	8001594 <RS485_analysis+0x348>
						break;
					case 0x06:
						
						break;
					case 0x07:
						crc =  (uint16_t)p_RS485Data[3]|((uint16_t)p_RS485Data[4]<<8);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	3303      	adds	r3, #3
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b21a      	sxth	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	3304      	adds	r3, #4
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21b      	sxth	r3, r3
 8001566:	823b      	strh	r3, [r7, #16]
						if(crc == crcCalculation((uint8_t*)p_RS485Data,3+lengthData))
 8001568:	7cfb      	ldrb	r3, [r7, #19]
 800156a:	3303      	adds	r3, #3
 800156c:	4619      	mov	r1, r3
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f7ff fda2 	bl	80010b8 <crcCalculation>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	8a3b      	ldrh	r3, [r7, #16]
 800157a:	4293      	cmp	r3, r2
 800157c:	d105      	bne.n	800158a <RS485_analysis+0x33e>
						{
							m_rs485data->CoilStatus[0] = p_RS485Data[2];
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	789a      	ldrb	r2, [r3, #2]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	729a      	strb	r2, [r3, #10]
							return 1;
 8001586:	2301      	movs	r3, #1
 8001588:	e004      	b.n	8001594 <RS485_analysis+0x348>
						}
						else return 0;
 800158a:	2300      	movs	r3, #0
 800158c:	e002      	b.n	8001594 <RS485_analysis+0x348>
					case 0x18:
						break;
				}
			}
		}
		else return 0;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <RS485_analysis+0x348>
	}
	return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == SIM_USART)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_UART_RxCpltCallback+0x60>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d121      	bne.n	80015f2 <HAL_UART_RxCpltCallback+0x56>
	{
		if(Sim_Count == MAX_RECVBUF_LEN)
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_UART_RxCpltCallback+0x64>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015b8:	d102      	bne.n	80015c0 <HAL_UART_RxCpltCallback+0x24>
		{
			Sim_Count = 0;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UART_RxCpltCallback+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	801a      	strh	r2, [r3, #0]
		}
		Sim_Rxdata[Sim_Count++] = Sim_Rxbyte[0];
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_UART_RxCpltCallback+0x64>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	b291      	uxth	r1, r2
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_UART_RxCpltCallback+0x64>)
 80015cc:	8011      	strh	r1, [r2, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_UART_RxCpltCallback+0x68>)
 80015d2:	7819      	ldrb	r1, [r3, #0]
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_UART_RxCpltCallback+0x6c>)
 80015d6:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	490a      	ldr	r1, [pc, #40]	; (8001604 <HAL_UART_RxCpltCallback+0x68>)
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <HAL_UART_RxCpltCallback+0x70>)
 80015de:	f007 f8b7 	bl	8008750 <HAL_UART_Receive_IT>
		Sim_UartTime = HAL_GetTick();
 80015e2:	f002 ff81 	bl	80044e8 <HAL_GetTick>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_UART_RxCpltCallback+0x74>)
 80015ea:	6013      	str	r3, [r2, #0]
		isSimResponse = true;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_UART_RxCpltCallback+0x78>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
	}
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40004400 	.word	0x40004400
 8001600:	20000ad0 	.word	0x20000ad0
 8001604:	200006e4 	.word	0x200006e4
 8001608:	200006e8 	.word	0x200006e8
 800160c:	200012b8 	.word	0x200012b8
 8001610:	20000ad4 	.word	0x20000ad4
 8001614:	20000ad2 	.word	0x20000ad2

08001618 <deleteBuffer>:
  * @param  buf which buffer needs to be deleted
  * @param  len which length of buffer to be deleted.
  * @retval None
  */
void deleteBuffer(char* buf, uint32_t len)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < len; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	e007      	b.n	8001638 <deleteBuffer+0x20>
	{
		buf[i] = '\0';
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4413      	add	r3, r2
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3301      	adds	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3f3      	bcc.n	8001628 <deleteBuffer+0x10>
	}
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <subString>:
  * @param  startpos is the index to start the substring at.
  * @param  endpos is the index to end the substring before.
  * @retval None
  */
void subString(char* maindata, char* subdata, uint32_t startpos, uint32_t endpos)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	603b      	str	r3, [r7, #0]
	if(endpos < strlen(maindata))
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7fe fdb7 	bl	80001d0 <strlen>
 8001662:	4602      	mov	r2, r0
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4293      	cmp	r3, r2
 8001668:	d213      	bcs.n	8001692 <subString+0x44>
	{
		for(uint32_t i = startpos; i < endpos; i++)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e00c      	b.n	800168a <subString+0x3c>
		{
			subdata[i - startpos] = maindata[i];
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	441a      	add	r2, r3
 8001676:	6979      	ldr	r1, [r7, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	1acb      	subs	r3, r1, r3
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	440b      	add	r3, r1
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = startpos; i < endpos; i++)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3ee      	bcc.n	8001670 <subString+0x22>
		}
	}
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <Sim_send>:
  * @param  command which is AT commands or data.
  * @param  len which is length of AT commands or data.
  * @retval None
  */
STATUS Sim_send(char *command, uint16_t len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
	deleteBuffer((char*)Sim_Rxdata, strlen((char*)Sim_Rxdata));
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <Sim_send+0x44>)
 80016aa:	f7fe fd91 	bl	80001d0 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <Sim_send+0x44>)
 80016b4:	f7ff ffb0 	bl	8001618 <deleteBuffer>
	Sim_Count = 0;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <Sim_send+0x48>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	801a      	strh	r2, [r3, #0]
	if(HAL_UART_Transmit(&SIM_UART, (uint8_t*) command, len, MAX_SEND_TIME) == HAL_OK)
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	f44f 7359 	mov.w	r3, #868	; 0x364
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <Sim_send+0x4c>)
 80016c8:	f006 fef0 	bl	80084ac <HAL_UART_Transmit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <Sim_send+0x3a>
	{
		return RET_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <Sim_send+0x3c>
	}
	return RET_TIMEOUT;
 80016d6:	2302      	movs	r3, #2
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200006e8 	.word	0x200006e8
 80016e4:	20000ad0 	.word	0x20000ad0
 80016e8:	200012b8 	.word	0x200012b8

080016ec <Sim_recv>:
  * @param  timeout which is maximum waiting time for receiving data.
  * @retval RET_TIMEOUT if no response data.
  * 		RET_OK if received a string of data.
  */
STATUS Sim_recv(uint32_t timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 80016f4:	f002 fef8 	bl	80044e8 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]
	while(isSimResponse == false)
 80016fa:	e009      	b.n	8001710 <Sim_recv+0x24>
	{
		if(HAL_GetTick() - time > timeout)
 80016fc:	f002 fef4 	bl	80044e8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	d201      	bcs.n	8001710 <Sim_recv+0x24>
		{
			return RET_TIMEOUT;
 800170c:	2302      	movs	r3, #2
 800170e:	e020      	b.n	8001752 <Sim_recv+0x66>
	while(isSimResponse == false)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <Sim_recv+0x70>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ed      	bne.n	80016fc <Sim_recv+0x10>
		}
	}
	HAL_Delay(5);
 8001720:	2005      	movs	r0, #5
 8001722:	f002 feed 	bl	8004500 <HAL_Delay>
	uint32_t time1 = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		time1 = HAL_GetTick();
 800172a:	f002 fedd 	bl	80044e8 <HAL_GetTick>
 800172e:	60b8      	str	r0, [r7, #8]
		if((time1 - Sim_UartTime) > 100)
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <Sim_recv+0x74>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b64      	cmp	r3, #100	; 0x64
 800173a:	d906      	bls.n	800174a <Sim_recv+0x5e>
		{
			__NOP();
 800173c:	bf00      	nop
			break;
 800173e:	bf00      	nop
		}
		HAL_Delay(1);
	}
	isSimResponse = false;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <Sim_recv+0x70>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e003      	b.n	8001752 <Sim_recv+0x66>
		HAL_Delay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f002 fed8 	bl	8004500 <HAL_Delay>
		time1 = HAL_GetTick();
 8001750:	e7eb      	b.n	800172a <Sim_recv+0x3e>
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000ad2 	.word	0x20000ad2
 8001760:	20000ad4 	.word	0x20000ad4

08001764 <Sim_checkResponseWith>:
  * @param	timeout is maximum waiting time of a data
  * @retval RET_FAIL if no userdata data in Sim_Rxdata.
  * 		RET_OK if otherwise.
  */
STATUS Sim_checkResponseWith(char* userdata, uint8_t maxretry, uint32_t timeout)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	460b      	mov	r3, r1
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	for(i = 0; i < maxretry; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	75fb      	strb	r3, [r7, #23]
 8001776:	e012      	b.n	800179e <Sim_checkResponseWith+0x3a>
	{
		if(Sim_recv(timeout) == RET_OK)
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ffb7 	bl	80016ec <Sim_recv>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <Sim_checkResponseWith+0x34>
		{
			if(strstr((char*)Sim_Rxdata,userdata) != NULL)
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	480b      	ldr	r0, [pc, #44]	; (80017b4 <Sim_checkResponseWith+0x50>)
 8001788:	f008 fbf6 	bl	8009f78 <strstr>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <Sim_checkResponseWith+0x34>
			{
				__NOP();
 8001792:	bf00      	nop
				#if (SIM_DEBUG == 1)
					printf("%s\r\n",(char*)Sim_Rxdata);
				#endif
				return RET_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e008      	b.n	80017aa <Sim_checkResponseWith+0x46>
	for(i = 0; i < maxretry; i++)
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	3301      	adds	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
 800179e:	7dfa      	ldrb	r2, [r7, #23]
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3e8      	bcc.n	8001778 <Sim_checkResponseWith+0x14>
		printf("-----Error-----\r\n");
		printf("Max retry = %d\r\n",i);
		printf("%s",(char*)Sim_Rxdata);
		printf("---------------\r\n");
	#endif
	__NOP();
 80017a6:	bf00      	nop
	return RET_FAIL;
 80017a8:	2301      	movs	r3, #1
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200006e8 	.word	0x200006e8

080017b8 <Sim_checkOK>:
  * @param  None.
  * @retval RET_FAIL if no response or incorrect data.
  * 		RET_OK if response correct data.
  */
STATUS Sim_checkOK(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	Sim_send("AT\r",3);
 80017bc:	2103      	movs	r1, #3
 80017be:	4809      	ldr	r0, [pc, #36]	; (80017e4 <Sim_checkOK+0x2c>)
 80017c0:	f7ff ff6c 	bl	800169c <Sim_send>
	ret = Sim_checkResponseWith("OK", 1, 1000);
 80017c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c8:	2101      	movs	r1, #1
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <Sim_checkOK+0x30>)
 80017cc:	f7ff ffca 	bl	8001764 <Sim_checkResponseWith>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <Sim_checkOK+0x34>)
 80017d6:	701a      	strb	r2, [r3, #0]
	__NOP();
 80017d8:	bf00      	nop
	return ret;
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <Sim_checkOK+0x34>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	0800c668 	.word	0x0800c668
 80017e8:	0800c66c 	.word	0x0800c66c
 80017ec:	200010d9 	.word	0x200010d9

080017f0 <Sim_getSignalQuality>:
  * @param  None.
  * @retval RET_FAIL if 0 < RSSI < 32.
  * 		RET_OK if otherwise.
  */
uint8_t Sim_getSignalQuality(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	uint8_t rssi = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	71fb      	strb	r3, [r7, #7]
	Sim_send("AT+CSQ\r",7);
 80017fa:	2107      	movs	r1, #7
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <Sim_getSignalQuality+0x6c>)
 80017fe:	f7ff ff4d 	bl	800169c <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 3000);
 8001802:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001806:	2102      	movs	r1, #2
 8001808:	4815      	ldr	r0, [pc, #84]	; (8001860 <Sim_getSignalQuality+0x70>)
 800180a:	f7ff ffab 	bl	8001764 <Sim_checkResponseWith>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <Sim_getSignalQuality+0x74>)
 8001814:	701a      	strb	r2, [r3, #0]
	__NOP();
 8001816:	bf00      	nop
	if(ret == RET_OK)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <Sim_getSignalQuality+0x74>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d117      	bne.n	8001850 <Sim_getSignalQuality+0x60>
	{
		char* tok = strtok((char*)Sim_Rxdata,":");
 8001820:	4911      	ldr	r1, [pc, #68]	; (8001868 <Sim_getSignalQuality+0x78>)
 8001822:	4812      	ldr	r0, [pc, #72]	; (800186c <Sim_getSignalQuality+0x7c>)
 8001824:	f008 fbc0 	bl	8009fa8 <strtok>
 8001828:	6038      	str	r0, [r7, #0]
		tok = strtok(NULL,",");
 800182a:	4911      	ldr	r1, [pc, #68]	; (8001870 <Sim_getSignalQuality+0x80>)
 800182c:	2000      	movs	r0, #0
 800182e:	f008 fbbb 	bl	8009fa8 <strtok>
 8001832:	6038      	str	r0, [r7, #0]
		rssi = atoi(tok);
 8001834:	6838      	ldr	r0, [r7, #0]
 8001836:	f007 fed7 	bl	80095e8 <atoi>
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
		deleteBuffer((char*)Sim_Rxdata, 100);
 800183e:	2164      	movs	r1, #100	; 0x64
 8001840:	480a      	ldr	r0, [pc, #40]	; (800186c <Sim_getSignalQuality+0x7c>)
 8001842:	f7ff fee9 	bl	8001618 <deleteBuffer>
		if(rssi < 32)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b1f      	cmp	r3, #31
 800184a:	d801      	bhi.n	8001850 <Sim_getSignalQuality+0x60>
		{
			return rssi;
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	e000      	b.n	8001852 <Sim_getSignalQuality+0x62>
		}
	}
	return 99;
 8001850:	2363      	movs	r3, #99	; 0x63
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	0800c670 	.word	0x0800c670
 8001860:	0800c66c 	.word	0x0800c66c
 8001864:	200010d9 	.word	0x200010d9
 8001868:	0800c678 	.word	0x0800c678
 800186c:	200006e8 	.word	0x200006e8
 8001870:	0800c67c 	.word	0x0800c67c

08001874 <Sim_disconnectInternet>:
  * @param  None.
  * @retval RET_FAIL if disconnection failed.
  * 		RET_OK if disconnection successful.
  */
STATUS Sim_disconnectInternet(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	Sim_send("AT+QIDEACT=1\r",13);
 8001878:	210d      	movs	r1, #13
 800187a:	4809      	ldr	r0, [pc, #36]	; (80018a0 <Sim_disconnectInternet+0x2c>)
 800187c:	f7ff ff0e 	bl	800169c <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8001880:	f241 3288 	movw	r2, #5000	; 0x1388
 8001884:	2102      	movs	r1, #2
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <Sim_disconnectInternet+0x30>)
 8001888:	f7ff ff6c 	bl	8001764 <Sim_checkResponseWith>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <Sim_disconnectInternet+0x34>)
 8001892:	701a      	strb	r2, [r3, #0]
	__NOP();
 8001894:	bf00      	nop
	return ret;
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <Sim_disconnectInternet+0x34>)
 8001898:	781b      	ldrb	r3, [r3, #0]
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	0800c6e0 	.word	0x0800c6e0
 80018a4:	0800c66c 	.word	0x0800c66c
 80018a8:	200010d9 	.word	0x200010d9

080018ac <Sim_initSMS>:

STATUS Sim_initSMS(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	//Select SMS Message Format
	Sim_send("AT+CMGF=1\r",strlen("AT+CMGF=1\r"));
 80018b0:	210a      	movs	r1, #10
 80018b2:	4810      	ldr	r0, [pc, #64]	; (80018f4 <Sim_initSMS+0x48>)
 80018b4:	f7ff fef2 	bl	800169c <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	2102      	movs	r1, #2
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <Sim_initSMS+0x4c>)
 80018c0:	f7ff ff50 	bl	8001764 <Sim_checkResponseWith>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <Sim_initSMS+0x50>)
 80018ca:	701a      	strb	r2, [r3, #0]
	__NOP();
 80018cc:	bf00      	nop
	//Delete all message
	Sim_send("AT+CMGD=1,4\r",strlen("AT+CMGD=1,4\r"));
 80018ce:	210c      	movs	r1, #12
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <Sim_initSMS+0x54>)
 80018d2:	f7ff fee3 	bl	800169c <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	2102      	movs	r1, #2
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <Sim_initSMS+0x4c>)
 80018de:	f7ff ff41 	bl	8001764 <Sim_checkResponseWith>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <Sim_initSMS+0x50>)
 80018e8:	701a      	strb	r2, [r3, #0]
	__NOP();
 80018ea:	bf00      	nop
	return ret;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <Sim_initSMS+0x50>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	0800c6f0 	.word	0x0800c6f0
 80018f8:	0800c66c 	.word	0x0800c66c
 80018fc:	200010d9 	.word	0x200010d9
 8001900:	0800c6fc 	.word	0x0800c6fc

08001904 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001908:	f3bf 8f4f 	dsb	sy
}
 800190c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <__NVIC_SystemReset+0x24>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001916:	4904      	ldr	r1, [pc, #16]	; (8001928 <__NVIC_SystemReset+0x24>)
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_SystemReset+0x28>)
 800191a:	4313      	orrs	r3, r2
 800191c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800191e:	f3bf 8f4f 	dsb	sy
}
 8001922:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <__NVIC_SystemReset+0x20>
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	05fa0004 	.word	0x05fa0004

08001930 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
	for(uint32_t i = 0; i < 100000; i++);
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e002      	b.n	8001946 <HAL_GPIO_EXTI_Callback+0x16>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_GPIO_EXTI_Callback+0x8c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d9f8      	bls.n	8001940 <HAL_GPIO_EXTI_Callback+0x10>
	if(GPIO_Pin == SIM_RI_Pin)
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d102      	bne.n	800195a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		Sim_isRISignal = true;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == IN_1_Pin)
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001960:	d118      	bne.n	8001994 <HAL_GPIO_EXTI_Callback+0x64>
	{
		rainRaw++;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_GPIO_EXTI_Callback+0x94>)
 800196e:	801a      	strh	r2, [r3, #0]
		long j = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
		while((HAL_GPIO_ReadPin(IN_1_GPIO_Port,IN_1_Pin) == GPIO_PIN_SET) && (j < 1000000)){j++;};
 8001974:	e002      	b.n	800197c <HAL_GPIO_EXTI_Callback+0x4c>
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3301      	adds	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001980:	4811      	ldr	r0, [pc, #68]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001982:	f004 fd13 	bl	80063ac <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	2b01      	cmp	r3, #1
 800198a:	d103      	bne.n	8001994 <HAL_GPIO_EXTI_Callback+0x64>
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <HAL_GPIO_EXTI_Callback+0x9c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	ddf0      	ble.n	8001976 <HAL_GPIO_EXTI_Callback+0x46>
//	if(GPIO_Pin == IN_4_Pin)
//	{
//		while(HAL_GPIO_ReadPin(IN_4_GPIO_Port, IN_4_Pin) == GPIO_PIN_SET);
//		IN4_cnt++;
//	}
	for(uint32_t i = 0; i < 100000; i++);
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_EXTI_Callback+0x70>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_GPIO_EXTI_Callback+0x8c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d9f8      	bls.n	800199a <HAL_GPIO_EXTI_Callback+0x6a>
	EXTI->PR |= GPIO_Pin;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xa0>)
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xa0>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	614b      	str	r3, [r1, #20]
}
 80019b4:	bf00      	nop
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	0001869f 	.word	0x0001869f
 80019c0:	20000ada 	.word	0x20000ada
 80019c4:	20001040 	.word	0x20001040
 80019c8:	48000800 	.word	0x48000800
 80019cc:	000f423f 	.word	0x000f423f
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	isOnTimeToSendReq = true;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_RTC_AlarmAEventCallback+0x68>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
	//Thuc hien lay thoi gian hien tai cua RTC
	HAL_RTC_GetTime(hrtc, &currentTime, RTC_FORMAT_BIN);
 80019e2:	2200      	movs	r2, #0
 80019e4:	4916      	ldr	r1, [pc, #88]	; (8001a40 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f006 f974 	bl	8007cd4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &currentDate, RTC_FORMAT_BIN);
 80019ec:	2200      	movs	r2, #0
 80019ee:	4915      	ldr	r1, [pc, #84]	; (8001a44 <HAL_RTC_AlarmAEventCallback+0x70>)
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f006 fa74 	bl	8007ede <HAL_RTC_GetDate>
	rtc_count++;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_RTC_AlarmAEventCallback+0x74>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_RTC_AlarmAEventCallback+0x74>)
 8001a02:	801a      	strh	r2, [r3, #0]
	if((userAlarm.AlarmTime.Hours == 0) && (userAlarm.AlarmTime.Minutes == 0))
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_RTC_AlarmAEventCallback+0x78>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d106      	bne.n	8001a1a <HAL_RTC_AlarmAEventCallback+0x46>
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_RTC_AlarmAEventCallback+0x78>)
 8001a0e:	785b      	ldrb	r3, [r3, #1]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <HAL_RTC_AlarmAEventCallback+0x46>
	{
		isRTCStartCounting = true;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_RTC_AlarmAEventCallback+0x7c>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
	}
	//Thuc hien cai dat thoi gian Alarm
	RTC_initAlarm(currentTime.Hours, currentTime.Minutes, 0);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8001a20:	7851      	ldrb	r1, [r2, #1]
 8001a22:	2200      	movs	r2, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 fb19 	bl	800305c <RTC_initAlarm>
	HAL_RTC_SetAlarm_IT(hrtc, &userAlarm, RTC_FORMAT_BIN);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <HAL_RTC_AlarmAEventCallback+0x78>)
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f006 faa4 	bl	8007f7c <HAL_RTC_SetAlarm_IT>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000d15 	.word	0x20000d15
 8001a40:	20000cd4 	.word	0x20000cd4
 8001a44:	20000ce8 	.word	0x20000ce8
 8001a48:	20000d16 	.word	0x20000d16
 8001a4c:	20000cec 	.word	0x20000cec
 8001a50:	20000d14 	.word	0x20000d14
 8001a54:	00000000 	.word	0x00000000

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5a:	b0a9      	sub	sp, #164	; 0xa4
 8001a5c:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5e:	f002 fce9 	bl	8004434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a62:	f000 fb6b 	bl	800213c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a66:	f000 fe27 	bl	80026b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a6a:	f000 fdff 	bl	800266c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a6e:	f000 fd9d 	bl	80025ac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001a72:	f000 fdcb 	bl	800260c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001a76:	f000 fca7 	bl	80023c8 <MX_RTC_Init>
  MX_ADC2_Init();
 8001a7a:	f000 fbcd 	bl	8002218 <MX_ADC2_Init>
  MX_ADC4_Init();
 8001a7e:	f000 fc37 	bl	80022f0 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
	#if (PWRMODE == 1)
	PWR_ctrlPwrSensor(ON);
	#endif
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001a82:	2100      	movs	r1, #0
 8001a84:	48be      	ldr	r0, [pc, #760]	; (8001d80 <main+0x328>)
 8001a86:	f003 f8db 	bl	8004c40 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	48bd      	ldr	r0, [pc, #756]	; (8001d84 <main+0x32c>)
 8001a8e:	f003 f8d7 	bl	8004c40 <HAL_ADCEx_Calibration_Start>
  	HAL_Delay(1000);
 8001a92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a96:	f002 fd33 	bl	8004500 <HAL_Delay>
  	Flash_init();
 8001a9a:	f001 fcd1 	bl	8003440 <Flash_init>
    HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	49b9      	ldr	r1, [pc, #740]	; (8001d88 <main+0x330>)
 8001aa2:	48ba      	ldr	r0, [pc, #744]	; (8001d8c <main+0x334>)
 8001aa4:	f006 fe54 	bl	8008750 <HAL_UART_Receive_IT>
    Sim_resetSIM();
 8001aa8:	f001 f928 	bl	8002cfc <Sim_resetSIM>
    /* First Connection */
	char StationStart[25]  = {0};
 8001aac:	2300      	movs	r3, #0
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
 8001ac0:	751a      	strb	r2, [r3, #20]
	char StationConfig[25] = {0};
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	751a      	strb	r2, [r3, #20]
	sprintf(StationStart,"station=%d&status=%s",STATION,"START");
 8001ad8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001adc:	4bac      	ldr	r3, [pc, #688]	; (8001d90 <main+0x338>)
 8001ade:	221e      	movs	r2, #30
 8001ae0:	49ac      	ldr	r1, [pc, #688]	; (8001d94 <main+0x33c>)
 8001ae2:	f008 fa21 	bl	8009f28 <siprintf>
	sprintf(StationConfig,"station=%d&status=%s",STATION,"CONFIG");
 8001ae6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001aea:	4bab      	ldr	r3, [pc, #684]	; (8001d98 <main+0x340>)
 8001aec:	221e      	movs	r2, #30
 8001aee:	49a9      	ldr	r1, [pc, #676]	; (8001d94 <main+0x33c>)
 8001af0:	f008 fa1a 	bl	8009f28 <siprintf>
	Sim_exitSLEEPMode();
 8001af4:	f001 f8e6 	bl	8002cc4 <Sim_exitSLEEPMode>
	Sim_checkOK();
 8001af8:	f7ff fe5e 	bl	80017b8 <Sim_checkOK>
	HAL_Delay(3000);
 8001afc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b00:	f002 fcfe 	bl	8004500 <HAL_Delay>
    if(Sim_checkOK() == RET_OK)
 8001b04:	f7ff fe58 	bl	80017b8 <Sim_checkOK>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d11b      	bne.n	8001b46 <main+0xee>
    {
		Sim_RSSI = Sim_getSignalQuality();
 8001b0e:	f7ff fe6f 	bl	80017f0 <Sim_getSignalQuality>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	4ba1      	ldr	r3, [pc, #644]	; (8001d9c <main+0x344>)
 8001b18:	701a      	strb	r2, [r3, #0]
		if(Sim_RSSI != 99) //99 <=> error
 8001b1a:	4ba0      	ldr	r3, [pc, #640]	; (8001d9c <main+0x344>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b63      	cmp	r3, #99	; 0x63
 8001b20:	d011      	beq.n	8001b46 <main+0xee>
		{
			if(Sim_initSMS() == RET_OK)
 8001b22:	f7ff fec3 	bl	80018ac <Sim_initSMS>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10c      	bne.n	8001b46 <main+0xee>
			{
				if(HTTP_configParams() == RET_OK)
 8001b2c:	f7ff f980 	bl	8000e30 <HTTP_configParams>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d107      	bne.n	8001b46 <main+0xee>
				{
					__NOP();
 8001b36:	bf00      	nop
					Sim_connectHTTP(HostConfig, URLConfig, StationStart, (char*)HTTP_DataToGet);
 8001b38:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001b3c:	4b98      	ldr	r3, [pc, #608]	; (8001da0 <main+0x348>)
 8001b3e:	4999      	ldr	r1, [pc, #612]	; (8001da4 <main+0x34c>)
 8001b40:	4899      	ldr	r0, [pc, #612]	; (8001da8 <main+0x350>)
 8001b42:	f000 fe89 	bl	8002858 <Sim_connectHTTP>
				}
			}
		}
    }
    __NOP();
 8001b46:	bf00      	nop
    Sim_enterSLEEPMode();
 8001b48:	f001 f87e 	bl	8002c48 <Sim_enterSLEEPMode>
    Sim_isRISignal = false; //After reset, RISignal will raise
 8001b4c:	4b97      	ldr	r3, [pc, #604]	; (8001dac <main+0x354>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
	#if (PWRMODE == 0)
	PWR_ctrlPwrSensor(OFF);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f002 f822 	bl	8003b9c <PWR_ctrlPwrSensor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Sim_isRISignal == true)
 8001b58:	4b94      	ldr	r3, [pc, #592]	; (8001dac <main+0x354>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <main+0x114>
	  {
		  Sim_restartControl();
 8001b62:	f001 f969 	bl	8002e38 <Sim_restartControl>
		  Sim_isRISignal = false;
 8001b66:	4b91      	ldr	r3, [pc, #580]	; (8001dac <main+0x354>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
	  }

	  if(configStatus == 1)
 8001b6c:	4b90      	ldr	r3, [pc, #576]	; (8001db0 <main+0x358>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d109      	bne.n	8001b88 <main+0x130>
	  {
		  Sim_connectHTTP(HostConfig, URLConfig, StationConfig, (char*)HTTP_DataToGet);
 8001b74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b78:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <main+0x348>)
 8001b7a:	498a      	ldr	r1, [pc, #552]	; (8001da4 <main+0x34c>)
 8001b7c:	488a      	ldr	r0, [pc, #552]	; (8001da8 <main+0x350>)
 8001b7e:	f000 fe6b 	bl	8002858 <Sim_connectHTTP>
		  configStatus = 0;
 8001b82:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <main+0x358>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
	  }

	  if(isRTCStartCounting)
 8001b88:	4b8a      	ldr	r3, [pc, #552]	; (8001db4 <main+0x35c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d013      	beq.n	8001bba <main+0x162>
	  {
		  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001b92:	2200      	movs	r2, #0
 8001b94:	4988      	ldr	r1, [pc, #544]	; (8001db8 <main+0x360>)
 8001b96:	4889      	ldr	r0, [pc, #548]	; (8001dbc <main+0x364>)
 8001b98:	f006 f89c 	bl	8007cd4 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4988      	ldr	r1, [pc, #544]	; (8001dc0 <main+0x368>)
 8001ba0:	4886      	ldr	r0, [pc, #536]	; (8001dbc <main+0x364>)
 8001ba2:	f006 f99c 	bl	8007ede <HAL_RTC_GetDate>
		  if((currentTime.Hours == 0)&&(currentTime.Minutes > 4))
 8001ba6:	4b84      	ldr	r3, [pc, #528]	; (8001db8 <main+0x360>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <main+0x162>
 8001bae:	4b82      	ldr	r3, [pc, #520]	; (8001db8 <main+0x360>)
 8001bb0:	785b      	ldrb	r3, [r3, #1]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d901      	bls.n	8001bba <main+0x162>
		  {
			  NVIC_SystemReset();
 8001bb6:	f7ff fea5 	bl	8001904 <__NVIC_SystemReset>
		  }
	  }

	  if(isOnTimeToSendReq)
 8001bba:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <main+0x36c>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 81dc 	beq.w	8001f7e <main+0x526>
	  {
		  #if (PWRMODE == 0)
		  PWR_ctrlPwrSensor(ON);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f001 ffe8 	bl	8003b9c <PWR_ctrlPwrSensor>
		  #endif
		  Sim_exitSLEEPMode();
 8001bcc:	f001 f87a 	bl	8002cc4 <Sim_exitSLEEPMode>
		  //Kiem tra tin hieu Sim
		  Sim_RSSI = Sim_getSignalQuality();
 8001bd0:	f7ff fe0e 	bl	80017f0 <Sim_getSignalQuality>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b70      	ldr	r3, [pc, #448]	; (8001d9c <main+0x344>)
 8001bda:	701a      	strb	r2, [r3, #0]
		  //Doc dien ap
		  PWR_getPwrSupply(0);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f001 fff7 	bl	8003bd0 <PWR_getPwrSupply>
		  HAL_Delay(10000);
 8001be2:	f242 7010 	movw	r0, #10000	; 0x2710
 8001be6:	f002 fc8b 	bl	8004500 <HAL_Delay>
		  HAL_Delay(10000);
 8001bea:	f242 7010 	movw	r0, #10000	; 0x2710
 8001bee:	f002 fc87 	bl	8004500 <HAL_Delay>
		  //Doc du lieu cam bien
		  /*-------RS485-------*/
		  float rs485_arr[5] = {0};
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
		  for(uint8_t i = 0; i < 5; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001c08:	e012      	b.n	8001c30 <main+0x1d8>
		  {
		  	rs485_arr[i] = RS485_readLiquidLevelTransmitter(0x01);
 8001c0a:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f001 fdc4 	bl	800379c <RS485_readLiquidLevelTransmitter>
 8001c14:	eef0 7a40 	vmov.f32	s15, s0
 8001c18:	00a3      	lsls	r3, r4, #2
 8001c1a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001c1e:	4413      	add	r3, r2
 8001c20:	3b4c      	subs	r3, #76	; 0x4c
 8001c22:	edc3 7a00 	vstr	s15, [r3]
		  for(uint8_t i = 0; i < 5; i++)
 8001c26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001c30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d9e8      	bls.n	8001c0a <main+0x1b2>
		  }
		  insertionSort_2(rs485_arr,5);
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	2105      	movs	r1, #5
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 f8be 	bl	8003dc0 <insertionSort_2>
		  if(rs485_arr[4] == -32767)
 8001c44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c48:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001dc8 <main+0x370>
 8001c4c:	eef4 7a47 	vcmp.f32	s15, s14
 8001c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c54:	d114      	bne.n	8001c80 <main+0x228>
		  {
			  levelWater = 0;
 8001c56:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <main+0x374>)
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
			  //bao trang thai cam bien
			  memset(sensorStatus,0,strlen(sensorStatus));
 8001c5e:	485c      	ldr	r0, [pc, #368]	; (8001dd0 <main+0x378>)
 8001c60:	f7fe fab6 	bl	80001d0 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4859      	ldr	r0, [pc, #356]	; (8001dd0 <main+0x378>)
 8001c6c:	f007 fcea 	bl	8009644 <memset>
			  strcpy(sensorStatus,"ERROR");
 8001c70:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <main+0x378>)
 8001c72:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <main+0x37c>)
 8001c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c78:	6018      	str	r0, [r3, #0]
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	8019      	strh	r1, [r3, #0]
 8001c7e:	e029      	b.n	8001cd4 <main+0x27c>
		  }
		  else
		  {
			  levelWater = rs485_arr[2];
 8001c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c82:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <main+0x374>)
 8001c84:	6013      	str	r3, [r2, #0]
			  if(levelWater < 0 || levelWater > 10) levelWater = 0;
 8001c86:	4b51      	ldr	r3, [pc, #324]	; (8001dcc <main+0x374>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d409      	bmi.n	8001caa <main+0x252>
 8001c96:	4b4d      	ldr	r3, [pc, #308]	; (8001dcc <main+0x374>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	dd03      	ble.n	8001cb2 <main+0x25a>
 8001caa:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <main+0x374>)
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
			  memset(sensorStatus,0,strlen(sensorStatus));
 8001cb2:	4847      	ldr	r0, [pc, #284]	; (8001dd0 <main+0x378>)
 8001cb4:	f7fe fa8c 	bl	80001d0 <strlen>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4844      	ldr	r0, [pc, #272]	; (8001dd0 <main+0x378>)
 8001cc0:	f007 fcc0 	bl	8009644 <memset>
			  strcpy(sensorStatus,"OK");
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <main+0x378>)
 8001cc6:	4a44      	ldr	r2, [pc, #272]	; (8001dd8 <main+0x380>)
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	8019      	strh	r1, [r3, #0]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	0c12      	lsrs	r2, r2, #16
 8001cd2:	701a      	strb	r2, [r3, #0]
		  }
		  /*-------420mA-------*/
		  float adc_arr[5] = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
		  for(uint8_t i = 0; i < 5; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001cea:	e012      	b.n	8001d12 <main+0x2ba>
		  {
			  adc_arr[i] = Sensor_getADCValue(2);
 8001cec:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f001 fdc1 	bl	8003878 <Sensor_getADCValue>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	00a3      	lsls	r3, r4, #2
 8001cfc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001d00:	4413      	add	r3, r2
 8001d02:	3b60      	subs	r3, #96	; 0x60
 8001d04:	edc3 7a00 	vstr	s15, [r3]
		  for(uint8_t i = 0; i < 5; i++)
 8001d08:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001d12:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d9e8      	bls.n	8001cec <main+0x294>
		  }
		  insertionSort_2(adc_arr,5);
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	2105      	movs	r1, #5
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 f84d 	bl	8003dc0 <insertionSort_2>
		  Sensor_CalibCurrent = adc_arr[2];
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <main+0x384>)
 8001d2a:	6013      	str	r3, [r2, #0]
		  if((Sensor_CalibCurrent > 3.9) && (Sensor_CalibCurrent < 4.01))
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <main+0x384>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fc09 	bl	8000548 <__aeabi_f2d>
 8001d36:	a30e      	add	r3, pc, #56	; (adr r3, 8001d70 <main+0x318>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe feec 	bl	8000b18 <__aeabi_dcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d04c      	beq.n	8001de0 <main+0x388>
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <main+0x384>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbfc 	bl	8000548 <__aeabi_f2d>
 8001d50:	a309      	add	r3, pc, #36	; (adr r3, 8001d78 <main+0x320>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fec1 	bl	8000adc <__aeabi_dcmplt>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d03f      	beq.n	8001de0 <main+0x388>
		  {
		  	Sensor_CalibCurrent = 4.00;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <main+0x384>)
 8001d62:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e054      	b.n	8001e14 <main+0x3bc>
 8001d6a:	bf00      	nop
 8001d6c:	f3af 8000 	nop.w
 8001d70:	33333333 	.word	0x33333333
 8001d74:	400f3333 	.word	0x400f3333
 8001d78:	70a3d70a 	.word	0x70a3d70a
 8001d7c:	40100a3d 	.word	0x40100a3d
 8001d80:	200011a4 	.word	0x200011a4
 8001d84:	2000133c 	.word	0x2000133c
 8001d88:	200006e4 	.word	0x200006e4
 8001d8c:	200012b8 	.word	0x200012b8
 8001d90:	0800c73c 	.word	0x0800c73c
 8001d94:	0800c744 	.word	0x0800c744
 8001d98:	0800c75c 	.word	0x0800c75c
 8001d9c:	20000ad8 	.word	0x20000ad8
 8001da0:	200002fc 	.word	0x200002fc
 8001da4:	200000a0 	.word	0x200000a0
 8001da8:	20000080 	.word	0x20000080
 8001dac:	20000ada 	.word	0x20000ada
 8001db0:	20000cd0 	.word	0x20000cd0
 8001db4:	20000d14 	.word	0x20000d14
 8001db8:	20000cd4 	.word	0x20000cd4
 8001dbc:	20001264 	.word	0x20001264
 8001dc0:	20000ce8 	.word	0x20000ce8
 8001dc4:	20000d15 	.word	0x20000d15
 8001dc8:	c6fffe00 	.word	0xc6fffe00
 8001dcc:	2000103c 	.word	0x2000103c
 8001dd0:	200000fc 	.word	0x200000fc
 8001dd4:	0800c764 	.word	0x0800c764
 8001dd8:	0800c76c 	.word	0x0800c76c
 8001ddc:	200010c0 	.word	0x200010c0
		  }
		  else if((Sensor_CalibCurrent > 20.01) && (Sensor_CalibCurrent < 21))
 8001de0:	4bad      	ldr	r3, [pc, #692]	; (8002098 <main+0x640>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbaf 	bl	8000548 <__aeabi_f2d>
 8001dea:	a3a9      	add	r3, pc, #676	; (adr r3, 8002090 <main+0x638>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fe92 	bl	8000b18 <__aeabi_dcmpgt>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <main+0x3bc>
 8001dfa:	4ba7      	ldr	r3, [pc, #668]	; (8002098 <main+0x640>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d502      	bpl.n	8001e14 <main+0x3bc>
		  {
		  	Sensor_CalibCurrent = 20.00;
 8001e0e:	4ba2      	ldr	r3, [pc, #648]	; (8002098 <main+0x640>)
 8001e10:	4aa2      	ldr	r2, [pc, #648]	; (800209c <main+0x644>)
 8001e12:	601a      	str	r2, [r3, #0]
		  }
		  levelWater = ADC_map(Sensor_CalibCurrent, 4.00, 20.00, 0.0, 15); //donvi: met
 8001e14:	4ba0      	ldr	r3, [pc, #640]	; (8002098 <main+0x640>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8001e1e:	eddf 1aa0 	vldr	s3, [pc, #640]	; 80020a0 <main+0x648>
 8001e22:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8001e26:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2e:	f001 fe87 	bl	8003b40 <ADC_map>
 8001e32:	eef0 7a40 	vmov.f32	s15, s0
 8001e36:	4b9b      	ldr	r3, [pc, #620]	; (80020a4 <main+0x64c>)
 8001e38:	edc3 7a00 	vstr	s15, [r3]
		  if((levelWater < 0.0) || (levelWater > 16.0))
 8001e3c:	4b99      	ldr	r3, [pc, #612]	; (80020a4 <main+0x64c>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4a:	d409      	bmi.n	8001e60 <main+0x408>
 8001e4c:	4b95      	ldr	r3, [pc, #596]	; (80020a4 <main+0x64c>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	dd14      	ble.n	8001e8a <main+0x432>
		  {
			  levelWater = 0;
 8001e60:	4b90      	ldr	r3, [pc, #576]	; (80020a4 <main+0x64c>)
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
			  memset(sensorStatus,0,strlen(sensorStatus));
 8001e68:	488f      	ldr	r0, [pc, #572]	; (80020a8 <main+0x650>)
 8001e6a:	f7fe f9b1 	bl	80001d0 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	2100      	movs	r1, #0
 8001e74:	488c      	ldr	r0, [pc, #560]	; (80020a8 <main+0x650>)
 8001e76:	f007 fbe5 	bl	8009644 <memset>
			  strcpy(sensorStatus,"ERROR");
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <main+0x650>)
 8001e7c:	4a8b      	ldr	r2, [pc, #556]	; (80020ac <main+0x654>)
 8001e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e82:	6018      	str	r0, [r3, #0]
 8001e84:	3304      	adds	r3, #4
 8001e86:	8019      	strh	r1, [r3, #0]
 8001e88:	e010      	b.n	8001eac <main+0x454>
		  }
		  else
		  {
			  memset(sensorStatus,0,strlen(sensorStatus));
 8001e8a:	4887      	ldr	r0, [pc, #540]	; (80020a8 <main+0x650>)
 8001e8c:	f7fe f9a0 	bl	80001d0 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	4884      	ldr	r0, [pc, #528]	; (80020a8 <main+0x650>)
 8001e98:	f007 fbd4 	bl	8009644 <memset>
			  strcpy(sensorStatus,"OK");
 8001e9c:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <main+0x650>)
 8001e9e:	4a84      	ldr	r2, [pc, #528]	; (80020b0 <main+0x658>)
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	8019      	strh	r1, [r3, #0]
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	0c12      	lsrs	r2, r2, #16
 8001eaa:	701a      	strb	r2, [r3, #0]
		  }
		  //Tong hop du lieu
		  sprintf(MainData,"vol=%.1f&sttcode=%s&rssi=%02d&station=%d"
 8001eac:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <main+0x65c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb49 	bl	8000548 <__aeabi_f2d>
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	460d      	mov	r5, r1
 8001eba:	4b7f      	ldr	r3, [pc, #508]	; (80020b8 <main+0x660>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461e      	mov	r6, r3
 8001ec0:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <main+0x64c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb3f 	bl	8000548 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	497b      	ldr	r1, [pc, #492]	; (80020bc <main+0x664>)
 8001ed0:	8809      	ldrh	r1, [r1, #0]
 8001ed2:	b289      	uxth	r1, r1
 8001ed4:	4608      	mov	r0, r1
							"&level=%.2f&rainraw=%d&timestamp=%02d%02d%02d%02d%02d",
							Voltage,sensorStatus,Sim_RSSI,STATION,levelWater,rainRaw,
							currentDate.Date,currentDate.Month,currentDate.Year,
 8001ed6:	497a      	ldr	r1, [pc, #488]	; (80020c0 <main+0x668>)
 8001ed8:	7889      	ldrb	r1, [r1, #2]
		  sprintf(MainData,"vol=%.1f&sttcode=%s&rssi=%02d&station=%d"
 8001eda:	60f9      	str	r1, [r7, #12]
							currentDate.Date,currentDate.Month,currentDate.Year,
 8001edc:	4978      	ldr	r1, [pc, #480]	; (80020c0 <main+0x668>)
 8001ede:	7849      	ldrb	r1, [r1, #1]
		  sprintf(MainData,"vol=%.1f&sttcode=%s&rssi=%02d&station=%d"
 8001ee0:	60b9      	str	r1, [r7, #8]
							currentDate.Date,currentDate.Month,currentDate.Year,
 8001ee2:	4977      	ldr	r1, [pc, #476]	; (80020c0 <main+0x668>)
 8001ee4:	78c9      	ldrb	r1, [r1, #3]
		  sprintf(MainData,"vol=%.1f&sttcode=%s&rssi=%02d&station=%d"
 8001ee6:	6079      	str	r1, [r7, #4]
							currentTime.Hours,currentTime.Minutes);
 8001ee8:	4976      	ldr	r1, [pc, #472]	; (80020c4 <main+0x66c>)
 8001eea:	7809      	ldrb	r1, [r1, #0]
		  sprintf(MainData,"vol=%.1f&sttcode=%s&rssi=%02d&station=%d"
 8001eec:	6039      	str	r1, [r7, #0]
							currentTime.Hours,currentTime.Minutes);
 8001eee:	4975      	ldr	r1, [pc, #468]	; (80020c4 <main+0x66c>)
 8001ef0:	7849      	ldrb	r1, [r1, #1]
		  sprintf(MainData,"vol=%.1f&sttcode=%s&rssi=%02d&station=%d"
 8001ef2:	910b      	str	r1, [sp, #44]	; 0x2c
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	910a      	str	r1, [sp, #40]	; 0x28
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	9109      	str	r1, [sp, #36]	; 0x24
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	9108      	str	r1, [sp, #32]
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	9107      	str	r1, [sp, #28]
 8001f04:	9006      	str	r0, [sp, #24]
 8001f06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f0a:	231e      	movs	r3, #30
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	9601      	str	r6, [sp, #4]
 8001f10:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <main+0x650>)
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4622      	mov	r2, r4
 8001f16:	462b      	mov	r3, r5
 8001f18:	496b      	ldr	r1, [pc, #428]	; (80020c8 <main+0x670>)
 8001f1a:	486c      	ldr	r0, [pc, #432]	; (80020cc <main+0x674>)
 8001f1c:	f008 f804 	bl	8009f28 <siprintf>
		  //Reset du lieu
		  rainRaw = 0;
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <main+0x664>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	801a      	strh	r2, [r3, #0]
		  #if (PWRMODE == 0)
		  PWR_ctrlPwrSensor(OFF);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f001 fe38 	bl	8003b9c <PWR_ctrlPwrSensor>
		  #endif
		  //Gui du lieu len Server
		  ret = Sim_connectHTTP(Host1, URL1, MainData, (char*)HTTP_DataToGet);
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <main+0x678>)
 8001f2e:	4a67      	ldr	r2, [pc, #412]	; (80020cc <main+0x674>)
 8001f30:	4968      	ldr	r1, [pc, #416]	; (80020d4 <main+0x67c>)
 8001f32:	4869      	ldr	r0, [pc, #420]	; (80020d8 <main+0x680>)
 8001f34:	f000 fc90 	bl	8002858 <Sim_connectHTTP>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b67      	ldr	r3, [pc, #412]	; (80020dc <main+0x684>)
 8001f3e:	701a      	strb	r2, [r3, #0]
		  if(ret != RET_OK)
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <main+0x684>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <main+0x502>
		  {
			  Flash_writeData(Host1, NULL, MainData);
 8001f48:	4a60      	ldr	r2, [pc, #384]	; (80020cc <main+0x674>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4862      	ldr	r0, [pc, #392]	; (80020d8 <main+0x680>)
 8001f4e:	f001 fae7 	bl	8003520 <Flash_writeData>
			  Flash_isReadData = false;
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <main+0x688>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
 8001f58:	e002      	b.n	8001f60 <main+0x508>
		  }
		  else
		  {
			  Flash_isReadData = true;
 8001f5a:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <main+0x688>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
		  }
		  //Reset du lieu
		  memset(MainData,0,strlen(MainData));
 8001f60:	485a      	ldr	r0, [pc, #360]	; (80020cc <main+0x674>)
 8001f62:	f7fe f935 	bl	80001d0 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4857      	ldr	r0, [pc, #348]	; (80020cc <main+0x674>)
 8001f6e:	f007 fb69 	bl	8009644 <memset>
		  Sim_enterSLEEPMode();
 8001f72:	f000 fe69 	bl	8002c48 <Sim_enterSLEEPMode>
		  isOnTimeToSendReq = false;
 8001f76:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <main+0x68c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e5ec      	b.n	8001b58 <main+0x100>
	  }
	  else
	  {
		  if(Flash_isReadData == true)
 8001f7e:	4b58      	ldr	r3, [pc, #352]	; (80020e0 <main+0x688>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80cc 	beq.w	8002120 <main+0x6c8>
		  {
			  if(READ_DATA_ADDR != WRITE_DATA_ADDR)
 8001f88:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <main+0x690>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b57      	ldr	r3, [pc, #348]	; (80020ec <main+0x694>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d070      	beq.n	8002076 <main+0x61e>
			  {
				  memset(Flash_DataToRead, 0, strlen(Flash_DataToRead));
 8001f94:	4856      	ldr	r0, [pc, #344]	; (80020f0 <main+0x698>)
 8001f96:	f7fe f91b 	bl	80001d0 <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4853      	ldr	r0, [pc, #332]	; (80020f0 <main+0x698>)
 8001fa2:	f007 fb4f 	bl	8009644 <memset>
				  READ_DATA_ADDR = Flash_ReadIntType(RD_ADDR);
 8001fa6:	4853      	ldr	r0, [pc, #332]	; (80020f4 <main+0x69c>)
 8001fa8:	f7fe fea5 	bl	8000cf6 <Flash_ReadIntType>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a4e      	ldr	r2, [pc, #312]	; (80020e8 <main+0x690>)
 8001fb0:	6013      	str	r3, [r2, #0]
				  WRITE_DATA_ADDR = Flash_ReadIntType(WR_ADDR);
 8001fb2:	4851      	ldr	r0, [pc, #324]	; (80020f8 <main+0x6a0>)
 8001fb4:	f7fe fe9f 	bl	8000cf6 <Flash_ReadIntType>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4a4c      	ldr	r2, [pc, #304]	; (80020ec <main+0x694>)
 8001fbc:	6013      	str	r3, [r2, #0]
				  PAGE_ADDR = Flash_ReadIntType(PG_ADDR);
 8001fbe:	484f      	ldr	r0, [pc, #316]	; (80020fc <main+0x6a4>)
 8001fc0:	f7fe fe99 	bl	8000cf6 <Flash_ReadIntType>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a4e      	ldr	r2, [pc, #312]	; (8002100 <main+0x6a8>)
 8001fc8:	6013      	str	r3, [r2, #0]
				  Flash_ReadCharType(Flash_DataToRead, READ_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <main+0x690>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4847      	ldr	r0, [pc, #284]	; (80020f0 <main+0x698>)
 8001fd4:	f7fe feee 	bl	8000db4 <Flash_ReadCharType>
				  Flash_ReadDataLen = strlen(Flash_DataToRead);
 8001fd8:	4845      	ldr	r0, [pc, #276]	; (80020f0 <main+0x698>)
 8001fda:	f7fe f8f9 	bl	80001d0 <strlen>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b48      	ldr	r3, [pc, #288]	; (8002104 <main+0x6ac>)
 8001fe4:	801a      	strh	r2, [r3, #0]
				  if(Flash_ReadDataLen != 0)
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <main+0x6ac>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <main+0x59c>
				  {
					  Flash_extractData(Flash_DataToRead);
 8001fee:	4840      	ldr	r0, [pc, #256]	; (80020f0 <main+0x698>)
 8001ff0:	f001 fb52 	bl	8003698 <Flash_extractData>
				  }
				  ret = Sim_connectHTTP(Flash_Host, Flash_URL, Flash_Data, (char*)HTTP_DataToGet);
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <main+0x678>)
 8001ff6:	4a44      	ldr	r2, [pc, #272]	; (8002108 <main+0x6b0>)
 8001ff8:	4944      	ldr	r1, [pc, #272]	; (800210c <main+0x6b4>)
 8001ffa:	4845      	ldr	r0, [pc, #276]	; (8002110 <main+0x6b8>)
 8001ffc:	f000 fc2c 	bl	8002858 <Sim_connectHTTP>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <main+0x684>)
 8002006:	701a      	strb	r2, [r3, #0]
				  if(ret == RET_OK)
 8002008:	4b34      	ldr	r3, [pc, #208]	; (80020dc <main+0x684>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d12e      	bne.n	800206e <main+0x616>
				  {
					  READ_DATA_ADDR += Flash_ReadDataLen*2+2;
 8002010:	4b3c      	ldr	r3, [pc, #240]	; (8002104 <main+0x6ac>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	461a      	mov	r2, r3
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <main+0x690>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <main+0x690>)
 8002022:	6013      	str	r3, [r2, #0]
					  if(READ_DATA_ADDR == MAX_PAGE_ADDR)
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <main+0x690>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3a      	ldr	r2, [pc, #232]	; (8002114 <main+0x6bc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d102      	bne.n	8002034 <main+0x5dc>
					  {
						  READ_DATA_ADDR = MIN_DATA_ADDR;
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <main+0x690>)
 8002030:	4a39      	ldr	r2, [pc, #228]	; (8002118 <main+0x6c0>)
 8002032:	601a      	str	r2, [r3, #0]
					  }
					  Flash_Unlock();
 8002034:	f7fe fe2b 	bl	8000c8e <Flash_Unlock>
					  Flash_Erase(RD_ADDR);
 8002038:	482e      	ldr	r0, [pc, #184]	; (80020f4 <main+0x69c>)
 800203a:	f7fe fe2e 	bl	8000c9a <Flash_Erase>
					  Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR,FLASH_TYPEPROGRAM_WORD);
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <main+0x690>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2202      	movs	r2, #2
 8002044:	4619      	mov	r1, r3
 8002046:	482b      	ldr	r0, [pc, #172]	; (80020f4 <main+0x69c>)
 8002048:	f7fe fe43 	bl	8000cd2 <Flash_WriteIntType>
					  Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR,FLASH_TYPEPROGRAM_WORD);
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <main+0x694>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2202      	movs	r2, #2
 8002052:	4619      	mov	r1, r3
 8002054:	4828      	ldr	r0, [pc, #160]	; (80020f8 <main+0x6a0>)
 8002056:	f7fe fe3c 	bl	8000cd2 <Flash_WriteIntType>
					  Flash_WriteIntType(PG_ADDR,PAGE_ADDR,FLASH_TYPEPROGRAM_WORD);
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <main+0x6a8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2202      	movs	r2, #2
 8002060:	4619      	mov	r1, r3
 8002062:	4826      	ldr	r0, [pc, #152]	; (80020fc <main+0x6a4>)
 8002064:	f7fe fe35 	bl	8000cd2 <Flash_WriteIntType>
					  Flash_Lock();
 8002068:	f7fe fe0b 	bl	8000c82 <Flash_Lock>
 800206c:	e574      	b.n	8001b58 <main+0x100>
				  }
				  else //gui that bai -> khong cho phep doc bo nho Flash
				  {
					  Flash_isReadData = false;
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <main+0x688>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e570      	b.n	8001b58 <main+0x100>
				  }
			  }
			  else //gui het du lieu Flash -> dua ve Sleepmode
			  {
				  if(Sim_SleepMode == false)
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <main+0x6c4>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	f083 0301 	eor.w	r3, r3, #1
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	f43f ad69 	beq.w	8001b58 <main+0x100>
				  {
					  Sim_enterSLEEPMode();
 8002086:	f000 fddf 	bl	8002c48 <Sim_enterSLEEPMode>
 800208a:	e565      	b.n	8001b58 <main+0x100>
 800208c:	f3af 8000 	nop.w
 8002090:	5c28f5c3 	.word	0x5c28f5c3
 8002094:	4034028f 	.word	0x4034028f
 8002098:	200010c0 	.word	0x200010c0
 800209c:	41a00000 	.word	0x41a00000
 80020a0:	00000000 	.word	0x00000000
 80020a4:	2000103c 	.word	0x2000103c
 80020a8:	200000fc 	.word	0x200000fc
 80020ac:	0800c764 	.word	0x0800c764
 80020b0:	0800c76c 	.word	0x0800c76c
 80020b4:	2000104c 	.word	0x2000104c
 80020b8:	20000ad8 	.word	0x20000ad8
 80020bc:	20001040 	.word	0x20001040
 80020c0:	20000ce8 	.word	0x20000ce8
 80020c4:	20000cd4 	.word	0x20000cd4
 80020c8:	0800c770 	.word	0x0800c770
 80020cc:	20000f74 	.word	0x20000f74
 80020d0:	200002fc 	.word	0x200002fc
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000020 	.word	0x20000020
 80020dc:	200010d9 	.word	0x200010d9
 80020e0:	20000f72 	.word	0x20000f72
 80020e4:	20000d15 	.word	0x20000d15
 80020e8:	200000f4 	.word	0x200000f4
 80020ec:	200000f0 	.word	0x200000f0
 80020f0:	20000de0 	.word	0x20000de0
 80020f4:	0800f800 	.word	0x0800f800
 80020f8:	0800f810 	.word	0x0800f810
 80020fc:	0800f820 	.word	0x0800f820
 8002100:	200000f8 	.word	0x200000f8
 8002104:	20000f70 	.word	0x20000f70
 8002108:	20000ea8 	.word	0x20000ea8
 800210c:	20001284 	.word	0x20001284
 8002110:	200011f4 	.word	0x200011f4
 8002114:	0800eff0 	.word	0x0800eff0
 8002118:	0800b000 	.word	0x0800b000
 800211c:	20000ad9 	.word	0x20000ad9
				  }
			  }
		  }
		  else //khong cho phep doc du lieu Flash -> dua ve Sleepmode
		  {
			  if(Sim_SleepMode == false)
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <main+0x6e0>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	f083 0301 	eor.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f43f ad14 	beq.w	8001b58 <main+0x100>
			  {
				  Sim_enterSLEEPMode();
 8002130:	f000 fd8a 	bl	8002c48 <Sim_enterSLEEPMode>
	  if(Sim_isRISignal == true)
 8002134:	e510      	b.n	8001b58 <main+0x100>
 8002136:	bf00      	nop
 8002138:	20000ad9 	.word	0x20000ad9

0800213c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b09e      	sub	sp, #120	; 0x78
 8002140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002142:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002146:	2228      	movs	r2, #40	; 0x28
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f007 fa7a 	bl	8009644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002150:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002160:	463b      	mov	r3, r7
 8002162:	223c      	movs	r2, #60	; 0x3c
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f007 fa6c 	bl	8009644 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800216c:	f004 f966 	bl	800643c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <SystemClock_Config+0xd4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a26      	ldr	r2, [pc, #152]	; (8002210 <SystemClock_Config+0xd4>)
 8002176:	f023 0318 	bic.w	r3, r3, #24
 800217a:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800217c:	2306      	movs	r3, #6
 800217e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002180:	2301      	movs	r3, #1
 8002182:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002184:	2301      	movs	r3, #1
 8002186:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002188:	2310      	movs	r3, #16
 800218a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800218c:	2302      	movs	r3, #2
 800218e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002190:	2300      	movs	r3, #0
 8002192:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002194:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002198:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 f95c 	bl	800645c <HAL_RCC_OscConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80021aa:	f001 fe4e 	bl	8003e4a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ae:	230f      	movs	r3, #15
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021b2:	2300      	movs	r3, #0
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f005 f84f 	bl	800726c <HAL_RCC_ClockConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80021d4:	f001 fe39 	bl	8003e4a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <SystemClock_Config+0xd8>)
 80021da:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80021e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80021ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f4:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f6:	463b      	mov	r3, r7
 80021f8:	4618      	mov	r0, r3
 80021fa:	f005 fa6d 	bl	80076d8 <HAL_RCCEx_PeriphCLKConfig>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002204:	f001 fe21 	bl	8003e4a <Error_Handler>
  }
}
 8002208:	bf00      	nop
 800220a:	3778      	adds	r7, #120	; 0x78
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	00010186 	.word	0x00010186

08002218 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800221e:	463b      	mov	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
 800222c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002230:	4a2e      	ldr	r2, [pc, #184]	; (80022ec <MX_ADC2_Init+0xd4>)
 8002232:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <MX_ADC2_Init+0xd0>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002240:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002242:	2201      	movs	r2, #1
 8002244:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002248:	2201      	movs	r2, #1
 800224a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800224c:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <MX_ADC2_Init+0xd0>)
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002256:	2200      	movs	r2, #0
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <MX_ADC2_Init+0xd0>)
 800225c:	2201      	movs	r2, #1
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002268:	2202      	movs	r2, #2
 800226a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <MX_ADC2_Init+0xd0>)
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002274:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002276:	2204      	movs	r2, #4
 8002278:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <MX_ADC2_Init+0xd0>)
 800227c:	2200      	movs	r2, #0
 800227e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002282:	2200      	movs	r2, #0
 8002284:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002286:	4818      	ldr	r0, [pc, #96]	; (80022e8 <MX_ADC2_Init+0xd0>)
 8002288:	f002 f97c 	bl	8004584 <HAL_ADC_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8002292:	f001 fdda 	bl	8003e4a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002296:	2302      	movs	r3, #2
 8002298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800229a:	2301      	movs	r3, #1
 800229c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80022a2:	2307      	movs	r3, #7
 80022a4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022ae:	463b      	mov	r3, r7
 80022b0:	4619      	mov	r1, r3
 80022b2:	480d      	ldr	r0, [pc, #52]	; (80022e8 <MX_ADC2_Init+0xd0>)
 80022b4:	f002 fd2e 	bl	8004d14 <HAL_ADC_ConfigChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80022be:	f001 fdc4 	bl	8003e4a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022c2:	2303      	movs	r3, #3
 80022c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80022c6:	2302      	movs	r3, #2
 80022c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022ca:	463b      	mov	r3, r7
 80022cc:	4619      	mov	r1, r3
 80022ce:	4806      	ldr	r0, [pc, #24]	; (80022e8 <MX_ADC2_Init+0xd0>)
 80022d0:	f002 fd20 	bl	8004d14 <HAL_ADC_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80022da:	f001 fdb6 	bl	8003e4a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200011a4 	.word	0x200011a4
 80022ec:	50000100 	.word	0x50000100

080022f0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022f6:	463b      	mov	r3, r7
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
 8002304:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  hadc4.Instance = ADC4;
 8002306:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002308:	4a2e      	ldr	r2, [pc, #184]	; (80023c4 <MX_ADC4_Init+0xd4>)
 800230a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <MX_ADC4_Init+0xd0>)
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8002312:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <MX_ADC4_Init+0xd0>)
 800231a:	2201      	movs	r2, #1
 800231c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800231e:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002320:	2201      	movs	r2, #1
 8002322:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8002324:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <MX_ADC4_Init+0xd0>)
 800232e:	2200      	movs	r2, #0
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002334:	2201      	movs	r2, #1
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <MX_ADC4_Init+0xd0>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 2;
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002340:	2202      	movs	r2, #2
 8002342:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <MX_ADC4_Init+0xd0>)
 800234e:	2204      	movs	r2, #4
 8002350:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002354:	2200      	movs	r2, #0
 8002356:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <MX_ADC4_Init+0xd0>)
 800235a:	2200      	movs	r2, #0
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800235e:	4818      	ldr	r0, [pc, #96]	; (80023c0 <MX_ADC4_Init+0xd0>)
 8002360:	f002 f910 	bl	8004584 <HAL_ADC_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 800236a:	f001 fd6e 	bl	8003e4a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800236e:	2304      	movs	r3, #4
 8002370:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002372:	2301      	movs	r3, #1
 8002374:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800237a:	2307      	movs	r3, #7
 800237c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8002386:	463b      	mov	r3, r7
 8002388:	4619      	mov	r1, r3
 800238a:	480d      	ldr	r0, [pc, #52]	; (80023c0 <MX_ADC4_Init+0xd0>)
 800238c:	f002 fcc2 	bl	8004d14 <HAL_ADC_ConfigChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8002396:	f001 fd58 	bl	8003e4a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800239a:	2305      	movs	r3, #5
 800239c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800239e:	2302      	movs	r3, #2
 80023a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80023a2:	463b      	mov	r3, r7
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <MX_ADC4_Init+0xd0>)
 80023a8:	f002 fcb4 	bl	8004d14 <HAL_ADC_ConfigChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 80023b2:	f001 fd4a 	bl	8003e4a <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000133c 	.word	0x2000133c
 80023c4:	50000500 	.word	0x50000500

080023c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b090      	sub	sp, #64	; 0x40
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023de:	2300      	movs	r3, #0
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80023e2:	463b      	mov	r3, r7
 80023e4:	2228      	movs	r2, #40	; 0x28
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f007 f92b 	bl	8009644 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023ee:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <MX_RTC_Init+0x1d0>)
 80023f0:	4a6a      	ldr	r2, [pc, #424]	; (800259c <MX_RTC_Init+0x1d4>)
 80023f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023f4:	4b68      	ldr	r3, [pc, #416]	; (8002598 <MX_RTC_Init+0x1d0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <MX_RTC_Init+0x1d0>)
 80023fc:	227f      	movs	r2, #127	; 0x7f
 80023fe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002400:	4b65      	ldr	r3, [pc, #404]	; (8002598 <MX_RTC_Init+0x1d0>)
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002406:	4b64      	ldr	r3, [pc, #400]	; (8002598 <MX_RTC_Init+0x1d0>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800240c:	4b62      	ldr	r3, [pc, #392]	; (8002598 <MX_RTC_Init+0x1d0>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002412:	4b61      	ldr	r3, [pc, #388]	; (8002598 <MX_RTC_Init+0x1d0>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002418:	485f      	ldr	r0, [pc, #380]	; (8002598 <MX_RTC_Init+0x1d0>)
 800241a:	f005 fb0d 	bl	8007a38 <HAL_RTC_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002424:	f001 fd11 	bl	8003e4a <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F5)
 8002428:	2101      	movs	r1, #1
 800242a:	485b      	ldr	r0, [pc, #364]	; (8002598 <MX_RTC_Init+0x1d0>)
 800242c:	f005 ffce 	bl	80083cc <HAL_RTCEx_BKUPRead>
 8002430:	4603      	mov	r3, r0
 8002432:	f243 22f5 	movw	r2, #13045	; 0x32f5
 8002436:	4293      	cmp	r3, r2
 8002438:	d071      	beq.n	800251e <MX_RTC_Init+0x156>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 9;
 800243a:	2309      	movs	r3, #9
 800243c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800244c:	2300      	movs	r3, #0
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002458:	2200      	movs	r2, #0
 800245a:	4619      	mov	r1, r3
 800245c:	484e      	ldr	r0, [pc, #312]	; (8002598 <MX_RTC_Init+0x1d0>)
 800245e:	f005 fb7c 	bl	8007b5a <HAL_RTC_SetTime>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002468:	f001 fcef 	bl	8003e4a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800246c:	2301      	movs	r3, #1
 800246e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 10;
 8002478:	230a      	movs	r3, #10
 800247a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 21;
 800247e:	2315      	movs	r3, #21
 8002480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002488:	2200      	movs	r2, #0
 800248a:	4619      	mov	r1, r3
 800248c:	4842      	ldr	r0, [pc, #264]	; (8002598 <MX_RTC_Init+0x1d0>)
 800248e:	f005 fc7f 	bl	8007d90 <HAL_RTC_SetDate>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8002498:	f001 fcd7 	bl	8003e4a <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 9;
 800249c:	2309      	movs	r3, #9
 800249e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 80024a4:	230a      	movs	r3, #10
 80024a6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80024b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024b8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80024c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80024ce:	463b      	mov	r3, r7
 80024d0:	2200      	movs	r2, #0
 80024d2:	4619      	mov	r1, r3
 80024d4:	4830      	ldr	r0, [pc, #192]	; (8002598 <MX_RTC_Init+0x1d0>)
 80024d6:	f005 fd51 	bl	8007f7c <HAL_RTC_SetAlarm_IT>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80024e0:	f001 fcb3 	bl	8003e4a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //Khoi tao cac gia tri ban dau cho cac bien
  userAlarm = sAlarm;
 80024e4:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <MX_RTC_Init+0x1d8>)
 80024e6:	461d      	mov	r5, r3
 80024e8:	463c      	mov	r4, r7
 80024ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024f6:	e885 0003 	stmia.w	r5, {r0, r1}
  currentTime = sTime;
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <MX_RTC_Init+0x1dc>)
 80024fc:	461d      	mov	r5, r3
 80024fe:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	602b      	str	r3, [r5, #0]
  currentDate = sDate;
 800250a:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <MX_RTC_Init+0x1e0>)
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	6013      	str	r3, [r2, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F5);
 8002510:	f243 22f5 	movw	r2, #13045	; 0x32f5
 8002514:	2101      	movs	r1, #1
 8002516:	4820      	ldr	r0, [pc, #128]	; (8002598 <MX_RTC_Init+0x1d0>)
 8002518:	f005 ff3e 	bl	8008398 <HAL_RTCEx_BKUPWrite>
	  userAlarm.Alarm = RTC_ALARM_A;
	  RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
  }
  /* USER CODE END RTC_Init 2 */

}
 800251c:	e037      	b.n	800258e <MX_RTC_Init+0x1c6>
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800251e:	2200      	movs	r2, #0
 8002520:	4920      	ldr	r1, [pc, #128]	; (80025a4 <MX_RTC_Init+0x1dc>)
 8002522:	481d      	ldr	r0, [pc, #116]	; (8002598 <MX_RTC_Init+0x1d0>)
 8002524:	f005 fbd6 	bl	8007cd4 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002528:	2200      	movs	r2, #0
 800252a:	491f      	ldr	r1, [pc, #124]	; (80025a8 <MX_RTC_Init+0x1e0>)
 800252c:	481a      	ldr	r0, [pc, #104]	; (8002598 <MX_RTC_Init+0x1d0>)
 800252e:	f005 fcd6 	bl	8007ede <HAL_RTC_GetDate>
	  userAlarm.AlarmTime.Hours = currentTime.Hours;
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <MX_RTC_Init+0x1dc>)
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002538:	701a      	strb	r2, [r3, #0]
	  userAlarm.AlarmTime.Minutes = currentTime.Minutes;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <MX_RTC_Init+0x1dc>)
 800253c:	785a      	ldrb	r2, [r3, #1]
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002540:	705a      	strb	r2, [r3, #1]
	  userAlarm.AlarmTime.Seconds = 0;
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002544:	2200      	movs	r2, #0
 8002546:	709a      	strb	r2, [r3, #2]
	  userAlarm.AlarmTime.SubSeconds = 0;
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <MX_RTC_Init+0x1d8>)
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
	  userAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
	  userAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
	  userAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <MX_RTC_Init+0x1d8>)
 800255c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002560:	615a      	str	r2, [r3, #20]
	  userAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
	  userAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <MX_RTC_Init+0x1d8>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
	  userAlarm.AlarmDateWeekDay = 1;
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2020 	strb.w	r2, [r3, #32]
	  userAlarm.Alarm = RTC_ALARM_A;
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
	  RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <MX_RTC_Init+0x1d8>)
 8002584:	7851      	ldrb	r1, [r2, #1]
 8002586:	2200      	movs	r2, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fd67 	bl	800305c <RTC_initAlarm>
}
 800258e:	bf00      	nop
 8002590:	3740      	adds	r7, #64	; 0x40
 8002592:	46bd      	mov	sp, r7
 8002594:	bdb0      	pop	{r4, r5, r7, pc}
 8002596:	bf00      	nop
 8002598:	20001264 	.word	0x20001264
 800259c:	40002800 	.word	0x40002800
 80025a0:	20000cec 	.word	0x20000cec
 80025a4:	20000cd4 	.word	0x20000cd4
 80025a8:	20000ce8 	.word	0x20000ce8

080025ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <MX_USART2_UART_Init+0x5c>)
 80025b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_USART2_UART_Init+0x58>)
 80025f0:	f005 ff0e 	bl	8008410 <HAL_UART_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025fa:	f001 fc26 	bl	8003e4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200012b8 	.word	0x200012b8
 8002608:	40004400 	.word	0x40004400

0800260c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_USART3_UART_Init+0x58>)
 8002612:	4a15      	ldr	r2, [pc, #84]	; (8002668 <MX_USART3_UART_Init+0x5c>)
 8002614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <MX_USART3_UART_Init+0x58>)
 8002618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800261c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <MX_USART3_UART_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_USART3_UART_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_USART3_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_USART3_UART_Init+0x58>)
 8002632:	220c      	movs	r2, #12
 8002634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <MX_USART3_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_USART3_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <MX_USART3_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_USART3_UART_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_USART3_UART_Init+0x58>)
 8002650:	f005 fede 	bl	8008410 <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800265a:	f001 fbf6 	bl	8003e4a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20001120 	.word	0x20001120
 8002668:	40004800 	.word	0x40004800

0800266c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <MX_DMA_Init+0x48>)
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <MX_DMA_Init+0x48>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6153      	str	r3, [r2, #20]
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <MX_DMA_Init+0x48>)
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	2038      	movs	r0, #56	; 0x38
 8002690:	f003 f8d9 	bl	8005846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002694:	2038      	movs	r0, #56	; 0x38
 8002696:	f003 f8f2 	bl	800587e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2039      	movs	r0, #57	; 0x39
 80026a0:	f003 f8d1 	bl	8005846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80026a4:	2039      	movs	r0, #57	; 0x39
 80026a6:	f003 f8ea 	bl	800587e <HAL_NVIC_EnableIRQ>

}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000

080026b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <MX_GPIO_Init+0x188>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	4a5b      	ldr	r2, [pc, #364]	; (8002840 <MX_GPIO_Init+0x188>)
 80026d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026d8:	6153      	str	r3, [r2, #20]
 80026da:	4b59      	ldr	r3, [pc, #356]	; (8002840 <MX_GPIO_Init+0x188>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026e6:	4b56      	ldr	r3, [pc, #344]	; (8002840 <MX_GPIO_Init+0x188>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4a55      	ldr	r2, [pc, #340]	; (8002840 <MX_GPIO_Init+0x188>)
 80026ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026f0:	6153      	str	r3, [r2, #20]
 80026f2:	4b53      	ldr	r3, [pc, #332]	; (8002840 <MX_GPIO_Init+0x188>)
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	4b50      	ldr	r3, [pc, #320]	; (8002840 <MX_GPIO_Init+0x188>)
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4a4f      	ldr	r2, [pc, #316]	; (8002840 <MX_GPIO_Init+0x188>)
 8002704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002708:	6153      	str	r3, [r2, #20]
 800270a:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <MX_GPIO_Init+0x188>)
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <MX_GPIO_Init+0x188>)
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	4a49      	ldr	r2, [pc, #292]	; (8002840 <MX_GPIO_Init+0x188>)
 800271c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002720:	6153      	str	r3, [r2, #20]
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <MX_GPIO_Init+0x188>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <MX_GPIO_Init+0x188>)
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	4a43      	ldr	r2, [pc, #268]	; (8002840 <MX_GPIO_Init+0x188>)
 8002734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002738:	6153      	str	r3, [r2, #20]
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <MX_GPIO_Init+0x188>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_RESET_Pin|SIM_PWR_Pin, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	210c      	movs	r1, #12
 800274a:	483e      	ldr	r0, [pc, #248]	; (8002844 <MX_GPIO_Init+0x18c>)
 800274c:	f003 fe46 	bl	80063dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_DTR_Pin|CTR_PWR_SS_Pin, GPIO_PIN_RESET);
 8002750:	2200      	movs	r2, #0
 8002752:	f240 1101 	movw	r1, #257	; 0x101
 8002756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275a:	f003 fe3f 	bl	80063dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 800275e:	2200      	movs	r2, #0
 8002760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002764:	4838      	ldr	r0, [pc, #224]	; (8002848 <MX_GPIO_Init+0x190>)
 8002766:	f003 fe39 	bl	80063dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SIM_RESET_Pin SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_RESET_Pin|SIM_PWR_Pin;
 800276a:	230c      	movs	r3, #12
 800276c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4830      	ldr	r0, [pc, #192]	; (8002844 <MX_GPIO_Init+0x18c>)
 8002782:	f003 fc99 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_DTR_Pin CTR_PWR_SS_Pin */
  GPIO_InitStruct.Pin = SIM_DTR_Pin|CTR_PWR_SS_Pin;
 8002786:	f240 1301 	movw	r3, #257	; 0x101
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a2:	f003 fc89 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_RI_Pin */
  GPIO_InitStruct.Pin = SIM_RI_Pin;
 80027a6:	2302      	movs	r3, #2
 80027a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027aa:	4b28      	ldr	r3, [pc, #160]	; (800284c <MX_GPIO_Init+0x194>)
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_RI_GPIO_Port, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027bc:	f003 fc7c 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 80027c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	481b      	ldr	r0, [pc, #108]	; (8002848 <MX_GPIO_Init+0x190>)
 80027da:	f003 fc6d 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_1_Pin IN_2_Pin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin;
 80027de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <MX_GPIO_Init+0x198>)
 80027e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	4814      	ldr	r0, [pc, #80]	; (8002844 <MX_GPIO_Init+0x18c>)
 80027f4:	f003 fc60 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_3_Pin */
  GPIO_InitStruct.Pin = IN_3_Pin;
 80027f8:	2304      	movs	r3, #4
 80027fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <MX_GPIO_Init+0x198>)
 80027fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_3_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	4812      	ldr	r0, [pc, #72]	; (8002854 <MX_GPIO_Init+0x19c>)
 800280c:	f003 fc54 	bl	80060b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_4_Pin */
  GPIO_InitStruct.Pin = IN_4_Pin;
 8002810:	2308      	movs	r3, #8
 8002812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_GPIO_Init+0x198>)
 8002816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_4_GPIO_Port, &GPIO_InitStruct);
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4619      	mov	r1, r3
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <MX_GPIO_Init+0x190>)
 8002824:	f003 fc48 	bl	80060b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	2007      	movs	r0, #7
 800282e:	f003 f80a 	bl	8005846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002832:	2007      	movs	r0, #7
 8002834:	f003 f823 	bl	800587e <HAL_NVIC_EnableIRQ>

}
 8002838:	bf00      	nop
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	48000800 	.word	0x48000800
 8002848:	48000400 	.word	0x48000400
 800284c:	10210000 	.word	0x10210000
 8002850:	10110000 	.word	0x10110000
 8002854:	48000c00 	.word	0x48000c00

08002858 <Sim_connectHTTP>:

/* USER CODE BEGIN 4 */
STATUS Sim_connectHTTP(char* host, char* url, char* sentdata, char* recvdata)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
	Sim_exitSLEEPMode();
 8002866:	f000 fa2d 	bl	8002cc4 <Sim_exitSLEEPMode>
	deleteBuffer(HTTPServer_URL, strlen(HTTPServer_URL));
 800286a:	4858      	ldr	r0, [pc, #352]	; (80029cc <Sim_connectHTTP+0x174>)
 800286c:	f7fd fcb0 	bl	80001d0 <strlen>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	4855      	ldr	r0, [pc, #340]	; (80029cc <Sim_connectHTTP+0x174>)
 8002876:	f7fe fecf 	bl	8001618 <deleteBuffer>
	sprintf(HTTPServer_URL,"http://%s/%s?%s",host,url,sentdata);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4953      	ldr	r1, [pc, #332]	; (80029d0 <Sim_connectHTTP+0x178>)
 8002884:	4851      	ldr	r0, [pc, #324]	; (80029cc <Sim_connectHTTP+0x174>)
 8002886:	f007 fb4f 	bl	8009f28 <siprintf>
	STATUS m_ret = RET_FAIL;
 800288a:	2301      	movs	r3, #1
 800288c:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	77bb      	strb	r3, [r7, #30]
 8002892:	e090      	b.n	80029b6 <Sim_connectHTTP+0x15e>
	{
		if(HTTP_sendGETRequest(HTTPServer_URL) == RET_OK)
 8002894:	484d      	ldr	r0, [pc, #308]	; (80029cc <Sim_connectHTTP+0x174>)
 8002896:	f7fe fb39 	bl	8000f0c <HTTP_sendGETRequest>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d17e      	bne.n	800299e <Sim_connectHTTP+0x146>
		{
			__NOP();
 80028a0:	bf00      	nop
			if(HTTP_readGETResponse(recvdata) == RET_OK)
 80028a2:	6838      	ldr	r0, [r7, #0]
 80028a4:	f7fe fb9e 	bl	8000fe4 <HTTP_readGETResponse>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d177      	bne.n	800299e <Sim_connectHTTP+0x146>
			{
				__NOP();
 80028ae:	bf00      	nop
				if(strstr(recvdata,"200 OK") != NULL)
 80028b0:	4948      	ldr	r1, [pc, #288]	; (80029d4 <Sim_connectHTTP+0x17c>)
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	f007 fb60 	bl	8009f78 <strstr>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d06f      	beq.n	800299e <Sim_connectHTTP+0x146>
				{
					Sim_extractTimeStamp(recvdata);
 80028be:	6838      	ldr	r0, [r7, #0]
 80028c0:	f000 f8a2 	bl	8002a08 <Sim_extractTimeStamp>
					if(strstr(recvdata,"||CC") != NULL)
 80028c4:	4944      	ldr	r1, [pc, #272]	; (80029d8 <Sim_connectHTTP+0x180>)
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f007 fb56 	bl	8009f78 <strstr>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <Sim_connectHTTP+0x86>
					{
						Sim_getHostnUrl(recvdata);
 80028d2:	6838      	ldr	r0, [r7, #0]
 80028d4:	f000 f944 	bl	8002b60 <Sim_getHostnUrl>
						m_ret = RET_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e05f      	b.n	800299e <Sim_connectHTTP+0x146>
					}
					else if(strstr(recvdata,"||00") != NULL)
 80028de:	493f      	ldr	r1, [pc, #252]	; (80029dc <Sim_connectHTTP+0x184>)
 80028e0:	6838      	ldr	r0, [r7, #0]
 80028e2:	f007 fb49 	bl	8009f78 <strstr>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <Sim_connectHTTP+0xa0>
					{
						configStatus = 1;
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <Sim_connectHTTP+0x188>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
						m_ret = RET_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	77fb      	strb	r3, [r7, #31]
 80028f6:	e052      	b.n	800299e <Sim_connectHTTP+0x146>
					}
					else if(strstr(recvdata,"||11") != NULL)
 80028f8:	493a      	ldr	r1, [pc, #232]	; (80029e4 <Sim_connectHTTP+0x18c>)
 80028fa:	6838      	ldr	r0, [r7, #0]
 80028fc:	f007 fb3c 	bl	8009f78 <strstr>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d04b      	beq.n	800299e <Sim_connectHTTP+0x146>
					{
						char* tok = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
						tok = strtok(recvdata,"|");
 800290a:	4937      	ldr	r1, [pc, #220]	; (80029e8 <Sim_connectHTTP+0x190>)
 800290c:	6838      	ldr	r0, [r7, #0]
 800290e:	f007 fb4b 	bl	8009fa8 <strtok>
 8002912:	61b8      	str	r0, [r7, #24]
						tok = strtok(NULL,"<");
 8002914:	4935      	ldr	r1, [pc, #212]	; (80029ec <Sim_connectHTTP+0x194>)
 8002916:	2000      	movs	r0, #0
 8002918:	f007 fb46 	bl	8009fa8 <strtok>
 800291c:	61b8      	str	r0, [r7, #24]
						int8_t rtc_alarm = atoi(tok);
 800291e:	69b8      	ldr	r0, [r7, #24]
 8002920:	f006 fe62 	bl	80095e8 <atoi>
 8002924:	4603      	mov	r3, r0
 8002926:	75fb      	strb	r3, [r7, #23]
						if((rtc_alarm >= 0) && (rtc_alarm <= 60))
 8002928:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db34      	blt.n	800299a <Sim_connectHTTP+0x142>
 8002930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002934:	2b3c      	cmp	r3, #60	; 0x3c
 8002936:	dc30      	bgt.n	800299a <Sim_connectHTTP+0x142>
						{
							if((rtc_alarm % 5) == 0)
 8002938:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <Sim_connectHTTP+0x198>)
 800293e:	fb83 1302 	smull	r1, r3, r3, r2
 8002942:	1059      	asrs	r1, r3, #1
 8002944:	17d3      	asrs	r3, r2, #31
 8002946:	1ac9      	subs	r1, r1, r3
 8002948:	460b      	mov	r3, r1
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	b25b      	sxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d121      	bne.n	800299a <Sim_connectHTTP+0x142>
							{
								if(rtc_alarm != RTC_ALARM)
 8002956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800295a:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <Sim_connectHTTP+0x19c>)
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	4293      	cmp	r3, r2
 8002960:	d01b      	beq.n	800299a <Sim_connectHTTP+0x142>
								{
									RTC_ALARM = rtc_alarm;
 8002962:	7dfa      	ldrb	r2, [r7, #23]
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <Sim_connectHTTP+0x19c>)
 8002966:	701a      	strb	r2, [r3, #0]
									Flash_WriteIntType(MODE_RTC_ADDR, RTC_ALARM, FLASH_TYPEPROGRAM_HALFWORD);
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <Sim_connectHTTP+0x19c>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2201      	movs	r2, #1
 800296e:	4619      	mov	r1, r3
 8002970:	4821      	ldr	r0, [pc, #132]	; (80029f8 <Sim_connectHTTP+0x1a0>)
 8002972:	f7fe f9ae 	bl	8000cd2 <Flash_WriteIntType>
									HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002976:	2200      	movs	r2, #0
 8002978:	4920      	ldr	r1, [pc, #128]	; (80029fc <Sim_connectHTTP+0x1a4>)
 800297a:	4821      	ldr	r0, [pc, #132]	; (8002a00 <Sim_connectHTTP+0x1a8>)
 800297c:	f005 f9aa 	bl	8007cd4 <HAL_RTC_GetTime>
									HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002980:	2200      	movs	r2, #0
 8002982:	4920      	ldr	r1, [pc, #128]	; (8002a04 <Sim_connectHTTP+0x1ac>)
 8002984:	481e      	ldr	r0, [pc, #120]	; (8002a00 <Sim_connectHTTP+0x1a8>)
 8002986:	f005 faaa 	bl	8007ede <HAL_RTC_GetDate>
									RTC_initAlarm(currentTime.Hours, currentTime.Minutes, 0);
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <Sim_connectHTTP+0x1a4>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <Sim_connectHTTP+0x1a4>)
 8002990:	7851      	ldrb	r1, [r2, #1]
 8002992:	2200      	movs	r2, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fb61 	bl	800305c <RTC_initAlarm>
								}
							}
						}
						m_ret = RET_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
		}
		Sim_disconnectInternet();
 800299e:	f7fe ff69 	bl	8001874 <Sim_disconnectInternet>
		if(m_ret == RET_OK)
 80029a2:	7ffb      	ldrb	r3, [r7, #31]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <Sim_connectHTTP+0x168>
		{
			break;
		}
		else
		{
			HAL_Delay(2000);
 80029a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029ac:	f001 fda8 	bl	8004500 <HAL_Delay>
	for(uint8_t i = 0; i < 3; i++)
 80029b0:	7fbb      	ldrb	r3, [r7, #30]
 80029b2:	3301      	adds	r3, #1
 80029b4:	77bb      	strb	r3, [r7, #30]
 80029b6:	7fbb      	ldrb	r3, [r7, #30]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	f67f af6b 	bls.w	8002894 <Sim_connectHTTP+0x3c>
 80029be:	e000      	b.n	80029c2 <Sim_connectHTTP+0x16a>
			break;
 80029c0:	bf00      	nop
		}
	}
	return m_ret;
 80029c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000adc 	.word	0x20000adc
 80029d0:	0800c7d0 	.word	0x0800c7d0
 80029d4:	0800c7e0 	.word	0x0800c7e0
 80029d8:	0800c7e8 	.word	0x0800c7e8
 80029dc:	0800c7f0 	.word	0x0800c7f0
 80029e0:	20000cd0 	.word	0x20000cd0
 80029e4:	0800c7f8 	.word	0x0800c7f8
 80029e8:	0800c800 	.word	0x0800c800
 80029ec:	0800c804 	.word	0x0800c804
 80029f0:	66666667 	.word	0x66666667
 80029f4:	200000be 	.word	0x200000be
 80029f8:	08010400 	.word	0x08010400
 80029fc:	20000cd4 	.word	0x20000cd4
 8002a00:	20001264 	.word	0x20001264
 8002a04:	20000ce8 	.word	0x20000ce8

08002a08 <Sim_extractTimeStamp>:

void Sim_extractTimeStamp(char* data)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
	char* ptr1 = strstr(data,"Date:");
 8002a14:	494c      	ldr	r1, [pc, #304]	; (8002b48 <Sim_extractTimeStamp+0x140>)
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f007 faae 	bl	8009f78 <strstr>
 8002a1c:	61b8      	str	r0, [r7, #24]
	char* ptr2 = strstr(data," GMT");
 8002a1e:	494b      	ldr	r1, [pc, #300]	; (8002b4c <Sim_extractTimeStamp+0x144>)
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f007 faa9 	bl	8009f78 <strstr>
 8002a26:	6138      	str	r0, [r7, #16]
	if((ptr1 != NULL) & (ptr2 != NULL))
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf14      	ite	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	2300      	moveq	r3, #0
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4013      	ands	r3, r2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d07b      	beq.n	8002b40 <Sim_extractTimeStamp+0x138>
	{
		while(ptr1 != ptr2)
 8002a48:	e009      	b.n	8002a5e <Sim_extractTimeStamp+0x56>
		{
			TimeStamp.timezone[i++] = *ptr1;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	61fa      	str	r2, [r7, #28]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	7811      	ldrb	r1, [r2, #0]
 8002a54:	4a3e      	ldr	r2, [pc, #248]	; (8002b50 <Sim_extractTimeStamp+0x148>)
 8002a56:	54d1      	strb	r1, [r2, r3]
			ptr1++;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
		while(ptr1 != ptr2)
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d1f1      	bne.n	8002a4a <Sim_extractTimeStamp+0x42>
		}
		char* tok = strtok(TimeStamp.timezone," ");
 8002a66:	493b      	ldr	r1, [pc, #236]	; (8002b54 <Sim_extractTimeStamp+0x14c>)
 8002a68:	4839      	ldr	r0, [pc, #228]	; (8002b50 <Sim_extractTimeStamp+0x148>)
 8002a6a:	f007 fa9d 	bl	8009fa8 <strtok>
 8002a6e:	60f8      	str	r0, [r7, #12]
		tok = strtok(NULL," ");
 8002a70:	4938      	ldr	r1, [pc, #224]	; (8002b54 <Sim_extractTimeStamp+0x14c>)
 8002a72:	2000      	movs	r0, #0
 8002a74:	f007 fa98 	bl	8009fa8 <strtok>
 8002a78:	60f8      	str	r0, [r7, #12]
		tok = strtok(NULL," ");
 8002a7a:	4936      	ldr	r1, [pc, #216]	; (8002b54 <Sim_extractTimeStamp+0x14c>)
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f007 fa93 	bl	8009fa8 <strtok>
 8002a82:	60f8      	str	r0, [r7, #12]
		TimeStamp.date = atoi(tok);
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f006 fdaf 	bl	80095e8 <atoi>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <Sim_extractTimeStamp+0x148>)
 8002a90:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		tok = strtok(NULL," ");
 8002a94:	492f      	ldr	r1, [pc, #188]	; (8002b54 <Sim_extractTimeStamp+0x14c>)
 8002a96:	2000      	movs	r0, #0
 8002a98:	f007 fa86 	bl	8009fa8 <strtok>
 8002a9c:	60f8      	str	r0, [r7, #12]
		for(int i = 0; i < 12; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e015      	b.n	8002ad0 <Sim_extractTimeStamp+0xc8>
		{
			if(strstr(tok,Months[i]) != NULL)
 8002aa4:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <Sim_extractTimeStamp+0x150>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aac:	4619      	mov	r1, r3
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f007 fa62 	bl	8009f78 <strstr>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <Sim_extractTimeStamp+0xc2>
			{
				TimeStamp.mon = i + 1;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <Sim_extractTimeStamp+0x148>)
 8002ac4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				break;
 8002ac8:	e005      	b.n	8002ad6 <Sim_extractTimeStamp+0xce>
		for(int i = 0; i < 12; i++)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b0b      	cmp	r3, #11
 8002ad4:	dde6      	ble.n	8002aa4 <Sim_extractTimeStamp+0x9c>
			}
		}
		tok = strtok(NULL," ");
 8002ad6:	491f      	ldr	r1, [pc, #124]	; (8002b54 <Sim_extractTimeStamp+0x14c>)
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f007 fa65 	bl	8009fa8 <strtok>
 8002ade:	60f8      	str	r0, [r7, #12]
		TimeStamp.year = atoi(tok);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f006 fd81 	bl	80095e8 <atoi>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <Sim_extractTimeStamp+0x148>)
 8002aec:	869a      	strh	r2, [r3, #52]	; 0x34
		tok = strtok(NULL,":");
 8002aee:	491b      	ldr	r1, [pc, #108]	; (8002b5c <Sim_extractTimeStamp+0x154>)
 8002af0:	2000      	movs	r0, #0
 8002af2:	f007 fa59 	bl	8009fa8 <strtok>
 8002af6:	60f8      	str	r0, [r7, #12]
		TimeStamp.hour = atoi(tok);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f006 fd75 	bl	80095e8 <atoi>
 8002afe:	4603      	mov	r3, r0
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <Sim_extractTimeStamp+0x148>)
 8002b04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		tok = strtok(NULL,":");
 8002b08:	4914      	ldr	r1, [pc, #80]	; (8002b5c <Sim_extractTimeStamp+0x154>)
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f007 fa4c 	bl	8009fa8 <strtok>
 8002b10:	60f8      	str	r0, [r7, #12]
		TimeStamp.min = atoi(tok);
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f006 fd68 	bl	80095e8 <atoi>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <Sim_extractTimeStamp+0x148>)
 8002b1e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		tok = strtok(NULL,":");
 8002b22:	490e      	ldr	r1, [pc, #56]	; (8002b5c <Sim_extractTimeStamp+0x154>)
 8002b24:	2000      	movs	r0, #0
 8002b26:	f007 fa3f 	bl	8009fa8 <strtok>
 8002b2a:	60f8      	str	r0, [r7, #12]
		TimeStamp.sec = atoi(tok);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f006 fd5b 	bl	80095e8 <atoi>
 8002b32:	4603      	mov	r3, r0
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <Sim_extractTimeStamp+0x148>)
 8002b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		//update RTC Time
		RTC_updateUserTime();
 8002b3c:	f000 faf6 	bl	800312c <RTC_updateUserTime>
	}
}
 8002b40:	bf00      	nop
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	0800c808 	.word	0x0800c808
 8002b4c:	0800c810 	.word	0x0800c810
 8002b50:	20001228 	.word	0x20001228
 8002b54:	0800c818 	.word	0x0800c818
 8002b58:	200000c0 	.word	0x200000c0
 8002b5c:	0800c81c 	.word	0x0800c81c

08002b60 <Sim_getHostnUrl>:

void Sim_getHostnUrl(char* data)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	memset(Host1,0,strlen(Host1));
 8002b68:	482f      	ldr	r0, [pc, #188]	; (8002c28 <Sim_getHostnUrl+0xc8>)
 8002b6a:	f7fd fb31 	bl	80001d0 <strlen>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	2100      	movs	r1, #0
 8002b74:	482c      	ldr	r0, [pc, #176]	; (8002c28 <Sim_getHostnUrl+0xc8>)
 8002b76:	f006 fd65 	bl	8009644 <memset>
	memset(Host2,0,strlen(Host2));
 8002b7a:	482c      	ldr	r0, [pc, #176]	; (8002c2c <Sim_getHostnUrl+0xcc>)
 8002b7c:	f7fd fb28 	bl	80001d0 <strlen>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	2100      	movs	r1, #0
 8002b86:	4829      	ldr	r0, [pc, #164]	; (8002c2c <Sim_getHostnUrl+0xcc>)
 8002b88:	f006 fd5c 	bl	8009644 <memset>
	memset(URL1,0,strlen(URL1));
 8002b8c:	4828      	ldr	r0, [pc, #160]	; (8002c30 <Sim_getHostnUrl+0xd0>)
 8002b8e:	f7fd fb1f 	bl	80001d0 <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	2100      	movs	r1, #0
 8002b98:	4825      	ldr	r0, [pc, #148]	; (8002c30 <Sim_getHostnUrl+0xd0>)
 8002b9a:	f006 fd53 	bl	8009644 <memset>
	memset(URL2,0,strlen(URL2));
 8002b9e:	4825      	ldr	r0, [pc, #148]	; (8002c34 <Sim_getHostnUrl+0xd4>)
 8002ba0:	f7fd fb16 	bl	80001d0 <strlen>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4822      	ldr	r0, [pc, #136]	; (8002c34 <Sim_getHostnUrl+0xd4>)
 8002bac:	f006 fd4a 	bl	8009644 <memset>
	char* token;
	token = strtok(data,"|");
 8002bb0:	4921      	ldr	r1, [pc, #132]	; (8002c38 <Sim_getHostnUrl+0xd8>)
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f007 f9f8 	bl	8009fa8 <strtok>
 8002bb8:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,":");
 8002bba:	4920      	ldr	r1, [pc, #128]	; (8002c3c <Sim_getHostnUrl+0xdc>)
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f007 f9f3 	bl	8009fa8 <strtok>
 8002bc2:	60f8      	str	r0, [r7, #12]
	strcpy(Host1,token);
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	4818      	ldr	r0, [pc, #96]	; (8002c28 <Sim_getHostnUrl+0xc8>)
 8002bc8:	f007 f9ce 	bl	8009f68 <strcpy>
	token = strtok(NULL,"/");
 8002bcc:	491c      	ldr	r1, [pc, #112]	; (8002c40 <Sim_getHostnUrl+0xe0>)
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f007 f9ea 	bl	8009fa8 <strtok>
 8002bd4:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,"<");
 8002bd6:	491b      	ldr	r1, [pc, #108]	; (8002c44 <Sim_getHostnUrl+0xe4>)
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f007 f9e5 	bl	8009fa8 <strtok>
 8002bde:	60f8      	str	r0, [r7, #12]
	strcpy(URL1,token);
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4813      	ldr	r0, [pc, #76]	; (8002c30 <Sim_getHostnUrl+0xd0>)
 8002be4:	f007 f9c0 	bl	8009f68 <strcpy>
	token = strtok(NULL,"|");
 8002be8:	4913      	ldr	r1, [pc, #76]	; (8002c38 <Sim_getHostnUrl+0xd8>)
 8002bea:	2000      	movs	r0, #0
 8002bec:	f007 f9dc 	bl	8009fa8 <strtok>
 8002bf0:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,":");
 8002bf2:	4912      	ldr	r1, [pc, #72]	; (8002c3c <Sim_getHostnUrl+0xdc>)
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f007 f9d7 	bl	8009fa8 <strtok>
 8002bfa:	60f8      	str	r0, [r7, #12]
	strcpy(Host2,token);
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	480b      	ldr	r0, [pc, #44]	; (8002c2c <Sim_getHostnUrl+0xcc>)
 8002c00:	f007 f9b2 	bl	8009f68 <strcpy>
	token = strtok(NULL,"/");
 8002c04:	490e      	ldr	r1, [pc, #56]	; (8002c40 <Sim_getHostnUrl+0xe0>)
 8002c06:	2000      	movs	r0, #0
 8002c08:	f007 f9ce 	bl	8009fa8 <strtok>
 8002c0c:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,"<");
 8002c0e:	490d      	ldr	r1, [pc, #52]	; (8002c44 <Sim_getHostnUrl+0xe4>)
 8002c10:	2000      	movs	r0, #0
 8002c12:	f007 f9c9 	bl	8009fa8 <strtok>
 8002c16:	60f8      	str	r0, [r7, #12]
	strcpy(URL2,token);
 8002c18:	68f9      	ldr	r1, [r7, #12]
 8002c1a:	4806      	ldr	r0, [pc, #24]	; (8002c34 <Sim_getHostnUrl+0xd4>)
 8002c1c:	f007 f9a4 	bl	8009f68 <strcpy>
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000020 	.word	0x20000020
 8002c2c:	20000060 	.word	0x20000060
 8002c30:	20000000 	.word	0x20000000
 8002c34:	20000040 	.word	0x20000040
 8002c38:	0800c800 	.word	0x0800c800
 8002c3c:	0800c81c 	.word	0x0800c81c
 8002c40:	0800c820 	.word	0x0800c820
 8002c44:	0800c804 	.word	0x0800c804

08002c48 <Sim_enterSLEEPMode>:

void Sim_enterSLEEPMode(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
	STATUS m_ret;
	for(uint8_t i = 0; i < 2; i++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	71fb      	strb	r3, [r7, #7]
 8002c52:	e01d      	b.n	8002c90 <Sim_enterSLEEPMode+0x48>
	{
		Sim_send("AT+CSCLK=1\r", strlen("AT+CSCLK=1\r"));
 8002c54:	210b      	movs	r1, #11
 8002c56:	4818      	ldr	r0, [pc, #96]	; (8002cb8 <Sim_enterSLEEPMode+0x70>)
 8002c58:	f7fe fd20 	bl	800169c <Sim_send>
		m_ret = Sim_checkResponseWith("OK", 2, 5000);
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	2102      	movs	r1, #2
 8002c62:	4816      	ldr	r0, [pc, #88]	; (8002cbc <Sim_enterSLEEPMode+0x74>)
 8002c64:	f7fe fd7e 	bl	8001764 <Sim_checkResponseWith>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71bb      	strb	r3, [r7, #6]
		__NOP();
 8002c6c:	bf00      	nop
		if(m_ret == RET_OK)
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <Sim_enterSLEEPMode+0x42>
		{
			//DTR high
			HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 8002c74:	2201      	movs	r2, #1
 8002c76:	2101      	movs	r1, #1
 8002c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7c:	f003 fbae 	bl	80063dc <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8002c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c84:	f001 fc3c 	bl	8004500 <HAL_Delay>
			break;
 8002c88:	e005      	b.n	8002c96 <Sim_enterSLEEPMode+0x4e>
	for(uint8_t i = 0; i < 2; i++)
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	71fb      	strb	r3, [r7, #7]
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d9de      	bls.n	8002c54 <Sim_enterSLEEPMode+0xc>
		}
	}
	if(Sim_checkOK() == RET_FAIL)
 8002c96:	f7fe fd8f 	bl	80017b8 <Sim_checkOK>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d103      	bne.n	8002ca8 <Sim_enterSLEEPMode+0x60>
	{
		Sim_SleepMode = true;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <Sim_enterSLEEPMode+0x78>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Sim_SleepMode = false;
	}
}
 8002ca6:	e002      	b.n	8002cae <Sim_enterSLEEPMode+0x66>
		Sim_SleepMode = false;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <Sim_enterSLEEPMode+0x78>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	0800c824 	.word	0x0800c824
 8002cbc:	0800c76c 	.word	0x0800c76c
 8002cc0:	20000ad9 	.word	0x20000ad9

08002cc4 <Sim_exitSLEEPMode>:

void Sim_exitSLEEPMode(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	Sim_SleepMode = true; //Sim van con o che do sleep mode
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <Sim_exitSLEEPMode+0x34>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
	//DTR low
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd6:	f003 fb81 	bl	80063dc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cde:	f001 fc0f 	bl	8004500 <HAL_Delay>
	if(Sim_checkOK() == RET_OK)
 8002ce2:	f7fe fd69 	bl	80017b8 <Sim_checkOK>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <Sim_exitSLEEPMode+0x2e>
	{
		Sim_SleepMode = false;
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <Sim_exitSLEEPMode+0x34>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000ad9 	.word	0x20000ad9

08002cfc <Sim_resetSIM>:

void Sim_resetSIM(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	//DTR high
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 8002d00:	2201      	movs	r2, #1
 8002d02:	2101      	movs	r1, #1
 8002d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d08:	f003 fb68 	bl	80063dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d0c:	2064      	movs	r0, #100	; 0x64
 8002d0e:	f001 fbf7 	bl	8004500 <HAL_Delay>
	//DTR low
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2101      	movs	r1, #1
 8002d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1a:	f003 fb5f 	bl	80063dc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d22:	f001 fbed 	bl	8004500 <HAL_Delay>
	if(Sim_checkOK() == RET_OK) //SIM response
 8002d26:	f7fe fd47 	bl	80017b8 <Sim_checkOK>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d134      	bne.n	8002d9a <Sim_resetSIM+0x9e>
	{
		/*turn off*/
		//pull down PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002d30:	2201      	movs	r2, #1
 8002d32:	2108      	movs	r1, #8
 8002d34:	483f      	ldr	r0, [pc, #252]	; (8002e34 <Sim_resetSIM+0x138>)
 8002d36:	f003 fb51 	bl	80063dc <HAL_GPIO_WritePin>
		//wait at least 2.5s
		HAL_Delay(3000);
 8002d3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d3e:	f001 fbdf 	bl	8004500 <HAL_Delay>
		//release PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2108      	movs	r1, #8
 8002d46:	483b      	ldr	r0, [pc, #236]	; (8002e34 <Sim_resetSIM+0x138>)
 8002d48:	f003 fb48 	bl	80063dc <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8002d4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d50:	f001 fbd6 	bl	8004500 <HAL_Delay>
		HAL_Delay(5000);
 8002d54:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d58:	f001 fbd2 	bl	8004500 <HAL_Delay>
		/* turn on power*/
		//pull down PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	2108      	movs	r1, #8
 8002d60:	4834      	ldr	r0, [pc, #208]	; (8002e34 <Sim_resetSIM+0x138>)
 8002d62:	f003 fb3b 	bl	80063dc <HAL_GPIO_WritePin>
		//wait at least 0.5s
		HAL_Delay(3000);
 8002d66:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d6a:	f001 fbc9 	bl	8004500 <HAL_Delay>
		//release PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2108      	movs	r1, #8
 8002d72:	4830      	ldr	r0, [pc, #192]	; (8002e34 <Sim_resetSIM+0x138>)
 8002d74:	f003 fb32 	bl	80063dc <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8002d78:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d7c:	f001 fbc0 	bl	8004500 <HAL_Delay>
		HAL_Delay(5000);
 8002d80:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d84:	f001 fbbc 	bl	8004500 <HAL_Delay>
		HAL_Delay(5000);
 8002d88:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d8c:	f001 fbb8 	bl	8004500 <HAL_Delay>
		HAL_Delay(5000);
 8002d90:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d94:	f001 fbb4 	bl	8004500 <HAL_Delay>
			HAL_Delay(5000);
			HAL_Delay(5000);
			HAL_Delay(5000);
		}
	}
}
 8002d98:	e04a      	b.n	8002e30 <Sim_resetSIM+0x134>
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	2108      	movs	r1, #8
 8002d9e:	4825      	ldr	r0, [pc, #148]	; (8002e34 <Sim_resetSIM+0x138>)
 8002da0:	f003 fb1c 	bl	80063dc <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 8002da4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002da8:	f001 fbaa 	bl	8004500 <HAL_Delay>
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2108      	movs	r1, #8
 8002db0:	4820      	ldr	r0, [pc, #128]	; (8002e34 <Sim_resetSIM+0x138>)
 8002db2:	f003 fb13 	bl	80063dc <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8002db6:	f241 3088 	movw	r0, #5000	; 0x1388
 8002dba:	f001 fba1 	bl	8004500 <HAL_Delay>
		HAL_Delay(5000);
 8002dbe:	f241 3088 	movw	r0, #5000	; 0x1388
 8002dc2:	f001 fb9d 	bl	8004500 <HAL_Delay>
		HAL_Delay(5000);
 8002dc6:	f241 3088 	movw	r0, #5000	; 0x1388
 8002dca:	f001 fb99 	bl	8004500 <HAL_Delay>
		HAL_Delay(5000);
 8002dce:	f241 3088 	movw	r0, #5000	; 0x1388
 8002dd2:	f001 fb95 	bl	8004500 <HAL_Delay>
		Sim_exitSLEEPMode();
 8002dd6:	f7ff ff75 	bl	8002cc4 <Sim_exitSLEEPMode>
		Sim_checkOK();
 8002dda:	f7fe fced 	bl	80017b8 <Sim_checkOK>
		HAL_Delay(1000);
 8002dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002de2:	f001 fb8d 	bl	8004500 <HAL_Delay>
		if(Sim_checkOK() == RET_OK) //SIM ON
 8002de6:	f7fe fce7 	bl	80017b8 <Sim_checkOK>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <Sim_resetSIM+0xf8>
			__NOP();
 8002df0:	bf00      	nop
}
 8002df2:	e01d      	b.n	8002e30 <Sim_resetSIM+0x134>
			HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002df4:	2201      	movs	r2, #1
 8002df6:	2108      	movs	r1, #8
 8002df8:	480e      	ldr	r0, [pc, #56]	; (8002e34 <Sim_resetSIM+0x138>)
 8002dfa:	f003 faef 	bl	80063dc <HAL_GPIO_WritePin>
			HAL_Delay(3000);
 8002dfe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e02:	f001 fb7d 	bl	8004500 <HAL_Delay>
			HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2108      	movs	r1, #8
 8002e0a:	480a      	ldr	r0, [pc, #40]	; (8002e34 <Sim_resetSIM+0x138>)
 8002e0c:	f003 fae6 	bl	80063dc <HAL_GPIO_WritePin>
			HAL_Delay(5000);
 8002e10:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e14:	f001 fb74 	bl	8004500 <HAL_Delay>
			HAL_Delay(5000);
 8002e18:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e1c:	f001 fb70 	bl	8004500 <HAL_Delay>
			HAL_Delay(5000);
 8002e20:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e24:	f001 fb6c 	bl	8004500 <HAL_Delay>
			HAL_Delay(5000);
 8002e28:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e2c:	f001 fb68 	bl	8004500 <HAL_Delay>
}
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	48000800 	.word	0x48000800

08002e38 <Sim_restartControl>:

void Sim_restartControl(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b0a0      	sub	sp, #128	; 0x80
 8002e3c:	af00      	add	r7, sp, #0
	bool isResetSystem = false;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	char Sim_PhoneNumb[15] = {0};
 8002e44:	2300      	movs	r3, #0
 8002e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	f8c3 2007 	str.w	r2, [r3, #7]
	STATUS m_ret;
	m_ret = Sim_checkResponseWith("+CMTI:", 3, 5000);
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	484d      	ldr	r0, [pc, #308]	; (8002f94 <Sim_restartControl+0x15c>)
 8002e5e:	f7fe fc81 	bl	8001764 <Sim_checkResponseWith>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	__NOP();
 8002e68:	bf00      	nop
	if(m_ret == RET_OK)
 8002e6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 808b 	bne.w	8002f8a <Sim_restartControl+0x152>
	{
		char Sim_Cmd[100] = {0};
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	f107 0308 	add.w	r3, r7, #8
 8002e7c:	2260      	movs	r2, #96	; 0x60
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f006 fbdf 	bl	8009644 <memset>
		Sim_exitSLEEPMode();
 8002e86:	f7ff ff1d 	bl	8002cc4 <Sim_exitSLEEPMode>
		for(uint8_t i = 1; i < 11; i++)
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002e90:	e061      	b.n	8002f56 <Sim_restartControl+0x11e>
		{
			sprintf(Sim_Cmd,"AT+CMGR=%d\r",i);
 8002e92:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	493f      	ldr	r1, [pc, #252]	; (8002f98 <Sim_restartControl+0x160>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f007 f844 	bl	8009f28 <siprintf>
			//Doc noi dung tin nhan
			Sim_send(Sim_Cmd, strlen(Sim_Cmd));
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd f994 	bl	80001d0 <strlen>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fbf3 	bl	800169c <Sim_send>
			m_ret = Sim_checkResponseWith("RESET", 3, 3000);
 8002eb6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002eba:	2103      	movs	r1, #3
 8002ebc:	4837      	ldr	r0, [pc, #220]	; (8002f9c <Sim_restartControl+0x164>)
 8002ebe:	f7fe fc51 	bl	8001764 <Sim_checkResponseWith>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			char* tok = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	67bb      	str	r3, [r7, #120]	; 0x78
			tok = strtok((char*)Sim_Rxdata,"\"");
 8002ecc:	4934      	ldr	r1, [pc, #208]	; (8002fa0 <Sim_restartControl+0x168>)
 8002ece:	4835      	ldr	r0, [pc, #212]	; (8002fa4 <Sim_restartControl+0x16c>)
 8002ed0:	f007 f86a 	bl	8009fa8 <strtok>
 8002ed4:	67b8      	str	r0, [r7, #120]	; 0x78
			if(tok != NULL)
 8002ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d037      	beq.n	8002f4c <Sim_restartControl+0x114>
			{
				while(tok != NULL)
 8002edc:	e02f      	b.n	8002f3e <Sim_restartControl+0x106>
				{
					tok = strtok(NULL,"\"");
 8002ede:	4930      	ldr	r1, [pc, #192]	; (8002fa0 <Sim_restartControl+0x168>)
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f007 f861 	bl	8009fa8 <strtok>
 8002ee6:	67b8      	str	r0, [r7, #120]	; 0x78
					if(strstr(tok,"+84") != NULL)
 8002ee8:	492f      	ldr	r1, [pc, #188]	; (8002fa8 <Sim_restartControl+0x170>)
 8002eea:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002eec:	f007 f844 	bl	8009f78 <strstr>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <Sim_restartControl+0xe4>
					{
						memset(Sim_PhoneNumb,0,strlen(Sim_PhoneNumb));
 8002ef6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd f968 	bl	80001d0 <strlen>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f006 fb9b 	bl	8009644 <memset>
						strcpy(Sim_PhoneNumb,tok);
 8002f0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f12:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002f14:	4618      	mov	r0, r3
 8002f16:	f007 f827 	bl	8009f68 <strcpy>
 8002f1a:	e010      	b.n	8002f3e <Sim_restartControl+0x106>
					}
					else if(strstr(tok,"RESET") != NULL)
 8002f1c:	491f      	ldr	r1, [pc, #124]	; (8002f9c <Sim_restartControl+0x164>)
 8002f1e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002f20:	f007 f82a 	bl	8009f78 <strstr>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <Sim_restartControl+0x106>
					{
						Sim_sendMess(Sim_PhoneNumb, "Reset he thong thanh cong");
 8002f2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f2e:	491f      	ldr	r1, [pc, #124]	; (8002fac <Sim_restartControl+0x174>)
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f841 	bl	8002fb8 <Sim_sendMess>
						isResetSystem = true;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						break; //break while
 8002f3c:	e002      	b.n	8002f44 <Sim_restartControl+0x10c>
				while(tok != NULL)
 8002f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1cc      	bne.n	8002ede <Sim_restartControl+0xa6>
					}
				}
				if(isResetSystem == true)
 8002f44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <Sim_restartControl+0x128>
		for(uint8_t i = 1; i < 11; i++)
 8002f4c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002f50:	3301      	adds	r3, #1
 8002f52:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002f56:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002f5a:	2b0a      	cmp	r3, #10
 8002f5c:	d999      	bls.n	8002e92 <Sim_restartControl+0x5a>
 8002f5e:	e000      	b.n	8002f62 <Sim_restartControl+0x12a>
				{
					break; //break for
 8002f60:	bf00      	nop
				}
			}
		}
		Sim_send("AT+CMGD=1,4\r",strlen("AT+CMGD=1,4\r"));
 8002f62:	210c      	movs	r1, #12
 8002f64:	4812      	ldr	r0, [pc, #72]	; (8002fb0 <Sim_restartControl+0x178>)
 8002f66:	f7fe fb99 	bl	800169c <Sim_send>
		m_ret = Sim_checkResponseWith("OK", 2, 5000);
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4810      	ldr	r0, [pc, #64]	; (8002fb4 <Sim_restartControl+0x17c>)
 8002f72:	f7fe fbf7 	bl	8001764 <Sim_checkResponseWith>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		__NOP();
 8002f7c:	bf00      	nop
		if(isResetSystem == true)
 8002f7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <Sim_restartControl+0x152>
		{
			NVIC_SystemReset();
 8002f86:	f7fe fcbd 	bl	8001904 <__NVIC_SystemReset>
		}
	}
}
 8002f8a:	bf00      	nop
 8002f8c:	3780      	adds	r7, #128	; 0x80
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	0800c830 	.word	0x0800c830
 8002f98:	0800c838 	.word	0x0800c838
 8002f9c:	0800c844 	.word	0x0800c844
 8002fa0:	0800c84c 	.word	0x0800c84c
 8002fa4:	200006e8 	.word	0x200006e8
 8002fa8:	0800c850 	.word	0x0800c850
 8002fac:	0800c854 	.word	0x0800c854
 8002fb0:	0800c870 	.word	0x0800c870
 8002fb4:	0800c76c 	.word	0x0800c76c

08002fb8 <Sim_sendMess>:

void Sim_sendMess(char* phonenumber, char* content)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b096      	sub	sp, #88	; 0x58
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
	char Sim_Cmd1[40] = {0};
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f006 fb38 	bl	8009644 <memset>
	sprintf(Sim_Cmd1,"AT+CMGS=\"%s\"\r",phonenumber);
 8002fd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	491d      	ldr	r1, [pc, #116]	; (8003050 <Sim_sendMess+0x98>)
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f006 ffa3 	bl	8009f28 <siprintf>
	char Sim_Cmd2[40] = {0};
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	2224      	movs	r2, #36	; 0x24
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f006 fb28 	bl	8009644 <memset>
	sprintf(Sim_Cmd2,"%s\x1A",content);
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	4916      	ldr	r1, [pc, #88]	; (8003054 <Sim_sendMess+0x9c>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f006 ff93 	bl	8009f28 <siprintf>
	Sim_send(Sim_Cmd1, strlen(Sim_Cmd1));
 8003002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd f8e2 	bl	80001d0 <strlen>
 800300c:	4603      	mov	r3, r0
 800300e:	b29a      	uxth	r2, r3
 8003010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fb40 	bl	800169c <Sim_send>
	if(Sim_checkResponseWith(">",2,5000) == RET_OK)
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	2102      	movs	r1, #2
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <Sim_sendMess+0xa0>)
 8003024:	f7fe fb9e 	bl	8001764 <Sim_checkResponseWith>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <Sim_sendMess+0x90>
	{
		Sim_send(Sim_Cmd2, strlen(Sim_Cmd2));
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd f8cc 	bl	80001d0 <strlen>
 8003038:	4603      	mov	r3, r0
 800303a:	b29a      	uxth	r2, r3
 800303c:	f107 0308 	add.w	r3, r7, #8
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fb2a 	bl	800169c <Sim_send>
	}
}
 8003048:	bf00      	nop
 800304a:	3758      	adds	r7, #88	; 0x58
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	0800c880 	.word	0x0800c880
 8003054:	0800c890 	.word	0x0800c890
 8003058:	0800c894 	.word	0x0800c894

0800305c <RTC_initAlarm>:

bool RTC_initAlarm(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
 8003066:	460b      	mov	r3, r1
 8003068:	71bb      	strb	r3, [r7, #6]
 800306a:	4613      	mov	r3, r2
 800306c:	717b      	strb	r3, [r7, #5]
	minutes = (minutes/RTC_ALARM)*RTC_ALARM + RTC_ALARM;
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <RTC_initAlarm+0xbc>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	79ba      	ldrb	r2, [r7, #6]
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	3301      	adds	r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <RTC_initAlarm+0xbc>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	fb12 f303 	smulbb	r3, r2, r3
 8003086:	71bb      	strb	r3, [r7, #6]
	if(minutes > 59)
 8003088:	79bb      	ldrb	r3, [r7, #6]
 800308a:	2b3b      	cmp	r3, #59	; 0x3b
 800308c:	d915      	bls.n	80030ba <RTC_initAlarm+0x5e>
	{
		if(hours+1 > 23)
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b16      	cmp	r3, #22
 8003092:	d90f      	bls.n	80030b4 <RTC_initAlarm+0x58>
		{
			hours = (hours+1)%24;
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <RTC_initAlarm+0xc0>)
 800309a:	fb83 1302 	smull	r1, r3, r3, r2
 800309e:	1099      	asrs	r1, r3, #2
 80030a0:	17d3      	asrs	r3, r2, #31
 80030a2:	1ac9      	subs	r1, r1, r3
 80030a4:	460b      	mov	r3, r1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	440b      	add	r3, r1
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	1ad1      	subs	r1, r2, r3
 80030ae:	460b      	mov	r3, r1
 80030b0:	71fb      	strb	r3, [r7, #7]
 80030b2:	e002      	b.n	80030ba <RTC_initAlarm+0x5e>
		}
		else hours = hours+1;
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	3301      	adds	r3, #1
 80030b8:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		hours = hours;
	}
	minutes = minutes%60;
 80030ba:	79ba      	ldrb	r2, [r7, #6]
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <RTC_initAlarm+0xc4>)
 80030be:	fba3 1302 	umull	r1, r3, r3, r2
 80030c2:	0959      	lsrs	r1, r3, #5
 80030c4:	460b      	mov	r3, r1
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a5b      	subs	r3, r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	71bb      	strb	r3, [r7, #6]
	seconds = seconds%60;
 80030d0:	797a      	ldrb	r2, [r7, #5]
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <RTC_initAlarm+0xc4>)
 80030d4:	fba3 1302 	umull	r1, r3, r3, r2
 80030d8:	0959      	lsrs	r1, r3, #5
 80030da:	460b      	mov	r3, r1
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a5b      	subs	r3, r3, r1
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	717b      	strb	r3, [r7, #5]
	userAlarm.AlarmTime.Hours = hours;
 80030e6:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <RTC_initAlarm+0xc8>)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	7013      	strb	r3, [r2, #0]
	userAlarm.AlarmTime.Minutes = minutes;
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <RTC_initAlarm+0xc8>)
 80030ee:	79bb      	ldrb	r3, [r7, #6]
 80030f0:	7053      	strb	r3, [r2, #1]
	userAlarm.AlarmTime.Seconds = 0;
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <RTC_initAlarm+0xc8>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	709a      	strb	r2, [r3, #2]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &userAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80030f8:	2200      	movs	r2, #0
 80030fa:	490a      	ldr	r1, [pc, #40]	; (8003124 <RTC_initAlarm+0xc8>)
 80030fc:	480a      	ldr	r0, [pc, #40]	; (8003128 <RTC_initAlarm+0xcc>)
 80030fe:	f004 ff3d 	bl	8007f7c <HAL_RTC_SetAlarm_IT>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <RTC_initAlarm+0xb0>
	{
		return false;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <RTC_initAlarm+0xb2>
	}
	return true;
 800310c:	2301      	movs	r3, #1
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200000be 	.word	0x200000be
 800311c:	2aaaaaab 	.word	0x2aaaaaab
 8003120:	88888889 	.word	0x88888889
 8003124:	20000cec 	.word	0x20000cec
 8003128:	20001264 	.word	0x20001264

0800312c <RTC_updateUserTime>:

void RTC_updateUserTime(void)
{
 800312c:	b5b0      	push	{r4, r5, r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
	bool isCorrectTime = false;
 8003132:	2300      	movs	r3, #0
 8003134:	77fb      	strb	r3, [r7, #31]
	RTC_TimeTypeDef m_Time = currentTime;
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <RTC_updateUserTime+0x130>)
 8003138:	f107 0408 	add.w	r4, r7, #8
 800313c:	461d      	mov	r5, r3
 800313e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	6023      	str	r3, [r4, #0]
	RTC_DateTypeDef m_Date = currentDate;
 8003146:	4b46      	ldr	r3, [pc, #280]	; (8003260 <RTC_updateUserTime+0x134>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	607b      	str	r3, [r7, #4]
	TimeStamp.year -= 2000;
 800314c:	4b45      	ldr	r3, [pc, #276]	; (8003264 <RTC_updateUserTime+0x138>)
 800314e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003150:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003154:	b29a      	uxth	r2, r3
 8003156:	4b43      	ldr	r3, [pc, #268]	; (8003264 <RTC_updateUserTime+0x138>)
 8003158:	869a      	strh	r2, [r3, #52]	; 0x34
	TimeStamp.hour += 7;
 800315a:	4b42      	ldr	r3, [pc, #264]	; (8003264 <RTC_updateUserTime+0x138>)
 800315c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003160:	3307      	adds	r3, #7
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b3f      	ldr	r3, [pc, #252]	; (8003264 <RTC_updateUserTime+0x138>)
 8003166:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if(TimeStamp.year < 99)
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <RTC_updateUserTime+0x138>)
 800316c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800316e:	2b62      	cmp	r3, #98	; 0x62
 8003170:	d829      	bhi.n	80031c6 <RTC_updateUserTime+0x9a>
	{
		if((TimeStamp.mon > 0) && (TimeStamp.mon < 13))
 8003172:	4b3c      	ldr	r3, [pc, #240]	; (8003264 <RTC_updateUserTime+0x138>)
 8003174:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003178:	2b00      	cmp	r3, #0
 800317a:	d024      	beq.n	80031c6 <RTC_updateUserTime+0x9a>
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <RTC_updateUserTime+0x138>)
 800317e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003182:	2b0c      	cmp	r3, #12
 8003184:	d81f      	bhi.n	80031c6 <RTC_updateUserTime+0x9a>
		{
			if((TimeStamp.date > 0) && (TimeStamp.date < 32))
 8003186:	4b37      	ldr	r3, [pc, #220]	; (8003264 <RTC_updateUserTime+0x138>)
 8003188:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01a      	beq.n	80031c6 <RTC_updateUserTime+0x9a>
 8003190:	4b34      	ldr	r3, [pc, #208]	; (8003264 <RTC_updateUserTime+0x138>)
 8003192:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003196:	2b1f      	cmp	r3, #31
 8003198:	d815      	bhi.n	80031c6 <RTC_updateUserTime+0x9a>
			{
				if((TimeStamp.hour > 6) && (TimeStamp.hour < 31)) //7->30
 800319a:	4b32      	ldr	r3, [pc, #200]	; (8003264 <RTC_updateUserTime+0x138>)
 800319c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d910      	bls.n	80031c6 <RTC_updateUserTime+0x9a>
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <RTC_updateUserTime+0x138>)
 80031a6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031aa:	2b1e      	cmp	r3, #30
 80031ac:	d80b      	bhi.n	80031c6 <RTC_updateUserTime+0x9a>
				{
					if(TimeStamp.min < 60)
 80031ae:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <RTC_updateUserTime+0x138>)
 80031b0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80031b4:	2b3b      	cmp	r3, #59	; 0x3b
 80031b6:	d806      	bhi.n	80031c6 <RTC_updateUserTime+0x9a>
					{
						if(TimeStamp.sec < 60)
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <RTC_updateUserTime+0x138>)
 80031ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031be:	2b3b      	cmp	r3, #59	; 0x3b
 80031c0:	d801      	bhi.n	80031c6 <RTC_updateUserTime+0x9a>
						{
							isCorrectTime = true;
 80031c2:	2301      	movs	r3, #1
 80031c4:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
		}
	}
	if(isCorrectTime)
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d042      	beq.n	8003252 <RTC_updateUserTime+0x126>
	{
		//cap nhat ngay thang cho DateToUpdate
		m_Date.Date = TimeStamp.date;
 80031cc:	4b25      	ldr	r3, [pc, #148]	; (8003264 <RTC_updateUserTime+0x138>)
 80031ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80031d2:	71bb      	strb	r3, [r7, #6]
		m_Date.Month = TimeStamp.mon;
 80031d4:	4b23      	ldr	r3, [pc, #140]	; (8003264 <RTC_updateUserTime+0x138>)
 80031d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80031da:	717b      	strb	r3, [r7, #5]
		m_Date.Year = TimeStamp.year;
 80031dc:	4b21      	ldr	r3, [pc, #132]	; (8003264 <RTC_updateUserTime+0x138>)
 80031de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	71fb      	strb	r3, [r7, #7]
		if(TimeStamp.hour > 23)
 80031e4:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <RTC_updateUserTime+0x138>)
 80031e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031ea:	2b17      	cmp	r3, #23
 80031ec:	d90c      	bls.n	8003208 <RTC_updateUserTime+0xdc>
		{
			TimeStamp.hour = TimeStamp.hour - 24;
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <RTC_updateUserTime+0x138>)
 80031f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031f4:	3b18      	subs	r3, #24
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <RTC_updateUserTime+0x138>)
 80031fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			RTC_updateUserDate(&m_Date);
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f833 	bl	800326c <RTC_updateUserDate>
 8003206:	e005      	b.n	8003214 <RTC_updateUserTime+0xe8>
		}
		else
		{
			HAL_RTC_SetDate(&hrtc, &m_Date, RTC_FORMAT_BIN);
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	2200      	movs	r2, #0
 800320c:	4619      	mov	r1, r3
 800320e:	4816      	ldr	r0, [pc, #88]	; (8003268 <RTC_updateUserTime+0x13c>)
 8003210:	f004 fdbe 	bl	8007d90 <HAL_RTC_SetDate>
		}
		m_Time.Hours = TimeStamp.hour;
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <RTC_updateUserTime+0x138>)
 8003216:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800321a:	723b      	strb	r3, [r7, #8]
		m_Time.Minutes = TimeStamp.min;
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <RTC_updateUserTime+0x138>)
 800321e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003222:	727b      	strb	r3, [r7, #9]
		m_Time.Seconds = TimeStamp.sec;
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <RTC_updateUserTime+0x138>)
 8003226:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322a:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc, &m_Time, RTC_FORMAT_BIN);
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	2200      	movs	r2, #0
 8003232:	4619      	mov	r1, r3
 8003234:	480c      	ldr	r0, [pc, #48]	; (8003268 <RTC_updateUserTime+0x13c>)
 8003236:	f004 fc90 	bl	8007b5a <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &m_Date, RTC_FORMAT_BIN);
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	2200      	movs	r2, #0
 800323e:	4619      	mov	r1, r3
 8003240:	4809      	ldr	r0, [pc, #36]	; (8003268 <RTC_updateUserTime+0x13c>)
 8003242:	f004 fda5 	bl	8007d90 <HAL_RTC_SetDate>
		RTC_initAlarm(m_Time.Hours, m_Time.Minutes, 0);
 8003246:	7a3b      	ldrb	r3, [r7, #8]
 8003248:	7a79      	ldrb	r1, [r7, #9]
 800324a:	2200      	movs	r2, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff05 	bl	800305c <RTC_initAlarm>
	}
}
 8003252:	bf00      	nop
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bdb0      	pop	{r4, r5, r7, pc}
 800325a:	bf00      	nop
 800325c:	20000cd4 	.word	0x20000cd4
 8003260:	20000ce8 	.word	0x20000ce8
 8003264:	20001228 	.word	0x20001228
 8003268:	20001264 	.word	0x20001264

0800326c <RTC_updateUserDate>:

void RTC_updateUserDate(RTC_DateTypeDef* datetime)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	if ((datetime->Month == 1U) || (datetime->Month == 3U) || (datetime->Month == 5U) || (datetime->Month == 7U) || \
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d017      	beq.n	80032ac <RTC_updateUserDate+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d013      	beq.n	80032ac <RTC_updateUserDate+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d00f      	beq.n	80032ac <RTC_updateUserDate+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	2b07      	cmp	r3, #7
 8003292:	d00b      	beq.n	80032ac <RTC_updateUserDate+0x40>
        (datetime->Month == 8U) || (datetime->Month == 10U) || (datetime->Month == 12U))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	785b      	ldrb	r3, [r3, #1]
	if ((datetime->Month == 1U) || (datetime->Month == 3U) || (datetime->Month == 5U) || (datetime->Month == 7U) || \
 8003298:	2b08      	cmp	r3, #8
 800329a:	d007      	beq.n	80032ac <RTC_updateUserDate+0x40>
        (datetime->Month == 8U) || (datetime->Month == 10U) || (datetime->Month == 12U))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	2b0a      	cmp	r3, #10
 80032a2:	d003      	beq.n	80032ac <RTC_updateUserDate+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	d125      	bne.n	80032f8 <RTC_updateUserDate+0x8c>
	{
		if (datetime->Date < 31U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	789b      	ldrb	r3, [r3, #2]
 80032b0:	2b1e      	cmp	r3, #30
 80032b2:	d806      	bhi.n	80032c2 <RTC_updateUserDate+0x56>
		{
			datetime->Date++;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	789b      	ldrb	r3, [r3, #2]
 80032b8:	3301      	adds	r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 31U)
 80032c0:	e079      	b.n	80033b6 <RTC_updateUserDate+0x14a>
		}
		/* Date structure member: day = 31 */
		else
		{
			if (datetime->Month != 12U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d009      	beq.n	80032de <RTC_updateUserDate+0x72>
			{
				datetime->Month++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	785b      	ldrb	r3, [r3, #1]
 80032ce:	3301      	adds	r3, #1
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 31U)
 80032dc:	e06b      	b.n	80033b6 <RTC_updateUserDate+0x14a>
			}
			/* Date structure member: day = 31 & month =12 */
			else
			{
				datetime->Month = 1U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	709a      	strb	r2, [r3, #2]
				datetime->Year++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	78db      	ldrb	r3, [r3, #3]
 80032ee:	3301      	adds	r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	70da      	strb	r2, [r3, #3]
		if (datetime->Date < 31U)
 80032f6:	e05e      	b.n	80033b6 <RTC_updateUserDate+0x14a>
			}
		}
	}
	else if ((datetime->Month == 4U) || (datetime->Month == 6U) || (datetime->Month == 9U) || (datetime->Month == 11U))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	785b      	ldrb	r3, [r3, #1]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d00b      	beq.n	8003318 <RTC_updateUserDate+0xac>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	2b06      	cmp	r3, #6
 8003306:	d007      	beq.n	8003318 <RTC_updateUserDate+0xac>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	785b      	ldrb	r3, [r3, #1]
 800330c:	2b09      	cmp	r3, #9
 800330e:	d003      	beq.n	8003318 <RTC_updateUserDate+0xac>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b0b      	cmp	r3, #11
 8003316:	d114      	bne.n	8003342 <RTC_updateUserDate+0xd6>
	{
		if (datetime->Date < 30U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	789b      	ldrb	r3, [r3, #2]
 800331c:	2b1d      	cmp	r3, #29
 800331e:	d806      	bhi.n	800332e <RTC_updateUserDate+0xc2>
		{
			datetime->Date++;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	789b      	ldrb	r3, [r3, #2]
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 30U)
 800332c:	e043      	b.n	80033b6 <RTC_updateUserDate+0x14a>
		}
		/* Date structure member: day = 30 */
		else
		{
			datetime->Month++;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	3301      	adds	r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	705a      	strb	r2, [r3, #1]
			datetime->Date = 1U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 30U)
 8003340:	e039      	b.n	80033b6 <RTC_updateUserDate+0x14a>
		}
	}
	else if (datetime->Month == 2U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	785b      	ldrb	r3, [r3, #1]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d135      	bne.n	80033b6 <RTC_updateUserDate+0x14a>
	{
		if (datetime->Date < 28U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	789b      	ldrb	r3, [r3, #2]
 800334e:	2b1b      	cmp	r3, #27
 8003350:	d806      	bhi.n	8003360 <RTC_updateUserDate+0xf4>
		{
			datetime->Date++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	789b      	ldrb	r3, [r3, #2]
 8003356:	3301      	adds	r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	709a      	strb	r2, [r3, #2]
 800335e:	e02a      	b.n	80033b6 <RTC_updateUserDate+0x14a>
		}
		else if (datetime->Date == 28U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	789b      	ldrb	r3, [r3, #2]
 8003364:	2b1c      	cmp	r3, #28
 8003366:	d119      	bne.n	800339c <RTC_updateUserDate+0x130>
		{
			/* Leap year */
			if (RTC_isLeapYear(datetime->Year))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	78db      	ldrb	r3, [r3, #3]
 800336c:	b29b      	uxth	r3, r3
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f82c 	bl	80033cc <RTC_isLeapYear>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <RTC_updateUserDate+0x11c>
			{
				datetime->Date++;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	789b      	ldrb	r3, [r3, #2]
 800337e:	3301      	adds	r3, #1
 8003380:	b2da      	uxtb	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	709a      	strb	r2, [r3, #2]
 8003386:	e016      	b.n	80033b6 <RTC_updateUserDate+0x14a>
			}
			else
			{
				datetime->Month++;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	3301      	adds	r3, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	709a      	strb	r2, [r3, #2]
 800339a:	e00c      	b.n	80033b6 <RTC_updateUserDate+0x14a>
			}
		}
		else if (datetime->Date == 29U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	789b      	ldrb	r3, [r3, #2]
 80033a0:	2b1d      	cmp	r3, #29
 80033a2:	d108      	bne.n	80033b6 <RTC_updateUserDate+0x14a>
		{
			datetime->Month++;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	3301      	adds	r3, #1
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	705a      	strb	r2, [r3, #1]
			datetime->Date = 1U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	709a      	strb	r2, [r3, #2]
		}
	}
	HAL_RTC_SetDate(&hrtc, datetime, RTC_FORMAT_BIN);
 80033b6:	2200      	movs	r2, #0
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4803      	ldr	r0, [pc, #12]	; (80033c8 <RTC_updateUserDate+0x15c>)
 80033bc:	f004 fce8 	bl	8007d90 <HAL_RTC_SetDate>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20001264 	.word	0x20001264

080033cc <RTC_isLeapYear>:

bool RTC_isLeapYear(uint16_t y)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
  if((y + 2000) % 4 != 0)
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <RTC_isLeapYear+0x1c>
  {
    return false;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e023      	b.n	8003430 <RTC_isLeapYear+0x64>
  }
  else if((y + 2000) % 100 != 0)
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <RTC_isLeapYear+0x70>)
 80033f0:	fb83 1302 	smull	r1, r3, r3, r2
 80033f4:	1159      	asrs	r1, r3, #5
 80033f6:	17d3      	asrs	r3, r2, #31
 80033f8:	1acb      	subs	r3, r1, r3
 80033fa:	2164      	movs	r1, #100	; 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <RTC_isLeapYear+0x3e>
  {
    return true;
 8003406:	2301      	movs	r3, #1
 8003408:	e012      	b.n	8003430 <RTC_isLeapYear+0x64>
  }
  else if((y + 2000) % 400 != 0)
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <RTC_isLeapYear+0x70>)
 8003412:	fb83 1302 	smull	r1, r3, r3, r2
 8003416:	11d9      	asrs	r1, r3, #7
 8003418:	17d3      	asrs	r3, r2, #31
 800341a:	1acb      	subs	r3, r1, r3
 800341c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <RTC_isLeapYear+0x62>
  {
    return false;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <RTC_isLeapYear+0x64>
  }
  else return true;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	51eb851f 	.word	0x51eb851f

08003440 <Flash_init>:

void Flash_init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	/* Flash init */
	if(Flash_ReadIntType(WR_ADDR) == 0xFFFFFFFF)
 8003444:	482d      	ldr	r0, [pc, #180]	; (80034fc <Flash_init+0xbc>)
 8003446:	f7fd fc56 	bl	8000cf6 <Flash_ReadIntType>
 800344a:	4603      	mov	r3, r0
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d106      	bne.n	8003460 <Flash_init+0x20>
	{
		Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8003452:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <Flash_init+0xc0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	4619      	mov	r1, r3
 800345a:	4828      	ldr	r0, [pc, #160]	; (80034fc <Flash_init+0xbc>)
 800345c:	f7fd fc39 	bl	8000cd2 <Flash_WriteIntType>
	}
	if(Flash_ReadIntType(RD_ADDR) == 0xFFFFFFFF)
 8003460:	4828      	ldr	r0, [pc, #160]	; (8003504 <Flash_init+0xc4>)
 8003462:	f7fd fc48 	bl	8000cf6 <Flash_ReadIntType>
 8003466:	4603      	mov	r3, r0
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d106      	bne.n	800347c <Flash_init+0x3c>
	{
		Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <Flash_init+0xc8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	4619      	mov	r1, r3
 8003476:	4823      	ldr	r0, [pc, #140]	; (8003504 <Flash_init+0xc4>)
 8003478:	f7fd fc2b 	bl	8000cd2 <Flash_WriteIntType>
	}
	if(Flash_ReadIntType(PG_ADDR) == 0xFFFFFFFF)
 800347c:	4823      	ldr	r0, [pc, #140]	; (800350c <Flash_init+0xcc>)
 800347e:	f7fd fc3a 	bl	8000cf6 <Flash_ReadIntType>
 8003482:	4603      	mov	r3, r0
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d106      	bne.n	8003498 <Flash_init+0x58>
	{
		Flash_WriteIntType(PG_ADDR, PAGE_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <Flash_init+0xd0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2201      	movs	r2, #1
 8003490:	4619      	mov	r1, r3
 8003492:	481e      	ldr	r0, [pc, #120]	; (800350c <Flash_init+0xcc>)
 8003494:	f7fd fc1d 	bl	8000cd2 <Flash_WriteIntType>
	}
	WRITE_DATA_ADDR = Flash_ReadIntType(WR_ADDR);
 8003498:	4818      	ldr	r0, [pc, #96]	; (80034fc <Flash_init+0xbc>)
 800349a:	f7fd fc2c 	bl	8000cf6 <Flash_ReadIntType>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <Flash_init+0xc0>)
 80034a2:	6013      	str	r3, [r2, #0]
	READ_DATA_ADDR = Flash_ReadIntType(RD_ADDR);
 80034a4:	4817      	ldr	r0, [pc, #92]	; (8003504 <Flash_init+0xc4>)
 80034a6:	f7fd fc26 	bl	8000cf6 <Flash_ReadIntType>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4a16      	ldr	r2, [pc, #88]	; (8003508 <Flash_init+0xc8>)
 80034ae:	6013      	str	r3, [r2, #0]
	PAGE_ADDR = Flash_ReadIntType(PG_ADDR);
 80034b0:	4816      	ldr	r0, [pc, #88]	; (800350c <Flash_init+0xcc>)
 80034b2:	f7fd fc20 	bl	8000cf6 <Flash_ReadIntType>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4a15      	ldr	r2, [pc, #84]	; (8003510 <Flash_init+0xd0>)
 80034ba:	6013      	str	r3, [r2, #0]
	if(Flash_ReadIntType(MODE_RTC_ADDR) == 0xFFFFFFFF)
 80034bc:	4815      	ldr	r0, [pc, #84]	; (8003514 <Flash_init+0xd4>)
 80034be:	f7fd fc1a 	bl	8000cf6 <Flash_ReadIntType>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d106      	bne.n	80034d8 <Flash_init+0x98>
	{
		Flash_WriteIntType(MODE_RTC_ADDR, RTC_ALARM, FLASH_TYPEPROGRAM_HALFWORD);
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <Flash_init+0xd8>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4619      	mov	r1, r3
 80034d2:	4810      	ldr	r0, [pc, #64]	; (8003514 <Flash_init+0xd4>)
 80034d4:	f7fd fbfd 	bl	8000cd2 <Flash_WriteIntType>
	}
	RTC_ALARM = Flash_ReadIntType(MODE_RTC_ADDR);
 80034d8:	480e      	ldr	r0, [pc, #56]	; (8003514 <Flash_init+0xd4>)
 80034da:	f7fd fc0c 	bl	8000cf6 <Flash_ReadIntType>
 80034de:	4603      	mov	r3, r0
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <Flash_init+0xd8>)
 80034e4:	701a      	strb	r2, [r3, #0]
	RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <Flash_init+0xdc>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	4a0c      	ldr	r2, [pc, #48]	; (800351c <Flash_init+0xdc>)
 80034ec:	7851      	ldrb	r1, [r2, #1]
 80034ee:	2200      	movs	r2, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fdb3 	bl	800305c <RTC_initAlarm>
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	0800f810 	.word	0x0800f810
 8003500:	200000f0 	.word	0x200000f0
 8003504:	0800f800 	.word	0x0800f800
 8003508:	200000f4 	.word	0x200000f4
 800350c:	0800f820 	.word	0x0800f820
 8003510:	200000f8 	.word	0x200000f8
 8003514:	08010400 	.word	0x08010400
 8003518:	200000be 	.word	0x200000be
 800351c:	20000cec 	.word	0x20000cec

08003520 <Flash_writeData>:

void Flash_writeData(const char* host, const char* url, const char* data)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
	memset(Flash_DataToWrite,0,strlen(Flash_DataToWrite));
 800352c:	484b      	ldr	r0, [pc, #300]	; (800365c <Flash_writeData+0x13c>)
 800352e:	f7fc fe4f 	bl	80001d0 <strlen>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	2100      	movs	r1, #0
 8003538:	4848      	ldr	r0, [pc, #288]	; (800365c <Flash_writeData+0x13c>)
 800353a:	f006 f883 	bl	8009644 <memset>
	if((host != NULL) && (url != NULL))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <Flash_writeData+0x3c>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <Flash_writeData+0x3c>
	{
		sprintf(Flash_DataToWrite,"%s|%s|%s",host,url,data);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4943      	ldr	r1, [pc, #268]	; (8003660 <Flash_writeData+0x140>)
 8003554:	4841      	ldr	r0, [pc, #260]	; (800365c <Flash_writeData+0x13c>)
 8003556:	f006 fce7 	bl	8009f28 <siprintf>
 800355a:	e011      	b.n	8003580 <Flash_writeData+0x60>
	}
	else
	{
		if(strstr(host,Host1) != NULL)
 800355c:	4941      	ldr	r1, [pc, #260]	; (8003664 <Flash_writeData+0x144>)
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f006 fd0a 	bl	8009f78 <strstr>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <Flash_writeData+0x56>
		{
			sprintf(Flash_DataToWrite,"%s||1",data);
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	493e      	ldr	r1, [pc, #248]	; (8003668 <Flash_writeData+0x148>)
 800356e:	483b      	ldr	r0, [pc, #236]	; (800365c <Flash_writeData+0x13c>)
 8003570:	f006 fcda 	bl	8009f28 <siprintf>
 8003574:	e004      	b.n	8003580 <Flash_writeData+0x60>
		}
		else
		{
			sprintf(Flash_DataToWrite,"%s||2",data);
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	493c      	ldr	r1, [pc, #240]	; (800366c <Flash_writeData+0x14c>)
 800357a:	4838      	ldr	r0, [pc, #224]	; (800365c <Flash_writeData+0x13c>)
 800357c:	f006 fcd4 	bl	8009f28 <siprintf>
		}
	}
	Flash_Unlock();
 8003580:	f7fd fb85 	bl	8000c8e <Flash_Unlock>
	Flash_WriteDataLen = strlen(Flash_DataToWrite);
 8003584:	4835      	ldr	r0, [pc, #212]	; (800365c <Flash_writeData+0x13c>)
 8003586:	f7fc fe23 	bl	80001d0 <strlen>
 800358a:	4603      	mov	r3, r0
 800358c:	b29a      	uxth	r2, r3
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <Flash_writeData+0x150>)
 8003590:	801a      	strh	r2, [r3, #0]
	if((WRITE_DATA_ADDR + Flash_WriteDataLen*2) >= PAGE_ADDR)
 8003592:	4b37      	ldr	r3, [pc, #220]	; (8003670 <Flash_writeData+0x150>)
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	461a      	mov	r2, r3
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <Flash_writeData+0x154>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	441a      	add	r2, r3
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <Flash_writeData+0x158>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d329      	bcc.n	80035fc <Flash_writeData+0xdc>
	{
		if(PAGE_ADDR == MAX_PAGE_ADDR)
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <Flash_writeData+0x158>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a33      	ldr	r2, [pc, #204]	; (800367c <Flash_writeData+0x15c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10b      	bne.n	80035ca <Flash_writeData+0xaa>
		{
			PAGE_ADDR = MIN_PAGE_ADDR;
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <Flash_writeData+0x158>)
 80035b4:	4a32      	ldr	r2, [pc, #200]	; (8003680 <Flash_writeData+0x160>)
 80035b6:	601a      	str	r2, [r3, #0]
			WRITE_DATA_ADDR = MIN_DATA_ADDR;
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <Flash_writeData+0x154>)
 80035ba:	4a32      	ldr	r2, [pc, #200]	; (8003684 <Flash_writeData+0x164>)
 80035bc:	601a      	str	r2, [r3, #0]
			Flash_Erase(WRITE_DATA_ADDR);
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <Flash_writeData+0x154>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fb69 	bl	8000c9a <Flash_Erase>
 80035c8:	e005      	b.n	80035d6 <Flash_writeData+0xb6>
		}
		else
		{
			PAGE_ADDR += 0x800;
 80035ca:	4b2b      	ldr	r3, [pc, #172]	; (8003678 <Flash_writeData+0x158>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d2:	4a29      	ldr	r2, [pc, #164]	; (8003678 <Flash_writeData+0x158>)
 80035d4:	6013      	str	r3, [r2, #0]
		}
		if(READ_DATA_ADDR > WRITE_DATA_ADDR)
 80035d6:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <Flash_writeData+0x168>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b26      	ldr	r3, [pc, #152]	; (8003674 <Flash_writeData+0x154>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d905      	bls.n	80035ee <Flash_writeData+0xce>
		{
			READ_DATA_ADDR = PAGE_ADDR + 0x10 - 0x800;
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <Flash_writeData+0x158>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 80035ea:	4a27      	ldr	r2, [pc, #156]	; (8003688 <Flash_writeData+0x168>)
 80035ec:	6013      	str	r3, [r2, #0]
		}
		Flash_Unlock();
 80035ee:	f7fd fb4e 	bl	8000c8e <Flash_Unlock>
		Flash_Erase(PAGE_ADDR);
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <Flash_writeData+0x158>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd fb4f 	bl	8000c9a <Flash_Erase>
	}
	Flash_WriteCharType(WRITE_DATA_ADDR, Flash_DataToWrite, FLASH_TYPEPROGRAM_HALFWORD);
 80035fc:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <Flash_writeData+0x154>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	4916      	ldr	r1, [pc, #88]	; (800365c <Flash_writeData+0x13c>)
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fb85 	bl	8000d14 <Flash_WriteCharType>
	WRITE_DATA_ADDR += Flash_WriteDataLen*2+2;
 800360a:	4b19      	ldr	r3, [pc, #100]	; (8003670 <Flash_writeData+0x150>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	461a      	mov	r2, r3
 8003614:	4b17      	ldr	r3, [pc, #92]	; (8003674 <Flash_writeData+0x154>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4413      	add	r3, r2
 800361a:	4a16      	ldr	r2, [pc, #88]	; (8003674 <Flash_writeData+0x154>)
 800361c:	6013      	str	r3, [r2, #0]
	Flash_Erase(WR_ADDR);
 800361e:	481b      	ldr	r0, [pc, #108]	; (800368c <Flash_writeData+0x16c>)
 8003620:	f7fd fb3b 	bl	8000c9a <Flash_Erase>
	//Luu PAGE_ADDR, WRITE_DATA_ADDR, READ_DATA_ADDR vao bo nho Flash
	Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR, FLASH_TYPEPROGRAM_WORD);
 8003624:	4b18      	ldr	r3, [pc, #96]	; (8003688 <Flash_writeData+0x168>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2202      	movs	r2, #2
 800362a:	4619      	mov	r1, r3
 800362c:	4818      	ldr	r0, [pc, #96]	; (8003690 <Flash_writeData+0x170>)
 800362e:	f7fd fb50 	bl	8000cd2 <Flash_WriteIntType>
	Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR, FLASH_TYPEPROGRAM_WORD);
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <Flash_writeData+0x154>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2202      	movs	r2, #2
 8003638:	4619      	mov	r1, r3
 800363a:	4814      	ldr	r0, [pc, #80]	; (800368c <Flash_writeData+0x16c>)
 800363c:	f7fd fb49 	bl	8000cd2 <Flash_WriteIntType>
	Flash_WriteIntType(PG_ADDR, PAGE_ADDR, FLASH_TYPEPROGRAM_WORD);
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <Flash_writeData+0x158>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2202      	movs	r2, #2
 8003646:	4619      	mov	r1, r3
 8003648:	4812      	ldr	r0, [pc, #72]	; (8003694 <Flash_writeData+0x174>)
 800364a:	f7fd fb42 	bl	8000cd2 <Flash_WriteIntType>
	Flash_Lock();
 800364e:	f7fd fb18 	bl	8000c82 <Flash_Lock>
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000d18 	.word	0x20000d18
 8003660:	0800c898 	.word	0x0800c898
 8003664:	20000020 	.word	0x20000020
 8003668:	0800c8a4 	.word	0x0800c8a4
 800366c:	0800c8ac 	.word	0x0800c8ac
 8003670:	200012b6 	.word	0x200012b6
 8003674:	200000f0 	.word	0x200000f0
 8003678:	200000f8 	.word	0x200000f8
 800367c:	0800eff0 	.word	0x0800eff0
 8003680:	0800b7f0 	.word	0x0800b7f0
 8003684:	0800b000 	.word	0x0800b000
 8003688:	200000f4 	.word	0x200000f4
 800368c:	0800f810 	.word	0x0800f810
 8003690:	0800f800 	.word	0x0800f800
 8003694:	0800f820 	.word	0x0800f820

08003698 <Flash_extractData>:

void Flash_extractData(char* data)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	memset(Flash_Host,0,strlen(Flash_Host));
 80036a0:	4835      	ldr	r0, [pc, #212]	; (8003778 <Flash_extractData+0xe0>)
 80036a2:	f7fc fd95 	bl	80001d0 <strlen>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	2100      	movs	r1, #0
 80036ac:	4832      	ldr	r0, [pc, #200]	; (8003778 <Flash_extractData+0xe0>)
 80036ae:	f005 ffc9 	bl	8009644 <memset>
	memset(Flash_URL,0,strlen(Flash_URL));
 80036b2:	4832      	ldr	r0, [pc, #200]	; (800377c <Flash_extractData+0xe4>)
 80036b4:	f7fc fd8c 	bl	80001d0 <strlen>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	2100      	movs	r1, #0
 80036be:	482f      	ldr	r0, [pc, #188]	; (800377c <Flash_extractData+0xe4>)
 80036c0:	f005 ffc0 	bl	8009644 <memset>
	memset(Flash_Data,0,strlen(Flash_Data));
 80036c4:	482e      	ldr	r0, [pc, #184]	; (8003780 <Flash_extractData+0xe8>)
 80036c6:	f7fc fd83 	bl	80001d0 <strlen>
 80036ca:	4603      	mov	r3, r0
 80036cc:	461a      	mov	r2, r3
 80036ce:	2100      	movs	r1, #0
 80036d0:	482b      	ldr	r0, [pc, #172]	; (8003780 <Flash_extractData+0xe8>)
 80036d2:	f005 ffb7 	bl	8009644 <memset>
	if(strstr(data,"||") == NULL)
 80036d6:	492b      	ldr	r1, [pc, #172]	; (8003784 <Flash_extractData+0xec>)
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f006 fc4d 	bl	8009f78 <strstr>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11b      	bne.n	800371c <Flash_extractData+0x84>
	{
		char* token;
		token = strtok(data,"|");
 80036e4:	4928      	ldr	r1, [pc, #160]	; (8003788 <Flash_extractData+0xf0>)
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f006 fc5e 	bl	8009fa8 <strtok>
 80036ec:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_Host,token);
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	4821      	ldr	r0, [pc, #132]	; (8003778 <Flash_extractData+0xe0>)
 80036f2:	f006 fc39 	bl	8009f68 <strcpy>
		token = strtok(NULL,"|");
 80036f6:	4924      	ldr	r1, [pc, #144]	; (8003788 <Flash_extractData+0xf0>)
 80036f8:	2000      	movs	r0, #0
 80036fa:	f006 fc55 	bl	8009fa8 <strtok>
 80036fe:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_URL,token);
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	481e      	ldr	r0, [pc, #120]	; (800377c <Flash_extractData+0xe4>)
 8003704:	f006 fc30 	bl	8009f68 <strcpy>
		token = strtok(NULL,"|");
 8003708:	491f      	ldr	r1, [pc, #124]	; (8003788 <Flash_extractData+0xf0>)
 800370a:	2000      	movs	r0, #0
 800370c:	f006 fc4c 	bl	8009fa8 <strtok>
 8003710:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_Data,token);
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	481a      	ldr	r0, [pc, #104]	; (8003780 <Flash_extractData+0xe8>)
 8003716:	f006 fc27 	bl	8009f68 <strcpy>
		{
			strcpy(Flash_Host,Host2);
			strcpy(Flash_URL,URL2);
		}
	}
}
 800371a:	e029      	b.n	8003770 <Flash_extractData+0xd8>
		token = strtok(data,"|");
 800371c:	491a      	ldr	r1, [pc, #104]	; (8003788 <Flash_extractData+0xf0>)
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f006 fc42 	bl	8009fa8 <strtok>
 8003724:	60f8      	str	r0, [r7, #12]
		strcpy(Flash_Data,token);
 8003726:	68f9      	ldr	r1, [r7, #12]
 8003728:	4815      	ldr	r0, [pc, #84]	; (8003780 <Flash_extractData+0xe8>)
 800372a:	f006 fc1d 	bl	8009f68 <strcpy>
		token = strtok(NULL,"|");
 800372e:	4916      	ldr	r1, [pc, #88]	; (8003788 <Flash_extractData+0xf0>)
 8003730:	2000      	movs	r0, #0
 8003732:	f006 fc39 	bl	8009fa8 <strtok>
 8003736:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL,"|");
 8003738:	4913      	ldr	r1, [pc, #76]	; (8003788 <Flash_extractData+0xf0>)
 800373a:	2000      	movs	r0, #0
 800373c:	f006 fc34 	bl	8009fa8 <strtok>
 8003740:	60f8      	str	r0, [r7, #12]
		if(atoi(token) == 1)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f005 ff50 	bl	80095e8 <atoi>
 8003748:	4603      	mov	r3, r0
 800374a:	2b01      	cmp	r3, #1
 800374c:	d108      	bne.n	8003760 <Flash_extractData+0xc8>
			strcpy(Flash_Host,Host1);
 800374e:	490f      	ldr	r1, [pc, #60]	; (800378c <Flash_extractData+0xf4>)
 8003750:	4809      	ldr	r0, [pc, #36]	; (8003778 <Flash_extractData+0xe0>)
 8003752:	f006 fc09 	bl	8009f68 <strcpy>
			strcpy(Flash_URL,URL1);
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <Flash_extractData+0xf8>)
 8003758:	4808      	ldr	r0, [pc, #32]	; (800377c <Flash_extractData+0xe4>)
 800375a:	f006 fc05 	bl	8009f68 <strcpy>
}
 800375e:	e007      	b.n	8003770 <Flash_extractData+0xd8>
			strcpy(Flash_Host,Host2);
 8003760:	490c      	ldr	r1, [pc, #48]	; (8003794 <Flash_extractData+0xfc>)
 8003762:	4805      	ldr	r0, [pc, #20]	; (8003778 <Flash_extractData+0xe0>)
 8003764:	f006 fc00 	bl	8009f68 <strcpy>
			strcpy(Flash_URL,URL2);
 8003768:	490b      	ldr	r1, [pc, #44]	; (8003798 <Flash_extractData+0x100>)
 800376a:	4804      	ldr	r0, [pc, #16]	; (800377c <Flash_extractData+0xe4>)
 800376c:	f006 fbfc 	bl	8009f68 <strcpy>
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200011f4 	.word	0x200011f4
 800377c:	20001284 	.word	0x20001284
 8003780:	20000ea8 	.word	0x20000ea8
 8003784:	0800c8b4 	.word	0x0800c8b4
 8003788:	0800c800 	.word	0x0800c800
 800378c:	20000020 	.word	0x20000020
 8003790:	20000000 	.word	0x20000000
 8003794:	20000060 	.word	0x20000060
 8003798:	20000040 	.word	0x20000040

0800379c <RS485_readLiquidLevelTransmitter>:
	return -32767;
}

// don vi met
float RS485_readLiquidLevelTransmitter(uint8_t Modbus_Addr)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b092      	sub	sp, #72	; 0x48
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
	#if (IWDOG == 1)
	HAL_IWDG_Refresh(&hiwdg);
	#endif
	uint8_t ReceivedBuff[10] ={0};
 80037a6:	2300      	movs	r3, #0
 80037a8:	633b      	str	r3, [r7, #48]	; 0x30
 80037aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	809a      	strh	r2, [r3, #4]
	uint16_t sensorValue=0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	RS485Query_t m_RS485Query=
 80037b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80037c8:	2303      	movs	r3, #3
 80037ca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80037ce:	2304      	movs	r3, #4
 80037d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80037d2:	2301      	movs	r3, #1
 80037d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
		.slaveAddress = Modbus_Addr,
		.mbFunction 	= Read_HoldingRegister,
		.regAddress 	= 0x04,
		.regCount		= 0x01
	};
	for(uint8_t j=0;j<3;j++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80037dc:	e038      	b.n	8003850 <RS485_readLiquidLevelTransmitter+0xb4>
	{
		RS485_transmit(m_RS485Query);
 80037de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037e6:	f7fd fca5 	bl	8001134 <RS485_transmit>
		if(HAL_UART_Receive(&huart3,(uint8_t*)ReceivedBuff, 7, 1000) == HAL_OK)
 80037ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80037ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f2:	2207      	movs	r2, #7
 80037f4:	481d      	ldr	r0, [pc, #116]	; (800386c <RS485_readLiquidLevelTransmitter+0xd0>)
 80037f6:	f004 feed 	bl	80085d4 <HAL_UART_Receive>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11e      	bne.n	800383e <RS485_readLiquidLevelTransmitter+0xa2>
		{
			RS485Data_t LiquidLevelTransmitter;
			if(RS485_analysis(&LiquidLevelTransmitter, m_RS485Query, (uint8_t*)ReceivedBuff, 7) == 1)
 8003800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003804:	f107 0008 	add.w	r0, r7, #8
 8003808:	2207      	movs	r2, #7
 800380a:	9200      	str	r2, [sp, #0]
 800380c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003810:	ca06      	ldmia	r2, {r1, r2}
 8003812:	f7fd fd1b 	bl	800124c <RS485_analysis>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10e      	bne.n	800383a <RS485_readLiquidLevelTransmitter+0x9e>
			{
				sensorValue = LiquidLevelTransmitter.dataReg[0];
 800381c:	89bb      	ldrh	r3, [r7, #12]
 800381e:	87bb      	strh	r3, [r7, #60]	; 0x3c
				HAL_Delay(200);
 8003820:	20c8      	movs	r0, #200	; 0xc8
 8003822:	f000 fe6d 	bl	8004500 <HAL_Delay>
				return (float)(sensorValue)/100;
 8003826:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003830:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003870 <RS485_readLiquidLevelTransmitter+0xd4>
 8003834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003838:	e010      	b.n	800385c <RS485_readLiquidLevelTransmitter+0xc0>
			}
			else
			{
				__NOP();
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <RS485_readLiquidLevelTransmitter+0xa4>
			}
		}
		else
		{
			__NOP();
 800383e:	bf00      	nop
		}
		HAL_Delay(200);
 8003840:	20c8      	movs	r0, #200	; 0xc8
 8003842:	f000 fe5d 	bl	8004500 <HAL_Delay>
	for(uint8_t j=0;j<3;j++)
 8003846:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800384a:	3301      	adds	r3, #1
 800384c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003850:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003854:	2b02      	cmp	r3, #2
 8003856:	d9c2      	bls.n	80037de <RS485_readLiquidLevelTransmitter+0x42>
	}
	return -32767;
 8003858:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003874 <RS485_readLiquidLevelTransmitter+0xd8>
 800385c:	eef0 7a47 	vmov.f32	s15, s14
}
 8003860:	eeb0 0a67 	vmov.f32	s0, s15
 8003864:	3740      	adds	r7, #64	; 0x40
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20001120 	.word	0x20001120
 8003870:	42c80000 	.word	0x42c80000
 8003874:	c6fffe00 	.word	0xc6fffe00

08003878 <Sensor_getADCValue>:

float Sensor_getADCValue(uint8_t channel)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)Sensor_ADCval, 2);
 8003882:	2202      	movs	r2, #2
 8003884:	49a6      	ldr	r1, [pc, #664]	; (8003b20 <Sensor_getADCValue+0x2a8>)
 8003886:	48a7      	ldr	r0, [pc, #668]	; (8003b24 <Sensor_getADCValue+0x2ac>)
 8003888:	f001 f85c 	bl	8004944 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 800388c:	2032      	movs	r0, #50	; 0x32
 800388e:	f000 fe37 	bl	8004500 <HAL_Delay>
	// Lay NSAMPLE mau
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e00d      	b.n	80038b4 <Sensor_getADCValue+0x3c>
	{
		ADC_ArrayVal[i] = Sensor_ADCval[channel];
 8003898:	79fa      	ldrb	r2, [r7, #7]
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	49a0      	ldr	r1, [pc, #640]	; (8003b20 <Sensor_getADCValue+0x2a8>)
 800389e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80038a2:	4aa1      	ldr	r2, [pc, #644]	; (8003b28 <Sensor_getADCValue+0x2b0>)
 80038a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_Delay(2);
 80038a8:	2002      	movs	r0, #2
 80038aa:	f000 fe29 	bl	8004500 <HAL_Delay>
	for(uint8_t i=0; i<NSAMPLE; i++)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	3301      	adds	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b31      	cmp	r3, #49	; 0x31
 80038b8:	d9ee      	bls.n	8003898 <Sensor_getADCValue+0x20>
	}
	//Sap xep theo gia tri tang dan
	insertionSort(ADC_ArrayVal, NSAMPLE);
 80038ba:	2132      	movs	r1, #50	; 0x32
 80038bc:	489a      	ldr	r0, [pc, #616]	; (8003b28 <Sensor_getADCValue+0x2b0>)
 80038be:	f000 fa3d 	bl	8003d3c <insertionSort>
	// Tinh trung binh gia tri khoang giua
	ADC_Count = ADC_Avr = 0;
 80038c2:	4b9a      	ldr	r3, [pc, #616]	; (8003b2c <Sensor_getADCValue+0x2b4>)
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	4b99      	ldr	r3, [pc, #612]	; (8003b30 <Sensor_getADCValue+0x2b8>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = NSAMPLE/4+1; i < NSAMPLE*3/4+1; i++)
 80038d0:	230d      	movs	r3, #13
 80038d2:	73bb      	strb	r3, [r7, #14]
 80038d4:	e018      	b.n	8003908 <Sensor_getADCValue+0x90>
	{
		ADC_Avr += ADC_ArrayVal[i];
 80038d6:	7bbb      	ldrb	r3, [r7, #14]
 80038d8:	4a93      	ldr	r2, [pc, #588]	; (8003b28 <Sensor_getADCValue+0x2b0>)
 80038da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038e6:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <Sensor_getADCValue+0x2b4>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f0:	4b8e      	ldr	r3, [pc, #568]	; (8003b2c <Sensor_getADCValue+0x2b4>)
 80038f2:	edc3 7a00 	vstr	s15, [r3]
		ADC_Count++;
 80038f6:	4b8e      	ldr	r3, [pc, #568]	; (8003b30 <Sensor_getADCValue+0x2b8>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	3301      	adds	r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4b8c      	ldr	r3, [pc, #560]	; (8003b30 <Sensor_getADCValue+0x2b8>)
 8003900:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = NSAMPLE/4+1; i < NSAMPLE*3/4+1; i++)
 8003902:	7bbb      	ldrb	r3, [r7, #14]
 8003904:	3301      	adds	r3, #1
 8003906:	73bb      	strb	r3, [r7, #14]
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	2b25      	cmp	r3, #37	; 0x25
 800390c:	d9e3      	bls.n	80038d6 <Sensor_getADCValue+0x5e>
	}
	ADC_Avr /= ADC_Count;
 800390e:	4b87      	ldr	r3, [pc, #540]	; (8003b2c <Sensor_getADCValue+0x2b4>)
 8003910:	edd3 6a00 	vldr	s13, [r3]
 8003914:	4b86      	ldr	r3, [pc, #536]	; (8003b30 <Sensor_getADCValue+0x2b8>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003924:	4b81      	ldr	r3, [pc, #516]	; (8003b2c <Sensor_getADCValue+0x2b4>)
 8003926:	edc3 7a00 	vstr	s15, [r3]
	Sensor_Current = (ADC_Avr*VOLPOWER/4095)*10;
 800392a:	4b80      	ldr	r3, [pc, #512]	; (8003b2c <Sensor_getADCValue+0x2b4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fe0a 	bl	8000548 <__aeabi_f2d>
 8003934:	a36a      	add	r3, pc, #424	; (adr r3, 8003ae0 <Sensor_getADCValue+0x268>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f7fc fe5d 	bl	80005f8 <__aeabi_dmul>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4610      	mov	r0, r2
 8003944:	4619      	mov	r1, r3
 8003946:	a368      	add	r3, pc, #416	; (adr r3, 8003ae8 <Sensor_getADCValue+0x270>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f7fc ff7e 	bl	800084c <__aeabi_ddiv>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4610      	mov	r0, r2
 8003956:	4619      	mov	r1, r3
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	4b75      	ldr	r3, [pc, #468]	; (8003b34 <Sensor_getADCValue+0x2bc>)
 800395e:	f7fc fe4b 	bl	80005f8 <__aeabi_dmul>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f7fd f91d 	bl	8000ba8 <__aeabi_d2f>
 800396e:	4603      	mov	r3, r0
 8003970:	4a71      	ldr	r2, [pc, #452]	; (8003b38 <Sensor_getADCValue+0x2c0>)
 8003972:	6013      	str	r3, [r2, #0]
	ADC_Count = ADC_Avr = 0;
 8003974:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <Sensor_getADCValue+0x2b4>)
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	4b6c      	ldr	r3, [pc, #432]	; (8003b30 <Sensor_getADCValue+0x2b8>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003982:	2300      	movs	r3, #0
 8003984:	737b      	strb	r3, [r7, #13]
 8003986:	e007      	b.n	8003998 <Sensor_getADCValue+0x120>
	{
		ADC_ArrayVal[i] = 0;
 8003988:	7b7b      	ldrb	r3, [r7, #13]
 800398a:	4a67      	ldr	r2, [pc, #412]	; (8003b28 <Sensor_getADCValue+0x2b0>)
 800398c:	2100      	movs	r1, #0
 800398e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003992:	7b7b      	ldrb	r3, [r7, #13]
 8003994:	3301      	adds	r3, #1
 8003996:	737b      	strb	r3, [r7, #13]
 8003998:	7b7b      	ldrb	r3, [r7, #13]
 800399a:	2b31      	cmp	r3, #49	; 0x31
 800399c:	d9f4      	bls.n	8003988 <Sensor_getADCValue+0x110>
	}
	HAL_ADC_Stop_DMA(&hadc2);
 800399e:	4861      	ldr	r0, [pc, #388]	; (8003b24 <Sensor_getADCValue+0x2ac>)
 80039a0:	f001 f8ec 	bl	8004b7c <HAL_ADC_Stop_DMA>
	HAL_Delay(10);
 80039a4:	200a      	movs	r0, #10
 80039a6:	f000 fdab 	bl	8004500 <HAL_Delay>
	if(channel == 0)
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d13f      	bne.n	8003a30 <Sensor_getADCValue+0x1b8>
	{
		Sensor_CalibCurrent = -0.00008*Sensor_Current*Sensor_Current + \
 80039b0:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <Sensor_getADCValue+0x2c0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fdc7 	bl	8000548 <__aeabi_f2d>
 80039ba:	a34d      	add	r3, pc, #308	; (adr r3, 8003af0 <Sensor_getADCValue+0x278>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fe1a 	bl	80005f8 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <Sensor_getADCValue+0x2c0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fdb9 	bl	8000548 <__aeabi_f2d>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4620      	mov	r0, r4
 80039dc:	4629      	mov	r1, r5
 80039de:	f7fc fe0b 	bl	80005f8 <__aeabi_dmul>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4614      	mov	r4, r2
 80039e8:	461d      	mov	r5, r3
													1.0024*Sensor_Current + 0.0137;
 80039ea:	4b53      	ldr	r3, [pc, #332]	; (8003b38 <Sensor_getADCValue+0x2c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fc fdaa 	bl	8000548 <__aeabi_f2d>
 80039f4:	a340      	add	r3, pc, #256	; (adr r3, 8003af8 <Sensor_getADCValue+0x280>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f7fc fdfd 	bl	80005f8 <__aeabi_dmul>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
		Sensor_CalibCurrent = -0.00008*Sensor_Current*Sensor_Current + \
 8003a02:	4620      	mov	r0, r4
 8003a04:	4629      	mov	r1, r5
 8003a06:	f7fc fc41 	bl	800028c <__adddf3>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
													1.0024*Sensor_Current + 0.0137;
 8003a12:	a33b      	add	r3, pc, #236	; (adr r3, 8003b00 <Sensor_getADCValue+0x288>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc fc38 	bl	800028c <__adddf3>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	f7fd f8c0 	bl	8000ba8 <__aeabi_d2f>
 8003a28:	4603      	mov	r3, r0
		Sensor_CalibCurrent = -0.00008*Sensor_Current*Sensor_Current + \
 8003a2a:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <Sensor_getADCValue+0x2c4>)
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e041      	b.n	8003ab4 <Sensor_getADCValue+0x23c>
	}
	else if(channel == 1)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d13e      	bne.n	8003ab4 <Sensor_getADCValue+0x23c>
	{
		Sensor_CalibCurrent = -0.0001*Sensor_Current*Sensor_Current + \
 8003a36:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <Sensor_getADCValue+0x2c0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fc fd84 	bl	8000548 <__aeabi_f2d>
 8003a40:	a331      	add	r3, pc, #196	; (adr r3, 8003b08 <Sensor_getADCValue+0x290>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f7fc fdd7 	bl	80005f8 <__aeabi_dmul>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4614      	mov	r4, r2
 8003a50:	461d      	mov	r5, r3
 8003a52:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <Sensor_getADCValue+0x2c0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fc fd76 	bl	8000548 <__aeabi_f2d>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4620      	mov	r0, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	f7fc fdc8 	bl	80005f8 <__aeabi_dmul>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	461d      	mov	r5, r3
													1.0013*Sensor_Current + 0.0066;
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <Sensor_getADCValue+0x2c0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fc fd67 	bl	8000548 <__aeabi_f2d>
 8003a7a:	a325      	add	r3, pc, #148	; (adr r3, 8003b10 <Sensor_getADCValue+0x298>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fc fdba 	bl	80005f8 <__aeabi_dmul>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
		Sensor_CalibCurrent = -0.0001*Sensor_Current*Sensor_Current + \
 8003a88:	4620      	mov	r0, r4
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f7fc fbfe 	bl	800028c <__adddf3>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
													1.0013*Sensor_Current + 0.0066;
 8003a98:	a31f      	add	r3, pc, #124	; (adr r3, 8003b18 <Sensor_getADCValue+0x2a0>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fbf5 	bl	800028c <__adddf3>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7fd f87d 	bl	8000ba8 <__aeabi_d2f>
 8003aae:	4603      	mov	r3, r0
		Sensor_CalibCurrent = -0.0001*Sensor_Current*Sensor_Current + \
 8003ab0:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <Sensor_getADCValue+0x2c4>)
 8003ab2:	6013      	str	r3, [r2, #0]
	}
	if((int)Sensor_CalibCurrent != 0) return Sensor_CalibCurrent;
 8003ab4:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <Sensor_getADCValue+0x2c4>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003abe:	ee17 3a90 	vmov	r3, s15
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <Sensor_getADCValue+0x254>
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <Sensor_getADCValue+0x2c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	e001      	b.n	8003ad0 <Sensor_getADCValue+0x258>
	return 0.0;
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	ee07 3a90 	vmov	s15, r3
}
 8003ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	66666666 	.word	0x66666666
 8003ae4:	400a6666 	.word	0x400a6666
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	40affe00 	.word	0x40affe00
 8003af0:	88e368f1 	.word	0x88e368f1
 8003af4:	bf14f8b5 	.word	0xbf14f8b5
 8003af8:	95182a99 	.word	0x95182a99
 8003afc:	3ff009d4 	.word	0x3ff009d4
 8003b00:	dfa43fe6 	.word	0xdfa43fe6
 8003b04:	3f8c0ebe 	.word	0x3f8c0ebe
 8003b08:	eb1c432d 	.word	0xeb1c432d
 8003b0c:	bf1a36e2 	.word	0xbf1a36e2
 8003b10:	2617c1be 	.word	0x2617c1be
 8003b14:	3ff00553 	.word	0x3ff00553
 8003b18:	02752546 	.word	0x02752546
 8003b1c:	3f7b089a 	.word	0x3f7b089a
 8003b20:	200010c4 	.word	0x200010c4
 8003b24:	200011a4 	.word	0x200011a4
 8003b28:	20001054 	.word	0x20001054
 8003b2c:	200010b8 	.word	0x200010b8
 8003b30:	20001050 	.word	0x20001050
 8003b34:	40240000 	.word	0x40240000
 8003b38:	200010bc 	.word	0x200010bc
 8003b3c:	200010c0 	.word	0x200010c0

08003b40 <ADC_map>:

float ADC_map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	ed87 0a05 	vstr	s0, [r7, #20]
 8003b4a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003b4e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003b52:	edc7 1a02 	vstr	s3, [r7, #8]
 8003b56:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003b5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b66:	edd7 6a01 	vldr	s13, [r7, #4]
 8003b6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b76:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <PWR_ctrlPwrSensor>:

void PWR_ctrlPwrSensor(Pwr_State status)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CTR_PWR_SS_GPIO_Port, CTR_PWR_SS_Pin, status? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bbc:	f002 fc0e 	bl	80063dc <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8003bc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003bc4:	f000 fc9c 	bl	8004500 <HAL_Delay>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <PWR_getPwrSupply>:

void PWR_getPwrSupply(uint8_t channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	71fb      	strb	r3, [r7, #7]
	HAL_ADC_Start_DMA(&hadc4, (uint32_t*) ADC_value, 2);
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4950      	ldr	r1, [pc, #320]	; (8003d20 <PWR_getPwrSupply+0x150>)
 8003bde:	4851      	ldr	r0, [pc, #324]	; (8003d24 <PWR_getPwrSupply+0x154>)
 8003be0:	f000 feb0 	bl	8004944 <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8003be4:	2001      	movs	r0, #1
 8003be6:	f000 fc8b 	bl	8004500 <HAL_Delay>
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	e00d      	b.n	8003c0c <PWR_getPwrSupply+0x3c>
	{
		ADC_ArrayVal[i] = ADC_value[channel];
 8003bf0:	79fa      	ldrb	r2, [r7, #7]
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	494a      	ldr	r1, [pc, #296]	; (8003d20 <PWR_getPwrSupply+0x150>)
 8003bf6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003bfa:	4a4b      	ldr	r2, [pc, #300]	; (8003d28 <PWR_getPwrSupply+0x158>)
 8003bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_Delay(2);
 8003c00:	2002      	movs	r0, #2
 8003c02:	f000 fc7d 	bl	8004500 <HAL_Delay>
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b31      	cmp	r3, #49	; 0x31
 8003c10:	d9ee      	bls.n	8003bf0 <PWR_getPwrSupply+0x20>
	}
	//Sap xep theo gia tri tang dan
	insertionSort(ADC_ArrayVal, NSAMPLE);
 8003c12:	2132      	movs	r1, #50	; 0x32
 8003c14:	4844      	ldr	r0, [pc, #272]	; (8003d28 <PWR_getPwrSupply+0x158>)
 8003c16:	f000 f891 	bl	8003d3c <insertionSort>
	// Tinh trung binh gia tri khoang giua
	ADC_Count = ADC_Avr = 0;
 8003c1a:	4b44      	ldr	r3, [pc, #272]	; (8003d2c <PWR_getPwrSupply+0x15c>)
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <PWR_getPwrSupply+0x160>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = NSAMPLE/4+1; i < NSAMPLE*3/4+1; i++)
 8003c28:	230d      	movs	r3, #13
 8003c2a:	73bb      	strb	r3, [r7, #14]
 8003c2c:	e018      	b.n	8003c60 <PWR_getPwrSupply+0x90>
	{
		ADC_Avr += ADC_ArrayVal[i];
 8003c2e:	7bbb      	ldrb	r3, [r7, #14]
 8003c30:	4a3d      	ldr	r2, [pc, #244]	; (8003d28 <PWR_getPwrSupply+0x158>)
 8003c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <PWR_getPwrSupply+0x15c>)
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c48:	4b38      	ldr	r3, [pc, #224]	; (8003d2c <PWR_getPwrSupply+0x15c>)
 8003c4a:	edc3 7a00 	vstr	s15, [r3]
		ADC_Count++;
 8003c4e:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <PWR_getPwrSupply+0x160>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <PWR_getPwrSupply+0x160>)
 8003c58:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = NSAMPLE/4+1; i < NSAMPLE*3/4+1; i++)
 8003c5a:	7bbb      	ldrb	r3, [r7, #14]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	73bb      	strb	r3, [r7, #14]
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	2b25      	cmp	r3, #37	; 0x25
 8003c64:	d9e3      	bls.n	8003c2e <PWR_getPwrSupply+0x5e>
	}
	ADC_Avr /= ADC_Count;
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <PWR_getPwrSupply+0x15c>)
 8003c68:	edd3 6a00 	vldr	s13, [r3]
 8003c6c:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <PWR_getPwrSupply+0x160>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <PWR_getPwrSupply+0x15c>)
 8003c7e:	edc3 7a00 	vstr	s15, [r3]
	Voltage = CALCULATE_VIN(ADC_Avr);
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <PWR_getPwrSupply+0x15c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc fc5e 	bl	8000548 <__aeabi_f2d>
 8003c8c:	a320      	add	r3, pc, #128	; (adr r3, 8003d10 <PWR_getPwrSupply+0x140>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f7fc fcb1 	bl	80005f8 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <PWR_getPwrSupply+0x164>)
 8003ca4:	f7fc fca8 	bl	80005f8 <__aeabi_dmul>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	a319      	add	r3, pc, #100	; (adr r3, 8003d18 <PWR_getPwrSupply+0x148>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fdc9 	bl	800084c <__aeabi_ddiv>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fc ff71 	bl	8000ba8 <__aeabi_d2f>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <PWR_getPwrSupply+0x168>)
 8003cca:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	737b      	strb	r3, [r7, #13]
 8003cd0:	e007      	b.n	8003ce2 <PWR_getPwrSupply+0x112>
	{
		ADC_ArrayVal[i] = 0;
 8003cd2:	7b7b      	ldrb	r3, [r7, #13]
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <PWR_getPwrSupply+0x158>)
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<NSAMPLE; i++)
 8003cdc:	7b7b      	ldrb	r3, [r7, #13]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	737b      	strb	r3, [r7, #13]
 8003ce2:	7b7b      	ldrb	r3, [r7, #13]
 8003ce4:	2b31      	cmp	r3, #49	; 0x31
 8003ce6:	d9f4      	bls.n	8003cd2 <PWR_getPwrSupply+0x102>
	}
	ADC_Count = ADC_Avr = 0;
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <PWR_getPwrSupply+0x15c>)
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <PWR_getPwrSupply+0x160>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc4);
 8003cf6:	480b      	ldr	r0, [pc, #44]	; (8003d24 <PWR_getPwrSupply+0x154>)
 8003cf8:	f000 ff40 	bl	8004b7c <HAL_ADC_Stop_DMA>
	HAL_Delay(10);
 8003cfc:	200a      	movs	r0, #10
 8003cfe:	f000 fbff 	bl	8004500 <HAL_Delay>
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	f3af 8000 	nop.w
 8003d10:	66666666 	.word	0x66666666
 8003d14:	400a6666 	.word	0x400a6666
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	40e3fec0 	.word	0x40e3fec0
 8003d20:	20001044 	.word	0x20001044
 8003d24:	2000133c 	.word	0x2000133c
 8003d28:	20001054 	.word	0x20001054
 8003d2c:	200010b8 	.word	0x200010b8
 8003d30:	20001050 	.word	0x20001050
 8003d34:	404c8000 	.word	0x404c8000
 8003d38:	2000104c 	.word	0x2000104c

08003d3c <insertionSort>:

void insertionSort(uint16_t arr[], int n)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	int i, key, j;
	for (i = 1; i < n; i++)
 8003d46:	2301      	movs	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e02e      	b.n	8003daa <insertionSort+0x6e>
	{
		key = arr[i];
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4413      	add	r3, r2
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]
		j = i - 1;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	613b      	str	r3, [r7, #16]
		while (j >= 0 && arr[j] > key) {
 8003d5e:	e00d      	b.n	8003d7c <insertionSort+0x40>
				arr[j + 1] = arr[j];
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	441a      	add	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	440b      	add	r3, r1
 8003d72:	8812      	ldrh	r2, [r2, #0]
 8003d74:	801a      	strh	r2, [r3, #0]
				j = j - 1;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]
		while (j >= 0 && arr[j] > key) {
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	db08      	blt.n	8003d94 <insertionSort+0x58>
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4293      	cmp	r3, r2
 8003d92:	dbe5      	blt.n	8003d60 <insertionSort+0x24>
		}
		arr[j + 1] = key;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	3301      	adds	r3, #1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	b292      	uxth	r2, r2
 8003da2:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < n; i++)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	3301      	adds	r3, #1
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	dbcc      	blt.n	8003d4c <insertionSort+0x10>
	}
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <insertionSort_2>:

void insertionSort_2(float arr[], int n)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	int i, j;
	float key;
	for (i = 1; i < n; i++)
 8003dca:	2301      	movs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e031      	b.n	8003e34 <insertionSort_2+0x74>
	{
		key = arr[i];
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
		j = i - 1;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	613b      	str	r3, [r7, #16]
		while (j >= 0 && arr[j] > key) {
 8003de2:	e00d      	b.n	8003e00 <insertionSort_2+0x40>
				arr[j + 1] = arr[j];
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	441a      	add	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	3301      	adds	r3, #1
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	440b      	add	r3, r1
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	601a      	str	r2, [r3, #0]
				j = j - 1;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
		while (j >= 0 && arr[j] > key) {
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db0c      	blt.n	8003e20 <insertionSort_2+0x60>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1e:	d4e1      	bmi.n	8003de4 <insertionSort_2+0x24>
		}
		arr[j + 1] = key;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	3301      	adds	r3, #1
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	601a      	str	r2, [r3, #0]
	for (i = 1; i < n; i++)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	3301      	adds	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	dbc9      	blt.n	8003dd0 <insertionSort_2+0x10>
	}
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e4e:	b672      	cpsid	i
}
 8003e50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e52:	e7fe      	b.n	8003e52 <Error_Handler+0x8>

08003e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_MspInit+0x44>)
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <HAL_MspInit+0x44>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6193      	str	r3, [r2, #24]
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_MspInit+0x44>)
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_MspInit+0x44>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_MspInit+0x44>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	61d3      	str	r3, [r2, #28]
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_MspInit+0x44>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000

08003e9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a53      	ldr	r2, [pc, #332]	; (8004008 <HAL_ADC_MspInit+0x16c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d14d      	bne.n	8003f5a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ebe:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6153      	str	r3, [r2, #20]
 8003eca:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed6:	4b4d      	ldr	r3, [pc, #308]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4a4c      	ldr	r2, [pc, #304]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee0:	6153      	str	r3, [r2, #20]
 8003ee2:	4b4a      	ldr	r3, [pc, #296]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003eee:	2360      	movs	r3, #96	; 0x60
 8003ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003efa:	f107 031c 	add.w	r3, r7, #28
 8003efe:	4619      	mov	r1, r3
 8003f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f04:	f002 f8d8 	bl	80060b8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8003f08:	4b41      	ldr	r3, [pc, #260]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f0a:	4a42      	ldr	r2, [pc, #264]	; (8004014 <HAL_ADC_MspInit+0x178>)
 8003f0c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f0e:	4b40      	ldr	r3, [pc, #256]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f14:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003f1a:	4b3d      	ldr	r3, [pc, #244]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f1c:	2280      	movs	r2, #128	; 0x80
 8003f1e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f20:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f26:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f28:	4b39      	ldr	r3, [pc, #228]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f2e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003f30:	4b37      	ldr	r3, [pc, #220]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f32:	2220      	movs	r2, #32
 8003f34:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003f36:	4b36      	ldr	r3, [pc, #216]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003f3c:	4834      	ldr	r0, [pc, #208]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f3e:	f001 fcb8 	bl	80058b2 <HAL_DMA_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8003f48:	f7ff ff7f 	bl	8003e4a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a30      	ldr	r2, [pc, #192]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
 8003f52:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <HAL_ADC_MspInit+0x174>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8003f58:	e051      	b.n	8003ffe <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC4)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <HAL_ADC_MspInit+0x17c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d14c      	bne.n	8003ffe <HAL_ADC_MspInit+0x162>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003f64:	4b29      	ldr	r3, [pc, #164]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	4a28      	ldr	r2, [pc, #160]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f6e:	6153      	str	r3, [r2, #20]
 8003f70:	4b26      	ldr	r3, [pc, #152]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7c:	4b23      	ldr	r3, [pc, #140]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	4a22      	ldr	r2, [pc, #136]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f86:	6153      	str	r3, [r2, #20]
 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_ADC_MspInit+0x170>)
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_SOLAR_Pin|ADC_VIN_Pin;
 8003f94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa2:	f107 031c 	add.w	r3, r7, #28
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	481c      	ldr	r0, [pc, #112]	; (800401c <HAL_ADC_MspInit+0x180>)
 8003faa:	f002 f885 	bl	80060b8 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8003fae:	4b1c      	ldr	r3, [pc, #112]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <HAL_ADC_MspInit+0x188>)
 8003fb2:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fba:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003fc0:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fc2:	2280      	movs	r2, #128	; 0x80
 8003fc4:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fcc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fd4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fd8:	2220      	movs	r2, #32
 8003fda:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8003fe2:	480f      	ldr	r0, [pc, #60]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003fe4:	f001 fc65 	bl	80058b2 <HAL_DMA_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_ADC_MspInit+0x156>
      Error_Handler();
 8003fee:	f7ff ff2c 	bl	8003e4a <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff8:	4a09      	ldr	r2, [pc, #36]	; (8004020 <HAL_ADC_MspInit+0x184>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003ffe:	bf00      	nop
 8004000:	3730      	adds	r7, #48	; 0x30
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	50000100 	.word	0x50000100
 800400c:	40021000 	.word	0x40021000
 8004010:	2000138c 	.word	0x2000138c
 8004014:	40020408 	.word	0x40020408
 8004018:	50000500 	.word	0x50000500
 800401c:	48000400 	.word	0x48000400
 8004020:	200010dc 	.word	0x200010dc
 8004024:	4002041c 	.word	0x4002041c

08004028 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a10      	ldr	r2, [pc, #64]	; (8004078 <HAL_RTC_MspInit+0x50>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d119      	bne.n	800406e <HAL_RTC_MspInit+0x46>
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	fa93 f3a3 	rbit	r3, r3
 8004046:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004048:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <HAL_RTC_MspInit+0x54>)
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	461a      	mov	r2, r3
 800405a:	2301      	movs	r3, #1
 800405c:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800405e:	2200      	movs	r2, #0
 8004060:	2100      	movs	r1, #0
 8004062:	2029      	movs	r0, #41	; 0x29
 8004064:	f001 fbef 	bl	8005846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004068:	2029      	movs	r0, #41	; 0x29
 800406a:	f001 fc08 	bl	800587e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40002800 	.word	0x40002800
 800407c:	10908100 	.word	0x10908100

08004080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004088:	f107 031c 	add.w	r3, r7, #28
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a33      	ldr	r2, [pc, #204]	; (800416c <HAL_UART_MspInit+0xec>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d131      	bne.n	8004106 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040a2:	4b33      	ldr	r3, [pc, #204]	; (8004170 <HAL_UART_MspInit+0xf0>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4a32      	ldr	r2, [pc, #200]	; (8004170 <HAL_UART_MspInit+0xf0>)
 80040a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ac:	61d3      	str	r3, [r2, #28]
 80040ae:	4b30      	ldr	r3, [pc, #192]	; (8004170 <HAL_UART_MspInit+0xf0>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <HAL_UART_MspInit+0xf0>)
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_UART_MspInit+0xf0>)
 80040c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c4:	6153      	str	r3, [r2, #20]
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <HAL_UART_MspInit+0xf0>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_RX_Pin|SIM_TX_Pin;
 80040d2:	230c      	movs	r3, #12
 80040d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d6:	2302      	movs	r3, #2
 80040d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040de:	2303      	movs	r3, #3
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040e2:	2307      	movs	r3, #7
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e6:	f107 031c 	add.w	r3, r7, #28
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040f0:	f001 ffe2 	bl	80060b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040f4:	2200      	movs	r2, #0
 80040f6:	2100      	movs	r1, #0
 80040f8:	2026      	movs	r0, #38	; 0x26
 80040fa:	f001 fba4 	bl	8005846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040fe:	2026      	movs	r0, #38	; 0x26
 8004100:	f001 fbbd 	bl	800587e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004104:	e02d      	b.n	8004162 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1a      	ldr	r2, [pc, #104]	; (8004174 <HAL_UART_MspInit+0xf4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d128      	bne.n	8004162 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004110:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_UART_MspInit+0xf0>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a16      	ldr	r2, [pc, #88]	; (8004170 <HAL_UART_MspInit+0xf0>)
 8004116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800411a:	61d3      	str	r3, [r2, #28]
 800411c:	4b14      	ldr	r3, [pc, #80]	; (8004170 <HAL_UART_MspInit+0xf0>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <HAL_UART_MspInit+0xf0>)
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	4a10      	ldr	r2, [pc, #64]	; (8004170 <HAL_UART_MspInit+0xf0>)
 800412e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004132:	6153      	str	r3, [r2, #20]
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_UART_MspInit+0xf0>)
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 8004140:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800414e:	2303      	movs	r3, #3
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004152:	2307      	movs	r3, #7
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004156:	f107 031c 	add.w	r3, r7, #28
 800415a:	4619      	mov	r1, r3
 800415c:	4806      	ldr	r0, [pc, #24]	; (8004178 <HAL_UART_MspInit+0xf8>)
 800415e:	f001 ffab 	bl	80060b8 <HAL_GPIO_Init>
}
 8004162:	bf00      	nop
 8004164:	3730      	adds	r7, #48	; 0x30
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40004400 	.word	0x40004400
 8004170:	40021000 	.word	0x40021000
 8004174:	40004800 	.word	0x40004800
 8004178:	48000400 	.word	0x48000400

0800417c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004180:	e7fe      	b.n	8004180 <NMI_Handler+0x4>

08004182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004186:	e7fe      	b.n	8004186 <HardFault_Handler+0x4>

08004188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800418c:	e7fe      	b.n	800418c <MemManage_Handler+0x4>

0800418e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004192:	e7fe      	b.n	8004192 <BusFault_Handler+0x4>

08004194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004198:	e7fe      	b.n	8004198 <UsageFault_Handler+0x4>

0800419a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041c8:	f000 f97a 	bl	80044c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80041d4:	2002      	movs	r0, #2
 80041d6:	f002 f919 	bl	800640c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041e4:	4802      	ldr	r0, [pc, #8]	; (80041f0 <USART2_IRQHandler+0x10>)
 80041e6:	f004 faf1 	bl	80087cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200012b8 	.word	0x200012b8

080041f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80041f8:	4802      	ldr	r0, [pc, #8]	; (8004204 <RTC_Alarm_IRQHandler+0x10>)
 80041fa:	f003 fff7 	bl	80081ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20001264 	.word	0x20001264

08004208 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800420c:	4802      	ldr	r0, [pc, #8]	; (8004218 <DMA2_Channel1_IRQHandler+0x10>)
 800420e:	f001 fc6d 	bl	8005aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	2000138c 	.word	0x2000138c

0800421c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <DMA2_Channel2_IRQHandler+0x10>)
 8004222:	f001 fc63 	bl	8005aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200010dc 	.word	0x200010dc

08004230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
	return 1;
 8004234:	2301      	movs	r3, #1
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <_kill>:

int _kill(int pid, int sig)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800424a:	f005 f9d1 	bl	80095f0 <__errno>
 800424e:	4603      	mov	r3, r0
 8004250:	2216      	movs	r2, #22
 8004252:	601a      	str	r2, [r3, #0]
	return -1;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_exit>:

void _exit (int status)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004268:	f04f 31ff 	mov.w	r1, #4294967295
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ffe7 	bl	8004240 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004272:	e7fe      	b.n	8004272 <_exit+0x12>

08004274 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e00a      	b.n	800429c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004286:	f3af 8000 	nop.w
 800428a:	4601      	mov	r1, r0
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	60ba      	str	r2, [r7, #8]
 8004292:	b2ca      	uxtb	r2, r1
 8004294:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	3301      	adds	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	dbf0      	blt.n	8004286 <_read+0x12>
	}

return len;
 80042a4:	687b      	ldr	r3, [r7, #4]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e009      	b.n	80042d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	60ba      	str	r2, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	3301      	adds	r3, #1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	dbf1      	blt.n	80042c0 <_write+0x12>
	}
	return len;
 80042dc:	687b      	ldr	r3, [r7, #4]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <_close>:

int _close(int file)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
	return -1;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800430e:	605a      	str	r2, [r3, #4]
	return 0;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <_isatty>:

int _isatty(int file)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
	return 1;
 8004326:	2301      	movs	r3, #1
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
	return 0;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <_sbrk+0x5c>)
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <_sbrk+0x60>)
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <_sbrk+0x64>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <_sbrk+0x64>)
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <_sbrk+0x68>)
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <_sbrk+0x64>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d207      	bcs.n	8004390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004380:	f005 f936 	bl	80095f0 <__errno>
 8004384:	4603      	mov	r3, r0
 8004386:	220c      	movs	r2, #12
 8004388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
 800438e:	e009      	b.n	80043a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <_sbrk+0x64>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <_sbrk+0x64>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <_sbrk+0x64>)
 80043a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	2000a000 	.word	0x2000a000
 80043b0:	00000400 	.word	0x00000400
 80043b4:	200010cc 	.word	0x200010cc
 80043b8:	20001408 	.word	0x20001408

080043bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <SystemInit+0x20>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	4a05      	ldr	r2, [pc, #20]	; (80043dc <SystemInit+0x20>)
 80043c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80043e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004418 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043e4:	480d      	ldr	r0, [pc, #52]	; (800441c <LoopForever+0x6>)
  ldr r1, =_edata
 80043e6:	490e      	ldr	r1, [pc, #56]	; (8004420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043e8:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <LoopForever+0xe>)
  movs r3, #0
 80043ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043ec:	e002      	b.n	80043f4 <LoopCopyDataInit>

080043ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043f2:	3304      	adds	r3, #4

080043f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043f8:	d3f9      	bcc.n	80043ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043fa:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043fc:	4c0b      	ldr	r4, [pc, #44]	; (800442c <LoopForever+0x16>)
  movs r3, #0
 80043fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004400:	e001      	b.n	8004406 <LoopFillZerobss>

08004402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004404:	3204      	adds	r2, #4

08004406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004408:	d3fb      	bcc.n	8004402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800440a:	f7ff ffd7 	bl	80043bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800440e:	f005 f8f5 	bl	80095fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004412:	f7fd fb21 	bl	8001a58 <main>

08004416 <LoopForever>:

LoopForever:
    b LoopForever
 8004416:	e7fe      	b.n	8004416 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004418:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800441c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004420:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8004424:	0800cd44 	.word	0x0800cd44
  ldr r2, =_sbss
 8004428:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 800442c:	20001408 	.word	0x20001408

08004430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004430:	e7fe      	b.n	8004430 <ADC1_2_IRQHandler>
	...

08004434 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_Init+0x28>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_Init+0x28>)
 800443e:	f043 0310 	orr.w	r3, r3, #16
 8004442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004444:	2003      	movs	r0, #3
 8004446:	f001 f9f3 	bl	8005830 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800444a:	2000      	movs	r0, #0
 800444c:	f000 f808 	bl	8004460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004450:	f7ff fd00 	bl	8003e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40022000 	.word	0x40022000

08004460 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_InitTick+0x54>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_InitTick+0x58>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4619      	mov	r1, r3
 8004472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004476:	fbb3 f3f1 	udiv	r3, r3, r1
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	4618      	mov	r0, r3
 8004480:	f001 fa0b 	bl	800589a <HAL_SYSTICK_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e00e      	b.n	80044ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b0f      	cmp	r3, #15
 8004492:	d80a      	bhi.n	80044aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004494:	2200      	movs	r2, #0
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	f001 f9d3 	bl	8005846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044a0:	4a06      	ldr	r2, [pc, #24]	; (80044bc <HAL_InitTick+0x5c>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000104 	.word	0x20000104
 80044b8:	2000010c 	.word	0x2000010c
 80044bc:	20000108 	.word	0x20000108

080044c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_IncTick+0x20>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_IncTick+0x24>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_IncTick+0x24>)
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	2000010c 	.word	0x2000010c
 80044e4:	200013d0 	.word	0x200013d0

080044e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_GetTick+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	200013d0 	.word	0x200013d0

08004500 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004508:	f7ff ffee 	bl	80044e8 <HAL_GetTick>
 800450c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d005      	beq.n	8004526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_Delay+0x44>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004526:	bf00      	nop
 8004528:	f7ff ffde 	bl	80044e8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	429a      	cmp	r2, r3
 8004536:	d8f7      	bhi.n	8004528 <HAL_Delay+0x28>
  {
  }
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	2000010c 	.word	0x2000010c

08004548 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b09a      	sub	sp, #104	; 0x68
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e1c9      	b.n	8004938 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d176      	bne.n	80046a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d152      	bne.n	8004664 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff fc5f 	bl	8003e9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d13b      	bne.n	8004664 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 ff41 	bl	8005474 <ADC_Disable>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d12f      	bne.n	8004664 <HAL_ADC_Init+0xe0>
 8004604:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004608:	2b00      	cmp	r3, #0
 800460a:	d12b      	bne.n	8004664 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004614:	f023 0302 	bic.w	r3, r3, #2
 8004618:	f043 0202 	orr.w	r2, r3, #2
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800462e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800463e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004640:	4b86      	ldr	r3, [pc, #536]	; (800485c <HAL_ADC_Init+0x2d8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a86      	ldr	r2, [pc, #536]	; (8004860 <HAL_ADC_Init+0x2dc>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	0c9a      	lsrs	r2, r3, #18
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004656:	e002      	b.n	800465e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	3b01      	subs	r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f9      	bne.n	8004658 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800467c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004680:	d110      	bne.n	80046a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f023 0312 	bic.w	r3, r3, #18
 800468a:	f043 0210 	orr.w	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f040 8136 	bne.w	800491e <HAL_ADC_Init+0x39a>
 80046b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 8131 	bne.w	800491e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 8129 	bne.w	800491e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046d4:	f043 0202 	orr.w	r2, r3, #2
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e4:	d004      	beq.n	80046f0 <HAL_ADC_Init+0x16c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a5e      	ldr	r2, [pc, #376]	; (8004864 <HAL_ADC_Init+0x2e0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d101      	bne.n	80046f4 <HAL_ADC_Init+0x170>
 80046f0:	4b5d      	ldr	r3, [pc, #372]	; (8004868 <HAL_ADC_Init+0x2e4>)
 80046f2:	e000      	b.n	80046f6 <HAL_ADC_Init+0x172>
 80046f4:	4b5d      	ldr	r3, [pc, #372]	; (800486c <HAL_ADC_Init+0x2e8>)
 80046f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004700:	d102      	bne.n	8004708 <HAL_ADC_Init+0x184>
 8004702:	4b58      	ldr	r3, [pc, #352]	; (8004864 <HAL_ADC_Init+0x2e0>)
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	e01a      	b.n	800473e <HAL_ADC_Init+0x1ba>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a55      	ldr	r2, [pc, #340]	; (8004864 <HAL_ADC_Init+0x2e0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d103      	bne.n	800471a <HAL_ADC_Init+0x196>
 8004712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e011      	b.n	800473e <HAL_ADC_Init+0x1ba>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a54      	ldr	r2, [pc, #336]	; (8004870 <HAL_ADC_Init+0x2ec>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d102      	bne.n	800472a <HAL_ADC_Init+0x1a6>
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_ADC_Init+0x2f0>)
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e009      	b.n	800473e <HAL_ADC_Init+0x1ba>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a51      	ldr	r2, [pc, #324]	; (8004874 <HAL_ADC_Init+0x2f0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d102      	bne.n	800473a <HAL_ADC_Init+0x1b6>
 8004734:	4b4e      	ldr	r3, [pc, #312]	; (8004870 <HAL_ADC_Init+0x2ec>)
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e001      	b.n	800473e <HAL_ADC_Init+0x1ba>
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d108      	bne.n	800475e <HAL_ADC_Init+0x1da>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_ADC_Init+0x1da>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_ADC_Init+0x1dc>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11c      	bne.n	800479e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004764:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_ADC_Init+0x202>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_ADC_Init+0x202>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_ADC_Init+0x204>
 8004786:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	431a      	orrs	r2, r3
 800479a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7e5b      	ldrb	r3, [r3, #25]
 80047a2:	035b      	lsls	r3, r3, #13
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047a8:	2a01      	cmp	r2, #1
 80047aa:	d002      	beq.n	80047b2 <HAL_ADC_Init+0x22e>
 80047ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047b0:	e000      	b.n	80047b4 <HAL_ADC_Init+0x230>
 80047b2:	2200      	movs	r2, #0
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047c4:	4313      	orrs	r3, r2
 80047c6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d11b      	bne.n	800480a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7e5b      	ldrb	r3, [r3, #25]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	3b01      	subs	r3, #1
 80047e0:	045a      	lsls	r2, r3, #17
 80047e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ea:	663b      	str	r3, [r7, #96]	; 0x60
 80047ec:	e00d      	b.n	800480a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	2b01      	cmp	r3, #1
 8004810:	d03a      	beq.n	8004888 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a16      	ldr	r2, [pc, #88]	; (8004870 <HAL_ADC_Init+0x2ec>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_ADC_Init+0x2a2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a14      	ldr	r2, [pc, #80]	; (8004874 <HAL_ADC_Init+0x2f0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d128      	bne.n	8004878 <HAL_ADC_Init+0x2f4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800482e:	d012      	beq.n	8004856 <HAL_ADC_Init+0x2d2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004838:	d00a      	beq.n	8004850 <HAL_ADC_Init+0x2cc>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004842:	d002      	beq.n	800484a <HAL_ADC_Init+0x2c6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	e018      	b.n	800487c <HAL_ADC_Init+0x2f8>
 800484a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800484e:	e015      	b.n	800487c <HAL_ADC_Init+0x2f8>
 8004850:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004854:	e012      	b.n	800487c <HAL_ADC_Init+0x2f8>
 8004856:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800485a:	e00f      	b.n	800487c <HAL_ADC_Init+0x2f8>
 800485c:	20000104 	.word	0x20000104
 8004860:	431bde83 	.word	0x431bde83
 8004864:	50000100 	.word	0x50000100
 8004868:	50000300 	.word	0x50000300
 800486c:	50000700 	.word	0x50000700
 8004870:	50000400 	.word	0x50000400
 8004874:	50000500 	.word	0x50000500
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004880:	4313      	orrs	r3, r2
 8004882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004884:	4313      	orrs	r3, r2
 8004886:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b00      	cmp	r3, #0
 8004894:	d114      	bne.n	80048c0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a4:	f023 0302 	bic.w	r3, r3, #2
 80048a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	7e1b      	ldrb	r3, [r3, #24]
 80048ae:	039a      	lsls	r2, r3, #14
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4313      	orrs	r3, r2
 80048ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048bc:	4313      	orrs	r3, r2
 80048be:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_ADC_Init+0x3bc>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80048d0:	430b      	orrs	r3, r1
 80048d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d10c      	bne.n	80048f6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f023 010f 	bic.w	r1, r3, #15
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	1e5a      	subs	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
 80048f4:	e007      	b.n	8004906 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 020f 	bic.w	r2, r2, #15
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f023 0303 	bic.w	r3, r3, #3
 8004914:	f043 0201 	orr.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40
 800491c:	e00a      	b.n	8004934 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f023 0312 	bic.w	r3, r3, #18
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004934:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004938:	4618      	mov	r0, r3
 800493a:	3768      	adds	r7, #104	; 0x68
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	fff0c007 	.word	0xfff0c007

08004944 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	f040 80f7 	bne.w	8004b52 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_ADC_Start_DMA+0x2e>
 800496e:	2302      	movs	r3, #2
 8004970:	e0f2      	b.n	8004b58 <HAL_ADC_Start_DMA+0x214>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004982:	d004      	beq.n	800498e <HAL_ADC_Start_DMA+0x4a>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a75      	ldr	r2, [pc, #468]	; (8004b60 <HAL_ADC_Start_DMA+0x21c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d109      	bne.n	80049a2 <HAL_ADC_Start_DMA+0x5e>
 800498e:	4b75      	ldr	r3, [pc, #468]	; (8004b64 <HAL_ADC_Start_DMA+0x220>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	e008      	b.n	80049b4 <HAL_ADC_Start_DMA+0x70>
 80049a2:	4b71      	ldr	r3, [pc, #452]	; (8004b68 <HAL_ADC_Start_DMA+0x224>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80c5 	beq.w	8004b44 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fcfc 	bl	80053b8 <ADC_Enable>
 80049c0:	4603      	mov	r3, r0
 80049c2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f040 80b7 	bne.w	8004b3a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049e8:	d004      	beq.n	80049f4 <HAL_ADC_Start_DMA+0xb0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a5c      	ldr	r2, [pc, #368]	; (8004b60 <HAL_ADC_Start_DMA+0x21c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d106      	bne.n	8004a02 <HAL_ADC_Start_DMA+0xbe>
 80049f4:	4b5b      	ldr	r3, [pc, #364]	; (8004b64 <HAL_ADC_Start_DMA+0x220>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <HAL_ADC_Start_DMA+0xde>
 8004a00:	e005      	b.n	8004a0e <HAL_ADC_Start_DMA+0xca>
 8004a02:	4b59      	ldr	r3, [pc, #356]	; (8004b68 <HAL_ADC_Start_DMA+0x224>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_ADC_Start_DMA+0xde>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a16:	d004      	beq.n	8004a22 <HAL_ADC_Start_DMA+0xde>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a53      	ldr	r2, [pc, #332]	; (8004b6c <HAL_ADC_Start_DMA+0x228>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d115      	bne.n	8004a4e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d036      	beq.n	8004aaa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004a4c:	e02d      	b.n	8004aaa <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a62:	d004      	beq.n	8004a6e <HAL_ADC_Start_DMA+0x12a>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a3d      	ldr	r2, [pc, #244]	; (8004b60 <HAL_ADC_Start_DMA+0x21c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d10a      	bne.n	8004a84 <HAL_ADC_Start_DMA+0x140>
 8004a6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e008      	b.n	8004a96 <HAL_ADC_Start_DMA+0x152>
 8004a84:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <HAL_ADC_Start_DMA+0x228>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004aa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f023 0206 	bic.w	r2, r3, #6
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ac4:	e002      	b.n	8004acc <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <HAL_ADC_Start_DMA+0x22c>)
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <HAL_ADC_Start_DMA+0x230>)
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	4a23      	ldr	r2, [pc, #140]	; (8004b78 <HAL_ADC_Start_DMA+0x234>)
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	221c      	movs	r2, #28
 8004af2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0210 	orr.w	r2, r2, #16
 8004b02:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3340      	adds	r3, #64	; 0x40
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f000 ff0c 	bl	8005940 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0204 	orr.w	r2, r2, #4
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	e00d      	b.n	8004b56 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b42:	e008      	b.n	8004b56 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b50:	e001      	b.n	8004b56 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
 8004b54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	50000100 	.word	0x50000100
 8004b64:	50000300 	.word	0x50000300
 8004b68:	50000700 	.word	0x50000700
 8004b6c:	50000400 	.word	0x50000400
 8004b70:	080052ed 	.word	0x080052ed
 8004b74:	08005367 	.word	0x08005367
 8004b78:	08005383 	.word	0x08005383

08004b7c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_ADC_Stop_DMA+0x1a>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e050      	b.n	8004c38 <HAL_ADC_Stop_DMA+0xbc>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004b9e:	216c      	movs	r1, #108	; 0x6c
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fcc7 	bl	8005534 <ADC_ConversionStop>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d13e      	bne.n	8004c2e <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d10f      	bne.n	8004bec <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 ff14 	bl	80059fe <HAL_DMA_Abort>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0210 	bic.w	r2, r2, #16
 8004bfa:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fc36 	bl	8005474 <ADC_Disable>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	73fb      	strb	r3, [r7, #15]
 8004c0c:	e002      	b.n	8004c14 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fc30 	bl	8005474 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	f043 0201 	orr.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_ADCEx_Calibration_Start+0x1c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e057      	b.n	8004d0c <HAL_ADCEx_Calibration_Start+0xcc>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fc05 	bl	8005474 <ADC_Disable>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d146      	bne.n	8004d02 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004c88:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c9e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cae:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004cb0:	f7ff fc1a 	bl	80044e8 <HAL_GetTick>
 8004cb4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004cb6:	e014      	b.n	8004ce2 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004cb8:	f7ff fc16 	bl	80044e8 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b0a      	cmp	r3, #10
 8004cc4:	d90d      	bls.n	8004ce2 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f023 0312 	bic.w	r3, r3, #18
 8004cce:	f043 0210 	orr.w	r2, r3, #16
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e014      	b.n	8004d0c <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cf0:	d0e2      	beq.n	8004cb8 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	f043 0201 	orr.w	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b09b      	sub	sp, #108	; 0x6c
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x22>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e2cb      	b.n	80052ce <HAL_ADC_ConfigChannel+0x5ba>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 82af 	bne.w	80052ac <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d81c      	bhi.n	8004d90 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	461a      	mov	r2, r3
 8004d6a:	231f      	movs	r3, #31
 8004d6c:	4093      	lsls	r3, r2
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	4019      	ands	r1, r3
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa00 f203 	lsl.w	r2, r0, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d8e:	e063      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	d81e      	bhi.n	8004dd6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	4413      	add	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	3b1e      	subs	r3, #30
 8004dac:	221f      	movs	r2, #31
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	4019      	ands	r1, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	3b1e      	subs	r3, #30
 8004dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34
 8004dd4:	e040      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b0e      	cmp	r3, #14
 8004ddc:	d81e      	bhi.n	8004e1c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4413      	add	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	3b3c      	subs	r3, #60	; 0x3c
 8004df2:	221f      	movs	r2, #31
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	4019      	ands	r1, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	3b3c      	subs	r3, #60	; 0x3c
 8004e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
 8004e1a:	e01d      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	3b5a      	subs	r3, #90	; 0x5a
 8004e30:	221f      	movs	r2, #31
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	4019      	ands	r1, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4413      	add	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	3b5a      	subs	r3, #90	; 0x5a
 8004e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 80e5 	bne.w	8005032 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b09      	cmp	r3, #9
 8004e6e:	d91c      	bls.n	8004eaa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6999      	ldr	r1, [r3, #24]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4413      	add	r3, r2
 8004e80:	3b1e      	subs	r3, #30
 8004e82:	2207      	movs	r2, #7
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	4019      	ands	r1, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6898      	ldr	r0, [r3, #8]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4413      	add	r3, r2
 8004e9a:	3b1e      	subs	r3, #30
 8004e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	619a      	str	r2, [r3, #24]
 8004ea8:	e019      	b.n	8004ede <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6959      	ldr	r1, [r3, #20]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	2207      	movs	r2, #7
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	4019      	ands	r1, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6898      	ldr	r0, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	08db      	lsrs	r3, r3, #3
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d84f      	bhi.n	8004fa0 <HAL_ADC_ConfigChannel+0x28c>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <HAL_ADC_ConfigChannel+0x1f4>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f3b 	.word	0x08004f3b
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f7f 	.word	0x08004f7f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f1e:	4b9f      	ldr	r3, [pc, #636]	; (800519c <HAL_ADC_ConfigChannel+0x488>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	0691      	lsls	r1, r2, #26
 8004f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f36:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f38:	e07e      	b.n	8005038 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f40:	4b96      	ldr	r3, [pc, #600]	; (800519c <HAL_ADC_ConfigChannel+0x488>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	0691      	lsls	r1, r2, #26
 8004f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f58:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f5a:	e06d      	b.n	8005038 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f62:	4b8e      	ldr	r3, [pc, #568]	; (800519c <HAL_ADC_ConfigChannel+0x488>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	0691      	lsls	r1, r2, #26
 8004f6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f7a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f7c:	e05c      	b.n	8005038 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f84:	4b85      	ldr	r3, [pc, #532]	; (800519c <HAL_ADC_ConfigChannel+0x488>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	0691      	lsls	r1, r2, #26
 8004f8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f90:	430a      	orrs	r2, r1
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f9c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f9e:	e04b      	b.n	8005038 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d107      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	069b      	lsls	r3, r3, #26
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d107      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fe6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	069b      	lsls	r3, r3, #26
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d107      	bne.n	800500c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800500a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	069b      	lsls	r3, r3, #26
 800501c:	429a      	cmp	r2, r3
 800501e:	d10a      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800502e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005030:	e001      	b.n	8005036 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <HAL_ADC_ConfigChannel+0x324>
      break;
 8005036:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d108      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x344>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x344>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <HAL_ADC_ConfigChannel+0x346>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 8131 	bne.w	80052c2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d00f      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2201      	movs	r2, #1
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43da      	mvns	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	400a      	ands	r2, r1
 8005082:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005086:	e049      	b.n	800511c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2201      	movs	r2, #1
 8005096:	409a      	lsls	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	d91c      	bls.n	80050e4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6999      	ldr	r1, [r3, #24]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	3b1b      	subs	r3, #27
 80050bc:	2207      	movs	r2, #7
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	4019      	ands	r1, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6898      	ldr	r0, [r3, #8]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	3b1b      	subs	r3, #27
 80050d6:	fa00 f203 	lsl.w	r2, r0, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	619a      	str	r2, [r3, #24]
 80050e2:	e01b      	b.n	800511c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6959      	ldr	r1, [r3, #20]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	2207      	movs	r2, #7
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	4019      	ands	r1, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6898      	ldr	r0, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	fa00 f203 	lsl.w	r2, r0, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005124:	d004      	beq.n	8005130 <HAL_ADC_ConfigChannel+0x41c>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <HAL_ADC_ConfigChannel+0x48c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <HAL_ADC_ConfigChannel+0x420>
 8005130:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <HAL_ADC_ConfigChannel+0x490>)
 8005132:	e000      	b.n	8005136 <HAL_ADC_ConfigChannel+0x422>
 8005134:	4b1c      	ldr	r3, [pc, #112]	; (80051a8 <HAL_ADC_ConfigChannel+0x494>)
 8005136:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b10      	cmp	r3, #16
 800513e:	d105      	bne.n	800514c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005150:	2b11      	cmp	r3, #17
 8005152:	d105      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005164:	2b12      	cmp	r3, #18
 8005166:	f040 80ac 	bne.w	80052c2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800516a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 80a5 	bne.w	80052c2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005180:	d102      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x474>
 8005182:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <HAL_ADC_ConfigChannel+0x48c>)
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e023      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x4bc>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <HAL_ADC_ConfigChannel+0x48c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10c      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x498>
 8005192:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e01a      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x4bc>
 800519a:	bf00      	nop
 800519c:	83fff000 	.word	0x83fff000
 80051a0:	50000100 	.word	0x50000100
 80051a4:	50000300 	.word	0x50000300
 80051a8:	50000700 	.word	0x50000700
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a4a      	ldr	r2, [pc, #296]	; (80052dc <HAL_ADC_ConfigChannel+0x5c8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d102      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x4a8>
 80051b6:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_ADC_ConfigChannel+0x5cc>)
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e009      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x4bc>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a47      	ldr	r2, [pc, #284]	; (80052e0 <HAL_ADC_ConfigChannel+0x5cc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d102      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x4b8>
 80051c6:	4b45      	ldr	r3, [pc, #276]	; (80052dc <HAL_ADC_ConfigChannel+0x5c8>)
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e001      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x4bc>
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d108      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x4dc>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x4dc>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x4de>
 80051f0:	2300      	movs	r3, #0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d150      	bne.n	8005298 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80051f6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x504>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x504>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_ADC_ConfigChannel+0x506>
 8005218:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800521a:	2b00      	cmp	r3, #0
 800521c:	d13c      	bne.n	8005298 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b10      	cmp	r3, #16
 8005224:	d11d      	bne.n	8005262 <HAL_ADC_ConfigChannel+0x54e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800522e:	d118      	bne.n	8005262 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800523c:	4b29      	ldr	r3, [pc, #164]	; (80052e4 <HAL_ADC_ConfigChannel+0x5d0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <HAL_ADC_ConfigChannel+0x5d4>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	0c9a      	lsrs	r2, r3, #18
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005252:	e002      	b.n	800525a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	3b01      	subs	r3, #1
 8005258:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f9      	bne.n	8005254 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005260:	e02e      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b11      	cmp	r3, #17
 8005268:	d10b      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x56e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005272:	d106      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800527c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005280:	e01e      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b12      	cmp	r3, #18
 8005288:	d11a      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800528a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005294:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005296:	e013      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80052aa:	e00a      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	f043 0220 	orr.w	r2, r3, #32
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80052be:	e000      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80052c0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80052ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	376c      	adds	r7, #108	; 0x6c
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	50000400 	.word	0x50000400
 80052e0:	50000500 	.word	0x50000500
 80052e4:	20000104 	.word	0x20000104
 80052e8:	431bde83 	.word	0x431bde83

080052ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005302:	2b00      	cmp	r3, #0
 8005304:	d126      	bne.n	8005354 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800531c:	2b00      	cmp	r3, #0
 800531e:	d115      	bne.n	800534c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005324:	2b00      	cmp	r3, #0
 8005326:	d111      	bne.n	800534c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f043 0201 	orr.w	r2, r3, #1
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff f8fb 	bl	8004548 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005352:	e004      	b.n	800535e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4798      	blx	r3
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff f8f1 	bl	800455c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	f043 0204 	orr.w	r2, r3, #4
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff f8e1 	bl	8004570 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d108      	bne.n	80053e4 <ADC_Enable+0x2c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <ADC_Enable+0x2c>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <ADC_Enable+0x2e>
 80053e4:	2300      	movs	r3, #0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d13c      	bne.n	8005464 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	4b1f      	ldr	r3, [pc, #124]	; (8005470 <ADC_Enable+0xb8>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00d      	beq.n	8005414 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f043 0210 	orr.w	r2, r3, #16
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	f043 0201 	orr.w	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e028      	b.n	8005466 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005424:	f7ff f860 	bl	80044e8 <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800542a:	e014      	b.n	8005456 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800542c:	f7ff f85c 	bl	80044e8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d90d      	bls.n	8005456 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f043 0210 	orr.w	r2, r3, #16
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f043 0201 	orr.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e007      	b.n	8005466 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d1e3      	bne.n	800542c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	8000003f 	.word	0x8000003f

08005474 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d108      	bne.n	80054a0 <ADC_Disable+0x2c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <ADC_Disable+0x2c>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <ADC_Disable+0x2e>
 80054a0:	2300      	movs	r3, #0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d040      	beq.n	8005528 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 030d 	and.w	r3, r3, #13
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d10f      	bne.n	80054d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0202 	orr.w	r2, r2, #2
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2203      	movs	r2, #3
 80054ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80054cc:	f7ff f80c 	bl	80044e8 <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80054d2:	e022      	b.n	800551a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f043 0210 	orr.w	r2, r3, #16
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e4:	f043 0201 	orr.w	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e01c      	b.n	800552a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054f0:	f7fe fffa 	bl	80044e8 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d90d      	bls.n	800551a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0210 	orr.w	r2, r3, #16
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	f043 0201 	orr.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e007      	b.n	800552a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b01      	cmp	r3, #1
 8005526:	d0e3      	beq.n	80054f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8094 	beq.w	8005682 <ADC_ConversionStop+0x14e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005568:	d12a      	bne.n	80055c0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800556e:	2b01      	cmp	r3, #1
 8005570:	d126      	bne.n	80055c0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005576:	2b01      	cmp	r3, #1
 8005578:	d122      	bne.n	80055c0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800557a:	230c      	movs	r3, #12
 800557c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800557e:	e014      	b.n	80055aa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4a42      	ldr	r2, [pc, #264]	; (800568c <ADC_ConversionStop+0x158>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d90d      	bls.n	80055a4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f043 0210 	orr.w	r2, r3, #16
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	f043 0201 	orr.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e06f      	b.n	8005684 <ADC_ConversionStop+0x150>
        }
        Conversion_Timeout_CPU_cycles ++;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3301      	adds	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d1e3      	bne.n	8005580 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2240      	movs	r2, #64	; 0x40
 80055be:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b60      	cmp	r3, #96	; 0x60
 80055c4:	d015      	beq.n	80055f2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d10e      	bne.n	80055f2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0210 	orr.w	r2, r2, #16
 80055f0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d015      	beq.n	8005624 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b08      	cmp	r3, #8
 8005604:	d10e      	bne.n	8005624 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0220 	orr.w	r2, r2, #32
 8005622:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b60      	cmp	r3, #96	; 0x60
 8005628:	d005      	beq.n	8005636 <ADC_ConversionStop+0x102>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b6c      	cmp	r3, #108	; 0x6c
 800562e:	d105      	bne.n	800563c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005630:	230c      	movs	r3, #12
 8005632:	617b      	str	r3, [r7, #20]
        break;
 8005634:	e005      	b.n	8005642 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005636:	2308      	movs	r3, #8
 8005638:	617b      	str	r3, [r7, #20]
        break;
 800563a:	e002      	b.n	8005642 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800563c:	2304      	movs	r3, #4
 800563e:	617b      	str	r3, [r7, #20]
        break;
 8005640:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005642:	f7fe ff51 	bl	80044e8 <HAL_GetTick>
 8005646:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005648:	e014      	b.n	8005674 <ADC_ConversionStop+0x140>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800564a:	f7fe ff4d 	bl	80044e8 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b0b      	cmp	r3, #11
 8005656:	d90d      	bls.n	8005674 <ADC_ConversionStop+0x140>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f043 0210 	orr.w	r2, r3, #16
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005668:	f043 0201 	orr.w	r2, r3, #1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e007      	b.n	8005684 <ADC_ConversionStop+0x150>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <ADC_ConversionStop+0x116>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	000993ff 	.word	0x000993ff

08005690 <__NVIC_SetPriorityGrouping>:
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <__NVIC_SetPriorityGrouping+0x44>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056ac:	4013      	ands	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056c2:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <__NVIC_SetPriorityGrouping+0x44>)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	60d3      	str	r3, [r2, #12]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <__NVIC_GetPriorityGrouping>:
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <__NVIC_GetPriorityGrouping+0x18>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	f003 0307 	and.w	r3, r3, #7
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <__NVIC_EnableIRQ>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005702:	2b00      	cmp	r3, #0
 8005704:	db0b      	blt.n	800571e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	f003 021f 	and.w	r2, r3, #31
 800570c:	4907      	ldr	r1, [pc, #28]	; (800572c <__NVIC_EnableIRQ+0x38>)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	2001      	movs	r0, #1
 8005716:	fa00 f202 	lsl.w	r2, r0, r2
 800571a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	e000e100 	.word	0xe000e100

08005730 <__NVIC_SetPriority>:
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	6039      	str	r1, [r7, #0]
 800573a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800573c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005740:	2b00      	cmp	r3, #0
 8005742:	db0a      	blt.n	800575a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	490c      	ldr	r1, [pc, #48]	; (800577c <__NVIC_SetPriority+0x4c>)
 800574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574e:	0112      	lsls	r2, r2, #4
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	440b      	add	r3, r1
 8005754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005758:	e00a      	b.n	8005770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	4908      	ldr	r1, [pc, #32]	; (8005780 <__NVIC_SetPriority+0x50>)
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	3b04      	subs	r3, #4
 8005768:	0112      	lsls	r2, r2, #4
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	440b      	add	r3, r1
 800576e:	761a      	strb	r2, [r3, #24]
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	e000e100 	.word	0xe000e100
 8005780:	e000ed00 	.word	0xe000ed00

08005784 <NVIC_EncodePriority>:
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f1c3 0307 	rsb	r3, r3, #7
 800579e:	2b04      	cmp	r3, #4
 80057a0:	bf28      	it	cs
 80057a2:	2304      	movcs	r3, #4
 80057a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3304      	adds	r3, #4
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d902      	bls.n	80057b4 <NVIC_EncodePriority+0x30>
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	3b03      	subs	r3, #3
 80057b2:	e000      	b.n	80057b6 <NVIC_EncodePriority+0x32>
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43da      	mvns	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	401a      	ands	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057cc:	f04f 31ff 	mov.w	r1, #4294967295
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	43d9      	mvns	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057dc:	4313      	orrs	r3, r2
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3724      	adds	r7, #36	; 0x24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057fc:	d301      	bcc.n	8005802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057fe:	2301      	movs	r3, #1
 8005800:	e00f      	b.n	8005822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005802:	4a0a      	ldr	r2, [pc, #40]	; (800582c <SysTick_Config+0x40>)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3b01      	subs	r3, #1
 8005808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800580a:	210f      	movs	r1, #15
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	f7ff ff8e 	bl	8005730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <SysTick_Config+0x40>)
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800581a:	4b04      	ldr	r3, [pc, #16]	; (800582c <SysTick_Config+0x40>)
 800581c:	2207      	movs	r2, #7
 800581e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	e000e010 	.word	0xe000e010

08005830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff ff29 	bl	8005690 <__NVIC_SetPriorityGrouping>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b086      	sub	sp, #24
 800584a:	af00      	add	r7, sp, #0
 800584c:	4603      	mov	r3, r0
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
 8005852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005858:	f7ff ff3e 	bl	80056d8 <__NVIC_GetPriorityGrouping>
 800585c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	6978      	ldr	r0, [r7, #20]
 8005864:	f7ff ff8e 	bl	8005784 <NVIC_EncodePriority>
 8005868:	4602      	mov	r2, r0
 800586a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff5d 	bl	8005730 <__NVIC_SetPriority>
}
 8005876:	bf00      	nop
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	4603      	mov	r3, r0
 8005886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff31 	bl	80056f4 <__NVIC_EnableIRQ>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff ffa2 	bl	80057ec <SysTick_Config>
 80058a8:	4603      	mov	r3, r0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e037      	b.n	8005938 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80058e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80058ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f9b8 	bl	8005c90 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}  
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_DMA_Start_IT+0x20>
 800595c:	2302      	movs	r3, #2
 800595e:	e04a      	b.n	80059f6 <HAL_DMA_Start_IT+0xb6>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800596e:	2b01      	cmp	r3, #1
 8005970:	d13a      	bne.n	80059e8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f94b 	bl	8005c32 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 020e 	orr.w	r2, r2, #14
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e00f      	b.n	80059d6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 020a 	orr.w	r2, r2, #10
 80059c4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0204 	bic.w	r2, r2, #4
 80059d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0201 	orr.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e005      	b.n	80059f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
 80059f2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d008      	beq.n	8005a22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2204      	movs	r2, #4
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e020      	b.n	8005a64 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 020e 	bic.w	r2, r2, #14
 8005a30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d005      	beq.n	8005a92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2204      	movs	r2, #4
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
 8005a90:	e027      	b.n	8005ae2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 020e 	bic.w	r2, r2, #14
 8005aa0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0201 	bic.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	2101      	movs	r1, #1
 8005abc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
    } 
  }
  return status;
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	2204      	movs	r2, #4
 8005b0a:	409a      	lsls	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d024      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x72>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01f      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d107      	bne.n	8005b3c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0204 	bic.w	r2, r2, #4
 8005b3a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b44:	2104      	movs	r1, #4
 8005b46:	fa01 f202 	lsl.w	r2, r1, r2
 8005b4a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d06a      	beq.n	8005c2a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005b5c:	e065      	b.n	8005c2a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	2202      	movs	r2, #2
 8005b64:	409a      	lsls	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d02c      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0xdc>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d027      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10b      	bne.n	8005b9e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 020a 	bic.w	r2, r2, #10
 8005b94:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bac:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d035      	beq.n	8005c2a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005bc6:	e030      	b.n	8005c2a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	2208      	movs	r2, #8
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d028      	beq.n	8005c2a <HAL_DMA_IRQHandler+0x13e>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d023      	beq.n	8005c2a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 020e 	bic.w	r2, r2, #14
 8005bf0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005c00:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
    }
  }
}  
 8005c28:	e7ff      	b.n	8005c2a <HAL_DMA_IRQHandler+0x13e>
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d108      	bne.n	8005c72 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c70:	e007      	b.n	8005c82 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	60da      	str	r2, [r3, #12]
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4b14      	ldr	r3, [pc, #80]	; (8005cf0 <DMA_CalcBaseAndBitshift+0x60>)
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d80f      	bhi.n	8005cc4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8005cac:	4413      	add	r3, r2
 8005cae:	4a12      	ldr	r2, [pc, #72]	; (8005cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	009a      	lsls	r2, r3, #2
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a0f      	ldr	r2, [pc, #60]	; (8005cfc <DMA_CalcBaseAndBitshift+0x6c>)
 8005cc0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005cc2:	e00e      	b.n	8005ce2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <DMA_CalcBaseAndBitshift+0x70>)
 8005ccc:	4413      	add	r3, r2
 8005cce:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8005cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	009a      	lsls	r2, r3, #2
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <DMA_CalcBaseAndBitshift+0x74>)
 8005ce0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40020407 	.word	0x40020407
 8005cf4:	bffdfff8 	.word	0xbffdfff8
 8005cf8:	cccccccd 	.word	0xcccccccd
 8005cfc:	40020000 	.word	0x40020000
 8005d00:	bffdfbf8 	.word	0xbffdfbf8
 8005d04:	40020400 	.word	0x40020400

08005d08 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d22:	4b2f      	ldr	r3, [pc, #188]	; (8005de0 <HAL_FLASH_Program+0xd8>)
 8005d24:	7e1b      	ldrb	r3, [r3, #24]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_FLASH_Program+0x26>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e054      	b.n	8005dd8 <HAL_FLASH_Program+0xd0>
 8005d2e:	4b2c      	ldr	r3, [pc, #176]	; (8005de0 <HAL_FLASH_Program+0xd8>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d38:	f000 f8a8 	bl	8005e8c <FLASH_WaitForLastOperation>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d144      	bne.n	8005dd0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d102      	bne.n	8005d52 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	757b      	strb	r3, [r7, #21]
 8005d50:	e007      	b.n	8005d62 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d102      	bne.n	8005d5e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	757b      	strb	r3, [r7, #21]
 8005d5c:	e001      	b.n	8005d62 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005d5e:	2304      	movs	r3, #4
 8005d60:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	75bb      	strb	r3, [r7, #22]
 8005d66:	e02d      	b.n	8005dc4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005d68:	7dbb      	ldrb	r3, [r7, #22]
 8005d6a:	005a      	lsls	r2, r3, #1
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	eb02 0c03 	add.w	ip, r2, r3
 8005d72:	7dbb      	ldrb	r3, [r7, #22]
 8005d74:	0119      	lsls	r1, r3, #4
 8005d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7a:	f1c1 0620 	rsb	r6, r1, #32
 8005d7e:	f1a1 0020 	sub.w	r0, r1, #32
 8005d82:	fa22 f401 	lsr.w	r4, r2, r1
 8005d86:	fa03 f606 	lsl.w	r6, r3, r6
 8005d8a:	4334      	orrs	r4, r6
 8005d8c:	fa23 f000 	lsr.w	r0, r3, r0
 8005d90:	4304      	orrs	r4, r0
 8005d92:	fa23 f501 	lsr.w	r5, r3, r1
 8005d96:	b2a3      	uxth	r3, r4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4660      	mov	r0, ip
 8005d9c:	f000 f85a 	bl	8005e54 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005da0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005da4:	f000 f872 	bl	8005e8c <FLASH_WaitForLastOperation>
 8005da8:	4603      	mov	r3, r0
 8005daa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005dac:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <HAL_FLASH_Program+0xdc>)
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <HAL_FLASH_Program+0xdc>)
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d107      	bne.n	8005dce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005dbe:	7dbb      	ldrb	r3, [r7, #22]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	75bb      	strb	r3, [r7, #22]
 8005dc4:	7dba      	ldrb	r2, [r7, #22]
 8005dc6:	7d7b      	ldrb	r3, [r7, #21]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d3cd      	bcc.n	8005d68 <HAL_FLASH_Program+0x60>
 8005dcc:	e000      	b.n	8005dd0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005dce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005dd0:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <HAL_FLASH_Program+0xd8>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	761a      	strb	r2, [r3, #24]

  return status;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005de0:	200013d8 	.word	0x200013d8
 8005de4:	40022000 	.word	0x40022000

08005de8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <HAL_FLASH_Unlock+0x40>)
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_FLASH_Unlock+0x40>)
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_FLASH_Unlock+0x44>)
 8005e02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005e04:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <HAL_FLASH_Unlock+0x40>)
 8005e06:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <HAL_FLASH_Unlock+0x48>)
 8005e08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e0a:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <HAL_FLASH_Unlock+0x40>)
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40022000 	.word	0x40022000
 8005e2c:	45670123 	.word	0x45670123
 8005e30:	cdef89ab 	.word	0xcdef89ab

08005e34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <HAL_FLASH_Lock+0x1c>)
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <HAL_FLASH_Lock+0x1c>)
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e42:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40022000 	.word	0x40022000

08005e54 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <FLASH_Program_HalfWord+0x30>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <FLASH_Program_HalfWord+0x34>)
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	4a07      	ldr	r2, [pc, #28]	; (8005e88 <FLASH_Program_HalfWord+0x34>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	887a      	ldrh	r2, [r7, #2]
 8005e76:	801a      	strh	r2, [r3, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	200013d8 	.word	0x200013d8
 8005e88:	40022000 	.word	0x40022000

08005e8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005e94:	f7fe fb28 	bl	80044e8 <HAL_GetTick>
 8005e98:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005e9a:	e010      	b.n	8005ebe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	d00c      	beq.n	8005ebe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <FLASH_WaitForLastOperation+0x2e>
 8005eaa:	f7fe fb1d 	bl	80044e8 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d201      	bcs.n	8005ebe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e01f      	b.n	8005efe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005ebe:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <FLASH_WaitForLastOperation+0x7c>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d0e8      	beq.n	8005e9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <FLASH_WaitForLastOperation+0x7c>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d102      	bne.n	8005edc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <FLASH_WaitForLastOperation+0x7c>)
 8005ed8:	2220      	movs	r2, #32
 8005eda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <FLASH_WaitForLastOperation+0x7c>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d005      	beq.n	8005ef4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005ee8:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <FLASH_WaitForLastOperation+0x7c>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d103      	bne.n	8005efc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005ef4:	f000 f80a 	bl	8005f0c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40022000 	.word	0x40022000

08005f0c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <FLASH_SetErrorCode+0x5c>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d109      	bne.n	8005f36 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005f22:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <FLASH_SetErrorCode+0x60>)
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f043 0302 	orr.w	r3, r3, #2
 8005f2a:	4a10      	ldr	r2, [pc, #64]	; (8005f6c <FLASH_SetErrorCode+0x60>)
 8005f2c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f043 0310 	orr.w	r3, r3, #16
 8005f34:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <FLASH_SetErrorCode+0x5c>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d109      	bne.n	8005f56 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <FLASH_SetErrorCode+0x60>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <FLASH_SetErrorCode+0x60>)
 8005f4c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f043 0304 	orr.w	r3, r3, #4
 8005f54:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005f56:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <FLASH_SetErrorCode+0x5c>)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60d3      	str	r3, [r2, #12]
}  
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40022000 	.word	0x40022000
 8005f6c:	200013d8 	.word	0x200013d8

08005f70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f82:	4b2e      	ldr	r3, [pc, #184]	; (800603c <HAL_FLASHEx_Erase+0xcc>)
 8005f84:	7e1b      	ldrb	r3, [r3, #24]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_FLASHEx_Erase+0x1e>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e052      	b.n	8006034 <HAL_FLASHEx_Erase+0xc4>
 8005f8e:	4b2b      	ldr	r3, [pc, #172]	; (800603c <HAL_FLASHEx_Erase+0xcc>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d115      	bne.n	8005fc8 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fa0:	f7ff ff74 	bl	8005e8c <FLASH_WaitForLastOperation>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d140      	bne.n	800602c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8005faa:	f000 f84b 	bl	8006044 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fb2:	f7ff ff6b 	bl	8005e8c <FLASH_WaitForLastOperation>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005fba:	4b21      	ldr	r3, [pc, #132]	; (8006040 <HAL_FLASHEx_Erase+0xd0>)
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	4a20      	ldr	r2, [pc, #128]	; (8006040 <HAL_FLASHEx_Erase+0xd0>)
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	6113      	str	r3, [r2, #16]
 8005fc6:	e031      	b.n	800602c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fcc:	f7ff ff5e 	bl	8005e8c <FLASH_WaitForLastOperation>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d12a      	bne.n	800602c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fdc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	60bb      	str	r3, [r7, #8]
 8005fe4:	e019      	b.n	800601a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005fe6:	68b8      	ldr	r0, [r7, #8]
 8005fe8:	f000 f846 	bl	8006078 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ff0:	f7ff ff4c 	bl	8005e8c <FLASH_WaitForLastOperation>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005ff8:	4b11      	ldr	r3, [pc, #68]	; (8006040 <HAL_FLASHEx_Erase+0xd0>)
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	4a10      	ldr	r2, [pc, #64]	; (8006040 <HAL_FLASHEx_Erase+0xd0>)
 8005ffe:	f023 0302 	bic.w	r3, r3, #2
 8006002:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	601a      	str	r2, [r3, #0]
            break;
 8006010:	e00c      	b.n	800602c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	02da      	lsls	r2, r3, #11
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	429a      	cmp	r2, r3
 800602a:	d3dc      	bcc.n	8005fe6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800602c:	4b03      	ldr	r3, [pc, #12]	; (800603c <HAL_FLASHEx_Erase+0xcc>)
 800602e:	2200      	movs	r2, #0
 8006030:	761a      	strb	r2, [r3, #24]

  return status;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	200013d8 	.word	0x200013d8
 8006040:	40022000 	.word	0x40022000

08006044 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006048:	4b09      	ldr	r3, [pc, #36]	; (8006070 <FLASH_MassErase+0x2c>)
 800604a:	2200      	movs	r2, #0
 800604c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <FLASH_MassErase+0x30>)
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	4a08      	ldr	r2, [pc, #32]	; (8006074 <FLASH_MassErase+0x30>)
 8006054:	f043 0304 	orr.w	r3, r3, #4
 8006058:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800605a:	4b06      	ldr	r3, [pc, #24]	; (8006074 <FLASH_MassErase+0x30>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	4a05      	ldr	r2, [pc, #20]	; (8006074 <FLASH_MassErase+0x30>)
 8006060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006064:	6113      	str	r3, [r2, #16]
}
 8006066:	bf00      	nop
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	200013d8 	.word	0x200013d8
 8006074:	40022000 	.word	0x40022000

08006078 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <FLASH_PageErase+0x38>)
 8006082:	2200      	movs	r2, #0
 8006084:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <FLASH_PageErase+0x3c>)
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <FLASH_PageErase+0x3c>)
 800608c:	f043 0302 	orr.w	r3, r3, #2
 8006090:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006092:	4a08      	ldr	r2, [pc, #32]	; (80060b4 <FLASH_PageErase+0x3c>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <FLASH_PageErase+0x3c>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4a05      	ldr	r2, [pc, #20]	; (80060b4 <FLASH_PageErase+0x3c>)
 800609e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a2:	6113      	str	r3, [r2, #16]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	200013d8 	.word	0x200013d8
 80060b4:	40022000 	.word	0x40022000

080060b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060c6:	e154      	b.n	8006372 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	2101      	movs	r1, #1
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	fa01 f303 	lsl.w	r3, r1, r3
 80060d4:	4013      	ands	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8146 	beq.w	800636c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d00b      	beq.n	8006100 <HAL_GPIO_Init+0x48>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d007      	beq.n	8006100 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060f4:	2b11      	cmp	r3, #17
 80060f6:	d003      	beq.n	8006100 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b12      	cmp	r3, #18
 80060fe:	d130      	bne.n	8006162 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	2203      	movs	r2, #3
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4013      	ands	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006136:	2201      	movs	r2, #1
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4013      	ands	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	091b      	lsrs	r3, r3, #4
 800614c:	f003 0201 	and.w	r2, r3, #1
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	2203      	movs	r2, #3
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4013      	ands	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d003      	beq.n	80061a2 <HAL_GPIO_Init+0xea>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b12      	cmp	r3, #18
 80061a0:	d123      	bne.n	80061ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	08da      	lsrs	r2, r3, #3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3208      	adds	r2, #8
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	220f      	movs	r2, #15
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4013      	ands	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	08da      	lsrs	r2, r3, #3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3208      	adds	r2, #8
 80061e4:	6939      	ldr	r1, [r7, #16]
 80061e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	2203      	movs	r2, #3
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4013      	ands	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f003 0203 	and.w	r2, r3, #3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80a0 	beq.w	800636c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800622c:	4b58      	ldr	r3, [pc, #352]	; (8006390 <HAL_GPIO_Init+0x2d8>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	4a57      	ldr	r2, [pc, #348]	; (8006390 <HAL_GPIO_Init+0x2d8>)
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	6193      	str	r3, [r2, #24]
 8006238:	4b55      	ldr	r3, [pc, #340]	; (8006390 <HAL_GPIO_Init+0x2d8>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006244:	4a53      	ldr	r2, [pc, #332]	; (8006394 <HAL_GPIO_Init+0x2dc>)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	089b      	lsrs	r3, r3, #2
 800624a:	3302      	adds	r3, #2
 800624c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	220f      	movs	r2, #15
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	43db      	mvns	r3, r3
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4013      	ands	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800626e:	d019      	beq.n	80062a4 <HAL_GPIO_Init+0x1ec>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a49      	ldr	r2, [pc, #292]	; (8006398 <HAL_GPIO_Init+0x2e0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <HAL_GPIO_Init+0x1e8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a48      	ldr	r2, [pc, #288]	; (800639c <HAL_GPIO_Init+0x2e4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00d      	beq.n	800629c <HAL_GPIO_Init+0x1e4>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a47      	ldr	r2, [pc, #284]	; (80063a0 <HAL_GPIO_Init+0x2e8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <HAL_GPIO_Init+0x1e0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a46      	ldr	r2, [pc, #280]	; (80063a4 <HAL_GPIO_Init+0x2ec>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d101      	bne.n	8006294 <HAL_GPIO_Init+0x1dc>
 8006290:	2304      	movs	r3, #4
 8006292:	e008      	b.n	80062a6 <HAL_GPIO_Init+0x1ee>
 8006294:	2305      	movs	r3, #5
 8006296:	e006      	b.n	80062a6 <HAL_GPIO_Init+0x1ee>
 8006298:	2303      	movs	r3, #3
 800629a:	e004      	b.n	80062a6 <HAL_GPIO_Init+0x1ee>
 800629c:	2302      	movs	r3, #2
 800629e:	e002      	b.n	80062a6 <HAL_GPIO_Init+0x1ee>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_GPIO_Init+0x1ee>
 80062a4:	2300      	movs	r3, #0
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	f002 0203 	and.w	r2, r2, #3
 80062ac:	0092      	lsls	r2, r2, #2
 80062ae:	4093      	lsls	r3, r2
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80062b6:	4937      	ldr	r1, [pc, #220]	; (8006394 <HAL_GPIO_Init+0x2dc>)
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	3302      	adds	r3, #2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062c4:	4b38      	ldr	r3, [pc, #224]	; (80063a8 <HAL_GPIO_Init+0x2f0>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	43db      	mvns	r3, r3
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4013      	ands	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80062e8:	4a2f      	ldr	r2, [pc, #188]	; (80063a8 <HAL_GPIO_Init+0x2f0>)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80062ee:	4b2e      	ldr	r3, [pc, #184]	; (80063a8 <HAL_GPIO_Init+0x2f0>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4013      	ands	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006312:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <HAL_GPIO_Init+0x2f0>)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006318:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <HAL_GPIO_Init+0x2f0>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	43db      	mvns	r3, r3
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4013      	ands	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800633c:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_GPIO_Init+0x2f0>)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006342:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <HAL_GPIO_Init+0x2f0>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	43db      	mvns	r3, r3
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4013      	ands	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006366:	4a10      	ldr	r2, [pc, #64]	; (80063a8 <HAL_GPIO_Init+0x2f0>)
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	3301      	adds	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	f47f aea3 	bne.w	80060c8 <HAL_GPIO_Init+0x10>
  }
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40021000 	.word	0x40021000
 8006394:	40010000 	.word	0x40010000
 8006398:	48000400 	.word	0x48000400
 800639c:	48000800 	.word	0x48000800
 80063a0:	48000c00 	.word	0x48000c00
 80063a4:	48001000 	.word	0x48001000
 80063a8:	40010400 	.word	0x40010400

080063ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	887b      	ldrh	r3, [r7, #2]
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73fb      	strb	r3, [r7, #15]
 80063c8:	e001      	b.n	80063ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	807b      	strh	r3, [r7, #2]
 80063e8:	4613      	mov	r3, r2
 80063ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063ec:	787b      	ldrb	r3, [r7, #1]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063f2:	887a      	ldrh	r2, [r7, #2]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063f8:	e002      	b.n	8006400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063fa:	887a      	ldrh	r2, [r7, #2]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006418:	695a      	ldr	r2, [r3, #20]
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	4013      	ands	r3, r2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d006      	beq.n	8006430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006422:	4a05      	ldr	r2, [pc, #20]	; (8006438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006428:	88fb      	ldrh	r3, [r7, #6]
 800642a:	4618      	mov	r0, r3
 800642c:	f7fb fa80 	bl	8001930 <HAL_GPIO_EXTI_Callback>
  }
}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40010400 	.word	0x40010400

0800643c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a04      	ldr	r2, [pc, #16]	; (8006458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644a:	6013      	str	r3, [r2, #0]
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40007000 	.word	0x40007000

0800645c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006462:	af00      	add	r7, sp, #0
 8006464:	1d3b      	adds	r3, r7, #4
 8006466:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f000 bef4 	b.w	800725e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 816a 	beq.w	800675a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006486:	4bb3      	ldr	r3, [pc, #716]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b04      	cmp	r3, #4
 8006490:	d00c      	beq.n	80064ac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006492:	4bb0      	ldr	r3, [pc, #704]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	2b08      	cmp	r3, #8
 800649c:	d159      	bne.n	8006552 <HAL_RCC_OscConfig+0xf6>
 800649e:	4bad      	ldr	r3, [pc, #692]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064aa:	d152      	bne.n	8006552 <HAL_RCC_OscConfig+0xf6>
 80064ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80064b8:	fa93 f3a3 	rbit	r3, r3
 80064bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80064c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c4:	fab3 f383 	clz	r3, r3
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d102      	bne.n	80064de <HAL_RCC_OscConfig+0x82>
 80064d8:	4b9e      	ldr	r3, [pc, #632]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	e015      	b.n	800650a <HAL_RCC_OscConfig+0xae>
 80064de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80064f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80064fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80064fe:	fa93 f3a3 	rbit	r3, r3
 8006502:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006506:	4b93      	ldr	r3, [pc, #588]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800650e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006512:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006516:	fa92 f2a2 	rbit	r2, r2
 800651a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800651e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006522:	fab2 f282 	clz	r2, r2
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	f042 0220 	orr.w	r2, r2, #32
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	f002 021f 	and.w	r2, r2, #31
 8006532:	2101      	movs	r1, #1
 8006534:	fa01 f202 	lsl.w	r2, r1, r2
 8006538:	4013      	ands	r3, r2
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 810c 	beq.w	8006758 <HAL_RCC_OscConfig+0x2fc>
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f040 8106 	bne.w	8006758 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f000 be86 	b.w	800725e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655c:	d106      	bne.n	800656c <HAL_RCC_OscConfig+0x110>
 800655e:	4b7d      	ldr	r3, [pc, #500]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a7c      	ldr	r2, [pc, #496]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e030      	b.n	80065ce <HAL_RCC_OscConfig+0x172>
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <HAL_RCC_OscConfig+0x134>
 8006576:	4b77      	ldr	r3, [pc, #476]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a76      	ldr	r2, [pc, #472]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 800657c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	4b74      	ldr	r3, [pc, #464]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a73      	ldr	r2, [pc, #460]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	e01e      	b.n	80065ce <HAL_RCC_OscConfig+0x172>
 8006590:	1d3b      	adds	r3, r7, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800659a:	d10c      	bne.n	80065b6 <HAL_RCC_OscConfig+0x15a>
 800659c:	4b6d      	ldr	r3, [pc, #436]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a6c      	ldr	r2, [pc, #432]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	4b6a      	ldr	r3, [pc, #424]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a69      	ldr	r2, [pc, #420]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e00b      	b.n	80065ce <HAL_RCC_OscConfig+0x172>
 80065b6:	4b67      	ldr	r3, [pc, #412]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a66      	ldr	r2, [pc, #408]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	4b64      	ldr	r3, [pc, #400]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a63      	ldr	r2, [pc, #396]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065ce:	4b61      	ldr	r3, [pc, #388]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	f023 020f 	bic.w	r2, r3, #15
 80065d6:	1d3b      	adds	r3, r7, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	495d      	ldr	r1, [pc, #372]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d059      	beq.n	80066a0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ec:	f7fd ff7c 	bl	80044e8 <HAL_GetTick>
 80065f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065f4:	e00a      	b.n	800660c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065f6:	f7fd ff77 	bl	80044e8 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	; 0x64
 8006604:	d902      	bls.n	800660c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	f000 be29 	b.w	800725e <HAL_RCC_OscConfig+0xe02>
 800660c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006610:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006614:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006618:	fa93 f3a3 	rbit	r3, r3
 800661c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006620:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006624:	fab3 f383 	clz	r3, r3
 8006628:	b2db      	uxtb	r3, r3
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	d102      	bne.n	800663e <HAL_RCC_OscConfig+0x1e2>
 8006638:	4b46      	ldr	r3, [pc, #280]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	e015      	b.n	800666a <HAL_RCC_OscConfig+0x20e>
 800663e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006642:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006646:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800664a:	fa93 f3a3 	rbit	r3, r3
 800664e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006656:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800665a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800665e:	fa93 f3a3 	rbit	r3, r3
 8006662:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006666:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800666e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006672:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006676:	fa92 f2a2 	rbit	r2, r2
 800667a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800667e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006682:	fab2 f282 	clz	r2, r2
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	f042 0220 	orr.w	r2, r2, #32
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	f002 021f 	and.w	r2, r2, #31
 8006692:	2101      	movs	r1, #1
 8006694:	fa01 f202 	lsl.w	r2, r1, r2
 8006698:	4013      	ands	r3, r2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0ab      	beq.n	80065f6 <HAL_RCC_OscConfig+0x19a>
 800669e:	e05c      	b.n	800675a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a0:	f7fd ff22 	bl	80044e8 <HAL_GetTick>
 80066a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a8:	e00a      	b.n	80066c0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066aa:	f7fd ff1d 	bl	80044e8 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	; 0x64
 80066b8:	d902      	bls.n	80066c0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	f000 bdcf 	b.w	800725e <HAL_RCC_OscConfig+0xe02>
 80066c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80066cc:	fa93 f3a3 	rbit	r3, r3
 80066d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80066d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d8:	fab3 f383 	clz	r3, r3
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d102      	bne.n	80066f2 <HAL_RCC_OscConfig+0x296>
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	e015      	b.n	800671e <HAL_RCC_OscConfig+0x2c2>
 80066f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80066fe:	fa93 f3a3 	rbit	r3, r3
 8006702:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800670a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800670e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006712:	fa93 f3a3 	rbit	r3, r3
 8006716:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800671a:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <HAL_RCC_OscConfig+0x2f8>)
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006722:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006726:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800672a:	fa92 f2a2 	rbit	r2, r2
 800672e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006732:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006736:	fab2 f282 	clz	r2, r2
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	f042 0220 	orr.w	r2, r2, #32
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	f002 021f 	and.w	r2, r2, #31
 8006746:	2101      	movs	r1, #1
 8006748:	fa01 f202 	lsl.w	r2, r1, r2
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1ab      	bne.n	80066aa <HAL_RCC_OscConfig+0x24e>
 8006752:	e002      	b.n	800675a <HAL_RCC_OscConfig+0x2fe>
 8006754:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 816f 	beq.w	8006a48 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800676a:	4bd0      	ldr	r3, [pc, #832]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006776:	4bcd      	ldr	r3, [pc, #820]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b08      	cmp	r3, #8
 8006780:	d16c      	bne.n	800685c <HAL_RCC_OscConfig+0x400>
 8006782:	4bca      	ldr	r3, [pc, #808]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d166      	bne.n	800685c <HAL_RCC_OscConfig+0x400>
 800678e:	2302      	movs	r3, #2
 8006790:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006794:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80067a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a4:	fab3 f383 	clz	r3, r3
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d102      	bne.n	80067be <HAL_RCC_OscConfig+0x362>
 80067b8:	4bbc      	ldr	r3, [pc, #752]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	e013      	b.n	80067e6 <HAL_RCC_OscConfig+0x38a>
 80067be:	2302      	movs	r3, #2
 80067c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80067c8:	fa93 f3a3 	rbit	r3, r3
 80067cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80067d0:	2302      	movs	r3, #2
 80067d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80067d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80067da:	fa93 f3a3 	rbit	r3, r3
 80067de:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80067e2:	4bb2      	ldr	r3, [pc, #712]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2202      	movs	r2, #2
 80067e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80067ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80067f0:	fa92 f2a2 	rbit	r2, r2
 80067f4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80067f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80067fc:	fab2 f282 	clz	r2, r2
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	f042 0220 	orr.w	r2, r2, #32
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	f002 021f 	and.w	r2, r2, #31
 800680c:	2101      	movs	r1, #1
 800680e:	fa01 f202 	lsl.w	r2, r1, r2
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <HAL_RCC_OscConfig+0x3cc>
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d002      	beq.n	8006828 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f000 bd1b 	b.w	800725e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006828:	4ba0      	ldr	r3, [pc, #640]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006830:	1d3b      	adds	r3, r7, #4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	21f8      	movs	r1, #248	; 0xf8
 8006838:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006840:	fa91 f1a1 	rbit	r1, r1
 8006844:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006848:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800684c:	fab1 f181 	clz	r1, r1
 8006850:	b2c9      	uxtb	r1, r1
 8006852:	408b      	lsls	r3, r1
 8006854:	4995      	ldr	r1, [pc, #596]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 8006856:	4313      	orrs	r3, r2
 8006858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685a:	e0f5      	b.n	8006a48 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800685c:	1d3b      	adds	r3, r7, #4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8085 	beq.w	8006972 <HAL_RCC_OscConfig+0x516>
 8006868:	2301      	movs	r3, #1
 800686a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800686e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006872:	fa93 f3a3 	rbit	r3, r3
 8006876:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800687a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800687e:	fab3 f383 	clz	r3, r3
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	461a      	mov	r2, r3
 8006890:	2301      	movs	r3, #1
 8006892:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006894:	f7fd fe28 	bl	80044e8 <HAL_GetTick>
 8006898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689c:	e00a      	b.n	80068b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800689e:	f7fd fe23 	bl	80044e8 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d902      	bls.n	80068b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	f000 bcd5 	b.w	800725e <HAL_RCC_OscConfig+0xe02>
 80068b4:	2302      	movs	r3, #2
 80068b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80068be:	fa93 f3a3 	rbit	r3, r3
 80068c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80068c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ca:	fab3 f383 	clz	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d102      	bne.n	80068e4 <HAL_RCC_OscConfig+0x488>
 80068de:	4b73      	ldr	r3, [pc, #460]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	e013      	b.n	800690c <HAL_RCC_OscConfig+0x4b0>
 80068e4:	2302      	movs	r3, #2
 80068e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80068ee:	fa93 f3a3 	rbit	r3, r3
 80068f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80068f6:	2302      	movs	r3, #2
 80068f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80068fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006900:	fa93 f3a3 	rbit	r3, r3
 8006904:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006908:	4b68      	ldr	r3, [pc, #416]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	2202      	movs	r2, #2
 800690e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006912:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006916:	fa92 f2a2 	rbit	r2, r2
 800691a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800691e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006922:	fab2 f282 	clz	r2, r2
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	f042 0220 	orr.w	r2, r2, #32
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	f002 021f 	and.w	r2, r2, #31
 8006932:	2101      	movs	r1, #1
 8006934:	fa01 f202 	lsl.w	r2, r1, r2
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0af      	beq.n	800689e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693e:	4b5b      	ldr	r3, [pc, #364]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	21f8      	movs	r1, #248	; 0xf8
 800694e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006952:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006956:	fa91 f1a1 	rbit	r1, r1
 800695a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800695e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006962:	fab1 f181 	clz	r1, r1
 8006966:	b2c9      	uxtb	r1, r1
 8006968:	408b      	lsls	r3, r1
 800696a:	4950      	ldr	r1, [pc, #320]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 800696c:	4313      	orrs	r3, r2
 800696e:	600b      	str	r3, [r1, #0]
 8006970:	e06a      	b.n	8006a48 <HAL_RCC_OscConfig+0x5ec>
 8006972:	2301      	movs	r3, #1
 8006974:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006978:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800697c:	fa93 f3a3 	rbit	r3, r3
 8006980:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006984:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006988:	fab3 f383 	clz	r3, r3
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006992:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	461a      	mov	r2, r3
 800699a:	2300      	movs	r3, #0
 800699c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699e:	f7fd fda3 	bl	80044e8 <HAL_GetTick>
 80069a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a6:	e00a      	b.n	80069be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a8:	f7fd fd9e 	bl	80044e8 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d902      	bls.n	80069be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	f000 bc50 	b.w	800725e <HAL_RCC_OscConfig+0xe02>
 80069be:	2302      	movs	r3, #2
 80069c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069c8:	fa93 f3a3 	rbit	r3, r3
 80069cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80069d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d4:	fab3 f383 	clz	r3, r3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d102      	bne.n	80069ee <HAL_RCC_OscConfig+0x592>
 80069e8:	4b30      	ldr	r3, [pc, #192]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	e013      	b.n	8006a16 <HAL_RCC_OscConfig+0x5ba>
 80069ee:	2302      	movs	r3, #2
 80069f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069f8:	fa93 f3a3 	rbit	r3, r3
 80069fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a00:	2302      	movs	r3, #2
 8006a02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a0a:	fa93 f3a3 	rbit	r3, r3
 8006a0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a12:	4b26      	ldr	r3, [pc, #152]	; (8006aac <HAL_RCC_OscConfig+0x650>)
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2202      	movs	r2, #2
 8006a18:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006a1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006a20:	fa92 f2a2 	rbit	r2, r2
 8006a24:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006a28:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006a2c:	fab2 f282 	clz	r2, r2
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	f042 0220 	orr.w	r2, r2, #32
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	f002 021f 	and.w	r2, r2, #31
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a42:	4013      	ands	r3, r2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1af      	bne.n	80069a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a48:	1d3b      	adds	r3, r7, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80da 	beq.w	8006c0c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a58:	1d3b      	adds	r3, r7, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d069      	beq.n	8006b36 <HAL_RCC_OscConfig+0x6da>
 8006a62:	2301      	movs	r3, #1
 8006a64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a6c:	fa93 f3a3 	rbit	r3, r3
 8006a70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a78:	fab3 f383 	clz	r3, r3
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <HAL_RCC_OscConfig+0x654>)
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	461a      	mov	r2, r3
 8006a88:	2301      	movs	r3, #1
 8006a8a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a8c:	f7fd fd2c 	bl	80044e8 <HAL_GetTick>
 8006a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a94:	e00e      	b.n	8006ab4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a96:	f7fd fd27 	bl	80044e8 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d906      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e3d9      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
 8006aaa:	bf00      	nop
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	10908120 	.word	0x10908120
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006abe:	fa93 f3a3 	rbit	r3, r3
 8006ac2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ac6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006aca:	2202      	movs	r2, #2
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	fa93 f2a3 	rbit	r2, r3
 8006ad8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	fa93 f2a3 	rbit	r2, r3
 8006af0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006af4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af6:	4ba5      	ldr	r3, [pc, #660]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006afa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006afe:	2102      	movs	r1, #2
 8006b00:	6019      	str	r1, [r3, #0]
 8006b02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	fa93 f1a3 	rbit	r1, r3
 8006b0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006b10:	6019      	str	r1, [r3, #0]
  return result;
 8006b12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	fab3 f383 	clz	r3, r3
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	2101      	movs	r1, #1
 8006b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0b0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x63a>
 8006b34:	e06a      	b.n	8006c0c <HAL_RCC_OscConfig+0x7b0>
 8006b36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	fa93 f2a3 	rbit	r2, r3
 8006b48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b4c:	601a      	str	r2, [r3, #0]
  return result;
 8006b4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b54:	fab3 f383 	clz	r3, r3
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b8c      	ldr	r3, [pc, #560]	; (8006d90 <HAL_RCC_OscConfig+0x934>)
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	461a      	mov	r2, r3
 8006b64:	2300      	movs	r3, #0
 8006b66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b68:	f7fd fcbe 	bl	80044e8 <HAL_GetTick>
 8006b6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b70:	e009      	b.n	8006b86 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b72:	f7fd fcb9 	bl	80044e8 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e36b      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
 8006b86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	fa93 f2a3 	rbit	r2, r3
 8006b98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	fa93 f2a3 	rbit	r2, r3
 8006bb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006bba:	2202      	movs	r2, #2
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	fa93 f2a3 	rbit	r2, r3
 8006bc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006bcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bce:	4b6f      	ldr	r3, [pc, #444]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	6019      	str	r1, [r3, #0]
 8006bda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	fa93 f1a3 	rbit	r1, r3
 8006be4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006be8:	6019      	str	r1, [r3, #0]
  return result;
 8006bea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	fab3 f383 	clz	r3, r3
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	2101      	movs	r1, #1
 8006c02:	fa01 f303 	lsl.w	r3, r1, r3
 8006c06:	4013      	ands	r3, r2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1b2      	bne.n	8006b72 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c0c:	1d3b      	adds	r3, r7, #4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8158 	beq.w	8006ecc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c22:	4b5a      	ldr	r3, [pc, #360]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d112      	bne.n	8006c54 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c2e:	4b57      	ldr	r3, [pc, #348]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	4a56      	ldr	r2, [pc, #344]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c38:	61d3      	str	r3, [r2, #28]
 8006c3a:	4b54      	ldr	r3, [pc, #336]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006c42:	f107 0308 	add.w	r3, r7, #8
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f107 0308 	add.w	r3, r7, #8
 8006c4c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c54:	4b4f      	ldr	r3, [pc, #316]	; (8006d94 <HAL_RCC_OscConfig+0x938>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d11a      	bne.n	8006c96 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c60:	4b4c      	ldr	r3, [pc, #304]	; (8006d94 <HAL_RCC_OscConfig+0x938>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a4b      	ldr	r2, [pc, #300]	; (8006d94 <HAL_RCC_OscConfig+0x938>)
 8006c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c6c:	f7fd fc3c 	bl	80044e8 <HAL_GetTick>
 8006c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c74:	e009      	b.n	8006c8a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c76:	f7fd fc37 	bl	80044e8 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	; 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e2e9      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c8a:	4b42      	ldr	r3, [pc, #264]	; (8006d94 <HAL_RCC_OscConfig+0x938>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0ef      	beq.n	8006c76 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d106      	bne.n	8006cae <HAL_RCC_OscConfig+0x852>
 8006ca0:	4b3a      	ldr	r3, [pc, #232]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	4a39      	ldr	r2, [pc, #228]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6213      	str	r3, [r2, #32]
 8006cac:	e02f      	b.n	8006d0e <HAL_RCC_OscConfig+0x8b2>
 8006cae:	1d3b      	adds	r3, r7, #4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10c      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x876>
 8006cb8:	4b34      	ldr	r3, [pc, #208]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	4a33      	ldr	r2, [pc, #204]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	6213      	str	r3, [r2, #32]
 8006cc4:	4b31      	ldr	r3, [pc, #196]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	4a30      	ldr	r2, [pc, #192]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cca:	f023 0304 	bic.w	r3, r3, #4
 8006cce:	6213      	str	r3, [r2, #32]
 8006cd0:	e01d      	b.n	8006d0e <HAL_RCC_OscConfig+0x8b2>
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	d10c      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x89a>
 8006cdc:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006ce2:	f043 0304 	orr.w	r3, r3, #4
 8006ce6:	6213      	str	r3, [r2, #32]
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	4a27      	ldr	r2, [pc, #156]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6213      	str	r3, [r2, #32]
 8006cf4:	e00b      	b.n	8006d0e <HAL_RCC_OscConfig+0x8b2>
 8006cf6:	4b25      	ldr	r3, [pc, #148]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	4a24      	ldr	r2, [pc, #144]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006cfc:	f023 0301 	bic.w	r3, r3, #1
 8006d00:	6213      	str	r3, [r2, #32]
 8006d02:	4b22      	ldr	r3, [pc, #136]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006d08:	f023 0304 	bic.w	r3, r3, #4
 8006d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d06b      	beq.n	8006df0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d18:	f7fd fbe6 	bl	80044e8 <HAL_GetTick>
 8006d1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d20:	e00b      	b.n	8006d3a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d22:	f7fd fbe1 	bl	80044e8 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e291      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
 8006d3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006d3e:	2202      	movs	r2, #2
 8006d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	fa93 f2a3 	rbit	r2, r3
 8006d4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006d56:	2202      	movs	r2, #2
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	fa93 f2a3 	rbit	r2, r3
 8006d64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006d68:	601a      	str	r2, [r3, #0]
  return result;
 8006d6a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006d6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d70:	fab3 f383 	clz	r3, r3
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f043 0302 	orr.w	r3, r3, #2
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d109      	bne.n	8006d98 <HAL_RCC_OscConfig+0x93c>
 8006d84:	4b01      	ldr	r3, [pc, #4]	; (8006d8c <HAL_RCC_OscConfig+0x930>)
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	e014      	b.n	8006db4 <HAL_RCC_OscConfig+0x958>
 8006d8a:	bf00      	nop
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	10908120 	.word	0x10908120
 8006d94:	40007000 	.word	0x40007000
 8006d98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	fa93 f2a3 	rbit	r2, r3
 8006daa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	4bbb      	ldr	r3, [pc, #748]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006db8:	2102      	movs	r1, #2
 8006dba:	6011      	str	r1, [r2, #0]
 8006dbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	fa92 f1a2 	rbit	r1, r2
 8006dc6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006dca:	6011      	str	r1, [r2, #0]
  return result;
 8006dcc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006dd0:	6812      	ldr	r2, [r2, #0]
 8006dd2:	fab2 f282 	clz	r2, r2
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	f002 021f 	and.w	r2, r2, #31
 8006de2:	2101      	movs	r1, #1
 8006de4:	fa01 f202 	lsl.w	r2, r1, r2
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d099      	beq.n	8006d22 <HAL_RCC_OscConfig+0x8c6>
 8006dee:	e063      	b.n	8006eb8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df0:	f7fd fb7a 	bl	80044e8 <HAL_GetTick>
 8006df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df8:	e00b      	b.n	8006e12 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dfa:	f7fd fb75 	bl	80044e8 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e225      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
 8006e12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006e16:	2202      	movs	r2, #2
 8006e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	fa93 f2a3 	rbit	r2, r3
 8006e24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e2e:	2202      	movs	r2, #2
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	fa93 f2a3 	rbit	r2, r3
 8006e3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e40:	601a      	str	r2, [r3, #0]
  return result;
 8006e42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e48:	fab3 f383 	clz	r3, r3
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f043 0302 	orr.w	r3, r3, #2
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d102      	bne.n	8006e62 <HAL_RCC_OscConfig+0xa06>
 8006e5c:	4b90      	ldr	r3, [pc, #576]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	e00d      	b.n	8006e7e <HAL_RCC_OscConfig+0xa22>
 8006e62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006e66:	2202      	movs	r2, #2
 8006e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	fa93 f2a3 	rbit	r2, r3
 8006e74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	4b89      	ldr	r3, [pc, #548]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006e82:	2102      	movs	r1, #2
 8006e84:	6011      	str	r1, [r2, #0]
 8006e86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	fa92 f1a2 	rbit	r1, r2
 8006e90:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006e94:	6011      	str	r1, [r2, #0]
  return result;
 8006e96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	fab2 f282 	clz	r2, r2
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	f002 021f 	and.w	r2, r2, #31
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1a0      	bne.n	8006dfa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006eb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec0:	4b77      	ldr	r3, [pc, #476]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	4a76      	ldr	r2, [pc, #472]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ecc:	1d3b      	adds	r3, r7, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 81c2 	beq.w	800725c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ed8:	4b71      	ldr	r3, [pc, #452]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	f000 819c 	beq.w	800721e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	f040 8114 	bne.w	800711a <HAL_RCC_OscConfig+0xcbe>
 8006ef2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006ef6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	fa93 f2a3 	rbit	r2, r3
 8006f06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f0a:	601a      	str	r2, [r3, #0]
  return result;
 8006f0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f12:	fab3 f383 	clz	r3, r3
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	461a      	mov	r2, r3
 8006f24:	2300      	movs	r3, #0
 8006f26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f28:	f7fd fade 	bl	80044e8 <HAL_GetTick>
 8006f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f30:	e009      	b.n	8006f46 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f32:	f7fd fad9 	bl	80044e8 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e18b      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
 8006f46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	fa93 f2a3 	rbit	r2, r3
 8006f5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006f5e:	601a      	str	r2, [r3, #0]
  return result;
 8006f60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006f64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f66:	fab3 f383 	clz	r3, r3
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	f043 0301 	orr.w	r3, r3, #1
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d102      	bne.n	8006f80 <HAL_RCC_OscConfig+0xb24>
 8006f7a:	4b49      	ldr	r3, [pc, #292]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	e01b      	b.n	8006fb8 <HAL_RCC_OscConfig+0xb5c>
 8006f80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	fa93 f2a3 	rbit	r2, r3
 8006f94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	fa93 f2a3 	rbit	r2, r3
 8006fae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	4b3a      	ldr	r3, [pc, #232]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006fbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006fc0:	6011      	str	r1, [r2, #0]
 8006fc2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	fa92 f1a2 	rbit	r1, r2
 8006fcc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006fd0:	6011      	str	r1, [r2, #0]
  return result;
 8006fd2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	fab2 f282 	clz	r2, r2
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	f042 0220 	orr.w	r2, r2, #32
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	f002 021f 	and.w	r2, r2, #31
 8006fe8:	2101      	movs	r1, #1
 8006fea:	fa01 f202 	lsl.w	r2, r1, r2
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d19e      	bne.n	8006f32 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ff4:	4b2a      	ldr	r3, [pc, #168]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ffc:	1d3b      	adds	r3, r7, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007002:	1d3b      	adds	r3, r7, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	430b      	orrs	r3, r1
 800700a:	4925      	ldr	r1, [pc, #148]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 800700c:	4313      	orrs	r3, r2
 800700e:	604b      	str	r3, [r1, #4]
 8007010:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	fa93 f2a3 	rbit	r2, r3
 8007024:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007028:	601a      	str	r2, [r3, #0]
  return result;
 800702a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800702e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007030:	fab3 f383 	clz	r3, r3
 8007034:	b2db      	uxtb	r3, r3
 8007036:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800703a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	461a      	mov	r2, r3
 8007042:	2301      	movs	r3, #1
 8007044:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007046:	f7fd fa4f 	bl	80044e8 <HAL_GetTick>
 800704a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800704e:	e009      	b.n	8007064 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007050:	f7fd fa4a 	bl	80044e8 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e0fc      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
 8007064:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800706c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	fa93 f2a3 	rbit	r2, r3
 8007078:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800707c:	601a      	str	r2, [r3, #0]
  return result;
 800707e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007082:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007084:	fab3 f383 	clz	r3, r3
 8007088:	b2db      	uxtb	r3, r3
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f043 0301 	orr.w	r3, r3, #1
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d105      	bne.n	80070a4 <HAL_RCC_OscConfig+0xc48>
 8007098:	4b01      	ldr	r3, [pc, #4]	; (80070a0 <HAL_RCC_OscConfig+0xc44>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	e01e      	b.n	80070dc <HAL_RCC_OscConfig+0xc80>
 800709e:	bf00      	nop
 80070a0:	40021000 	.word	0x40021000
 80070a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80070a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	fa93 f2a3 	rbit	r2, r3
 80070b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	fa93 f2a3 	rbit	r2, r3
 80070d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	4b63      	ldr	r3, [pc, #396]	; (8007268 <HAL_RCC_OscConfig+0xe0c>)
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80070e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80070e4:	6011      	str	r1, [r2, #0]
 80070e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	fa92 f1a2 	rbit	r1, r2
 80070f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80070f4:	6011      	str	r1, [r2, #0]
  return result;
 80070f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	fab2 f282 	clz	r2, r2
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	f042 0220 	orr.w	r2, r2, #32
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	f002 021f 	and.w	r2, r2, #31
 800710c:	2101      	movs	r1, #1
 800710e:	fa01 f202 	lsl.w	r2, r1, r2
 8007112:	4013      	ands	r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d09b      	beq.n	8007050 <HAL_RCC_OscConfig+0xbf4>
 8007118:	e0a0      	b.n	800725c <HAL_RCC_OscConfig+0xe00>
 800711a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800711e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	fa93 f2a3 	rbit	r2, r3
 800712e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007132:	601a      	str	r2, [r3, #0]
  return result;
 8007134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007138:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713a:	fab3 f383 	clz	r3, r3
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	461a      	mov	r2, r3
 800714c:	2300      	movs	r3, #0
 800714e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007150:	f7fd f9ca 	bl	80044e8 <HAL_GetTick>
 8007154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007158:	e009      	b.n	800716e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715a:	f7fd f9c5 	bl	80044e8 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e077      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
 800716e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007172:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	fa93 f2a3 	rbit	r2, r3
 8007182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007186:	601a      	str	r2, [r3, #0]
  return result;
 8007188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800718c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800718e:	fab3 f383 	clz	r3, r3
 8007192:	b2db      	uxtb	r3, r3
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d102      	bne.n	80071a8 <HAL_RCC_OscConfig+0xd4c>
 80071a2:	4b31      	ldr	r3, [pc, #196]	; (8007268 <HAL_RCC_OscConfig+0xe0c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	e01b      	b.n	80071e0 <HAL_RCC_OscConfig+0xd84>
 80071a8:	f107 0320 	add.w	r3, r7, #32
 80071ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b2:	f107 0320 	add.w	r3, r7, #32
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	fa93 f2a3 	rbit	r2, r3
 80071bc:	f107 031c 	add.w	r3, r7, #28
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	f107 0318 	add.w	r3, r7, #24
 80071c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f107 0318 	add.w	r3, r7, #24
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	fa93 f2a3 	rbit	r2, r3
 80071d6:	f107 0314 	add.w	r3, r7, #20
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	4b22      	ldr	r3, [pc, #136]	; (8007268 <HAL_RCC_OscConfig+0xe0c>)
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	f107 0210 	add.w	r2, r7, #16
 80071e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80071e8:	6011      	str	r1, [r2, #0]
 80071ea:	f107 0210 	add.w	r2, r7, #16
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	fa92 f1a2 	rbit	r1, r2
 80071f4:	f107 020c 	add.w	r2, r7, #12
 80071f8:	6011      	str	r1, [r2, #0]
  return result;
 80071fa:	f107 020c 	add.w	r2, r7, #12
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	fab2 f282 	clz	r2, r2
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	f042 0220 	orr.w	r2, r2, #32
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	f002 021f 	and.w	r2, r2, #31
 8007210:	2101      	movs	r1, #1
 8007212:	fa01 f202 	lsl.w	r2, r1, r2
 8007216:	4013      	ands	r3, r2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d19e      	bne.n	800715a <HAL_RCC_OscConfig+0xcfe>
 800721c:	e01e      	b.n	800725c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800721e:	1d3b      	adds	r3, r7, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e018      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800722c:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <HAL_RCC_OscConfig+0xe0c>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007234:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007238:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800723c:	1d3b      	adds	r3, r7, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	429a      	cmp	r2, r3
 8007244:	d108      	bne.n	8007258 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007246:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800724a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800724e:	1d3b      	adds	r3, r7, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007254:	429a      	cmp	r2, r3
 8007256:	d001      	beq.n	800725c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40021000 	.word	0x40021000

0800726c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b09e      	sub	sp, #120	; 0x78
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e162      	b.n	800754a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007284:	4b90      	ldr	r3, [pc, #576]	; (80074c8 <HAL_RCC_ClockConfig+0x25c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d910      	bls.n	80072b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007292:	4b8d      	ldr	r3, [pc, #564]	; (80074c8 <HAL_RCC_ClockConfig+0x25c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f023 0207 	bic.w	r2, r3, #7
 800729a:	498b      	ldr	r1, [pc, #556]	; (80074c8 <HAL_RCC_ClockConfig+0x25c>)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	4313      	orrs	r3, r2
 80072a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a2:	4b89      	ldr	r3, [pc, #548]	; (80074c8 <HAL_RCC_ClockConfig+0x25c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d001      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e14a      	b.n	800754a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072c0:	4b82      	ldr	r3, [pc, #520]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	497f      	ldr	r1, [pc, #508]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80dc 	beq.w	8007498 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d13c      	bne.n	8007362 <HAL_RCC_ClockConfig+0xf6>
 80072e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072f0:	fa93 f3a3 	rbit	r3, r3
 80072f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80072f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072f8:	fab3 f383 	clz	r3, r3
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d102      	bne.n	8007312 <HAL_RCC_ClockConfig+0xa6>
 800730c:	4b6f      	ldr	r3, [pc, #444]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	e00f      	b.n	8007332 <HAL_RCC_ClockConfig+0xc6>
 8007312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007316:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800731a:	fa93 f3a3 	rbit	r3, r3
 800731e:	667b      	str	r3, [r7, #100]	; 0x64
 8007320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007324:	663b      	str	r3, [r7, #96]	; 0x60
 8007326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007328:	fa93 f3a3 	rbit	r3, r3
 800732c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800732e:	4b67      	ldr	r3, [pc, #412]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007336:	65ba      	str	r2, [r7, #88]	; 0x58
 8007338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800733a:	fa92 f2a2 	rbit	r2, r2
 800733e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007342:	fab2 f282 	clz	r2, r2
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	f042 0220 	orr.w	r2, r2, #32
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	f002 021f 	and.w	r2, r2, #31
 8007352:	2101      	movs	r1, #1
 8007354:	fa01 f202 	lsl.w	r2, r1, r2
 8007358:	4013      	ands	r3, r2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d17b      	bne.n	8007456 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e0f3      	b.n	800754a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d13c      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x178>
 800736a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800736e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007372:	fa93 f3a3 	rbit	r3, r3
 8007376:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737a:	fab3 f383 	clz	r3, r3
 800737e:	b2db      	uxtb	r3, r3
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f043 0301 	orr.w	r3, r3, #1
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d102      	bne.n	8007394 <HAL_RCC_ClockConfig+0x128>
 800738e:	4b4f      	ldr	r3, [pc, #316]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	e00f      	b.n	80073b4 <HAL_RCC_ClockConfig+0x148>
 8007394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007398:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739c:	fa93 f3a3 	rbit	r3, r3
 80073a0:	647b      	str	r3, [r7, #68]	; 0x44
 80073a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073a6:	643b      	str	r3, [r7, #64]	; 0x40
 80073a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b0:	4b46      	ldr	r3, [pc, #280]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80073ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073bc:	fa92 f2a2 	rbit	r2, r2
 80073c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80073c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c4:	fab2 f282 	clz	r2, r2
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	f042 0220 	orr.w	r2, r2, #32
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	f002 021f 	and.w	r2, r2, #31
 80073d4:	2101      	movs	r1, #1
 80073d6:	fa01 f202 	lsl.w	r2, r1, r2
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d13a      	bne.n	8007456 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0b2      	b.n	800754a <HAL_RCC_ClockConfig+0x2de>
 80073e4:	2302      	movs	r3, #2
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	fa93 f3a3 	rbit	r3, r3
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073f2:	fab3 f383 	clz	r3, r3
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	095b      	lsrs	r3, r3, #5
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	f043 0301 	orr.w	r3, r3, #1
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d102      	bne.n	800740c <HAL_RCC_ClockConfig+0x1a0>
 8007406:	4b31      	ldr	r3, [pc, #196]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	e00d      	b.n	8007428 <HAL_RCC_ClockConfig+0x1bc>
 800740c:	2302      	movs	r3, #2
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	fa93 f3a3 	rbit	r3, r3
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
 8007418:	2302      	movs	r3, #2
 800741a:	623b      	str	r3, [r7, #32]
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	fa93 f3a3 	rbit	r3, r3
 8007422:	61fb      	str	r3, [r7, #28]
 8007424:	4b29      	ldr	r3, [pc, #164]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	2202      	movs	r2, #2
 800742a:	61ba      	str	r2, [r7, #24]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	fa92 f2a2 	rbit	r2, r2
 8007432:	617a      	str	r2, [r7, #20]
  return result;
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	fab2 f282 	clz	r2, r2
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	f042 0220 	orr.w	r2, r2, #32
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	f002 021f 	and.w	r2, r2, #31
 8007446:	2101      	movs	r1, #1
 8007448:	fa01 f202 	lsl.w	r2, r1, r2
 800744c:	4013      	ands	r3, r2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e079      	b.n	800754a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007456:	4b1d      	ldr	r3, [pc, #116]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f023 0203 	bic.w	r2, r3, #3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	491a      	ldr	r1, [pc, #104]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 8007464:	4313      	orrs	r3, r2
 8007466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007468:	f7fd f83e 	bl	80044e8 <HAL_GetTick>
 800746c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800746e:	e00a      	b.n	8007486 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007470:	f7fd f83a 	bl	80044e8 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	f241 3288 	movw	r2, #5000	; 0x1388
 800747e:	4293      	cmp	r3, r2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e061      	b.n	800754a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007486:	4b11      	ldr	r3, [pc, #68]	; (80074cc <HAL_RCC_ClockConfig+0x260>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f003 020c 	and.w	r2, r3, #12
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	429a      	cmp	r2, r3
 8007496:	d1eb      	bne.n	8007470 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <HAL_RCC_ClockConfig+0x25c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d214      	bcs.n	80074d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074a6:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <HAL_RCC_ClockConfig+0x25c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f023 0207 	bic.w	r2, r3, #7
 80074ae:	4906      	ldr	r1, [pc, #24]	; (80074c8 <HAL_RCC_ClockConfig+0x25c>)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074b6:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <HAL_RCC_ClockConfig+0x25c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d005      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e040      	b.n	800754a <HAL_RCC_ClockConfig+0x2de>
 80074c8:	40022000 	.word	0x40022000
 80074cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074dc:	4b1d      	ldr	r3, [pc, #116]	; (8007554 <HAL_RCC_ClockConfig+0x2e8>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	491a      	ldr	r1, [pc, #104]	; (8007554 <HAL_RCC_ClockConfig+0x2e8>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d009      	beq.n	800750e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074fa:	4b16      	ldr	r3, [pc, #88]	; (8007554 <HAL_RCC_ClockConfig+0x2e8>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	4912      	ldr	r1, [pc, #72]	; (8007554 <HAL_RCC_ClockConfig+0x2e8>)
 800750a:	4313      	orrs	r3, r2
 800750c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800750e:	f000 f829 	bl	8007564 <HAL_RCC_GetSysClockFreq>
 8007512:	4601      	mov	r1, r0
 8007514:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <HAL_RCC_ClockConfig+0x2e8>)
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800751c:	22f0      	movs	r2, #240	; 0xf0
 800751e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	fa92 f2a2 	rbit	r2, r2
 8007526:	60fa      	str	r2, [r7, #12]
  return result;
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	fab2 f282 	clz	r2, r2
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	40d3      	lsrs	r3, r2
 8007532:	4a09      	ldr	r2, [pc, #36]	; (8007558 <HAL_RCC_ClockConfig+0x2ec>)
 8007534:	5cd3      	ldrb	r3, [r2, r3]
 8007536:	fa21 f303 	lsr.w	r3, r1, r3
 800753a:	4a08      	ldr	r2, [pc, #32]	; (800755c <HAL_RCC_ClockConfig+0x2f0>)
 800753c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800753e:	4b08      	ldr	r3, [pc, #32]	; (8007560 <HAL_RCC_ClockConfig+0x2f4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f7fc ff8c 	bl	8004460 <HAL_InitTick>
  
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3778      	adds	r7, #120	; 0x78
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	40021000 	.word	0x40021000
 8007558:	0800c8b8 	.word	0x0800c8b8
 800755c:	20000104 	.word	0x20000104
 8007560:	20000108 	.word	0x20000108

08007564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007564:	b480      	push	{r7}
 8007566:	b08b      	sub	sp, #44	; 0x2c
 8007568:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	2300      	movs	r3, #0
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	2300      	movs	r3, #0
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
 8007576:	2300      	movs	r3, #0
 8007578:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800757e:	4b29      	ldr	r3, [pc, #164]	; (8007624 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f003 030c 	and.w	r3, r3, #12
 800758a:	2b04      	cmp	r3, #4
 800758c:	d002      	beq.n	8007594 <HAL_RCC_GetSysClockFreq+0x30>
 800758e:	2b08      	cmp	r3, #8
 8007590:	d003      	beq.n	800759a <HAL_RCC_GetSysClockFreq+0x36>
 8007592:	e03c      	b.n	800760e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007594:	4b24      	ldr	r3, [pc, #144]	; (8007628 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007596:	623b      	str	r3, [r7, #32]
      break;
 8007598:	e03c      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80075a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80075a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	fa92 f2a2 	rbit	r2, r2
 80075ac:	607a      	str	r2, [r7, #4]
  return result;
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	fab2 f282 	clz	r2, r2
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	40d3      	lsrs	r3, r2
 80075b8:	4a1c      	ldr	r2, [pc, #112]	; (800762c <HAL_RCC_GetSysClockFreq+0xc8>)
 80075ba:	5cd3      	ldrb	r3, [r2, r3]
 80075bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <HAL_RCC_GetSysClockFreq+0xc0>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	220f      	movs	r2, #15
 80075c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	fa92 f2a2 	rbit	r2, r2
 80075d0:	60fa      	str	r2, [r7, #12]
  return result;
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	fab2 f282 	clz	r2, r2
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	40d3      	lsrs	r3, r2
 80075dc:	4a14      	ldr	r2, [pc, #80]	; (8007630 <HAL_RCC_GetSysClockFreq+0xcc>)
 80075de:	5cd3      	ldrb	r3, [r2, r3]
 80075e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80075ec:	4a0e      	ldr	r2, [pc, #56]	; (8007628 <HAL_RCC_GetSysClockFreq+0xc4>)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	fb02 f303 	mul.w	r3, r2, r3
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
 80075fc:	e004      	b.n	8007608 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	4a0c      	ldr	r2, [pc, #48]	; (8007634 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	623b      	str	r3, [r7, #32]
      break;
 800760c:	e002      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007610:	623b      	str	r3, [r7, #32]
      break;
 8007612:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007614:	6a3b      	ldr	r3, [r7, #32]
}
 8007616:	4618      	mov	r0, r3
 8007618:	372c      	adds	r7, #44	; 0x2c
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40021000 	.word	0x40021000
 8007628:	007a1200 	.word	0x007a1200
 800762c:	0800c8d0 	.word	0x0800c8d0
 8007630:	0800c8e0 	.word	0x0800c8e0
 8007634:	003d0900 	.word	0x003d0900

08007638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800763c:	4b03      	ldr	r3, [pc, #12]	; (800764c <HAL_RCC_GetHCLKFreq+0x14>)
 800763e:	681b      	ldr	r3, [r3, #0]
}
 8007640:	4618      	mov	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000104 	.word	0x20000104

08007650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007656:	f7ff ffef 	bl	8007638 <HAL_RCC_GetHCLKFreq>
 800765a:	4601      	mov	r1, r0
 800765c:	4b0b      	ldr	r3, [pc, #44]	; (800768c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007664:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007668:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	fa92 f2a2 	rbit	r2, r2
 8007670:	603a      	str	r2, [r7, #0]
  return result;
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	fab2 f282 	clz	r2, r2
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	40d3      	lsrs	r3, r2
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <HAL_RCC_GetPCLK1Freq+0x40>)
 800767e:	5cd3      	ldrb	r3, [r2, r3]
 8007680:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40021000 	.word	0x40021000
 8007690:	0800c8c8 	.word	0x0800c8c8

08007694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800769a:	f7ff ffcd 	bl	8007638 <HAL_RCC_GetHCLKFreq>
 800769e:	4601      	mov	r1, r0
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80076a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80076ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	fa92 f2a2 	rbit	r2, r2
 80076b4:	603a      	str	r2, [r7, #0]
  return result;
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	fab2 f282 	clz	r2, r2
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	40d3      	lsrs	r3, r2
 80076c0:	4a04      	ldr	r2, [pc, #16]	; (80076d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80076c2:	5cd3      	ldrb	r3, [r2, r3]
 80076c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40021000 	.word	0x40021000
 80076d4:	0800c8c8 	.word	0x0800c8c8

080076d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b092      	sub	sp, #72	; 0x48
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80076e8:	2300      	movs	r3, #0
 80076ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 80d4 	beq.w	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076fc:	4b4e      	ldr	r3, [pc, #312]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10e      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007708:	4b4b      	ldr	r3, [pc, #300]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	4a4a      	ldr	r2, [pc, #296]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800770e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007712:	61d3      	str	r3, [r2, #28]
 8007714:	4b48      	ldr	r3, [pc, #288]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771c:	60bb      	str	r3, [r7, #8]
 800771e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007726:	4b45      	ldr	r3, [pc, #276]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772e:	2b00      	cmp	r3, #0
 8007730:	d118      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007732:	4b42      	ldr	r3, [pc, #264]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a41      	ldr	r2, [pc, #260]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800773c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800773e:	f7fc fed3 	bl	80044e8 <HAL_GetTick>
 8007742:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007744:	e008      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007746:	f7fc fecf 	bl	80044e8 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b64      	cmp	r3, #100	; 0x64
 8007752:	d901      	bls.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e169      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007758:	4b38      	ldr	r3, [pc, #224]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007764:	4b34      	ldr	r3, [pc, #208]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8084 	beq.w	800787e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800777e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007780:	429a      	cmp	r2, r3
 8007782:	d07c      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007784:	4b2c      	ldr	r3, [pc, #176]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800778e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007792:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	fa93 f3a3 	rbit	r3, r3
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800779e:	fab3 f383 	clz	r3, r3
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	4b26      	ldr	r3, [pc, #152]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	461a      	mov	r2, r3
 80077ae:	2301      	movs	r3, #1
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80077b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	fa93 f3a3 	rbit	r3, r3
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077c2:	fab3 f383 	clz	r3, r3
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	461a      	mov	r2, r3
 80077d2:	2300      	movs	r3, #0
 80077d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80077dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d04b      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e6:	f7fc fe7f 	bl	80044e8 <HAL_GetTick>
 80077ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ec:	e00a      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ee:	f7fc fe7b 	bl	80044e8 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d901      	bls.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e113      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007804:	2302      	movs	r3, #2
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	fa93 f3a3 	rbit	r3, r3
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
 8007810:	2302      	movs	r3, #2
 8007812:	623b      	str	r3, [r7, #32]
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	fa93 f3a3 	rbit	r3, r3
 800781a:	61fb      	str	r3, [r7, #28]
  return result;
 800781c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800781e:	fab3 f383 	clz	r3, r3
 8007822:	b2db      	uxtb	r3, r3
 8007824:	095b      	lsrs	r3, r3, #5
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d108      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007832:	4b01      	ldr	r3, [pc, #4]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	e00d      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007838:	40021000 	.word	0x40021000
 800783c:	40007000 	.word	0x40007000
 8007840:	10908100 	.word	0x10908100
 8007844:	2302      	movs	r3, #2
 8007846:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	fa93 f3a3 	rbit	r3, r3
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	4b78      	ldr	r3, [pc, #480]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	2202      	movs	r2, #2
 8007856:	613a      	str	r2, [r7, #16]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	fa92 f2a2 	rbit	r2, r2
 800785e:	60fa      	str	r2, [r7, #12]
  return result;
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	fab2 f282 	clz	r2, r2
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	f002 021f 	and.w	r2, r2, #31
 8007872:	2101      	movs	r1, #1
 8007874:	fa01 f202 	lsl.w	r2, r1, r2
 8007878:	4013      	ands	r3, r2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0b7      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800787e:	4b6d      	ldr	r3, [pc, #436]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	496a      	ldr	r1, [pc, #424]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800788c:	4313      	orrs	r3, r2
 800788e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007890:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007894:	2b01      	cmp	r3, #1
 8007896:	d105      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007898:	4b66      	ldr	r3, [pc, #408]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	4a65      	ldr	r2, [pc, #404]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800789e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d008      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078b0:	4b60      	ldr	r3, [pc, #384]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b4:	f023 0203 	bic.w	r2, r3, #3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	495d      	ldr	r1, [pc, #372]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d008      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078ce:	4b59      	ldr	r3, [pc, #356]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	4956      	ldr	r1, [pc, #344]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d008      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078ec:	4b51      	ldr	r3, [pc, #324]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	494e      	ldr	r1, [pc, #312]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d008      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800790a:	4b4a      	ldr	r3, [pc, #296]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	f023 0210 	bic.w	r2, r3, #16
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	4947      	ldr	r1, [pc, #284]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007918:	4313      	orrs	r3, r2
 800791a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	493f      	ldr	r1, [pc, #252]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007936:	4313      	orrs	r3, r2
 8007938:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d008      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007946:	4b3b      	ldr	r3, [pc, #236]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	f023 0220 	bic.w	r2, r3, #32
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	4938      	ldr	r1, [pc, #224]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007954:	4313      	orrs	r3, r2
 8007956:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0308 	and.w	r3, r3, #8
 8007960:	2b00      	cmp	r3, #0
 8007962:	d008      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007964:	4b33      	ldr	r3, [pc, #204]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	4930      	ldr	r1, [pc, #192]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007972:	4313      	orrs	r3, r2
 8007974:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b00      	cmp	r3, #0
 8007980:	d008      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007982:	4b2c      	ldr	r3, [pc, #176]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	4929      	ldr	r1, [pc, #164]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007990:	4313      	orrs	r3, r2
 8007992:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079a0:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4921      	ldr	r1, [pc, #132]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d008      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80079be:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	491a      	ldr	r1, [pc, #104]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d008      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80079dc:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	4912      	ldr	r1, [pc, #72]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d008      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80079fa:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	490b      	ldr	r1, [pc, #44]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007a18:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a24:	4903      	ldr	r1, [pc, #12]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3748      	adds	r7, #72	; 0x48
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40021000 	.word	0x40021000

08007a38 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e083      	b.n	8007b52 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7f5b      	ldrb	r3, [r3, #29]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d105      	bne.n	8007a60 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fc fae4 	bl	8004028 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	22ca      	movs	r2, #202	; 0xca
 8007a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2253      	movs	r2, #83	; 0x53
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fc26 	bl	80082c8 <RTC_EnterInitMode>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d008      	beq.n	8007a94 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	22ff      	movs	r2, #255	; 0xff
 8007a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e05e      	b.n	8007b52 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6899      	ldr	r1, [r3, #8]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	68d2      	ldr	r2, [r2, #12]
 8007ace:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6919      	ldr	r1, [r3, #16]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	041a      	lsls	r2, r3, #16
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007af2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10e      	bne.n	8007b20 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fbb8 	bl	8008278 <HAL_RTC_WaitForSynchro>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d008      	beq.n	8007b20 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	22ff      	movs	r2, #255	; 0xff
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2204      	movs	r2, #4
 8007b1a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e018      	b.n	8007b52 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b2e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	22ff      	movs	r2, #255	; 0xff
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007b50:	2300      	movs	r3, #0
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b5a:	b590      	push	{r4, r7, lr}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	7f1b      	ldrb	r3, [r3, #28]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_RTC_SetTime+0x1c>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e0aa      	b.n	8007ccc <HAL_RTC_SetTime+0x172>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d126      	bne.n	8007bd6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d102      	bne.n	8007b9c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fbbd 	bl	8008320 <RTC_ByteToBcd2>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fbb6 	bl	8008320 <RTC_ByteToBcd2>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007bb8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	789b      	ldrb	r3, [r3, #2]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fbae 	bl	8008320 <RTC_ByteToBcd2>
 8007bc4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007bc6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	78db      	ldrb	r3, [r3, #3]
 8007bce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	e018      	b.n	8007c08 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d102      	bne.n	8007bea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2200      	movs	r2, #0
 8007be8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	785b      	ldrb	r3, [r3, #1]
 8007bf4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007bf6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007bfc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	78db      	ldrb	r3, [r3, #3]
 8007c02:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	22ca      	movs	r2, #202	; 0xca
 8007c0e:	625a      	str	r2, [r3, #36]	; 0x24
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2253      	movs	r2, #83	; 0x53
 8007c16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fb55 	bl	80082c8 <RTC_EnterInitMode>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	22ff      	movs	r2, #255	; 0xff
 8007c2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2204      	movs	r2, #4
 8007c30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e047      	b.n	8007ccc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007c46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007c4a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6899      	ldr	r1, [r3, #8]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d111      	bne.n	8007cb6 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 faf0 	bl	8008278 <HAL_RTC_WaitForSynchro>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	22ff      	movs	r2, #255	; 0xff
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2204      	movs	r2, #4
 8007caa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e00a      	b.n	8007ccc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	22ff      	movs	r2, #255	; 0xff
 8007cbc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007cca:	2300      	movs	r3, #0
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd90      	pop	{r4, r7, pc}

08007cd4 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007d06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007d0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	0a1b      	lsrs	r3, r3, #8
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d11a      	bne.n	8007d86 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fb01 	bl	800835c <RTC_Bcd2ToByte>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 faf8 	bl	800835c <RTC_Bcd2ToByte>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	789b      	ldrb	r3, [r3, #2]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 faef 	bl	800835c <RTC_Bcd2ToByte>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	461a      	mov	r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	7f1b      	ldrb	r3, [r3, #28]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_RTC_SetDate+0x1c>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e094      	b.n	8007ed6 <HAL_RTC_SetDate+0x146>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2202      	movs	r2, #2
 8007db6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10e      	bne.n	8007ddc <HAL_RTC_SetDate+0x4c>
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	f023 0310 	bic.w	r3, r3, #16
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	330a      	adds	r3, #10
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d11c      	bne.n	8007e1c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	78db      	ldrb	r3, [r3, #3]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fa9a 	bl	8008320 <RTC_ByteToBcd2>
 8007dec:	4603      	mov	r3, r0
 8007dee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	785b      	ldrb	r3, [r3, #1]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fa93 	bl	8008320 <RTC_ByteToBcd2>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007dfe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	789b      	ldrb	r3, [r3, #2]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fa8b 	bl	8008320 <RTC_ByteToBcd2>
 8007e0a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007e0c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]
 8007e1a:	e00e      	b.n	8007e3a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	78db      	ldrb	r3, [r3, #3]
 8007e20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	785b      	ldrb	r3, [r3, #1]
 8007e26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007e2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007e36:	4313      	orrs	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	22ca      	movs	r2, #202	; 0xca
 8007e40:	625a      	str	r2, [r3, #36]	; 0x24
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2253      	movs	r2, #83	; 0x53
 8007e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fa3c 	bl	80082c8 <RTC_EnterInitMode>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	22ff      	movs	r2, #255	; 0xff
 8007e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2204      	movs	r2, #4
 8007e62:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e033      	b.n	8007ed6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d111      	bne.n	8007ec0 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 f9eb 	bl	8008278 <HAL_RTC_WaitForSynchro>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	22ff      	movs	r2, #255	; 0xff
 8007eae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e00a      	b.n	8007ed6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	22ff      	movs	r2, #255	; 0xff
 8007ec6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
  }
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd90      	pop	{r4, r7, pc}

08007ede <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ef8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007efc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	0a1b      	lsrs	r3, r3, #8
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	0b5b      	lsrs	r3, r3, #13
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d11a      	bne.n	8007f72 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	78db      	ldrb	r3, [r3, #3]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fa0b 	bl	800835c <RTC_Bcd2ToByte>
 8007f46:	4603      	mov	r3, r0
 8007f48:	461a      	mov	r2, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fa02 	bl	800835c <RTC_Bcd2ToByte>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	789b      	ldrb	r3, [r3, #2]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 f9f9 	bl	800835c <RTC_Bcd2ToByte>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b089      	sub	sp, #36	; 0x24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	7f1b      	ldrb	r3, [r3, #28]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_RTC_SetAlarm_IT+0x24>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e11f      	b.n	80081e0 <HAL_RTC_SetAlarm_IT+0x264>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d137      	bne.n	8008022 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f9a8 	bl	8008320 <RTC_ByteToBcd2>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 f9a1 	bl	8008320 <RTC_ByteToBcd2>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007fe2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	789b      	ldrb	r3, [r3, #2]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 f999 	bl	8008320 <RTC_ByteToBcd2>
 8007fee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007ff0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	78db      	ldrb	r3, [r3, #3]
 8007ff8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007ffa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 f98b 	bl	8008320 <RTC_ByteToBcd2>
 800800a:	4603      	mov	r3, r0
 800800c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800800e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008016:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800801c:	4313      	orrs	r3, r2
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	e023      	b.n	800806a <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	785b      	ldrb	r3, [r3, #1]
 8008040:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008042:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008048:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	78db      	ldrb	r3, [r3, #3]
 800804e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008050:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008058:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800805a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008060:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008066:	4313      	orrs	r3, r2
 8008068:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	4313      	orrs	r3, r2
 8008074:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	22ca      	movs	r2, #202	; 0xca
 800807c:	625a      	str	r2, [r3, #36]	; 0x24
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2253      	movs	r2, #83	; 0x53
 8008084:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808e:	d148      	bne.n	8008122 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800809e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80080b0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80080b2:	f7fc fa19 	bl	80044e8 <HAL_GetTick>
 80080b6:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80080b8:	e013      	b.n	80080e2 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80080ba:	f7fc fa15 	bl	80044e8 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080c8:	d90b      	bls.n	80080e2 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	22ff      	movs	r2, #255	; 0xff
 80080d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2203      	movs	r2, #3
 80080d6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e07e      	b.n	80081e0 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0e4      	beq.n	80080ba <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689a      	ldr	r2, [r3, #8]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800810e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800811e:	609a      	str	r2, [r3, #8]
 8008120:	e047      	b.n	80081b2 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008130:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008142:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008144:	f7fc f9d0 	bl	80044e8 <HAL_GetTick>
 8008148:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800814a:	e013      	b.n	8008174 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800814c:	f7fc f9cc 	bl	80044e8 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800815a:	d90b      	bls.n	8008174 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	22ff      	movs	r2, #255	; 0xff
 8008162:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2203      	movs	r2, #3
 8008168:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e035      	b.n	80081e0 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0e4      	beq.n	800814c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081a0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081b0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80081b2:	4b0d      	ldr	r3, [pc, #52]	; (80081e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a0c      	ldr	r2, [pc, #48]	; (80081e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 80081b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081bc:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4a09      	ldr	r2, [pc, #36]	; (80081e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 80081c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081c8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	22ff      	movs	r2, #255	; 0xff
 80081d0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3724      	adds	r7, #36	; 0x24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd90      	pop	{r4, r7, pc}
 80081e8:	40010400 	.word	0x40010400

080081ec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d012      	beq.n	8008228 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7f9 fbdf 	bl	80019d4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	b2da      	uxtb	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008226:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d012      	beq.n	800825c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f8d9 	bl	80083fc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	b2da      	uxtb	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f462 7220 	orn	r2, r2, #640	; 0x280
 800825a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <HAL_RTC_AlarmIRQHandler+0x88>)
 800825e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008262:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	775a      	strb	r2, [r3, #29]
}
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	40010400 	.word	0x40010400

08008278 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008292:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008294:	f7fc f928 	bl	80044e8 <HAL_GetTick>
 8008298:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800829a:	e009      	b.n	80082b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800829c:	f7fc f924 	bl	80044e8 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082aa:	d901      	bls.n	80082b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e007      	b.n	80082c0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0ee      	beq.n	800829c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d119      	bne.n	8008316 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80082ec:	f7fc f8fc 	bl	80044e8 <HAL_GetTick>
 80082f0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80082f2:	e009      	b.n	8008308 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80082f4:	f7fc f8f8 	bl	80044e8 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008302:	d901      	bls.n	8008308 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e007      	b.n	8008318 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0ee      	beq.n	80082f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800832e:	e005      	b.n	800833c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	3b0a      	subs	r3, #10
 800833a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	2b09      	cmp	r3, #9
 8008340:	d8f6      	bhi.n	8008330 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	b2da      	uxtb	r2, r3
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	4313      	orrs	r3, r2
 800834e:	b2db      	uxtb	r3, r3
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	091b      	lsrs	r3, r3, #4
 800836e:	b2db      	uxtb	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	b2da      	uxtb	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	4413      	add	r3, r2
 800838a:	b2db      	uxtb	r3, r3
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3350      	adds	r3, #80	; 0x50
 80083ae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4413      	add	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	601a      	str	r2, [r3, #0]
}
 80083c0:	bf00      	nop
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3350      	adds	r3, #80	; 0x50
 80083e0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e040      	b.n	80084a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7fb fe24 	bl	8004080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2224      	movs	r2, #36	; 0x24
 800843c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0201 	bic.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fbdc 	bl	8008c0c <UART_SetConfig>
 8008454:	4603      	mov	r3, r0
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e022      	b.n	80084a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fda4 	bl	8008fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800847a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800848a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0201 	orr.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fe2b 	bl	80090f8 <UART_CheckIdleState>
 80084a2:	4603      	mov	r3, r0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	; 0x28
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	4613      	mov	r3, r2
 80084ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	f040 8082 	bne.w	80085ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <HAL_UART_Transmit+0x26>
 80084cc:	88fb      	ldrh	r3, [r7, #6]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e07a      	b.n	80085cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_UART_Transmit+0x38>
 80084e0:	2302      	movs	r3, #2
 80084e2:	e073      	b.n	80085cc <HAL_UART_Transmit+0x120>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2221      	movs	r2, #33	; 0x21
 80084f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084fa:	f7fb fff5 	bl	80044e8 <HAL_GetTick>
 80084fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	88fa      	ldrh	r2, [r7, #6]
 8008504:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	88fa      	ldrh	r2, [r7, #6]
 800850c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008518:	d108      	bne.n	800852c <HAL_UART_Transmit+0x80>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d104      	bne.n	800852c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008522:	2300      	movs	r3, #0
 8008524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	e003      	b.n	8008534 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800853c:	e02d      	b.n	800859a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2200      	movs	r2, #0
 8008546:	2180      	movs	r1, #128	; 0x80
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 fe1e 	bl	800918a <UART_WaitOnFlagUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e039      	b.n	80085cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10b      	bne.n	8008576 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	881a      	ldrh	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800856a:	b292      	uxth	r2, r2
 800856c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	3302      	adds	r3, #2
 8008572:	61bb      	str	r3, [r7, #24]
 8008574:	e008      	b.n	8008588 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	781a      	ldrb	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	b292      	uxth	r2, r2
 8008580:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	3301      	adds	r3, #1
 8008586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1cb      	bne.n	800853e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2200      	movs	r2, #0
 80085ae:	2140      	movs	r1, #64	; 0x40
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 fdea 	bl	800918a <UART_WaitOnFlagUntilTimeout>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e005      	b.n	80085cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2220      	movs	r2, #32
 80085c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e000      	b.n	80085cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80085ca:	2302      	movs	r3, #2
  }
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08a      	sub	sp, #40	; 0x28
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	f040 80ac 	bne.w	8008746 <HAL_UART_Receive+0x172>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <HAL_UART_Receive+0x26>
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e0a4      	b.n	8008748 <HAL_UART_Receive+0x174>
    }

    __HAL_LOCK(huart);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_UART_Receive+0x38>
 8008608:	2302      	movs	r3, #2
 800860a:	e09d      	b.n	8008748 <HAL_UART_Receive+0x174>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2222      	movs	r2, #34	; 0x22
 8008620:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008628:	f7fb ff5e 	bl	80044e8 <HAL_GetTick>
 800862c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008646:	d10e      	bne.n	8008666 <HAL_UART_Receive+0x92>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <HAL_UART_Receive+0x88>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008656:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800865a:	e01a      	b.n	8008692 <HAL_UART_Receive+0xbe>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	22ff      	movs	r2, #255	; 0xff
 8008660:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008664:	e015      	b.n	8008692 <HAL_UART_Receive+0xbe>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10d      	bne.n	800868a <HAL_UART_Receive+0xb6>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d104      	bne.n	8008680 <HAL_UART_Receive+0xac>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	22ff      	movs	r2, #255	; 0xff
 800867a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800867e:	e008      	b.n	8008692 <HAL_UART_Receive+0xbe>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	227f      	movs	r2, #127	; 0x7f
 8008684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008688:	e003      	b.n	8008692 <HAL_UART_Receive+0xbe>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008698:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a2:	d108      	bne.n	80086b6 <HAL_UART_Receive+0xe2>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d104      	bne.n	80086b6 <HAL_UART_Receive+0xe2>
    {
      pdata8bits  = NULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	61bb      	str	r3, [r7, #24]
 80086b4:	e003      	b.n	80086be <HAL_UART_Receive+0xea>
    }
    else
    {
      pdata8bits  = pData;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80086c6:	e033      	b.n	8008730 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	2200      	movs	r2, #0
 80086d0:	2120      	movs	r1, #32
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 fd59 	bl	800918a <UART_WaitOnFlagUntilTimeout>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <HAL_UART_Receive+0x10e>
      {
        return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e032      	b.n	8008748 <HAL_UART_Receive+0x174>
      }
      if (pdata8bits == NULL)
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10c      	bne.n	8008702 <HAL_UART_Receive+0x12e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	8a7b      	ldrh	r3, [r7, #18]
 80086f2:	4013      	ands	r3, r2
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	3302      	adds	r3, #2
 80086fe:	61bb      	str	r3, [r7, #24]
 8008700:	e00d      	b.n	800871e <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008708:	b29b      	uxth	r3, r3
 800870a:	b2da      	uxtb	r2, r3
 800870c:	8a7b      	ldrh	r3, [r7, #18]
 800870e:	b2db      	uxtb	r3, r3
 8008710:	4013      	ands	r3, r2
 8008712:	b2da      	uxtb	r2, r3
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	3301      	adds	r3, #1
 800871c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1c5      	bne.n	80086c8 <HAL_UART_Receive+0xf4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2220      	movs	r2, #32
 8008740:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	e000      	b.n	8008748 <HAL_UART_Receive+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008746:	2302      	movs	r3, #2
  }
}
 8008748:	4618      	mov	r0, r3
 800874a:	3720      	adds	r7, #32
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008762:	2b20      	cmp	r3, #32
 8008764:	d12c      	bne.n	80087c0 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <HAL_UART_Receive_IT+0x22>
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e025      	b.n	80087c2 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_UART_Receive_IT+0x34>
 8008780:	2302      	movs	r3, #2
 8008782:	e01e      	b.n	80087c2 <HAL_UART_Receive_IT+0x72>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80087ae:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80087b0:	88fb      	ldrh	r3, [r7, #6]
 80087b2:	461a      	mov	r2, r3
 80087b4:	68b9      	ldr	r1, [r7, #8]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fd64 	bl	8009284 <UART_Start_Receive_IT>
 80087bc:	4603      	mov	r3, r0
 80087be:	e000      	b.n	80087c2 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80087c0:	2302      	movs	r3, #2
  }
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80087f2:	4013      	ands	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d113      	bne.n	8008824 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00e      	beq.n	8008824 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 81cc 	beq.w	8008bb2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	4798      	blx	r3
      }
      return;
 8008822:	e1c6      	b.n	8008bb2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 80e3 	beq.w	80089f2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	4ba5      	ldr	r3, [pc, #660]	; (8008ad0 <HAL_UART_IRQHandler+0x304>)
 800883a:	4013      	ands	r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 80d8 	beq.w	80089f2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d010      	beq.n	800886e <HAL_UART_IRQHandler+0xa2>
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2201      	movs	r2, #1
 800885c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008864:	f043 0201 	orr.w	r2, r3, #1
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d010      	beq.n	800889a <HAL_UART_IRQHandler+0xce>
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00b      	beq.n	800889a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2202      	movs	r2, #2
 8008888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008890:	f043 0204 	orr.w	r2, r3, #4
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d010      	beq.n	80088c6 <HAL_UART_IRQHandler+0xfa>
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00b      	beq.n	80088c6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2204      	movs	r2, #4
 80088b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088bc:	f043 0202 	orr.w	r2, r3, #2
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	f003 0308 	and.w	r3, r3, #8
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d015      	beq.n	80088fc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d104      	bne.n	80088e4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00b      	beq.n	80088fc <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2208      	movs	r2, #8
 80088ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088f2:	f043 0208 	orr.w	r2, r3, #8
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008902:	2b00      	cmp	r3, #0
 8008904:	d011      	beq.n	800892a <HAL_UART_IRQHandler+0x15e>
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00c      	beq.n	800892a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008920:	f043 0220 	orr.w	r2, r3, #32
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 8140 	beq.w	8008bb6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00c      	beq.n	800895a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008960:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896c:	2b40      	cmp	r3, #64	; 0x40
 800896e:	d004      	beq.n	800897a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008976:	2b00      	cmp	r3, #0
 8008978:	d031      	beq.n	80089de <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fcf8 	bl	8009370 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898a:	2b40      	cmp	r3, #64	; 0x40
 800898c:	d123      	bne.n	80089d6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800899c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d013      	beq.n	80089ce <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089aa:	4a4a      	ldr	r2, [pc, #296]	; (8008ad4 <HAL_UART_IRQHandler+0x308>)
 80089ac:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fd f85c 	bl	8005a70 <HAL_DMA_Abort_IT>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d017      	beq.n	80089ee <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089cc:	e00f      	b.n	80089ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f906 	bl	8008be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d4:	e00b      	b.n	80089ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f902 	bl	8008be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089dc:	e007      	b.n	80089ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f8fe 	bl	8008be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80089ec:	e0e3      	b.n	8008bb6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ee:	bf00      	nop
    return;
 80089f0:	e0e1      	b.n	8008bb6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	f040 80a7 	bne.w	8008b4a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80a1 	beq.w	8008b4a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	f003 0310 	and.w	r3, r3, #16
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 809b 	beq.w	8008b4a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2210      	movs	r2, #16
 8008a1a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d156      	bne.n	8008ad8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8008a34:	893b      	ldrh	r3, [r7, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80bf 	beq.w	8008bba <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a42:	893a      	ldrh	r2, [r7, #8]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	f080 80b8 	bcs.w	8008bba <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	893a      	ldrh	r2, [r7, #8]
 8008a4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d02a      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a6a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0201 	bic.w	r2, r2, #1
 8008a7a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0210 	bic.w	r2, r2, #16
 8008aa6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fc ffa6 	bl	80059fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f894 	bl	8008bf4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008acc:	e075      	b.n	8008bba <HAL_UART_IRQHandler+0x3ee>
 8008ace:	bf00      	nop
 8008ad0:	04000120 	.word	0x04000120
 8008ad4:	080093cf 	.word	0x080093cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d063      	beq.n	8008bbe <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8008af6:	897b      	ldrh	r3, [r7, #10]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d060      	beq.n	8008bbe <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b0a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0201 	bic.w	r2, r2, #1
 8008b1a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0210 	bic.w	r2, r2, #16
 8008b3c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b3e:	897b      	ldrh	r3, [r7, #10]
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f856 	bl	8008bf4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008b48:	e039      	b.n	8008bbe <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00d      	beq.n	8008b70 <HAL_UART_IRQHandler+0x3a4>
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d008      	beq.n	8008b70 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008b66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fd33 	bl	80095d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b6e:	e029      	b.n	8008bc4 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00d      	beq.n	8008b96 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d008      	beq.n	8008b96 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01a      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	4798      	blx	r3
    }
    return;
 8008b94:	e015      	b.n	8008bc2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d011      	beq.n	8008bc4 <HAL_UART_IRQHandler+0x3f8>
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00c      	beq.n	8008bc4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fc25 	bl	80093fa <UART_EndTransmit_IT>
    return;
 8008bb0:	e008      	b.n	8008bc4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8008bb2:	bf00      	nop
 8008bb4:	e006      	b.n	8008bc4 <HAL_UART_IRQHandler+0x3f8>
    return;
 8008bb6:	bf00      	nop
 8008bb8:	e004      	b.n	8008bc4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8008bba:	bf00      	nop
 8008bbc:	e002      	b.n	8008bc4 <HAL_UART_IRQHandler+0x3f8>
      return;
 8008bbe:	bf00      	nop
 8008bc0:	e000      	b.n	8008bc4 <HAL_UART_IRQHandler+0x3f8>
    return;
 8008bc2:	bf00      	nop
  }

}
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop

08008bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	431a      	orrs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	431a      	orrs	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008c3a:	f023 030c 	bic.w	r3, r3, #12
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	6979      	ldr	r1, [r7, #20]
 8008c44:	430b      	orrs	r3, r1
 8008c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4aae      	ldr	r2, [pc, #696]	; (8008f40 <UART_SetConfig+0x334>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d120      	bne.n	8008cce <UART_SetConfig+0xc2>
 8008c8c:	4bad      	ldr	r3, [pc, #692]	; (8008f44 <UART_SetConfig+0x338>)
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d817      	bhi.n	8008cc8 <UART_SetConfig+0xbc>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <UART_SetConfig+0x94>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008cb1 	.word	0x08008cb1
 8008ca4:	08008cbd 	.word	0x08008cbd
 8008ca8:	08008cc3 	.word	0x08008cc3
 8008cac:	08008cb7 	.word	0x08008cb7
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	77fb      	strb	r3, [r7, #31]
 8008cb4:	e0b5      	b.n	8008e22 <UART_SetConfig+0x216>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	77fb      	strb	r3, [r7, #31]
 8008cba:	e0b2      	b.n	8008e22 <UART_SetConfig+0x216>
 8008cbc:	2304      	movs	r3, #4
 8008cbe:	77fb      	strb	r3, [r7, #31]
 8008cc0:	e0af      	b.n	8008e22 <UART_SetConfig+0x216>
 8008cc2:	2308      	movs	r3, #8
 8008cc4:	77fb      	strb	r3, [r7, #31]
 8008cc6:	e0ac      	b.n	8008e22 <UART_SetConfig+0x216>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	77fb      	strb	r3, [r7, #31]
 8008ccc:	e0a9      	b.n	8008e22 <UART_SetConfig+0x216>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a9d      	ldr	r2, [pc, #628]	; (8008f48 <UART_SetConfig+0x33c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d124      	bne.n	8008d22 <UART_SetConfig+0x116>
 8008cd8:	4b9a      	ldr	r3, [pc, #616]	; (8008f44 <UART_SetConfig+0x338>)
 8008cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ce4:	d011      	beq.n	8008d0a <UART_SetConfig+0xfe>
 8008ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008cea:	d817      	bhi.n	8008d1c <UART_SetConfig+0x110>
 8008cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf0:	d011      	beq.n	8008d16 <UART_SetConfig+0x10a>
 8008cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cf6:	d811      	bhi.n	8008d1c <UART_SetConfig+0x110>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <UART_SetConfig+0xf8>
 8008cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d00:	d006      	beq.n	8008d10 <UART_SetConfig+0x104>
 8008d02:	e00b      	b.n	8008d1c <UART_SetConfig+0x110>
 8008d04:	2300      	movs	r3, #0
 8008d06:	77fb      	strb	r3, [r7, #31]
 8008d08:	e08b      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	77fb      	strb	r3, [r7, #31]
 8008d0e:	e088      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d10:	2304      	movs	r3, #4
 8008d12:	77fb      	strb	r3, [r7, #31]
 8008d14:	e085      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d16:	2308      	movs	r3, #8
 8008d18:	77fb      	strb	r3, [r7, #31]
 8008d1a:	e082      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	77fb      	strb	r3, [r7, #31]
 8008d20:	e07f      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a89      	ldr	r2, [pc, #548]	; (8008f4c <UART_SetConfig+0x340>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d124      	bne.n	8008d76 <UART_SetConfig+0x16a>
 8008d2c:	4b85      	ldr	r3, [pc, #532]	; (8008f44 <UART_SetConfig+0x338>)
 8008d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008d34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008d38:	d011      	beq.n	8008d5e <UART_SetConfig+0x152>
 8008d3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008d3e:	d817      	bhi.n	8008d70 <UART_SetConfig+0x164>
 8008d40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d44:	d011      	beq.n	8008d6a <UART_SetConfig+0x15e>
 8008d46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d4a:	d811      	bhi.n	8008d70 <UART_SetConfig+0x164>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <UART_SetConfig+0x14c>
 8008d50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d54:	d006      	beq.n	8008d64 <UART_SetConfig+0x158>
 8008d56:	e00b      	b.n	8008d70 <UART_SetConfig+0x164>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	77fb      	strb	r3, [r7, #31]
 8008d5c:	e061      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	77fb      	strb	r3, [r7, #31]
 8008d62:	e05e      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d64:	2304      	movs	r3, #4
 8008d66:	77fb      	strb	r3, [r7, #31]
 8008d68:	e05b      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d6a:	2308      	movs	r3, #8
 8008d6c:	77fb      	strb	r3, [r7, #31]
 8008d6e:	e058      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d70:	2310      	movs	r3, #16
 8008d72:	77fb      	strb	r3, [r7, #31]
 8008d74:	e055      	b.n	8008e22 <UART_SetConfig+0x216>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a75      	ldr	r2, [pc, #468]	; (8008f50 <UART_SetConfig+0x344>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d124      	bne.n	8008dca <UART_SetConfig+0x1be>
 8008d80:	4b70      	ldr	r3, [pc, #448]	; (8008f44 <UART_SetConfig+0x338>)
 8008d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008d88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d8c:	d011      	beq.n	8008db2 <UART_SetConfig+0x1a6>
 8008d8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d92:	d817      	bhi.n	8008dc4 <UART_SetConfig+0x1b8>
 8008d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d98:	d011      	beq.n	8008dbe <UART_SetConfig+0x1b2>
 8008d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d9e:	d811      	bhi.n	8008dc4 <UART_SetConfig+0x1b8>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <UART_SetConfig+0x1a0>
 8008da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008da8:	d006      	beq.n	8008db8 <UART_SetConfig+0x1ac>
 8008daa:	e00b      	b.n	8008dc4 <UART_SetConfig+0x1b8>
 8008dac:	2300      	movs	r3, #0
 8008dae:	77fb      	strb	r3, [r7, #31]
 8008db0:	e037      	b.n	8008e22 <UART_SetConfig+0x216>
 8008db2:	2302      	movs	r3, #2
 8008db4:	77fb      	strb	r3, [r7, #31]
 8008db6:	e034      	b.n	8008e22 <UART_SetConfig+0x216>
 8008db8:	2304      	movs	r3, #4
 8008dba:	77fb      	strb	r3, [r7, #31]
 8008dbc:	e031      	b.n	8008e22 <UART_SetConfig+0x216>
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	77fb      	strb	r3, [r7, #31]
 8008dc2:	e02e      	b.n	8008e22 <UART_SetConfig+0x216>
 8008dc4:	2310      	movs	r3, #16
 8008dc6:	77fb      	strb	r3, [r7, #31]
 8008dc8:	e02b      	b.n	8008e22 <UART_SetConfig+0x216>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a61      	ldr	r2, [pc, #388]	; (8008f54 <UART_SetConfig+0x348>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d124      	bne.n	8008e1e <UART_SetConfig+0x212>
 8008dd4:	4b5b      	ldr	r3, [pc, #364]	; (8008f44 <UART_SetConfig+0x338>)
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008de0:	d011      	beq.n	8008e06 <UART_SetConfig+0x1fa>
 8008de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008de6:	d817      	bhi.n	8008e18 <UART_SetConfig+0x20c>
 8008de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dec:	d011      	beq.n	8008e12 <UART_SetConfig+0x206>
 8008dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df2:	d811      	bhi.n	8008e18 <UART_SetConfig+0x20c>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <UART_SetConfig+0x1f4>
 8008df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dfc:	d006      	beq.n	8008e0c <UART_SetConfig+0x200>
 8008dfe:	e00b      	b.n	8008e18 <UART_SetConfig+0x20c>
 8008e00:	2300      	movs	r3, #0
 8008e02:	77fb      	strb	r3, [r7, #31]
 8008e04:	e00d      	b.n	8008e22 <UART_SetConfig+0x216>
 8008e06:	2302      	movs	r3, #2
 8008e08:	77fb      	strb	r3, [r7, #31]
 8008e0a:	e00a      	b.n	8008e22 <UART_SetConfig+0x216>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	77fb      	strb	r3, [r7, #31]
 8008e10:	e007      	b.n	8008e22 <UART_SetConfig+0x216>
 8008e12:	2308      	movs	r3, #8
 8008e14:	77fb      	strb	r3, [r7, #31]
 8008e16:	e004      	b.n	8008e22 <UART_SetConfig+0x216>
 8008e18:	2310      	movs	r3, #16
 8008e1a:	77fb      	strb	r3, [r7, #31]
 8008e1c:	e001      	b.n	8008e22 <UART_SetConfig+0x216>
 8008e1e:	2310      	movs	r3, #16
 8008e20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2a:	d15c      	bne.n	8008ee6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8008e2c:	7ffb      	ldrb	r3, [r7, #31]
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d827      	bhi.n	8008e82 <UART_SetConfig+0x276>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <UART_SetConfig+0x22c>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e5d 	.word	0x08008e5d
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	08008e6d 	.word	0x08008e6d
 8008e44:	08008e83 	.word	0x08008e83
 8008e48:	08008e73 	.word	0x08008e73
 8008e4c:	08008e83 	.word	0x08008e83
 8008e50:	08008e83 	.word	0x08008e83
 8008e54:	08008e83 	.word	0x08008e83
 8008e58:	08008e7b 	.word	0x08008e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e5c:	f7fe fbf8 	bl	8007650 <HAL_RCC_GetPCLK1Freq>
 8008e60:	61b8      	str	r0, [r7, #24]
        break;
 8008e62:	e013      	b.n	8008e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e64:	f7fe fc16 	bl	8007694 <HAL_RCC_GetPCLK2Freq>
 8008e68:	61b8      	str	r0, [r7, #24]
        break;
 8008e6a:	e00f      	b.n	8008e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e6c:	4b3a      	ldr	r3, [pc, #232]	; (8008f58 <UART_SetConfig+0x34c>)
 8008e6e:	61bb      	str	r3, [r7, #24]
        break;
 8008e70:	e00c      	b.n	8008e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e72:	f7fe fb77 	bl	8007564 <HAL_RCC_GetSysClockFreq>
 8008e76:	61b8      	str	r0, [r7, #24]
        break;
 8008e78:	e008      	b.n	8008e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e7e:	61bb      	str	r3, [r7, #24]
        break;
 8008e80:	e004      	b.n	8008e8c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	77bb      	strb	r3, [r7, #30]
        break;
 8008e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 8085 	beq.w	8008f9e <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	005a      	lsls	r2, r3, #1
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	085b      	lsrs	r3, r3, #1
 8008e9e:	441a      	add	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b0f      	cmp	r3, #15
 8008eb0:	d916      	bls.n	8008ee0 <UART_SetConfig+0x2d4>
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb8:	d212      	bcs.n	8008ee0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	f023 030f 	bic.w	r3, r3, #15
 8008ec2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	085b      	lsrs	r3, r3, #1
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f003 0307 	and.w	r3, r3, #7
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	89fa      	ldrh	r2, [r7, #14]
 8008edc:	60da      	str	r2, [r3, #12]
 8008ede:	e05e      	b.n	8008f9e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	77bb      	strb	r3, [r7, #30]
 8008ee4:	e05b      	b.n	8008f9e <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ee6:	7ffb      	ldrb	r3, [r7, #31]
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d837      	bhi.n	8008f5c <UART_SetConfig+0x350>
 8008eec:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <UART_SetConfig+0x2e8>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f19 	.word	0x08008f19
 8008ef8:	08008f21 	.word	0x08008f21
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	08008f5d 	.word	0x08008f5d
 8008f04:	08008f2f 	.word	0x08008f2f
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008f5d 	.word	0x08008f5d
 8008f10:	08008f5d 	.word	0x08008f5d
 8008f14:	08008f37 	.word	0x08008f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f18:	f7fe fb9a 	bl	8007650 <HAL_RCC_GetPCLK1Freq>
 8008f1c:	61b8      	str	r0, [r7, #24]
        break;
 8008f1e:	e022      	b.n	8008f66 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f20:	f7fe fbb8 	bl	8007694 <HAL_RCC_GetPCLK2Freq>
 8008f24:	61b8      	str	r0, [r7, #24]
        break;
 8008f26:	e01e      	b.n	8008f66 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f28:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <UART_SetConfig+0x34c>)
 8008f2a:	61bb      	str	r3, [r7, #24]
        break;
 8008f2c:	e01b      	b.n	8008f66 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f2e:	f7fe fb19 	bl	8007564 <HAL_RCC_GetSysClockFreq>
 8008f32:	61b8      	str	r0, [r7, #24]
        break;
 8008f34:	e017      	b.n	8008f66 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f3a:	61bb      	str	r3, [r7, #24]
        break;
 8008f3c:	e013      	b.n	8008f66 <UART_SetConfig+0x35a>
 8008f3e:	bf00      	nop
 8008f40:	40013800 	.word	0x40013800
 8008f44:	40021000 	.word	0x40021000
 8008f48:	40004400 	.word	0x40004400
 8008f4c:	40004800 	.word	0x40004800
 8008f50:	40004c00 	.word	0x40004c00
 8008f54:	40005000 	.word	0x40005000
 8008f58:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	77bb      	strb	r3, [r7, #30]
        break;
 8008f64:	bf00      	nop
    }

    if (pclk != 0U)
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d018      	beq.n	8008f9e <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	085a      	lsrs	r2, r3, #1
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	441a      	add	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b0f      	cmp	r3, #15
 8008f86:	d908      	bls.n	8008f9a <UART_SetConfig+0x38e>
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f8e:	d204      	bcs.n	8008f9a <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	60da      	str	r2, [r3, #12]
 8008f98:	e001      	b.n	8008f9e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008faa:	7fbb      	ldrb	r3, [r7, #30]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01a      	beq.n	80090ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090b2:	d10a      	bne.n	80090ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	605a      	str	r2, [r3, #4]
  }
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009108:	f7fb f9ee 	bl	80044e8 <HAL_GetTick>
 800910c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b08      	cmp	r3, #8
 800911a:	d10e      	bne.n	800913a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800911c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f82d 	bl	800918a <UART_WaitOnFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e023      	b.n	8009182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b04      	cmp	r3, #4
 8009146:	d10e      	bne.n	8009166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f817 	bl	800918a <UART_WaitOnFlagUntilTimeout>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00d      	b.n	8009182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	603b      	str	r3, [r7, #0]
 8009196:	4613      	mov	r3, r2
 8009198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800919a:	e05e      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a2:	d05a      	beq.n	800925a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a4:	f7fb f9a0 	bl	80044e8 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d302      	bcc.n	80091ba <UART_WaitOnFlagUntilTimeout+0x30>
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d11b      	bne.n	80091f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f022 0201 	bic.w	r2, r2, #1
 80091d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2220      	movs	r2, #32
 80091de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2220      	movs	r2, #32
 80091e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e043      	b.n	800927a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d02c      	beq.n	800925a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800920a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800920e:	d124      	bne.n	800925a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009218:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009228:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689a      	ldr	r2, [r3, #8]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f022 0201 	bic.w	r2, r2, #1
 8009238:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2220      	movs	r2, #32
 800923e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2220      	movs	r2, #32
 8009244:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2220      	movs	r2, #32
 800924a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e00f      	b.n	800927a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69da      	ldr	r2, [r3, #28]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4013      	ands	r3, r2
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	429a      	cmp	r2, r3
 8009268:	bf0c      	ite	eq
 800926a:	2301      	moveq	r3, #1
 800926c:	2300      	movne	r3, #0
 800926e:	b2db      	uxtb	r3, r3
 8009270:	461a      	mov	r2, r3
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	429a      	cmp	r2, r3
 8009276:	d091      	beq.n	800919c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	88fa      	ldrh	r2, [r7, #6]
 80092a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b6:	d10e      	bne.n	80092d6 <UART_Start_Receive_IT+0x52>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d105      	bne.n	80092cc <UART_Start_Receive_IT+0x48>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092ca:	e01a      	b.n	8009302 <UART_Start_Receive_IT+0x7e>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	22ff      	movs	r2, #255	; 0xff
 80092d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092d4:	e015      	b.n	8009302 <UART_Start_Receive_IT+0x7e>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10d      	bne.n	80092fa <UART_Start_Receive_IT+0x76>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <UART_Start_Receive_IT+0x6c>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	22ff      	movs	r2, #255	; 0xff
 80092ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092ee:	e008      	b.n	8009302 <UART_Start_Receive_IT+0x7e>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	227f      	movs	r2, #127	; 0x7f
 80092f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092f8:	e003      	b.n	8009302 <UART_Start_Receive_IT+0x7e>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2222      	movs	r2, #34	; 0x22
 800930e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689a      	ldr	r2, [r3, #8]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f042 0201 	orr.w	r2, r2, #1
 800931e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009328:	d107      	bne.n	800933a <UART_Start_Receive_IT+0xb6>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d103      	bne.n	800933a <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4a0c      	ldr	r2, [pc, #48]	; (8009368 <UART_Start_Receive_IT+0xe4>)
 8009336:	665a      	str	r2, [r3, #100]	; 0x64
 8009338:	e002      	b.n	8009340 <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4a0b      	ldr	r2, [pc, #44]	; (800936c <UART_Start_Receive_IT+0xe8>)
 800933e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009356:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	08009501 	.word	0x08009501
 800936c:	0800942d 	.word	0x0800942d

08009370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009386:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f022 0201 	bic.w	r2, r2, #1
 8009396:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800939c:	2b01      	cmp	r3, #1
 800939e:	d107      	bne.n	80093b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0210 	bic.w	r2, r2, #16
 80093ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2220      	movs	r2, #32
 80093b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff fbf7 	bl	8008be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009410:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2220      	movs	r2, #32
 8009416:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fbd4 	bl	8008bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800943a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009440:	2b22      	cmp	r3, #34	; 0x22
 8009442:	d151      	bne.n	80094e8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800944a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800944c:	89bb      	ldrh	r3, [r7, #12]
 800944e:	b2d9      	uxtb	r1, r3
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	b2da      	uxtb	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009458:	400a      	ands	r2, r1
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d138      	bne.n	80094f8 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009494:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f022 0201 	bic.w	r2, r2, #1
 80094a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d10f      	bne.n	80094da <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 0210 	bic.w	r2, r2, #16
 80094c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fb8e 	bl	8008bf4 <HAL_UARTEx_RxEventCallback>
 80094d8:	e002      	b.n	80094e0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7f8 f85e 	bl	800159c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094e6:	e007      	b.n	80094f8 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	699a      	ldr	r2, [r3, #24]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f042 0208 	orr.w	r2, r2, #8
 80094f6:	619a      	str	r2, [r3, #24]
}
 80094f8:	bf00      	nop
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800950e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009514:	2b22      	cmp	r3, #34	; 0x22
 8009516:	d151      	bne.n	80095bc <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800951e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009524:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009526:	89ba      	ldrh	r2, [r7, #12]
 8009528:	89fb      	ldrh	r3, [r7, #14]
 800952a:	4013      	ands	r3, r2
 800952c:	b29a      	uxth	r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009536:	1c9a      	adds	r2, r3, #2
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009542:	b29b      	uxth	r3, r3
 8009544:	3b01      	subs	r3, #1
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d138      	bne.n	80095cc <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009568:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0201 	bic.w	r2, r2, #1
 8009578:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800958a:	2b01      	cmp	r3, #1
 800958c:	d10f      	bne.n	80095ae <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0210 	bic.w	r2, r2, #16
 800959c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fb24 	bl	8008bf4 <HAL_UARTEx_RxEventCallback>
 80095ac:	e002      	b.n	80095b4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7f7 fff4 	bl	800159c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ba:	e007      	b.n	80095cc <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0208 	orr.w	r2, r2, #8
 80095ca:	619a      	str	r2, [r3, #24]
}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <atoi>:
 80095e8:	220a      	movs	r2, #10
 80095ea:	2100      	movs	r1, #0
 80095ec:	f000 bdbc 	b.w	800a168 <strtol>

080095f0 <__errno>:
 80095f0:	4b01      	ldr	r3, [pc, #4]	; (80095f8 <__errno+0x8>)
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	20000110 	.word	0x20000110

080095fc <__libc_init_array>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4d0d      	ldr	r5, [pc, #52]	; (8009634 <__libc_init_array+0x38>)
 8009600:	4c0d      	ldr	r4, [pc, #52]	; (8009638 <__libc_init_array+0x3c>)
 8009602:	1b64      	subs	r4, r4, r5
 8009604:	10a4      	asrs	r4, r4, #2
 8009606:	2600      	movs	r6, #0
 8009608:	42a6      	cmp	r6, r4
 800960a:	d109      	bne.n	8009620 <__libc_init_array+0x24>
 800960c:	4d0b      	ldr	r5, [pc, #44]	; (800963c <__libc_init_array+0x40>)
 800960e:	4c0c      	ldr	r4, [pc, #48]	; (8009640 <__libc_init_array+0x44>)
 8009610:	f002 ffbc 	bl	800c58c <_init>
 8009614:	1b64      	subs	r4, r4, r5
 8009616:	10a4      	asrs	r4, r4, #2
 8009618:	2600      	movs	r6, #0
 800961a:	42a6      	cmp	r6, r4
 800961c:	d105      	bne.n	800962a <__libc_init_array+0x2e>
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	f855 3b04 	ldr.w	r3, [r5], #4
 8009624:	4798      	blx	r3
 8009626:	3601      	adds	r6, #1
 8009628:	e7ee      	b.n	8009608 <__libc_init_array+0xc>
 800962a:	f855 3b04 	ldr.w	r3, [r5], #4
 800962e:	4798      	blx	r3
 8009630:	3601      	adds	r6, #1
 8009632:	e7f2      	b.n	800961a <__libc_init_array+0x1e>
 8009634:	0800cd3c 	.word	0x0800cd3c
 8009638:	0800cd3c 	.word	0x0800cd3c
 800963c:	0800cd3c 	.word	0x0800cd3c
 8009640:	0800cd40 	.word	0x0800cd40

08009644 <memset>:
 8009644:	4402      	add	r2, r0
 8009646:	4603      	mov	r3, r0
 8009648:	4293      	cmp	r3, r2
 800964a:	d100      	bne.n	800964e <memset+0xa>
 800964c:	4770      	bx	lr
 800964e:	f803 1b01 	strb.w	r1, [r3], #1
 8009652:	e7f9      	b.n	8009648 <memset+0x4>

08009654 <__cvt>:
 8009654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	ec55 4b10 	vmov	r4, r5, d0
 800965c:	2d00      	cmp	r5, #0
 800965e:	460e      	mov	r6, r1
 8009660:	4619      	mov	r1, r3
 8009662:	462b      	mov	r3, r5
 8009664:	bfbb      	ittet	lt
 8009666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800966a:	461d      	movlt	r5, r3
 800966c:	2300      	movge	r3, #0
 800966e:	232d      	movlt	r3, #45	; 0x2d
 8009670:	700b      	strb	r3, [r1, #0]
 8009672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009674:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009678:	4691      	mov	r9, r2
 800967a:	f023 0820 	bic.w	r8, r3, #32
 800967e:	bfbc      	itt	lt
 8009680:	4622      	movlt	r2, r4
 8009682:	4614      	movlt	r4, r2
 8009684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009688:	d005      	beq.n	8009696 <__cvt+0x42>
 800968a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800968e:	d100      	bne.n	8009692 <__cvt+0x3e>
 8009690:	3601      	adds	r6, #1
 8009692:	2102      	movs	r1, #2
 8009694:	e000      	b.n	8009698 <__cvt+0x44>
 8009696:	2103      	movs	r1, #3
 8009698:	ab03      	add	r3, sp, #12
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	ab02      	add	r3, sp, #8
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	ec45 4b10 	vmov	d0, r4, r5
 80096a4:	4653      	mov	r3, sl
 80096a6:	4632      	mov	r2, r6
 80096a8:	f000 fe12 	bl	800a2d0 <_dtoa_r>
 80096ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096b0:	4607      	mov	r7, r0
 80096b2:	d102      	bne.n	80096ba <__cvt+0x66>
 80096b4:	f019 0f01 	tst.w	r9, #1
 80096b8:	d022      	beq.n	8009700 <__cvt+0xac>
 80096ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096be:	eb07 0906 	add.w	r9, r7, r6
 80096c2:	d110      	bne.n	80096e6 <__cvt+0x92>
 80096c4:	783b      	ldrb	r3, [r7, #0]
 80096c6:	2b30      	cmp	r3, #48	; 0x30
 80096c8:	d10a      	bne.n	80096e0 <__cvt+0x8c>
 80096ca:	2200      	movs	r2, #0
 80096cc:	2300      	movs	r3, #0
 80096ce:	4620      	mov	r0, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	f7f7 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80096d6:	b918      	cbnz	r0, 80096e0 <__cvt+0x8c>
 80096d8:	f1c6 0601 	rsb	r6, r6, #1
 80096dc:	f8ca 6000 	str.w	r6, [sl]
 80096e0:	f8da 3000 	ldr.w	r3, [sl]
 80096e4:	4499      	add	r9, r3
 80096e6:	2200      	movs	r2, #0
 80096e8:	2300      	movs	r3, #0
 80096ea:	4620      	mov	r0, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7f7 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80096f2:	b108      	cbz	r0, 80096f8 <__cvt+0xa4>
 80096f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80096f8:	2230      	movs	r2, #48	; 0x30
 80096fa:	9b03      	ldr	r3, [sp, #12]
 80096fc:	454b      	cmp	r3, r9
 80096fe:	d307      	bcc.n	8009710 <__cvt+0xbc>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009704:	1bdb      	subs	r3, r3, r7
 8009706:	4638      	mov	r0, r7
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	b004      	add	sp, #16
 800970c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009710:	1c59      	adds	r1, r3, #1
 8009712:	9103      	str	r1, [sp, #12]
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	e7f0      	b.n	80096fa <__cvt+0xa6>

08009718 <__exponent>:
 8009718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971a:	4603      	mov	r3, r0
 800971c:	2900      	cmp	r1, #0
 800971e:	bfb8      	it	lt
 8009720:	4249      	neglt	r1, r1
 8009722:	f803 2b02 	strb.w	r2, [r3], #2
 8009726:	bfb4      	ite	lt
 8009728:	222d      	movlt	r2, #45	; 0x2d
 800972a:	222b      	movge	r2, #43	; 0x2b
 800972c:	2909      	cmp	r1, #9
 800972e:	7042      	strb	r2, [r0, #1]
 8009730:	dd2a      	ble.n	8009788 <__exponent+0x70>
 8009732:	f10d 0407 	add.w	r4, sp, #7
 8009736:	46a4      	mov	ip, r4
 8009738:	270a      	movs	r7, #10
 800973a:	46a6      	mov	lr, r4
 800973c:	460a      	mov	r2, r1
 800973e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009742:	fb07 1516 	mls	r5, r7, r6, r1
 8009746:	3530      	adds	r5, #48	; 0x30
 8009748:	2a63      	cmp	r2, #99	; 0x63
 800974a:	f104 34ff 	add.w	r4, r4, #4294967295
 800974e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009752:	4631      	mov	r1, r6
 8009754:	dcf1      	bgt.n	800973a <__exponent+0x22>
 8009756:	3130      	adds	r1, #48	; 0x30
 8009758:	f1ae 0502 	sub.w	r5, lr, #2
 800975c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009760:	1c44      	adds	r4, r0, #1
 8009762:	4629      	mov	r1, r5
 8009764:	4561      	cmp	r1, ip
 8009766:	d30a      	bcc.n	800977e <__exponent+0x66>
 8009768:	f10d 0209 	add.w	r2, sp, #9
 800976c:	eba2 020e 	sub.w	r2, r2, lr
 8009770:	4565      	cmp	r5, ip
 8009772:	bf88      	it	hi
 8009774:	2200      	movhi	r2, #0
 8009776:	4413      	add	r3, r2
 8009778:	1a18      	subs	r0, r3, r0
 800977a:	b003      	add	sp, #12
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009782:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009786:	e7ed      	b.n	8009764 <__exponent+0x4c>
 8009788:	2330      	movs	r3, #48	; 0x30
 800978a:	3130      	adds	r1, #48	; 0x30
 800978c:	7083      	strb	r3, [r0, #2]
 800978e:	70c1      	strb	r1, [r0, #3]
 8009790:	1d03      	adds	r3, r0, #4
 8009792:	e7f1      	b.n	8009778 <__exponent+0x60>

08009794 <_printf_float>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	ed2d 8b02 	vpush	{d8}
 800979c:	b08d      	sub	sp, #52	; 0x34
 800979e:	460c      	mov	r4, r1
 80097a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097a4:	4616      	mov	r6, r2
 80097a6:	461f      	mov	r7, r3
 80097a8:	4605      	mov	r5, r0
 80097aa:	f001 fb8f 	bl	800aecc <_localeconv_r>
 80097ae:	f8d0 a000 	ldr.w	sl, [r0]
 80097b2:	4650      	mov	r0, sl
 80097b4:	f7f6 fd0c 	bl	80001d0 <strlen>
 80097b8:	2300      	movs	r3, #0
 80097ba:	930a      	str	r3, [sp, #40]	; 0x28
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	9305      	str	r3, [sp, #20]
 80097c0:	f8d8 3000 	ldr.w	r3, [r8]
 80097c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097c8:	3307      	adds	r3, #7
 80097ca:	f023 0307 	bic.w	r3, r3, #7
 80097ce:	f103 0208 	add.w	r2, r3, #8
 80097d2:	f8c8 2000 	str.w	r2, [r8]
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097e6:	9307      	str	r3, [sp, #28]
 80097e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80097ec:	ee08 0a10 	vmov	s16, r0
 80097f0:	4b9f      	ldr	r3, [pc, #636]	; (8009a70 <_printf_float+0x2dc>)
 80097f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097f6:	f04f 32ff 	mov.w	r2, #4294967295
 80097fa:	f7f7 f997 	bl	8000b2c <__aeabi_dcmpun>
 80097fe:	bb88      	cbnz	r0, 8009864 <_printf_float+0xd0>
 8009800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009804:	4b9a      	ldr	r3, [pc, #616]	; (8009a70 <_printf_float+0x2dc>)
 8009806:	f04f 32ff 	mov.w	r2, #4294967295
 800980a:	f7f7 f971 	bl	8000af0 <__aeabi_dcmple>
 800980e:	bb48      	cbnz	r0, 8009864 <_printf_float+0xd0>
 8009810:	2200      	movs	r2, #0
 8009812:	2300      	movs	r3, #0
 8009814:	4640      	mov	r0, r8
 8009816:	4649      	mov	r1, r9
 8009818:	f7f7 f960 	bl	8000adc <__aeabi_dcmplt>
 800981c:	b110      	cbz	r0, 8009824 <_printf_float+0x90>
 800981e:	232d      	movs	r3, #45	; 0x2d
 8009820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009824:	4b93      	ldr	r3, [pc, #588]	; (8009a74 <_printf_float+0x2e0>)
 8009826:	4894      	ldr	r0, [pc, #592]	; (8009a78 <_printf_float+0x2e4>)
 8009828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800982c:	bf94      	ite	ls
 800982e:	4698      	movls	r8, r3
 8009830:	4680      	movhi	r8, r0
 8009832:	2303      	movs	r3, #3
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	9b05      	ldr	r3, [sp, #20]
 8009838:	f023 0204 	bic.w	r2, r3, #4
 800983c:	6022      	str	r2, [r4, #0]
 800983e:	f04f 0900 	mov.w	r9, #0
 8009842:	9700      	str	r7, [sp, #0]
 8009844:	4633      	mov	r3, r6
 8009846:	aa0b      	add	r2, sp, #44	; 0x2c
 8009848:	4621      	mov	r1, r4
 800984a:	4628      	mov	r0, r5
 800984c:	f000 f9d8 	bl	8009c00 <_printf_common>
 8009850:	3001      	adds	r0, #1
 8009852:	f040 8090 	bne.w	8009976 <_printf_float+0x1e2>
 8009856:	f04f 30ff 	mov.w	r0, #4294967295
 800985a:	b00d      	add	sp, #52	; 0x34
 800985c:	ecbd 8b02 	vpop	{d8}
 8009860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009864:	4642      	mov	r2, r8
 8009866:	464b      	mov	r3, r9
 8009868:	4640      	mov	r0, r8
 800986a:	4649      	mov	r1, r9
 800986c:	f7f7 f95e 	bl	8000b2c <__aeabi_dcmpun>
 8009870:	b140      	cbz	r0, 8009884 <_printf_float+0xf0>
 8009872:	464b      	mov	r3, r9
 8009874:	2b00      	cmp	r3, #0
 8009876:	bfbc      	itt	lt
 8009878:	232d      	movlt	r3, #45	; 0x2d
 800987a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800987e:	487f      	ldr	r0, [pc, #508]	; (8009a7c <_printf_float+0x2e8>)
 8009880:	4b7f      	ldr	r3, [pc, #508]	; (8009a80 <_printf_float+0x2ec>)
 8009882:	e7d1      	b.n	8009828 <_printf_float+0x94>
 8009884:	6863      	ldr	r3, [r4, #4]
 8009886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800988a:	9206      	str	r2, [sp, #24]
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	d13f      	bne.n	8009910 <_printf_float+0x17c>
 8009890:	2306      	movs	r3, #6
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	9b05      	ldr	r3, [sp, #20]
 8009896:	6861      	ldr	r1, [r4, #4]
 8009898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800989c:	2300      	movs	r3, #0
 800989e:	9303      	str	r3, [sp, #12]
 80098a0:	ab0a      	add	r3, sp, #40	; 0x28
 80098a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098a6:	ab09      	add	r3, sp, #36	; 0x24
 80098a8:	ec49 8b10 	vmov	d0, r8, r9
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098b4:	4628      	mov	r0, r5
 80098b6:	f7ff fecd 	bl	8009654 <__cvt>
 80098ba:	9b06      	ldr	r3, [sp, #24]
 80098bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098be:	2b47      	cmp	r3, #71	; 0x47
 80098c0:	4680      	mov	r8, r0
 80098c2:	d108      	bne.n	80098d6 <_printf_float+0x142>
 80098c4:	1cc8      	adds	r0, r1, #3
 80098c6:	db02      	blt.n	80098ce <_printf_float+0x13a>
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	4299      	cmp	r1, r3
 80098cc:	dd41      	ble.n	8009952 <_printf_float+0x1be>
 80098ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80098d2:	fa5f fb8b 	uxtb.w	fp, fp
 80098d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098da:	d820      	bhi.n	800991e <_printf_float+0x18a>
 80098dc:	3901      	subs	r1, #1
 80098de:	465a      	mov	r2, fp
 80098e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098e4:	9109      	str	r1, [sp, #36]	; 0x24
 80098e6:	f7ff ff17 	bl	8009718 <__exponent>
 80098ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ec:	1813      	adds	r3, r2, r0
 80098ee:	2a01      	cmp	r2, #1
 80098f0:	4681      	mov	r9, r0
 80098f2:	6123      	str	r3, [r4, #16]
 80098f4:	dc02      	bgt.n	80098fc <_printf_float+0x168>
 80098f6:	6822      	ldr	r2, [r4, #0]
 80098f8:	07d2      	lsls	r2, r2, #31
 80098fa:	d501      	bpl.n	8009900 <_printf_float+0x16c>
 80098fc:	3301      	adds	r3, #1
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009904:	2b00      	cmp	r3, #0
 8009906:	d09c      	beq.n	8009842 <_printf_float+0xae>
 8009908:	232d      	movs	r3, #45	; 0x2d
 800990a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800990e:	e798      	b.n	8009842 <_printf_float+0xae>
 8009910:	9a06      	ldr	r2, [sp, #24]
 8009912:	2a47      	cmp	r2, #71	; 0x47
 8009914:	d1be      	bne.n	8009894 <_printf_float+0x100>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1bc      	bne.n	8009894 <_printf_float+0x100>
 800991a:	2301      	movs	r3, #1
 800991c:	e7b9      	b.n	8009892 <_printf_float+0xfe>
 800991e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009922:	d118      	bne.n	8009956 <_printf_float+0x1c2>
 8009924:	2900      	cmp	r1, #0
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	dd0b      	ble.n	8009942 <_printf_float+0x1ae>
 800992a:	6121      	str	r1, [r4, #16]
 800992c:	b913      	cbnz	r3, 8009934 <_printf_float+0x1a0>
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	07d0      	lsls	r0, r2, #31
 8009932:	d502      	bpl.n	800993a <_printf_float+0x1a6>
 8009934:	3301      	adds	r3, #1
 8009936:	440b      	add	r3, r1
 8009938:	6123      	str	r3, [r4, #16]
 800993a:	65a1      	str	r1, [r4, #88]	; 0x58
 800993c:	f04f 0900 	mov.w	r9, #0
 8009940:	e7de      	b.n	8009900 <_printf_float+0x16c>
 8009942:	b913      	cbnz	r3, 800994a <_printf_float+0x1b6>
 8009944:	6822      	ldr	r2, [r4, #0]
 8009946:	07d2      	lsls	r2, r2, #31
 8009948:	d501      	bpl.n	800994e <_printf_float+0x1ba>
 800994a:	3302      	adds	r3, #2
 800994c:	e7f4      	b.n	8009938 <_printf_float+0x1a4>
 800994e:	2301      	movs	r3, #1
 8009950:	e7f2      	b.n	8009938 <_printf_float+0x1a4>
 8009952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009958:	4299      	cmp	r1, r3
 800995a:	db05      	blt.n	8009968 <_printf_float+0x1d4>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	6121      	str	r1, [r4, #16]
 8009960:	07d8      	lsls	r0, r3, #31
 8009962:	d5ea      	bpl.n	800993a <_printf_float+0x1a6>
 8009964:	1c4b      	adds	r3, r1, #1
 8009966:	e7e7      	b.n	8009938 <_printf_float+0x1a4>
 8009968:	2900      	cmp	r1, #0
 800996a:	bfd4      	ite	le
 800996c:	f1c1 0202 	rsble	r2, r1, #2
 8009970:	2201      	movgt	r2, #1
 8009972:	4413      	add	r3, r2
 8009974:	e7e0      	b.n	8009938 <_printf_float+0x1a4>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	055a      	lsls	r2, r3, #21
 800997a:	d407      	bmi.n	800998c <_printf_float+0x1f8>
 800997c:	6923      	ldr	r3, [r4, #16]
 800997e:	4642      	mov	r2, r8
 8009980:	4631      	mov	r1, r6
 8009982:	4628      	mov	r0, r5
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	d12c      	bne.n	80099e4 <_printf_float+0x250>
 800998a:	e764      	b.n	8009856 <_printf_float+0xc2>
 800998c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009990:	f240 80e0 	bls.w	8009b54 <_printf_float+0x3c0>
 8009994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009998:	2200      	movs	r2, #0
 800999a:	2300      	movs	r3, #0
 800999c:	f7f7 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d034      	beq.n	8009a0e <_printf_float+0x27a>
 80099a4:	4a37      	ldr	r2, [pc, #220]	; (8009a84 <_printf_float+0x2f0>)
 80099a6:	2301      	movs	r3, #1
 80099a8:	4631      	mov	r1, r6
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	f43f af51 	beq.w	8009856 <_printf_float+0xc2>
 80099b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099b8:	429a      	cmp	r2, r3
 80099ba:	db02      	blt.n	80099c2 <_printf_float+0x22e>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	07d8      	lsls	r0, r3, #31
 80099c0:	d510      	bpl.n	80099e4 <_printf_float+0x250>
 80099c2:	ee18 3a10 	vmov	r3, s16
 80099c6:	4652      	mov	r2, sl
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af41 	beq.w	8009856 <_printf_float+0xc2>
 80099d4:	f04f 0800 	mov.w	r8, #0
 80099d8:	f104 091a 	add.w	r9, r4, #26
 80099dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099de:	3b01      	subs	r3, #1
 80099e0:	4543      	cmp	r3, r8
 80099e2:	dc09      	bgt.n	80099f8 <_printf_float+0x264>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	079b      	lsls	r3, r3, #30
 80099e8:	f100 8105 	bmi.w	8009bf6 <_printf_float+0x462>
 80099ec:	68e0      	ldr	r0, [r4, #12]
 80099ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f0:	4298      	cmp	r0, r3
 80099f2:	bfb8      	it	lt
 80099f4:	4618      	movlt	r0, r3
 80099f6:	e730      	b.n	800985a <_printf_float+0xc6>
 80099f8:	2301      	movs	r3, #1
 80099fa:	464a      	mov	r2, r9
 80099fc:	4631      	mov	r1, r6
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b8      	blx	r7
 8009a02:	3001      	adds	r0, #1
 8009a04:	f43f af27 	beq.w	8009856 <_printf_float+0xc2>
 8009a08:	f108 0801 	add.w	r8, r8, #1
 8009a0c:	e7e6      	b.n	80099dc <_printf_float+0x248>
 8009a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dc39      	bgt.n	8009a88 <_printf_float+0x2f4>
 8009a14:	4a1b      	ldr	r2, [pc, #108]	; (8009a84 <_printf_float+0x2f0>)
 8009a16:	2301      	movs	r3, #1
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	47b8      	blx	r7
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f43f af19 	beq.w	8009856 <_printf_float+0xc2>
 8009a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	d102      	bne.n	8009a32 <_printf_float+0x29e>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	07d9      	lsls	r1, r3, #31
 8009a30:	d5d8      	bpl.n	80099e4 <_printf_float+0x250>
 8009a32:	ee18 3a10 	vmov	r3, s16
 8009a36:	4652      	mov	r2, sl
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f af09 	beq.w	8009856 <_printf_float+0xc2>
 8009a44:	f04f 0900 	mov.w	r9, #0
 8009a48:	f104 0a1a 	add.w	sl, r4, #26
 8009a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4e:	425b      	negs	r3, r3
 8009a50:	454b      	cmp	r3, r9
 8009a52:	dc01      	bgt.n	8009a58 <_printf_float+0x2c4>
 8009a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a56:	e792      	b.n	800997e <_printf_float+0x1ea>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	4628      	mov	r0, r5
 8009a60:	47b8      	blx	r7
 8009a62:	3001      	adds	r0, #1
 8009a64:	f43f aef7 	beq.w	8009856 <_printf_float+0xc2>
 8009a68:	f109 0901 	add.w	r9, r9, #1
 8009a6c:	e7ee      	b.n	8009a4c <_printf_float+0x2b8>
 8009a6e:	bf00      	nop
 8009a70:	7fefffff 	.word	0x7fefffff
 8009a74:	0800c8f4 	.word	0x0800c8f4
 8009a78:	0800c8f8 	.word	0x0800c8f8
 8009a7c:	0800c900 	.word	0x0800c900
 8009a80:	0800c8fc 	.word	0x0800c8fc
 8009a84:	0800c904 	.word	0x0800c904
 8009a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	bfa8      	it	ge
 8009a90:	461a      	movge	r2, r3
 8009a92:	2a00      	cmp	r2, #0
 8009a94:	4691      	mov	r9, r2
 8009a96:	dc37      	bgt.n	8009b08 <_printf_float+0x374>
 8009a98:	f04f 0b00 	mov.w	fp, #0
 8009a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aa0:	f104 021a 	add.w	r2, r4, #26
 8009aa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	eba3 0309 	sub.w	r3, r3, r9
 8009aac:	455b      	cmp	r3, fp
 8009aae:	dc33      	bgt.n	8009b18 <_printf_float+0x384>
 8009ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	db3b      	blt.n	8009b30 <_printf_float+0x39c>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	07da      	lsls	r2, r3, #31
 8009abc:	d438      	bmi.n	8009b30 <_printf_float+0x39c>
 8009abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac0:	9b05      	ldr	r3, [sp, #20]
 8009ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	eba2 0901 	sub.w	r9, r2, r1
 8009aca:	4599      	cmp	r9, r3
 8009acc:	bfa8      	it	ge
 8009ace:	4699      	movge	r9, r3
 8009ad0:	f1b9 0f00 	cmp.w	r9, #0
 8009ad4:	dc35      	bgt.n	8009b42 <_printf_float+0x3ae>
 8009ad6:	f04f 0800 	mov.w	r8, #0
 8009ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ade:	f104 0a1a 	add.w	sl, r4, #26
 8009ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ae6:	1a9b      	subs	r3, r3, r2
 8009ae8:	eba3 0309 	sub.w	r3, r3, r9
 8009aec:	4543      	cmp	r3, r8
 8009aee:	f77f af79 	ble.w	80099e4 <_printf_float+0x250>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4652      	mov	r2, sl
 8009af6:	4631      	mov	r1, r6
 8009af8:	4628      	mov	r0, r5
 8009afa:	47b8      	blx	r7
 8009afc:	3001      	adds	r0, #1
 8009afe:	f43f aeaa 	beq.w	8009856 <_printf_float+0xc2>
 8009b02:	f108 0801 	add.w	r8, r8, #1
 8009b06:	e7ec      	b.n	8009ae2 <_printf_float+0x34e>
 8009b08:	4613      	mov	r3, r2
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	d1c0      	bne.n	8009a98 <_printf_float+0x304>
 8009b16:	e69e      	b.n	8009856 <_printf_float+0xc2>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	9205      	str	r2, [sp, #20]
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f43f ae97 	beq.w	8009856 <_printf_float+0xc2>
 8009b28:	9a05      	ldr	r2, [sp, #20]
 8009b2a:	f10b 0b01 	add.w	fp, fp, #1
 8009b2e:	e7b9      	b.n	8009aa4 <_printf_float+0x310>
 8009b30:	ee18 3a10 	vmov	r3, s16
 8009b34:	4652      	mov	r2, sl
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b8      	blx	r7
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d1be      	bne.n	8009abe <_printf_float+0x32a>
 8009b40:	e689      	b.n	8009856 <_printf_float+0xc2>
 8009b42:	9a05      	ldr	r2, [sp, #20]
 8009b44:	464b      	mov	r3, r9
 8009b46:	4442      	add	r2, r8
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d1c1      	bne.n	8009ad6 <_printf_float+0x342>
 8009b52:	e680      	b.n	8009856 <_printf_float+0xc2>
 8009b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b56:	2a01      	cmp	r2, #1
 8009b58:	dc01      	bgt.n	8009b5e <_printf_float+0x3ca>
 8009b5a:	07db      	lsls	r3, r3, #31
 8009b5c:	d538      	bpl.n	8009bd0 <_printf_float+0x43c>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4642      	mov	r2, r8
 8009b62:	4631      	mov	r1, r6
 8009b64:	4628      	mov	r0, r5
 8009b66:	47b8      	blx	r7
 8009b68:	3001      	adds	r0, #1
 8009b6a:	f43f ae74 	beq.w	8009856 <_printf_float+0xc2>
 8009b6e:	ee18 3a10 	vmov	r3, s16
 8009b72:	4652      	mov	r2, sl
 8009b74:	4631      	mov	r1, r6
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f43f ae6b 	beq.w	8009856 <_printf_float+0xc2>
 8009b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b84:	2200      	movs	r2, #0
 8009b86:	2300      	movs	r3, #0
 8009b88:	f7f6 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b8c:	b9d8      	cbnz	r0, 8009bc6 <_printf_float+0x432>
 8009b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b90:	f108 0201 	add.w	r2, r8, #1
 8009b94:	3b01      	subs	r3, #1
 8009b96:	4631      	mov	r1, r6
 8009b98:	4628      	mov	r0, r5
 8009b9a:	47b8      	blx	r7
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d10e      	bne.n	8009bbe <_printf_float+0x42a>
 8009ba0:	e659      	b.n	8009856 <_printf_float+0xc2>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4652      	mov	r2, sl
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b8      	blx	r7
 8009bac:	3001      	adds	r0, #1
 8009bae:	f43f ae52 	beq.w	8009856 <_printf_float+0xc2>
 8009bb2:	f108 0801 	add.w	r8, r8, #1
 8009bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	4543      	cmp	r3, r8
 8009bbc:	dcf1      	bgt.n	8009ba2 <_printf_float+0x40e>
 8009bbe:	464b      	mov	r3, r9
 8009bc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bc4:	e6dc      	b.n	8009980 <_printf_float+0x1ec>
 8009bc6:	f04f 0800 	mov.w	r8, #0
 8009bca:	f104 0a1a 	add.w	sl, r4, #26
 8009bce:	e7f2      	b.n	8009bb6 <_printf_float+0x422>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	4642      	mov	r2, r8
 8009bd4:	e7df      	b.n	8009b96 <_printf_float+0x402>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	464a      	mov	r2, r9
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b8      	blx	r7
 8009be0:	3001      	adds	r0, #1
 8009be2:	f43f ae38 	beq.w	8009856 <_printf_float+0xc2>
 8009be6:	f108 0801 	add.w	r8, r8, #1
 8009bea:	68e3      	ldr	r3, [r4, #12]
 8009bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bee:	1a5b      	subs	r3, r3, r1
 8009bf0:	4543      	cmp	r3, r8
 8009bf2:	dcf0      	bgt.n	8009bd6 <_printf_float+0x442>
 8009bf4:	e6fa      	b.n	80099ec <_printf_float+0x258>
 8009bf6:	f04f 0800 	mov.w	r8, #0
 8009bfa:	f104 0919 	add.w	r9, r4, #25
 8009bfe:	e7f4      	b.n	8009bea <_printf_float+0x456>

08009c00 <_printf_common>:
 8009c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c04:	4616      	mov	r6, r2
 8009c06:	4699      	mov	r9, r3
 8009c08:	688a      	ldr	r2, [r1, #8]
 8009c0a:	690b      	ldr	r3, [r1, #16]
 8009c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	bfb8      	it	lt
 8009c14:	4613      	movlt	r3, r2
 8009c16:	6033      	str	r3, [r6, #0]
 8009c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b10a      	cbz	r2, 8009c26 <_printf_common+0x26>
 8009c22:	3301      	adds	r3, #1
 8009c24:	6033      	str	r3, [r6, #0]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	0699      	lsls	r1, r3, #26
 8009c2a:	bf42      	ittt	mi
 8009c2c:	6833      	ldrmi	r3, [r6, #0]
 8009c2e:	3302      	addmi	r3, #2
 8009c30:	6033      	strmi	r3, [r6, #0]
 8009c32:	6825      	ldr	r5, [r4, #0]
 8009c34:	f015 0506 	ands.w	r5, r5, #6
 8009c38:	d106      	bne.n	8009c48 <_printf_common+0x48>
 8009c3a:	f104 0a19 	add.w	sl, r4, #25
 8009c3e:	68e3      	ldr	r3, [r4, #12]
 8009c40:	6832      	ldr	r2, [r6, #0]
 8009c42:	1a9b      	subs	r3, r3, r2
 8009c44:	42ab      	cmp	r3, r5
 8009c46:	dc26      	bgt.n	8009c96 <_printf_common+0x96>
 8009c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c4c:	1e13      	subs	r3, r2, #0
 8009c4e:	6822      	ldr	r2, [r4, #0]
 8009c50:	bf18      	it	ne
 8009c52:	2301      	movne	r3, #1
 8009c54:	0692      	lsls	r2, r2, #26
 8009c56:	d42b      	bmi.n	8009cb0 <_printf_common+0xb0>
 8009c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c0      	blx	r8
 8009c62:	3001      	adds	r0, #1
 8009c64:	d01e      	beq.n	8009ca4 <_printf_common+0xa4>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	68e5      	ldr	r5, [r4, #12]
 8009c6a:	6832      	ldr	r2, [r6, #0]
 8009c6c:	f003 0306 	and.w	r3, r3, #6
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	bf08      	it	eq
 8009c74:	1aad      	subeq	r5, r5, r2
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	bf0c      	ite	eq
 8009c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c80:	2500      	movne	r5, #0
 8009c82:	4293      	cmp	r3, r2
 8009c84:	bfc4      	itt	gt
 8009c86:	1a9b      	subgt	r3, r3, r2
 8009c88:	18ed      	addgt	r5, r5, r3
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	341a      	adds	r4, #26
 8009c8e:	42b5      	cmp	r5, r6
 8009c90:	d11a      	bne.n	8009cc8 <_printf_common+0xc8>
 8009c92:	2000      	movs	r0, #0
 8009c94:	e008      	b.n	8009ca8 <_printf_common+0xa8>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4652      	mov	r2, sl
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	47c0      	blx	r8
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d103      	bne.n	8009cac <_printf_common+0xac>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cac:	3501      	adds	r5, #1
 8009cae:	e7c6      	b.n	8009c3e <_printf_common+0x3e>
 8009cb0:	18e1      	adds	r1, r4, r3
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	2030      	movs	r0, #48	; 0x30
 8009cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cba:	4422      	add	r2, r4
 8009cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	e7c7      	b.n	8009c58 <_printf_common+0x58>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4622      	mov	r2, r4
 8009ccc:	4649      	mov	r1, r9
 8009cce:	4638      	mov	r0, r7
 8009cd0:	47c0      	blx	r8
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d0e6      	beq.n	8009ca4 <_printf_common+0xa4>
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	e7d9      	b.n	8009c8e <_printf_common+0x8e>
	...

08009cdc <_printf_i>:
 8009cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	4691      	mov	r9, r2
 8009ce4:	7e27      	ldrb	r7, [r4, #24]
 8009ce6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ce8:	2f78      	cmp	r7, #120	; 0x78
 8009cea:	4680      	mov	r8, r0
 8009cec:	469a      	mov	sl, r3
 8009cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cf2:	d807      	bhi.n	8009d04 <_printf_i+0x28>
 8009cf4:	2f62      	cmp	r7, #98	; 0x62
 8009cf6:	d80a      	bhi.n	8009d0e <_printf_i+0x32>
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	f000 80d8 	beq.w	8009eae <_printf_i+0x1d2>
 8009cfe:	2f58      	cmp	r7, #88	; 0x58
 8009d00:	f000 80a3 	beq.w	8009e4a <_printf_i+0x16e>
 8009d04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d0c:	e03a      	b.n	8009d84 <_printf_i+0xa8>
 8009d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d12:	2b15      	cmp	r3, #21
 8009d14:	d8f6      	bhi.n	8009d04 <_printf_i+0x28>
 8009d16:	a001      	add	r0, pc, #4	; (adr r0, 8009d1c <_printf_i+0x40>)
 8009d18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d89 	.word	0x08009d89
 8009d24:	08009d05 	.word	0x08009d05
 8009d28:	08009d05 	.word	0x08009d05
 8009d2c:	08009d05 	.word	0x08009d05
 8009d30:	08009d05 	.word	0x08009d05
 8009d34:	08009d89 	.word	0x08009d89
 8009d38:	08009d05 	.word	0x08009d05
 8009d3c:	08009d05 	.word	0x08009d05
 8009d40:	08009d05 	.word	0x08009d05
 8009d44:	08009d05 	.word	0x08009d05
 8009d48:	08009e95 	.word	0x08009e95
 8009d4c:	08009db9 	.word	0x08009db9
 8009d50:	08009e77 	.word	0x08009e77
 8009d54:	08009d05 	.word	0x08009d05
 8009d58:	08009d05 	.word	0x08009d05
 8009d5c:	08009eb7 	.word	0x08009eb7
 8009d60:	08009d05 	.word	0x08009d05
 8009d64:	08009db9 	.word	0x08009db9
 8009d68:	08009d05 	.word	0x08009d05
 8009d6c:	08009d05 	.word	0x08009d05
 8009d70:	08009e7f 	.word	0x08009e7f
 8009d74:	680b      	ldr	r3, [r1, #0]
 8009d76:	1d1a      	adds	r2, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	600a      	str	r2, [r1, #0]
 8009d7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d84:	2301      	movs	r3, #1
 8009d86:	e0a3      	b.n	8009ed0 <_printf_i+0x1f4>
 8009d88:	6825      	ldr	r5, [r4, #0]
 8009d8a:	6808      	ldr	r0, [r1, #0]
 8009d8c:	062e      	lsls	r6, r5, #24
 8009d8e:	f100 0304 	add.w	r3, r0, #4
 8009d92:	d50a      	bpl.n	8009daa <_printf_i+0xce>
 8009d94:	6805      	ldr	r5, [r0, #0]
 8009d96:	600b      	str	r3, [r1, #0]
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	da03      	bge.n	8009da4 <_printf_i+0xc8>
 8009d9c:	232d      	movs	r3, #45	; 0x2d
 8009d9e:	426d      	negs	r5, r5
 8009da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da4:	485e      	ldr	r0, [pc, #376]	; (8009f20 <_printf_i+0x244>)
 8009da6:	230a      	movs	r3, #10
 8009da8:	e019      	b.n	8009dde <_printf_i+0x102>
 8009daa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009dae:	6805      	ldr	r5, [r0, #0]
 8009db0:	600b      	str	r3, [r1, #0]
 8009db2:	bf18      	it	ne
 8009db4:	b22d      	sxthne	r5, r5
 8009db6:	e7ef      	b.n	8009d98 <_printf_i+0xbc>
 8009db8:	680b      	ldr	r3, [r1, #0]
 8009dba:	6825      	ldr	r5, [r4, #0]
 8009dbc:	1d18      	adds	r0, r3, #4
 8009dbe:	6008      	str	r0, [r1, #0]
 8009dc0:	0628      	lsls	r0, r5, #24
 8009dc2:	d501      	bpl.n	8009dc8 <_printf_i+0xec>
 8009dc4:	681d      	ldr	r5, [r3, #0]
 8009dc6:	e002      	b.n	8009dce <_printf_i+0xf2>
 8009dc8:	0669      	lsls	r1, r5, #25
 8009dca:	d5fb      	bpl.n	8009dc4 <_printf_i+0xe8>
 8009dcc:	881d      	ldrh	r5, [r3, #0]
 8009dce:	4854      	ldr	r0, [pc, #336]	; (8009f20 <_printf_i+0x244>)
 8009dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009dd2:	bf0c      	ite	eq
 8009dd4:	2308      	moveq	r3, #8
 8009dd6:	230a      	movne	r3, #10
 8009dd8:	2100      	movs	r1, #0
 8009dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dde:	6866      	ldr	r6, [r4, #4]
 8009de0:	60a6      	str	r6, [r4, #8]
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	bfa2      	ittt	ge
 8009de6:	6821      	ldrge	r1, [r4, #0]
 8009de8:	f021 0104 	bicge.w	r1, r1, #4
 8009dec:	6021      	strge	r1, [r4, #0]
 8009dee:	b90d      	cbnz	r5, 8009df4 <_printf_i+0x118>
 8009df0:	2e00      	cmp	r6, #0
 8009df2:	d04d      	beq.n	8009e90 <_printf_i+0x1b4>
 8009df4:	4616      	mov	r6, r2
 8009df6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dfa:	fb03 5711 	mls	r7, r3, r1, r5
 8009dfe:	5dc7      	ldrb	r7, [r0, r7]
 8009e00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e04:	462f      	mov	r7, r5
 8009e06:	42bb      	cmp	r3, r7
 8009e08:	460d      	mov	r5, r1
 8009e0a:	d9f4      	bls.n	8009df6 <_printf_i+0x11a>
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	d10b      	bne.n	8009e28 <_printf_i+0x14c>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	07df      	lsls	r7, r3, #31
 8009e14:	d508      	bpl.n	8009e28 <_printf_i+0x14c>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	6861      	ldr	r1, [r4, #4]
 8009e1a:	4299      	cmp	r1, r3
 8009e1c:	bfde      	ittt	le
 8009e1e:	2330      	movle	r3, #48	; 0x30
 8009e20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e28:	1b92      	subs	r2, r2, r6
 8009e2a:	6122      	str	r2, [r4, #16]
 8009e2c:	f8cd a000 	str.w	sl, [sp]
 8009e30:	464b      	mov	r3, r9
 8009e32:	aa03      	add	r2, sp, #12
 8009e34:	4621      	mov	r1, r4
 8009e36:	4640      	mov	r0, r8
 8009e38:	f7ff fee2 	bl	8009c00 <_printf_common>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d14c      	bne.n	8009eda <_printf_i+0x1fe>
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295
 8009e44:	b004      	add	sp, #16
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	4835      	ldr	r0, [pc, #212]	; (8009f20 <_printf_i+0x244>)
 8009e4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	680e      	ldr	r6, [r1, #0]
 8009e54:	061f      	lsls	r7, r3, #24
 8009e56:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e5a:	600e      	str	r6, [r1, #0]
 8009e5c:	d514      	bpl.n	8009e88 <_printf_i+0x1ac>
 8009e5e:	07d9      	lsls	r1, r3, #31
 8009e60:	bf44      	itt	mi
 8009e62:	f043 0320 	orrmi.w	r3, r3, #32
 8009e66:	6023      	strmi	r3, [r4, #0]
 8009e68:	b91d      	cbnz	r5, 8009e72 <_printf_i+0x196>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	f023 0320 	bic.w	r3, r3, #32
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	2310      	movs	r3, #16
 8009e74:	e7b0      	b.n	8009dd8 <_printf_i+0xfc>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	f043 0320 	orr.w	r3, r3, #32
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	2378      	movs	r3, #120	; 0x78
 8009e80:	4828      	ldr	r0, [pc, #160]	; (8009f24 <_printf_i+0x248>)
 8009e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e86:	e7e3      	b.n	8009e50 <_printf_i+0x174>
 8009e88:	065e      	lsls	r6, r3, #25
 8009e8a:	bf48      	it	mi
 8009e8c:	b2ad      	uxthmi	r5, r5
 8009e8e:	e7e6      	b.n	8009e5e <_printf_i+0x182>
 8009e90:	4616      	mov	r6, r2
 8009e92:	e7bb      	b.n	8009e0c <_printf_i+0x130>
 8009e94:	680b      	ldr	r3, [r1, #0]
 8009e96:	6826      	ldr	r6, [r4, #0]
 8009e98:	6960      	ldr	r0, [r4, #20]
 8009e9a:	1d1d      	adds	r5, r3, #4
 8009e9c:	600d      	str	r5, [r1, #0]
 8009e9e:	0635      	lsls	r5, r6, #24
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	d501      	bpl.n	8009ea8 <_printf_i+0x1cc>
 8009ea4:	6018      	str	r0, [r3, #0]
 8009ea6:	e002      	b.n	8009eae <_printf_i+0x1d2>
 8009ea8:	0671      	lsls	r1, r6, #25
 8009eaa:	d5fb      	bpl.n	8009ea4 <_printf_i+0x1c8>
 8009eac:	8018      	strh	r0, [r3, #0]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	4616      	mov	r6, r2
 8009eb4:	e7ba      	b.n	8009e2c <_printf_i+0x150>
 8009eb6:	680b      	ldr	r3, [r1, #0]
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	600a      	str	r2, [r1, #0]
 8009ebc:	681e      	ldr	r6, [r3, #0]
 8009ebe:	6862      	ldr	r2, [r4, #4]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7f6 f98c 	bl	80001e0 <memchr>
 8009ec8:	b108      	cbz	r0, 8009ece <_printf_i+0x1f2>
 8009eca:	1b80      	subs	r0, r0, r6
 8009ecc:	6060      	str	r0, [r4, #4]
 8009ece:	6863      	ldr	r3, [r4, #4]
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed8:	e7a8      	b.n	8009e2c <_printf_i+0x150>
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	4632      	mov	r2, r6
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	47d0      	blx	sl
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d0ab      	beq.n	8009e40 <_printf_i+0x164>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	079b      	lsls	r3, r3, #30
 8009eec:	d413      	bmi.n	8009f16 <_printf_i+0x23a>
 8009eee:	68e0      	ldr	r0, [r4, #12]
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	4298      	cmp	r0, r3
 8009ef4:	bfb8      	it	lt
 8009ef6:	4618      	movlt	r0, r3
 8009ef8:	e7a4      	b.n	8009e44 <_printf_i+0x168>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4632      	mov	r2, r6
 8009efe:	4649      	mov	r1, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	47d0      	blx	sl
 8009f04:	3001      	adds	r0, #1
 8009f06:	d09b      	beq.n	8009e40 <_printf_i+0x164>
 8009f08:	3501      	adds	r5, #1
 8009f0a:	68e3      	ldr	r3, [r4, #12]
 8009f0c:	9903      	ldr	r1, [sp, #12]
 8009f0e:	1a5b      	subs	r3, r3, r1
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	dcf2      	bgt.n	8009efa <_printf_i+0x21e>
 8009f14:	e7eb      	b.n	8009eee <_printf_i+0x212>
 8009f16:	2500      	movs	r5, #0
 8009f18:	f104 0619 	add.w	r6, r4, #25
 8009f1c:	e7f5      	b.n	8009f0a <_printf_i+0x22e>
 8009f1e:	bf00      	nop
 8009f20:	0800c906 	.word	0x0800c906
 8009f24:	0800c917 	.word	0x0800c917

08009f28 <siprintf>:
 8009f28:	b40e      	push	{r1, r2, r3}
 8009f2a:	b500      	push	{lr}
 8009f2c:	b09c      	sub	sp, #112	; 0x70
 8009f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f30:	9002      	str	r0, [sp, #8]
 8009f32:	9006      	str	r0, [sp, #24]
 8009f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f38:	4809      	ldr	r0, [pc, #36]	; (8009f60 <siprintf+0x38>)
 8009f3a:	9107      	str	r1, [sp, #28]
 8009f3c:	9104      	str	r1, [sp, #16]
 8009f3e:	4909      	ldr	r1, [pc, #36]	; (8009f64 <siprintf+0x3c>)
 8009f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f44:	9105      	str	r1, [sp, #20]
 8009f46:	6800      	ldr	r0, [r0, #0]
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	a902      	add	r1, sp, #8
 8009f4c:	f001 fc6c 	bl	800b828 <_svfiprintf_r>
 8009f50:	9b02      	ldr	r3, [sp, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	b01c      	add	sp, #112	; 0x70
 8009f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f5c:	b003      	add	sp, #12
 8009f5e:	4770      	bx	lr
 8009f60:	20000110 	.word	0x20000110
 8009f64:	ffff0208 	.word	0xffff0208

08009f68 <strcpy>:
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f6e:	f803 2b01 	strb.w	r2, [r3], #1
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	d1f9      	bne.n	8009f6a <strcpy+0x2>
 8009f76:	4770      	bx	lr

08009f78 <strstr>:
 8009f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7a:	780c      	ldrb	r4, [r1, #0]
 8009f7c:	b164      	cbz	r4, 8009f98 <strstr+0x20>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	781a      	ldrb	r2, [r3, #0]
 8009f82:	4618      	mov	r0, r3
 8009f84:	1c5e      	adds	r6, r3, #1
 8009f86:	b90a      	cbnz	r2, 8009f8c <strstr+0x14>
 8009f88:	4610      	mov	r0, r2
 8009f8a:	e005      	b.n	8009f98 <strstr+0x20>
 8009f8c:	4294      	cmp	r4, r2
 8009f8e:	d108      	bne.n	8009fa2 <strstr+0x2a>
 8009f90:	460d      	mov	r5, r1
 8009f92:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009f96:	b902      	cbnz	r2, 8009f9a <strstr+0x22>
 8009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009f9e:	4297      	cmp	r7, r2
 8009fa0:	d0f7      	beq.n	8009f92 <strstr+0x1a>
 8009fa2:	4633      	mov	r3, r6
 8009fa4:	e7ec      	b.n	8009f80 <strstr+0x8>
	...

08009fa8 <strtok>:
 8009fa8:	4b16      	ldr	r3, [pc, #88]	; (800a004 <strtok+0x5c>)
 8009faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fac:	681e      	ldr	r6, [r3, #0]
 8009fae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	b9fc      	cbnz	r4, 8009ff4 <strtok+0x4c>
 8009fb4:	2050      	movs	r0, #80	; 0x50
 8009fb6:	9101      	str	r1, [sp, #4]
 8009fb8:	f000 ff8c 	bl	800aed4 <malloc>
 8009fbc:	9901      	ldr	r1, [sp, #4]
 8009fbe:	65b0      	str	r0, [r6, #88]	; 0x58
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	b920      	cbnz	r0, 8009fce <strtok+0x26>
 8009fc4:	4b10      	ldr	r3, [pc, #64]	; (800a008 <strtok+0x60>)
 8009fc6:	4811      	ldr	r0, [pc, #68]	; (800a00c <strtok+0x64>)
 8009fc8:	2157      	movs	r1, #87	; 0x57
 8009fca:	f000 f8d7 	bl	800a17c <__assert_func>
 8009fce:	e9c0 4400 	strd	r4, r4, [r0]
 8009fd2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009fd6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009fda:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009fde:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009fe2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009fe6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009fea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009fee:	6184      	str	r4, [r0, #24]
 8009ff0:	7704      	strb	r4, [r0, #28]
 8009ff2:	6244      	str	r4, [r0, #36]	; 0x24
 8009ff4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	b002      	add	sp, #8
 8009ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a000:	f000 b806 	b.w	800a010 <__strtok_r>
 800a004:	20000110 	.word	0x20000110
 800a008:	0800c928 	.word	0x0800c928
 800a00c:	0800c93f 	.word	0x0800c93f

0800a010 <__strtok_r>:
 800a010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a012:	b908      	cbnz	r0, 800a018 <__strtok_r+0x8>
 800a014:	6810      	ldr	r0, [r2, #0]
 800a016:	b188      	cbz	r0, 800a03c <__strtok_r+0x2c>
 800a018:	4604      	mov	r4, r0
 800a01a:	4620      	mov	r0, r4
 800a01c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a020:	460f      	mov	r7, r1
 800a022:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a026:	b91e      	cbnz	r6, 800a030 <__strtok_r+0x20>
 800a028:	b965      	cbnz	r5, 800a044 <__strtok_r+0x34>
 800a02a:	6015      	str	r5, [r2, #0]
 800a02c:	4628      	mov	r0, r5
 800a02e:	e005      	b.n	800a03c <__strtok_r+0x2c>
 800a030:	42b5      	cmp	r5, r6
 800a032:	d1f6      	bne.n	800a022 <__strtok_r+0x12>
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1f0      	bne.n	800a01a <__strtok_r+0xa>
 800a038:	6014      	str	r4, [r2, #0]
 800a03a:	7003      	strb	r3, [r0, #0]
 800a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a03e:	461c      	mov	r4, r3
 800a040:	e00c      	b.n	800a05c <__strtok_r+0x4c>
 800a042:	b915      	cbnz	r5, 800a04a <__strtok_r+0x3a>
 800a044:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a048:	460e      	mov	r6, r1
 800a04a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a04e:	42ab      	cmp	r3, r5
 800a050:	d1f7      	bne.n	800a042 <__strtok_r+0x32>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0f3      	beq.n	800a03e <__strtok_r+0x2e>
 800a056:	2300      	movs	r3, #0
 800a058:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a05c:	6014      	str	r4, [r2, #0]
 800a05e:	e7ed      	b.n	800a03c <__strtok_r+0x2c>

0800a060 <_strtol_l.isra.0>:
 800a060:	2b01      	cmp	r3, #1
 800a062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a066:	d001      	beq.n	800a06c <_strtol_l.isra.0+0xc>
 800a068:	2b24      	cmp	r3, #36	; 0x24
 800a06a:	d906      	bls.n	800a07a <_strtol_l.isra.0+0x1a>
 800a06c:	f7ff fac0 	bl	80095f0 <__errno>
 800a070:	2316      	movs	r3, #22
 800a072:	6003      	str	r3, [r0, #0]
 800a074:	2000      	movs	r0, #0
 800a076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07a:	4f3a      	ldr	r7, [pc, #232]	; (800a164 <_strtol_l.isra.0+0x104>)
 800a07c:	468e      	mov	lr, r1
 800a07e:	4676      	mov	r6, lr
 800a080:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a084:	5de5      	ldrb	r5, [r4, r7]
 800a086:	f015 0508 	ands.w	r5, r5, #8
 800a08a:	d1f8      	bne.n	800a07e <_strtol_l.isra.0+0x1e>
 800a08c:	2c2d      	cmp	r4, #45	; 0x2d
 800a08e:	d134      	bne.n	800a0fa <_strtol_l.isra.0+0x9a>
 800a090:	f89e 4000 	ldrb.w	r4, [lr]
 800a094:	f04f 0801 	mov.w	r8, #1
 800a098:	f106 0e02 	add.w	lr, r6, #2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d05c      	beq.n	800a15a <_strtol_l.isra.0+0xfa>
 800a0a0:	2b10      	cmp	r3, #16
 800a0a2:	d10c      	bne.n	800a0be <_strtol_l.isra.0+0x5e>
 800a0a4:	2c30      	cmp	r4, #48	; 0x30
 800a0a6:	d10a      	bne.n	800a0be <_strtol_l.isra.0+0x5e>
 800a0a8:	f89e 4000 	ldrb.w	r4, [lr]
 800a0ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a0b0:	2c58      	cmp	r4, #88	; 0x58
 800a0b2:	d14d      	bne.n	800a150 <_strtol_l.isra.0+0xf0>
 800a0b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a0b8:	2310      	movs	r3, #16
 800a0ba:	f10e 0e02 	add.w	lr, lr, #2
 800a0be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a0c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	fbbc f9f3 	udiv	r9, ip, r3
 800a0cc:	4635      	mov	r5, r6
 800a0ce:	fb03 ca19 	mls	sl, r3, r9, ip
 800a0d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a0d6:	2f09      	cmp	r7, #9
 800a0d8:	d818      	bhi.n	800a10c <_strtol_l.isra.0+0xac>
 800a0da:	463c      	mov	r4, r7
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	dd24      	ble.n	800a12a <_strtol_l.isra.0+0xca>
 800a0e0:	2e00      	cmp	r6, #0
 800a0e2:	db1f      	blt.n	800a124 <_strtol_l.isra.0+0xc4>
 800a0e4:	45a9      	cmp	r9, r5
 800a0e6:	d31d      	bcc.n	800a124 <_strtol_l.isra.0+0xc4>
 800a0e8:	d101      	bne.n	800a0ee <_strtol_l.isra.0+0x8e>
 800a0ea:	45a2      	cmp	sl, r4
 800a0ec:	db1a      	blt.n	800a124 <_strtol_l.isra.0+0xc4>
 800a0ee:	fb05 4503 	mla	r5, r5, r3, r4
 800a0f2:	2601      	movs	r6, #1
 800a0f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a0f8:	e7eb      	b.n	800a0d2 <_strtol_l.isra.0+0x72>
 800a0fa:	2c2b      	cmp	r4, #43	; 0x2b
 800a0fc:	bf08      	it	eq
 800a0fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a102:	46a8      	mov	r8, r5
 800a104:	bf08      	it	eq
 800a106:	f106 0e02 	addeq.w	lr, r6, #2
 800a10a:	e7c7      	b.n	800a09c <_strtol_l.isra.0+0x3c>
 800a10c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a110:	2f19      	cmp	r7, #25
 800a112:	d801      	bhi.n	800a118 <_strtol_l.isra.0+0xb8>
 800a114:	3c37      	subs	r4, #55	; 0x37
 800a116:	e7e1      	b.n	800a0dc <_strtol_l.isra.0+0x7c>
 800a118:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a11c:	2f19      	cmp	r7, #25
 800a11e:	d804      	bhi.n	800a12a <_strtol_l.isra.0+0xca>
 800a120:	3c57      	subs	r4, #87	; 0x57
 800a122:	e7db      	b.n	800a0dc <_strtol_l.isra.0+0x7c>
 800a124:	f04f 36ff 	mov.w	r6, #4294967295
 800a128:	e7e4      	b.n	800a0f4 <_strtol_l.isra.0+0x94>
 800a12a:	2e00      	cmp	r6, #0
 800a12c:	da05      	bge.n	800a13a <_strtol_l.isra.0+0xda>
 800a12e:	2322      	movs	r3, #34	; 0x22
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	4665      	mov	r5, ip
 800a134:	b942      	cbnz	r2, 800a148 <_strtol_l.isra.0+0xe8>
 800a136:	4628      	mov	r0, r5
 800a138:	e79d      	b.n	800a076 <_strtol_l.isra.0+0x16>
 800a13a:	f1b8 0f00 	cmp.w	r8, #0
 800a13e:	d000      	beq.n	800a142 <_strtol_l.isra.0+0xe2>
 800a140:	426d      	negs	r5, r5
 800a142:	2a00      	cmp	r2, #0
 800a144:	d0f7      	beq.n	800a136 <_strtol_l.isra.0+0xd6>
 800a146:	b10e      	cbz	r6, 800a14c <_strtol_l.isra.0+0xec>
 800a148:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	e7f2      	b.n	800a136 <_strtol_l.isra.0+0xd6>
 800a150:	2430      	movs	r4, #48	; 0x30
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1b3      	bne.n	800a0be <_strtol_l.isra.0+0x5e>
 800a156:	2308      	movs	r3, #8
 800a158:	e7b1      	b.n	800a0be <_strtol_l.isra.0+0x5e>
 800a15a:	2c30      	cmp	r4, #48	; 0x30
 800a15c:	d0a4      	beq.n	800a0a8 <_strtol_l.isra.0+0x48>
 800a15e:	230a      	movs	r3, #10
 800a160:	e7ad      	b.n	800a0be <_strtol_l.isra.0+0x5e>
 800a162:	bf00      	nop
 800a164:	0800c9dd 	.word	0x0800c9dd

0800a168 <strtol>:
 800a168:	4613      	mov	r3, r2
 800a16a:	460a      	mov	r2, r1
 800a16c:	4601      	mov	r1, r0
 800a16e:	4802      	ldr	r0, [pc, #8]	; (800a178 <strtol+0x10>)
 800a170:	6800      	ldr	r0, [r0, #0]
 800a172:	f7ff bf75 	b.w	800a060 <_strtol_l.isra.0>
 800a176:	bf00      	nop
 800a178:	20000110 	.word	0x20000110

0800a17c <__assert_func>:
 800a17c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a17e:	4614      	mov	r4, r2
 800a180:	461a      	mov	r2, r3
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <__assert_func+0x2c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4605      	mov	r5, r0
 800a188:	68d8      	ldr	r0, [r3, #12]
 800a18a:	b14c      	cbz	r4, 800a1a0 <__assert_func+0x24>
 800a18c:	4b07      	ldr	r3, [pc, #28]	; (800a1ac <__assert_func+0x30>)
 800a18e:	9100      	str	r1, [sp, #0]
 800a190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a194:	4906      	ldr	r1, [pc, #24]	; (800a1b0 <__assert_func+0x34>)
 800a196:	462b      	mov	r3, r5
 800a198:	f000 fe86 	bl	800aea8 <fiprintf>
 800a19c:	f001 fe6e 	bl	800be7c <abort>
 800a1a0:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <__assert_func+0x38>)
 800a1a2:	461c      	mov	r4, r3
 800a1a4:	e7f3      	b.n	800a18e <__assert_func+0x12>
 800a1a6:	bf00      	nop
 800a1a8:	20000110 	.word	0x20000110
 800a1ac:	0800c9a0 	.word	0x0800c9a0
 800a1b0:	0800c9ad 	.word	0x0800c9ad
 800a1b4:	0800c9db 	.word	0x0800c9db

0800a1b8 <quorem>:
 800a1b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	6903      	ldr	r3, [r0, #16]
 800a1be:	690c      	ldr	r4, [r1, #16]
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	4607      	mov	r7, r0
 800a1c4:	f2c0 8081 	blt.w	800a2ca <quorem+0x112>
 800a1c8:	3c01      	subs	r4, #1
 800a1ca:	f101 0814 	add.w	r8, r1, #20
 800a1ce:	f100 0514 	add.w	r5, r0, #20
 800a1d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1f0:	d331      	bcc.n	800a256 <quorem+0x9e>
 800a1f2:	f04f 0e00 	mov.w	lr, #0
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	46ac      	mov	ip, r5
 800a1fa:	46f2      	mov	sl, lr
 800a1fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a200:	b293      	uxth	r3, r2
 800a202:	fb06 e303 	mla	r3, r6, r3, lr
 800a206:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	ebaa 0303 	sub.w	r3, sl, r3
 800a210:	0c12      	lsrs	r2, r2, #16
 800a212:	f8dc a000 	ldr.w	sl, [ip]
 800a216:	fb06 e202 	mla	r2, r6, r2, lr
 800a21a:	fa13 f38a 	uxtah	r3, r3, sl
 800a21e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a222:	fa1f fa82 	uxth.w	sl, r2
 800a226:	f8dc 2000 	ldr.w	r2, [ip]
 800a22a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a22e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a232:	b29b      	uxth	r3, r3
 800a234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a238:	4581      	cmp	r9, r0
 800a23a:	f84c 3b04 	str.w	r3, [ip], #4
 800a23e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a242:	d2db      	bcs.n	800a1fc <quorem+0x44>
 800a244:	f855 300b 	ldr.w	r3, [r5, fp]
 800a248:	b92b      	cbnz	r3, 800a256 <quorem+0x9e>
 800a24a:	9b01      	ldr	r3, [sp, #4]
 800a24c:	3b04      	subs	r3, #4
 800a24e:	429d      	cmp	r5, r3
 800a250:	461a      	mov	r2, r3
 800a252:	d32e      	bcc.n	800a2b2 <quorem+0xfa>
 800a254:	613c      	str	r4, [r7, #16]
 800a256:	4638      	mov	r0, r7
 800a258:	f001 f8d0 	bl	800b3fc <__mcmp>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	db24      	blt.n	800a2aa <quorem+0xf2>
 800a260:	3601      	adds	r6, #1
 800a262:	4628      	mov	r0, r5
 800a264:	f04f 0c00 	mov.w	ip, #0
 800a268:	f858 2b04 	ldr.w	r2, [r8], #4
 800a26c:	f8d0 e000 	ldr.w	lr, [r0]
 800a270:	b293      	uxth	r3, r2
 800a272:	ebac 0303 	sub.w	r3, ip, r3
 800a276:	0c12      	lsrs	r2, r2, #16
 800a278:	fa13 f38e 	uxtah	r3, r3, lr
 800a27c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a284:	b29b      	uxth	r3, r3
 800a286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a28a:	45c1      	cmp	r9, r8
 800a28c:	f840 3b04 	str.w	r3, [r0], #4
 800a290:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a294:	d2e8      	bcs.n	800a268 <quorem+0xb0>
 800a296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a29a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a29e:	b922      	cbnz	r2, 800a2aa <quorem+0xf2>
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	d30a      	bcc.n	800a2be <quorem+0x106>
 800a2a8:	613c      	str	r4, [r7, #16]
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	b003      	add	sp, #12
 800a2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b2:	6812      	ldr	r2, [r2, #0]
 800a2b4:	3b04      	subs	r3, #4
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	d1cc      	bne.n	800a254 <quorem+0x9c>
 800a2ba:	3c01      	subs	r4, #1
 800a2bc:	e7c7      	b.n	800a24e <quorem+0x96>
 800a2be:	6812      	ldr	r2, [r2, #0]
 800a2c0:	3b04      	subs	r3, #4
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	d1f0      	bne.n	800a2a8 <quorem+0xf0>
 800a2c6:	3c01      	subs	r4, #1
 800a2c8:	e7eb      	b.n	800a2a2 <quorem+0xea>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	e7ee      	b.n	800a2ac <quorem+0xf4>
	...

0800a2d0 <_dtoa_r>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	ed2d 8b02 	vpush	{d8}
 800a2d8:	ec57 6b10 	vmov	r6, r7, d0
 800a2dc:	b095      	sub	sp, #84	; 0x54
 800a2de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2e4:	9105      	str	r1, [sp, #20]
 800a2e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2f0:	b975      	cbnz	r5, 800a310 <_dtoa_r+0x40>
 800a2f2:	2010      	movs	r0, #16
 800a2f4:	f000 fdee 	bl	800aed4 <malloc>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	6260      	str	r0, [r4, #36]	; 0x24
 800a2fc:	b920      	cbnz	r0, 800a308 <_dtoa_r+0x38>
 800a2fe:	4bb2      	ldr	r3, [pc, #712]	; (800a5c8 <_dtoa_r+0x2f8>)
 800a300:	21ea      	movs	r1, #234	; 0xea
 800a302:	48b2      	ldr	r0, [pc, #712]	; (800a5cc <_dtoa_r+0x2fc>)
 800a304:	f7ff ff3a 	bl	800a17c <__assert_func>
 800a308:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a30c:	6005      	str	r5, [r0, #0]
 800a30e:	60c5      	str	r5, [r0, #12]
 800a310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a312:	6819      	ldr	r1, [r3, #0]
 800a314:	b151      	cbz	r1, 800a32c <_dtoa_r+0x5c>
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	604a      	str	r2, [r1, #4]
 800a31a:	2301      	movs	r3, #1
 800a31c:	4093      	lsls	r3, r2
 800a31e:	608b      	str	r3, [r1, #8]
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fe2d 	bl	800af80 <_Bfree>
 800a326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	1e3b      	subs	r3, r7, #0
 800a32e:	bfb9      	ittee	lt
 800a330:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a334:	9303      	strlt	r3, [sp, #12]
 800a336:	2300      	movge	r3, #0
 800a338:	f8c8 3000 	strge.w	r3, [r8]
 800a33c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a340:	4ba3      	ldr	r3, [pc, #652]	; (800a5d0 <_dtoa_r+0x300>)
 800a342:	bfbc      	itt	lt
 800a344:	2201      	movlt	r2, #1
 800a346:	f8c8 2000 	strlt.w	r2, [r8]
 800a34a:	ea33 0309 	bics.w	r3, r3, r9
 800a34e:	d11b      	bne.n	800a388 <_dtoa_r+0xb8>
 800a350:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a352:	f242 730f 	movw	r3, #9999	; 0x270f
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a35c:	4333      	orrs	r3, r6
 800a35e:	f000 857a 	beq.w	800ae56 <_dtoa_r+0xb86>
 800a362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a364:	b963      	cbnz	r3, 800a380 <_dtoa_r+0xb0>
 800a366:	4b9b      	ldr	r3, [pc, #620]	; (800a5d4 <_dtoa_r+0x304>)
 800a368:	e024      	b.n	800a3b4 <_dtoa_r+0xe4>
 800a36a:	4b9b      	ldr	r3, [pc, #620]	; (800a5d8 <_dtoa_r+0x308>)
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	3308      	adds	r3, #8
 800a370:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	9800      	ldr	r0, [sp, #0]
 800a376:	b015      	add	sp, #84	; 0x54
 800a378:	ecbd 8b02 	vpop	{d8}
 800a37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a380:	4b94      	ldr	r3, [pc, #592]	; (800a5d4 <_dtoa_r+0x304>)
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	3303      	adds	r3, #3
 800a386:	e7f3      	b.n	800a370 <_dtoa_r+0xa0>
 800a388:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a38c:	2200      	movs	r2, #0
 800a38e:	ec51 0b17 	vmov	r0, r1, d7
 800a392:	2300      	movs	r3, #0
 800a394:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a398:	f7f6 fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800a39c:	4680      	mov	r8, r0
 800a39e:	b158      	cbz	r0, 800a3b8 <_dtoa_r+0xe8>
 800a3a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 8551 	beq.w	800ae50 <_dtoa_r+0xb80>
 800a3ae:	488b      	ldr	r0, [pc, #556]	; (800a5dc <_dtoa_r+0x30c>)
 800a3b0:	6018      	str	r0, [r3, #0]
 800a3b2:	1e43      	subs	r3, r0, #1
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	e7dd      	b.n	800a374 <_dtoa_r+0xa4>
 800a3b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a3bc:	aa12      	add	r2, sp, #72	; 0x48
 800a3be:	a913      	add	r1, sp, #76	; 0x4c
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f001 f8bf 	bl	800b544 <__d2b>
 800a3c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a3ca:	4683      	mov	fp, r0
 800a3cc:	2d00      	cmp	r5, #0
 800a3ce:	d07c      	beq.n	800a4ca <_dtoa_r+0x1fa>
 800a3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a3de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3ea:	4b7d      	ldr	r3, [pc, #500]	; (800a5e0 <_dtoa_r+0x310>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	4639      	mov	r1, r7
 800a3f2:	f7f5 ff49 	bl	8000288 <__aeabi_dsub>
 800a3f6:	a36e      	add	r3, pc, #440	; (adr r3, 800a5b0 <_dtoa_r+0x2e0>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f6 f8fc 	bl	80005f8 <__aeabi_dmul>
 800a400:	a36d      	add	r3, pc, #436	; (adr r3, 800a5b8 <_dtoa_r+0x2e8>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f7f5 ff41 	bl	800028c <__adddf3>
 800a40a:	4606      	mov	r6, r0
 800a40c:	4628      	mov	r0, r5
 800a40e:	460f      	mov	r7, r1
 800a410:	f7f6 f888 	bl	8000524 <__aeabi_i2d>
 800a414:	a36a      	add	r3, pc, #424	; (adr r3, 800a5c0 <_dtoa_r+0x2f0>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f7f6 f8ed 	bl	80005f8 <__aeabi_dmul>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4630      	mov	r0, r6
 800a424:	4639      	mov	r1, r7
 800a426:	f7f5 ff31 	bl	800028c <__adddf3>
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	f7f6 fb93 	bl	8000b58 <__aeabi_d2iz>
 800a432:	2200      	movs	r2, #0
 800a434:	4682      	mov	sl, r0
 800a436:	2300      	movs	r3, #0
 800a438:	4630      	mov	r0, r6
 800a43a:	4639      	mov	r1, r7
 800a43c:	f7f6 fb4e 	bl	8000adc <__aeabi_dcmplt>
 800a440:	b148      	cbz	r0, 800a456 <_dtoa_r+0x186>
 800a442:	4650      	mov	r0, sl
 800a444:	f7f6 f86e 	bl	8000524 <__aeabi_i2d>
 800a448:	4632      	mov	r2, r6
 800a44a:	463b      	mov	r3, r7
 800a44c:	f7f6 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a450:	b908      	cbnz	r0, 800a456 <_dtoa_r+0x186>
 800a452:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a456:	f1ba 0f16 	cmp.w	sl, #22
 800a45a:	d854      	bhi.n	800a506 <_dtoa_r+0x236>
 800a45c:	4b61      	ldr	r3, [pc, #388]	; (800a5e4 <_dtoa_r+0x314>)
 800a45e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a46a:	f7f6 fb37 	bl	8000adc <__aeabi_dcmplt>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d04b      	beq.n	800a50a <_dtoa_r+0x23a>
 800a472:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a476:	2300      	movs	r3, #0
 800a478:	930e      	str	r3, [sp, #56]	; 0x38
 800a47a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a47c:	1b5d      	subs	r5, r3, r5
 800a47e:	1e6b      	subs	r3, r5, #1
 800a480:	9304      	str	r3, [sp, #16]
 800a482:	bf43      	ittte	mi
 800a484:	2300      	movmi	r3, #0
 800a486:	f1c5 0801 	rsbmi	r8, r5, #1
 800a48a:	9304      	strmi	r3, [sp, #16]
 800a48c:	f04f 0800 	movpl.w	r8, #0
 800a490:	f1ba 0f00 	cmp.w	sl, #0
 800a494:	db3b      	blt.n	800a50e <_dtoa_r+0x23e>
 800a496:	9b04      	ldr	r3, [sp, #16]
 800a498:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a49c:	4453      	add	r3, sl
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9306      	str	r3, [sp, #24]
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	2b09      	cmp	r3, #9
 800a4a8:	d869      	bhi.n	800a57e <_dtoa_r+0x2ae>
 800a4aa:	2b05      	cmp	r3, #5
 800a4ac:	bfc4      	itt	gt
 800a4ae:	3b04      	subgt	r3, #4
 800a4b0:	9305      	strgt	r3, [sp, #20]
 800a4b2:	9b05      	ldr	r3, [sp, #20]
 800a4b4:	f1a3 0302 	sub.w	r3, r3, #2
 800a4b8:	bfcc      	ite	gt
 800a4ba:	2500      	movgt	r5, #0
 800a4bc:	2501      	movle	r5, #1
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d869      	bhi.n	800a596 <_dtoa_r+0x2c6>
 800a4c2:	e8df f003 	tbb	[pc, r3]
 800a4c6:	4e2c      	.short	0x4e2c
 800a4c8:	5a4c      	.short	0x5a4c
 800a4ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a4ce:	441d      	add	r5, r3
 800a4d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4d4:	2b20      	cmp	r3, #32
 800a4d6:	bfc1      	itttt	gt
 800a4d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4e0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a4e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4e8:	bfda      	itte	le
 800a4ea:	f1c3 0320 	rsble	r3, r3, #32
 800a4ee:	fa06 f003 	lslle.w	r0, r6, r3
 800a4f2:	4318      	orrgt	r0, r3
 800a4f4:	f7f6 f806 	bl	8000504 <__aeabi_ui2d>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a500:	3d01      	subs	r5, #1
 800a502:	9310      	str	r3, [sp, #64]	; 0x40
 800a504:	e771      	b.n	800a3ea <_dtoa_r+0x11a>
 800a506:	2301      	movs	r3, #1
 800a508:	e7b6      	b.n	800a478 <_dtoa_r+0x1a8>
 800a50a:	900e      	str	r0, [sp, #56]	; 0x38
 800a50c:	e7b5      	b.n	800a47a <_dtoa_r+0x1aa>
 800a50e:	f1ca 0300 	rsb	r3, sl, #0
 800a512:	9306      	str	r3, [sp, #24]
 800a514:	2300      	movs	r3, #0
 800a516:	eba8 080a 	sub.w	r8, r8, sl
 800a51a:	930d      	str	r3, [sp, #52]	; 0x34
 800a51c:	e7c2      	b.n	800a4a4 <_dtoa_r+0x1d4>
 800a51e:	2300      	movs	r3, #0
 800a520:	9308      	str	r3, [sp, #32]
 800a522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	dc39      	bgt.n	800a59c <_dtoa_r+0x2cc>
 800a528:	f04f 0901 	mov.w	r9, #1
 800a52c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a530:	464b      	mov	r3, r9
 800a532:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a536:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a538:	2200      	movs	r2, #0
 800a53a:	6042      	str	r2, [r0, #4]
 800a53c:	2204      	movs	r2, #4
 800a53e:	f102 0614 	add.w	r6, r2, #20
 800a542:	429e      	cmp	r6, r3
 800a544:	6841      	ldr	r1, [r0, #4]
 800a546:	d92f      	bls.n	800a5a8 <_dtoa_r+0x2d8>
 800a548:	4620      	mov	r0, r4
 800a54a:	f000 fcd9 	bl	800af00 <_Balloc>
 800a54e:	9000      	str	r0, [sp, #0]
 800a550:	2800      	cmp	r0, #0
 800a552:	d14b      	bne.n	800a5ec <_dtoa_r+0x31c>
 800a554:	4b24      	ldr	r3, [pc, #144]	; (800a5e8 <_dtoa_r+0x318>)
 800a556:	4602      	mov	r2, r0
 800a558:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a55c:	e6d1      	b.n	800a302 <_dtoa_r+0x32>
 800a55e:	2301      	movs	r3, #1
 800a560:	e7de      	b.n	800a520 <_dtoa_r+0x250>
 800a562:	2300      	movs	r3, #0
 800a564:	9308      	str	r3, [sp, #32]
 800a566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a568:	eb0a 0903 	add.w	r9, sl, r3
 800a56c:	f109 0301 	add.w	r3, r9, #1
 800a570:	2b01      	cmp	r3, #1
 800a572:	9301      	str	r3, [sp, #4]
 800a574:	bfb8      	it	lt
 800a576:	2301      	movlt	r3, #1
 800a578:	e7dd      	b.n	800a536 <_dtoa_r+0x266>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e7f2      	b.n	800a564 <_dtoa_r+0x294>
 800a57e:	2501      	movs	r5, #1
 800a580:	2300      	movs	r3, #0
 800a582:	9305      	str	r3, [sp, #20]
 800a584:	9508      	str	r5, [sp, #32]
 800a586:	f04f 39ff 	mov.w	r9, #4294967295
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a590:	2312      	movs	r3, #18
 800a592:	9209      	str	r2, [sp, #36]	; 0x24
 800a594:	e7cf      	b.n	800a536 <_dtoa_r+0x266>
 800a596:	2301      	movs	r3, #1
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	e7f4      	b.n	800a586 <_dtoa_r+0x2b6>
 800a59c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a5a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a5a4:	464b      	mov	r3, r9
 800a5a6:	e7c6      	b.n	800a536 <_dtoa_r+0x266>
 800a5a8:	3101      	adds	r1, #1
 800a5aa:	6041      	str	r1, [r0, #4]
 800a5ac:	0052      	lsls	r2, r2, #1
 800a5ae:	e7c6      	b.n	800a53e <_dtoa_r+0x26e>
 800a5b0:	636f4361 	.word	0x636f4361
 800a5b4:	3fd287a7 	.word	0x3fd287a7
 800a5b8:	8b60c8b3 	.word	0x8b60c8b3
 800a5bc:	3fc68a28 	.word	0x3fc68a28
 800a5c0:	509f79fb 	.word	0x509f79fb
 800a5c4:	3fd34413 	.word	0x3fd34413
 800a5c8:	0800c928 	.word	0x0800c928
 800a5cc:	0800caea 	.word	0x0800caea
 800a5d0:	7ff00000 	.word	0x7ff00000
 800a5d4:	0800cae6 	.word	0x0800cae6
 800a5d8:	0800cadd 	.word	0x0800cadd
 800a5dc:	0800c905 	.word	0x0800c905
 800a5e0:	3ff80000 	.word	0x3ff80000
 800a5e4:	0800cbe8 	.word	0x0800cbe8
 800a5e8:	0800cb49 	.word	0x0800cb49
 800a5ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ee:	9a00      	ldr	r2, [sp, #0]
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	2b0e      	cmp	r3, #14
 800a5f6:	f200 80ad 	bhi.w	800a754 <_dtoa_r+0x484>
 800a5fa:	2d00      	cmp	r5, #0
 800a5fc:	f000 80aa 	beq.w	800a754 <_dtoa_r+0x484>
 800a600:	f1ba 0f00 	cmp.w	sl, #0
 800a604:	dd36      	ble.n	800a674 <_dtoa_r+0x3a4>
 800a606:	4ac3      	ldr	r2, [pc, #780]	; (800a914 <_dtoa_r+0x644>)
 800a608:	f00a 030f 	and.w	r3, sl, #15
 800a60c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a610:	ed93 7b00 	vldr	d7, [r3]
 800a614:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a618:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a61c:	eeb0 8a47 	vmov.f32	s16, s14
 800a620:	eef0 8a67 	vmov.f32	s17, s15
 800a624:	d016      	beq.n	800a654 <_dtoa_r+0x384>
 800a626:	4bbc      	ldr	r3, [pc, #752]	; (800a918 <_dtoa_r+0x648>)
 800a628:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a62c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a630:	f7f6 f90c 	bl	800084c <__aeabi_ddiv>
 800a634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a638:	f007 070f 	and.w	r7, r7, #15
 800a63c:	2503      	movs	r5, #3
 800a63e:	4eb6      	ldr	r6, [pc, #728]	; (800a918 <_dtoa_r+0x648>)
 800a640:	b957      	cbnz	r7, 800a658 <_dtoa_r+0x388>
 800a642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a646:	ec53 2b18 	vmov	r2, r3, d8
 800a64a:	f7f6 f8ff 	bl	800084c <__aeabi_ddiv>
 800a64e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a652:	e029      	b.n	800a6a8 <_dtoa_r+0x3d8>
 800a654:	2502      	movs	r5, #2
 800a656:	e7f2      	b.n	800a63e <_dtoa_r+0x36e>
 800a658:	07f9      	lsls	r1, r7, #31
 800a65a:	d508      	bpl.n	800a66e <_dtoa_r+0x39e>
 800a65c:	ec51 0b18 	vmov	r0, r1, d8
 800a660:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a664:	f7f5 ffc8 	bl	80005f8 <__aeabi_dmul>
 800a668:	ec41 0b18 	vmov	d8, r0, r1
 800a66c:	3501      	adds	r5, #1
 800a66e:	107f      	asrs	r7, r7, #1
 800a670:	3608      	adds	r6, #8
 800a672:	e7e5      	b.n	800a640 <_dtoa_r+0x370>
 800a674:	f000 80a6 	beq.w	800a7c4 <_dtoa_r+0x4f4>
 800a678:	f1ca 0600 	rsb	r6, sl, #0
 800a67c:	4ba5      	ldr	r3, [pc, #660]	; (800a914 <_dtoa_r+0x644>)
 800a67e:	4fa6      	ldr	r7, [pc, #664]	; (800a918 <_dtoa_r+0x648>)
 800a680:	f006 020f 	and.w	r2, r6, #15
 800a684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a690:	f7f5 ffb2 	bl	80005f8 <__aeabi_dmul>
 800a694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a698:	1136      	asrs	r6, r6, #4
 800a69a:	2300      	movs	r3, #0
 800a69c:	2502      	movs	r5, #2
 800a69e:	2e00      	cmp	r6, #0
 800a6a0:	f040 8085 	bne.w	800a7ae <_dtoa_r+0x4de>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1d2      	bne.n	800a64e <_dtoa_r+0x37e>
 800a6a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 808c 	beq.w	800a7c8 <_dtoa_r+0x4f8>
 800a6b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6b4:	4b99      	ldr	r3, [pc, #612]	; (800a91c <_dtoa_r+0x64c>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	f7f6 fa0e 	bl	8000adc <__aeabi_dcmplt>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f000 8081 	beq.w	800a7c8 <_dtoa_r+0x4f8>
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d07d      	beq.n	800a7c8 <_dtoa_r+0x4f8>
 800a6cc:	f1b9 0f00 	cmp.w	r9, #0
 800a6d0:	dd3c      	ble.n	800a74c <_dtoa_r+0x47c>
 800a6d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a6d6:	9307      	str	r3, [sp, #28]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4b91      	ldr	r3, [pc, #580]	; (800a920 <_dtoa_r+0x650>)
 800a6dc:	4630      	mov	r0, r6
 800a6de:	4639      	mov	r1, r7
 800a6e0:	f7f5 ff8a 	bl	80005f8 <__aeabi_dmul>
 800a6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6e8:	3501      	adds	r5, #1
 800a6ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a6ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7f5 ff16 	bl	8000524 <__aeabi_i2d>
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	463b      	mov	r3, r7
 800a6fc:	f7f5 ff7c 	bl	80005f8 <__aeabi_dmul>
 800a700:	4b88      	ldr	r3, [pc, #544]	; (800a924 <_dtoa_r+0x654>)
 800a702:	2200      	movs	r2, #0
 800a704:	f7f5 fdc2 	bl	800028c <__adddf3>
 800a708:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a70c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a710:	9303      	str	r3, [sp, #12]
 800a712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a714:	2b00      	cmp	r3, #0
 800a716:	d15c      	bne.n	800a7d2 <_dtoa_r+0x502>
 800a718:	4b83      	ldr	r3, [pc, #524]	; (800a928 <_dtoa_r+0x658>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f5 fdb2 	bl	8000288 <__aeabi_dsub>
 800a724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a728:	4606      	mov	r6, r0
 800a72a:	460f      	mov	r7, r1
 800a72c:	f7f6 f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 800a730:	2800      	cmp	r0, #0
 800a732:	f040 8296 	bne.w	800ac62 <_dtoa_r+0x992>
 800a736:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a73a:	4630      	mov	r0, r6
 800a73c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a740:	4639      	mov	r1, r7
 800a742:	f7f6 f9cb 	bl	8000adc <__aeabi_dcmplt>
 800a746:	2800      	cmp	r0, #0
 800a748:	f040 8288 	bne.w	800ac5c <_dtoa_r+0x98c>
 800a74c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a750:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a756:	2b00      	cmp	r3, #0
 800a758:	f2c0 8158 	blt.w	800aa0c <_dtoa_r+0x73c>
 800a75c:	f1ba 0f0e 	cmp.w	sl, #14
 800a760:	f300 8154 	bgt.w	800aa0c <_dtoa_r+0x73c>
 800a764:	4b6b      	ldr	r3, [pc, #428]	; (800a914 <_dtoa_r+0x644>)
 800a766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a76a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	f280 80e3 	bge.w	800a93c <_dtoa_r+0x66c>
 800a776:	9b01      	ldr	r3, [sp, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f300 80df 	bgt.w	800a93c <_dtoa_r+0x66c>
 800a77e:	f040 826d 	bne.w	800ac5c <_dtoa_r+0x98c>
 800a782:	4b69      	ldr	r3, [pc, #420]	; (800a928 <_dtoa_r+0x658>)
 800a784:	2200      	movs	r2, #0
 800a786:	4640      	mov	r0, r8
 800a788:	4649      	mov	r1, r9
 800a78a:	f7f5 ff35 	bl	80005f8 <__aeabi_dmul>
 800a78e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a792:	f7f6 f9b7 	bl	8000b04 <__aeabi_dcmpge>
 800a796:	9e01      	ldr	r6, [sp, #4]
 800a798:	4637      	mov	r7, r6
 800a79a:	2800      	cmp	r0, #0
 800a79c:	f040 8243 	bne.w	800ac26 <_dtoa_r+0x956>
 800a7a0:	9d00      	ldr	r5, [sp, #0]
 800a7a2:	2331      	movs	r3, #49	; 0x31
 800a7a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a7a8:	f10a 0a01 	add.w	sl, sl, #1
 800a7ac:	e23f      	b.n	800ac2e <_dtoa_r+0x95e>
 800a7ae:	07f2      	lsls	r2, r6, #31
 800a7b0:	d505      	bpl.n	800a7be <_dtoa_r+0x4ee>
 800a7b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b6:	f7f5 ff1f 	bl	80005f8 <__aeabi_dmul>
 800a7ba:	3501      	adds	r5, #1
 800a7bc:	2301      	movs	r3, #1
 800a7be:	1076      	asrs	r6, r6, #1
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	e76c      	b.n	800a69e <_dtoa_r+0x3ce>
 800a7c4:	2502      	movs	r5, #2
 800a7c6:	e76f      	b.n	800a6a8 <_dtoa_r+0x3d8>
 800a7c8:	9b01      	ldr	r3, [sp, #4]
 800a7ca:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a7d0:	e78d      	b.n	800a6ee <_dtoa_r+0x41e>
 800a7d2:	9900      	ldr	r1, [sp, #0]
 800a7d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7d8:	4b4e      	ldr	r3, [pc, #312]	; (800a914 <_dtoa_r+0x644>)
 800a7da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7de:	4401      	add	r1, r0
 800a7e0:	9102      	str	r1, [sp, #8]
 800a7e2:	9908      	ldr	r1, [sp, #32]
 800a7e4:	eeb0 8a47 	vmov.f32	s16, s14
 800a7e8:	eef0 8a67 	vmov.f32	s17, s15
 800a7ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7f4:	2900      	cmp	r1, #0
 800a7f6:	d045      	beq.n	800a884 <_dtoa_r+0x5b4>
 800a7f8:	494c      	ldr	r1, [pc, #304]	; (800a92c <_dtoa_r+0x65c>)
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	f7f6 f826 	bl	800084c <__aeabi_ddiv>
 800a800:	ec53 2b18 	vmov	r2, r3, d8
 800a804:	f7f5 fd40 	bl	8000288 <__aeabi_dsub>
 800a808:	9d00      	ldr	r5, [sp, #0]
 800a80a:	ec41 0b18 	vmov	d8, r0, r1
 800a80e:	4639      	mov	r1, r7
 800a810:	4630      	mov	r0, r6
 800a812:	f7f6 f9a1 	bl	8000b58 <__aeabi_d2iz>
 800a816:	900c      	str	r0, [sp, #48]	; 0x30
 800a818:	f7f5 fe84 	bl	8000524 <__aeabi_i2d>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4630      	mov	r0, r6
 800a822:	4639      	mov	r1, r7
 800a824:	f7f5 fd30 	bl	8000288 <__aeabi_dsub>
 800a828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a82a:	3330      	adds	r3, #48	; 0x30
 800a82c:	f805 3b01 	strb.w	r3, [r5], #1
 800a830:	ec53 2b18 	vmov	r2, r3, d8
 800a834:	4606      	mov	r6, r0
 800a836:	460f      	mov	r7, r1
 800a838:	f7f6 f950 	bl	8000adc <__aeabi_dcmplt>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d165      	bne.n	800a90c <_dtoa_r+0x63c>
 800a840:	4632      	mov	r2, r6
 800a842:	463b      	mov	r3, r7
 800a844:	4935      	ldr	r1, [pc, #212]	; (800a91c <_dtoa_r+0x64c>)
 800a846:	2000      	movs	r0, #0
 800a848:	f7f5 fd1e 	bl	8000288 <__aeabi_dsub>
 800a84c:	ec53 2b18 	vmov	r2, r3, d8
 800a850:	f7f6 f944 	bl	8000adc <__aeabi_dcmplt>
 800a854:	2800      	cmp	r0, #0
 800a856:	f040 80b9 	bne.w	800a9cc <_dtoa_r+0x6fc>
 800a85a:	9b02      	ldr	r3, [sp, #8]
 800a85c:	429d      	cmp	r5, r3
 800a85e:	f43f af75 	beq.w	800a74c <_dtoa_r+0x47c>
 800a862:	4b2f      	ldr	r3, [pc, #188]	; (800a920 <_dtoa_r+0x650>)
 800a864:	ec51 0b18 	vmov	r0, r1, d8
 800a868:	2200      	movs	r2, #0
 800a86a:	f7f5 fec5 	bl	80005f8 <__aeabi_dmul>
 800a86e:	4b2c      	ldr	r3, [pc, #176]	; (800a920 <_dtoa_r+0x650>)
 800a870:	ec41 0b18 	vmov	d8, r0, r1
 800a874:	2200      	movs	r2, #0
 800a876:	4630      	mov	r0, r6
 800a878:	4639      	mov	r1, r7
 800a87a:	f7f5 febd 	bl	80005f8 <__aeabi_dmul>
 800a87e:	4606      	mov	r6, r0
 800a880:	460f      	mov	r7, r1
 800a882:	e7c4      	b.n	800a80e <_dtoa_r+0x53e>
 800a884:	ec51 0b17 	vmov	r0, r1, d7
 800a888:	f7f5 feb6 	bl	80005f8 <__aeabi_dmul>
 800a88c:	9b02      	ldr	r3, [sp, #8]
 800a88e:	9d00      	ldr	r5, [sp, #0]
 800a890:	930c      	str	r3, [sp, #48]	; 0x30
 800a892:	ec41 0b18 	vmov	d8, r0, r1
 800a896:	4639      	mov	r1, r7
 800a898:	4630      	mov	r0, r6
 800a89a:	f7f6 f95d 	bl	8000b58 <__aeabi_d2iz>
 800a89e:	9011      	str	r0, [sp, #68]	; 0x44
 800a8a0:	f7f5 fe40 	bl	8000524 <__aeabi_i2d>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f5 fcec 	bl	8000288 <__aeabi_dsub>
 800a8b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8b2:	3330      	adds	r3, #48	; 0x30
 800a8b4:	f805 3b01 	strb.w	r3, [r5], #1
 800a8b8:	9b02      	ldr	r3, [sp, #8]
 800a8ba:	429d      	cmp	r5, r3
 800a8bc:	4606      	mov	r6, r0
 800a8be:	460f      	mov	r7, r1
 800a8c0:	f04f 0200 	mov.w	r2, #0
 800a8c4:	d134      	bne.n	800a930 <_dtoa_r+0x660>
 800a8c6:	4b19      	ldr	r3, [pc, #100]	; (800a92c <_dtoa_r+0x65c>)
 800a8c8:	ec51 0b18 	vmov	r0, r1, d8
 800a8cc:	f7f5 fcde 	bl	800028c <__adddf3>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	f7f6 f91e 	bl	8000b18 <__aeabi_dcmpgt>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d175      	bne.n	800a9cc <_dtoa_r+0x6fc>
 800a8e0:	ec53 2b18 	vmov	r2, r3, d8
 800a8e4:	4911      	ldr	r1, [pc, #68]	; (800a92c <_dtoa_r+0x65c>)
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	f7f5 fcce 	bl	8000288 <__aeabi_dsub>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f6 f8f2 	bl	8000adc <__aeabi_dcmplt>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	f43f af27 	beq.w	800a74c <_dtoa_r+0x47c>
 800a8fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a900:	1e6b      	subs	r3, r5, #1
 800a902:	930c      	str	r3, [sp, #48]	; 0x30
 800a904:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a908:	2b30      	cmp	r3, #48	; 0x30
 800a90a:	d0f8      	beq.n	800a8fe <_dtoa_r+0x62e>
 800a90c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a910:	e04a      	b.n	800a9a8 <_dtoa_r+0x6d8>
 800a912:	bf00      	nop
 800a914:	0800cbe8 	.word	0x0800cbe8
 800a918:	0800cbc0 	.word	0x0800cbc0
 800a91c:	3ff00000 	.word	0x3ff00000
 800a920:	40240000 	.word	0x40240000
 800a924:	401c0000 	.word	0x401c0000
 800a928:	40140000 	.word	0x40140000
 800a92c:	3fe00000 	.word	0x3fe00000
 800a930:	4baf      	ldr	r3, [pc, #700]	; (800abf0 <_dtoa_r+0x920>)
 800a932:	f7f5 fe61 	bl	80005f8 <__aeabi_dmul>
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	e7ac      	b.n	800a896 <_dtoa_r+0x5c6>
 800a93c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a940:	9d00      	ldr	r5, [sp, #0]
 800a942:	4642      	mov	r2, r8
 800a944:	464b      	mov	r3, r9
 800a946:	4630      	mov	r0, r6
 800a948:	4639      	mov	r1, r7
 800a94a:	f7f5 ff7f 	bl	800084c <__aeabi_ddiv>
 800a94e:	f7f6 f903 	bl	8000b58 <__aeabi_d2iz>
 800a952:	9002      	str	r0, [sp, #8]
 800a954:	f7f5 fde6 	bl	8000524 <__aeabi_i2d>
 800a958:	4642      	mov	r2, r8
 800a95a:	464b      	mov	r3, r9
 800a95c:	f7f5 fe4c 	bl	80005f8 <__aeabi_dmul>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4630      	mov	r0, r6
 800a966:	4639      	mov	r1, r7
 800a968:	f7f5 fc8e 	bl	8000288 <__aeabi_dsub>
 800a96c:	9e02      	ldr	r6, [sp, #8]
 800a96e:	9f01      	ldr	r7, [sp, #4]
 800a970:	3630      	adds	r6, #48	; 0x30
 800a972:	f805 6b01 	strb.w	r6, [r5], #1
 800a976:	9e00      	ldr	r6, [sp, #0]
 800a978:	1bae      	subs	r6, r5, r6
 800a97a:	42b7      	cmp	r7, r6
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	d137      	bne.n	800a9f2 <_dtoa_r+0x722>
 800a982:	f7f5 fc83 	bl	800028c <__adddf3>
 800a986:	4642      	mov	r2, r8
 800a988:	464b      	mov	r3, r9
 800a98a:	4606      	mov	r6, r0
 800a98c:	460f      	mov	r7, r1
 800a98e:	f7f6 f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 800a992:	b9c8      	cbnz	r0, 800a9c8 <_dtoa_r+0x6f8>
 800a994:	4642      	mov	r2, r8
 800a996:	464b      	mov	r3, r9
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f6 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9a0:	b110      	cbz	r0, 800a9a8 <_dtoa_r+0x6d8>
 800a9a2:	9b02      	ldr	r3, [sp, #8]
 800a9a4:	07d9      	lsls	r1, r3, #31
 800a9a6:	d40f      	bmi.n	800a9c8 <_dtoa_r+0x6f8>
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	4659      	mov	r1, fp
 800a9ac:	f000 fae8 	bl	800af80 <_Bfree>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	702b      	strb	r3, [r5, #0]
 800a9b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9b6:	f10a 0001 	add.w	r0, sl, #1
 800a9ba:	6018      	str	r0, [r3, #0]
 800a9bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f43f acd8 	beq.w	800a374 <_dtoa_r+0xa4>
 800a9c4:	601d      	str	r5, [r3, #0]
 800a9c6:	e4d5      	b.n	800a374 <_dtoa_r+0xa4>
 800a9c8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a9cc:	462b      	mov	r3, r5
 800a9ce:	461d      	mov	r5, r3
 800a9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9d4:	2a39      	cmp	r2, #57	; 0x39
 800a9d6:	d108      	bne.n	800a9ea <_dtoa_r+0x71a>
 800a9d8:	9a00      	ldr	r2, [sp, #0]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d1f7      	bne.n	800a9ce <_dtoa_r+0x6fe>
 800a9de:	9a07      	ldr	r2, [sp, #28]
 800a9e0:	9900      	ldr	r1, [sp, #0]
 800a9e2:	3201      	adds	r2, #1
 800a9e4:	9207      	str	r2, [sp, #28]
 800a9e6:	2230      	movs	r2, #48	; 0x30
 800a9e8:	700a      	strb	r2, [r1, #0]
 800a9ea:	781a      	ldrb	r2, [r3, #0]
 800a9ec:	3201      	adds	r2, #1
 800a9ee:	701a      	strb	r2, [r3, #0]
 800a9f0:	e78c      	b.n	800a90c <_dtoa_r+0x63c>
 800a9f2:	4b7f      	ldr	r3, [pc, #508]	; (800abf0 <_dtoa_r+0x920>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	f7f6 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d09b      	beq.n	800a942 <_dtoa_r+0x672>
 800aa0a:	e7cd      	b.n	800a9a8 <_dtoa_r+0x6d8>
 800aa0c:	9a08      	ldr	r2, [sp, #32]
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	f000 80c4 	beq.w	800ab9c <_dtoa_r+0x8cc>
 800aa14:	9a05      	ldr	r2, [sp, #20]
 800aa16:	2a01      	cmp	r2, #1
 800aa18:	f300 80a8 	bgt.w	800ab6c <_dtoa_r+0x89c>
 800aa1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	f000 80a0 	beq.w	800ab64 <_dtoa_r+0x894>
 800aa24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa28:	9e06      	ldr	r6, [sp, #24]
 800aa2a:	4645      	mov	r5, r8
 800aa2c:	9a04      	ldr	r2, [sp, #16]
 800aa2e:	2101      	movs	r1, #1
 800aa30:	441a      	add	r2, r3
 800aa32:	4620      	mov	r0, r4
 800aa34:	4498      	add	r8, r3
 800aa36:	9204      	str	r2, [sp, #16]
 800aa38:	f000 fb5e 	bl	800b0f8 <__i2b>
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	2d00      	cmp	r5, #0
 800aa40:	dd0b      	ble.n	800aa5a <_dtoa_r+0x78a>
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd08      	ble.n	800aa5a <_dtoa_r+0x78a>
 800aa48:	42ab      	cmp	r3, r5
 800aa4a:	9a04      	ldr	r2, [sp, #16]
 800aa4c:	bfa8      	it	ge
 800aa4e:	462b      	movge	r3, r5
 800aa50:	eba8 0803 	sub.w	r8, r8, r3
 800aa54:	1aed      	subs	r5, r5, r3
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	9b06      	ldr	r3, [sp, #24]
 800aa5c:	b1fb      	cbz	r3, 800aa9e <_dtoa_r+0x7ce>
 800aa5e:	9b08      	ldr	r3, [sp, #32]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 809f 	beq.w	800aba4 <_dtoa_r+0x8d4>
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	dd11      	ble.n	800aa8e <_dtoa_r+0x7be>
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 fbfe 	bl	800b270 <__pow5mult>
 800aa74:	465a      	mov	r2, fp
 800aa76:	4601      	mov	r1, r0
 800aa78:	4607      	mov	r7, r0
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fb52 	bl	800b124 <__multiply>
 800aa80:	4659      	mov	r1, fp
 800aa82:	9007      	str	r0, [sp, #28]
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fa7b 	bl	800af80 <_Bfree>
 800aa8a:	9b07      	ldr	r3, [sp, #28]
 800aa8c:	469b      	mov	fp, r3
 800aa8e:	9b06      	ldr	r3, [sp, #24]
 800aa90:	1b9a      	subs	r2, r3, r6
 800aa92:	d004      	beq.n	800aa9e <_dtoa_r+0x7ce>
 800aa94:	4659      	mov	r1, fp
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fbea 	bl	800b270 <__pow5mult>
 800aa9c:	4683      	mov	fp, r0
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f000 fb29 	bl	800b0f8 <__i2b>
 800aaa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	4606      	mov	r6, r0
 800aaac:	dd7c      	ble.n	800aba8 <_dtoa_r+0x8d8>
 800aaae:	461a      	mov	r2, r3
 800aab0:	4601      	mov	r1, r0
 800aab2:	4620      	mov	r0, r4
 800aab4:	f000 fbdc 	bl	800b270 <__pow5mult>
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	4606      	mov	r6, r0
 800aabe:	dd76      	ble.n	800abae <_dtoa_r+0x8de>
 800aac0:	2300      	movs	r3, #0
 800aac2:	9306      	str	r3, [sp, #24]
 800aac4:	6933      	ldr	r3, [r6, #16]
 800aac6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aaca:	6918      	ldr	r0, [r3, #16]
 800aacc:	f000 fac4 	bl	800b058 <__hi0bits>
 800aad0:	f1c0 0020 	rsb	r0, r0, #32
 800aad4:	9b04      	ldr	r3, [sp, #16]
 800aad6:	4418      	add	r0, r3
 800aad8:	f010 001f 	ands.w	r0, r0, #31
 800aadc:	f000 8086 	beq.w	800abec <_dtoa_r+0x91c>
 800aae0:	f1c0 0320 	rsb	r3, r0, #32
 800aae4:	2b04      	cmp	r3, #4
 800aae6:	dd7f      	ble.n	800abe8 <_dtoa_r+0x918>
 800aae8:	f1c0 001c 	rsb	r0, r0, #28
 800aaec:	9b04      	ldr	r3, [sp, #16]
 800aaee:	4403      	add	r3, r0
 800aaf0:	4480      	add	r8, r0
 800aaf2:	4405      	add	r5, r0
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	f1b8 0f00 	cmp.w	r8, #0
 800aafa:	dd05      	ble.n	800ab08 <_dtoa_r+0x838>
 800aafc:	4659      	mov	r1, fp
 800aafe:	4642      	mov	r2, r8
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 fc0f 	bl	800b324 <__lshift>
 800ab06:	4683      	mov	fp, r0
 800ab08:	9b04      	ldr	r3, [sp, #16]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	dd05      	ble.n	800ab1a <_dtoa_r+0x84a>
 800ab0e:	4631      	mov	r1, r6
 800ab10:	461a      	mov	r2, r3
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 fc06 	bl	800b324 <__lshift>
 800ab18:	4606      	mov	r6, r0
 800ab1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d069      	beq.n	800abf4 <_dtoa_r+0x924>
 800ab20:	4631      	mov	r1, r6
 800ab22:	4658      	mov	r0, fp
 800ab24:	f000 fc6a 	bl	800b3fc <__mcmp>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	da63      	bge.n	800abf4 <_dtoa_r+0x924>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4659      	mov	r1, fp
 800ab30:	220a      	movs	r2, #10
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fa46 	bl	800afc4 <__multadd>
 800ab38:	9b08      	ldr	r3, [sp, #32]
 800ab3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab3e:	4683      	mov	fp, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 818f 	beq.w	800ae64 <_dtoa_r+0xb94>
 800ab46:	4639      	mov	r1, r7
 800ab48:	2300      	movs	r3, #0
 800ab4a:	220a      	movs	r2, #10
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 fa39 	bl	800afc4 <__multadd>
 800ab52:	f1b9 0f00 	cmp.w	r9, #0
 800ab56:	4607      	mov	r7, r0
 800ab58:	f300 808e 	bgt.w	800ac78 <_dtoa_r+0x9a8>
 800ab5c:	9b05      	ldr	r3, [sp, #20]
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	dc50      	bgt.n	800ac04 <_dtoa_r+0x934>
 800ab62:	e089      	b.n	800ac78 <_dtoa_r+0x9a8>
 800ab64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab6a:	e75d      	b.n	800aa28 <_dtoa_r+0x758>
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	1e5e      	subs	r6, r3, #1
 800ab70:	9b06      	ldr	r3, [sp, #24]
 800ab72:	42b3      	cmp	r3, r6
 800ab74:	bfbf      	itttt	lt
 800ab76:	9b06      	ldrlt	r3, [sp, #24]
 800ab78:	9606      	strlt	r6, [sp, #24]
 800ab7a:	1af2      	sublt	r2, r6, r3
 800ab7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab7e:	bfb6      	itet	lt
 800ab80:	189b      	addlt	r3, r3, r2
 800ab82:	1b9e      	subge	r6, r3, r6
 800ab84:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	bfb8      	it	lt
 800ab8a:	2600      	movlt	r6, #0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bfb5      	itete	lt
 800ab90:	eba8 0503 	sublt.w	r5, r8, r3
 800ab94:	9b01      	ldrge	r3, [sp, #4]
 800ab96:	2300      	movlt	r3, #0
 800ab98:	4645      	movge	r5, r8
 800ab9a:	e747      	b.n	800aa2c <_dtoa_r+0x75c>
 800ab9c:	9e06      	ldr	r6, [sp, #24]
 800ab9e:	9f08      	ldr	r7, [sp, #32]
 800aba0:	4645      	mov	r5, r8
 800aba2:	e74c      	b.n	800aa3e <_dtoa_r+0x76e>
 800aba4:	9a06      	ldr	r2, [sp, #24]
 800aba6:	e775      	b.n	800aa94 <_dtoa_r+0x7c4>
 800aba8:	9b05      	ldr	r3, [sp, #20]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	dc18      	bgt.n	800abe0 <_dtoa_r+0x910>
 800abae:	9b02      	ldr	r3, [sp, #8]
 800abb0:	b9b3      	cbnz	r3, 800abe0 <_dtoa_r+0x910>
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abb8:	b9a3      	cbnz	r3, 800abe4 <_dtoa_r+0x914>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abc0:	0d1b      	lsrs	r3, r3, #20
 800abc2:	051b      	lsls	r3, r3, #20
 800abc4:	b12b      	cbz	r3, 800abd2 <_dtoa_r+0x902>
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	3301      	adds	r3, #1
 800abca:	9304      	str	r3, [sp, #16]
 800abcc:	f108 0801 	add.w	r8, r8, #1
 800abd0:	2301      	movs	r3, #1
 800abd2:	9306      	str	r3, [sp, #24]
 800abd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f47f af74 	bne.w	800aac4 <_dtoa_r+0x7f4>
 800abdc:	2001      	movs	r0, #1
 800abde:	e779      	b.n	800aad4 <_dtoa_r+0x804>
 800abe0:	2300      	movs	r3, #0
 800abe2:	e7f6      	b.n	800abd2 <_dtoa_r+0x902>
 800abe4:	9b02      	ldr	r3, [sp, #8]
 800abe6:	e7f4      	b.n	800abd2 <_dtoa_r+0x902>
 800abe8:	d085      	beq.n	800aaf6 <_dtoa_r+0x826>
 800abea:	4618      	mov	r0, r3
 800abec:	301c      	adds	r0, #28
 800abee:	e77d      	b.n	800aaec <_dtoa_r+0x81c>
 800abf0:	40240000 	.word	0x40240000
 800abf4:	9b01      	ldr	r3, [sp, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dc38      	bgt.n	800ac6c <_dtoa_r+0x99c>
 800abfa:	9b05      	ldr	r3, [sp, #20]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	dd35      	ble.n	800ac6c <_dtoa_r+0x99c>
 800ac00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac04:	f1b9 0f00 	cmp.w	r9, #0
 800ac08:	d10d      	bne.n	800ac26 <_dtoa_r+0x956>
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	464b      	mov	r3, r9
 800ac0e:	2205      	movs	r2, #5
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 f9d7 	bl	800afc4 <__multadd>
 800ac16:	4601      	mov	r1, r0
 800ac18:	4606      	mov	r6, r0
 800ac1a:	4658      	mov	r0, fp
 800ac1c:	f000 fbee 	bl	800b3fc <__mcmp>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	f73f adbd 	bgt.w	800a7a0 <_dtoa_r+0x4d0>
 800ac26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac28:	9d00      	ldr	r5, [sp, #0]
 800ac2a:	ea6f 0a03 	mvn.w	sl, r3
 800ac2e:	f04f 0800 	mov.w	r8, #0
 800ac32:	4631      	mov	r1, r6
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 f9a3 	bl	800af80 <_Bfree>
 800ac3a:	2f00      	cmp	r7, #0
 800ac3c:	f43f aeb4 	beq.w	800a9a8 <_dtoa_r+0x6d8>
 800ac40:	f1b8 0f00 	cmp.w	r8, #0
 800ac44:	d005      	beq.n	800ac52 <_dtoa_r+0x982>
 800ac46:	45b8      	cmp	r8, r7
 800ac48:	d003      	beq.n	800ac52 <_dtoa_r+0x982>
 800ac4a:	4641      	mov	r1, r8
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 f997 	bl	800af80 <_Bfree>
 800ac52:	4639      	mov	r1, r7
 800ac54:	4620      	mov	r0, r4
 800ac56:	f000 f993 	bl	800af80 <_Bfree>
 800ac5a:	e6a5      	b.n	800a9a8 <_dtoa_r+0x6d8>
 800ac5c:	2600      	movs	r6, #0
 800ac5e:	4637      	mov	r7, r6
 800ac60:	e7e1      	b.n	800ac26 <_dtoa_r+0x956>
 800ac62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac68:	4637      	mov	r7, r6
 800ac6a:	e599      	b.n	800a7a0 <_dtoa_r+0x4d0>
 800ac6c:	9b08      	ldr	r3, [sp, #32]
 800ac6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 80fd 	beq.w	800ae72 <_dtoa_r+0xba2>
 800ac78:	2d00      	cmp	r5, #0
 800ac7a:	dd05      	ble.n	800ac88 <_dtoa_r+0x9b8>
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fb4f 	bl	800b324 <__lshift>
 800ac86:	4607      	mov	r7, r0
 800ac88:	9b06      	ldr	r3, [sp, #24]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d05c      	beq.n	800ad48 <_dtoa_r+0xa78>
 800ac8e:	6879      	ldr	r1, [r7, #4]
 800ac90:	4620      	mov	r0, r4
 800ac92:	f000 f935 	bl	800af00 <_Balloc>
 800ac96:	4605      	mov	r5, r0
 800ac98:	b928      	cbnz	r0, 800aca6 <_dtoa_r+0x9d6>
 800ac9a:	4b80      	ldr	r3, [pc, #512]	; (800ae9c <_dtoa_r+0xbcc>)
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aca2:	f7ff bb2e 	b.w	800a302 <_dtoa_r+0x32>
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	3202      	adds	r2, #2
 800acaa:	0092      	lsls	r2, r2, #2
 800acac:	f107 010c 	add.w	r1, r7, #12
 800acb0:	300c      	adds	r0, #12
 800acb2:	f000 f917 	bl	800aee4 <memcpy>
 800acb6:	2201      	movs	r2, #1
 800acb8:	4629      	mov	r1, r5
 800acba:	4620      	mov	r0, r4
 800acbc:	f000 fb32 	bl	800b324 <__lshift>
 800acc0:	9b00      	ldr	r3, [sp, #0]
 800acc2:	3301      	adds	r3, #1
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	9b00      	ldr	r3, [sp, #0]
 800acc8:	444b      	add	r3, r9
 800acca:	9307      	str	r3, [sp, #28]
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	46b8      	mov	r8, r7
 800acd4:	9306      	str	r3, [sp, #24]
 800acd6:	4607      	mov	r7, r0
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	4631      	mov	r1, r6
 800acdc:	3b01      	subs	r3, #1
 800acde:	4658      	mov	r0, fp
 800ace0:	9302      	str	r3, [sp, #8]
 800ace2:	f7ff fa69 	bl	800a1b8 <quorem>
 800ace6:	4603      	mov	r3, r0
 800ace8:	3330      	adds	r3, #48	; 0x30
 800acea:	9004      	str	r0, [sp, #16]
 800acec:	4641      	mov	r1, r8
 800acee:	4658      	mov	r0, fp
 800acf0:	9308      	str	r3, [sp, #32]
 800acf2:	f000 fb83 	bl	800b3fc <__mcmp>
 800acf6:	463a      	mov	r2, r7
 800acf8:	4681      	mov	r9, r0
 800acfa:	4631      	mov	r1, r6
 800acfc:	4620      	mov	r0, r4
 800acfe:	f000 fb99 	bl	800b434 <__mdiff>
 800ad02:	68c2      	ldr	r2, [r0, #12]
 800ad04:	9b08      	ldr	r3, [sp, #32]
 800ad06:	4605      	mov	r5, r0
 800ad08:	bb02      	cbnz	r2, 800ad4c <_dtoa_r+0xa7c>
 800ad0a:	4601      	mov	r1, r0
 800ad0c:	4658      	mov	r0, fp
 800ad0e:	f000 fb75 	bl	800b3fc <__mcmp>
 800ad12:	9b08      	ldr	r3, [sp, #32]
 800ad14:	4602      	mov	r2, r0
 800ad16:	4629      	mov	r1, r5
 800ad18:	4620      	mov	r0, r4
 800ad1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ad1e:	f000 f92f 	bl	800af80 <_Bfree>
 800ad22:	9b05      	ldr	r3, [sp, #20]
 800ad24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad26:	9d01      	ldr	r5, [sp, #4]
 800ad28:	ea43 0102 	orr.w	r1, r3, r2
 800ad2c:	9b06      	ldr	r3, [sp, #24]
 800ad2e:	430b      	orrs	r3, r1
 800ad30:	9b08      	ldr	r3, [sp, #32]
 800ad32:	d10d      	bne.n	800ad50 <_dtoa_r+0xa80>
 800ad34:	2b39      	cmp	r3, #57	; 0x39
 800ad36:	d029      	beq.n	800ad8c <_dtoa_r+0xabc>
 800ad38:	f1b9 0f00 	cmp.w	r9, #0
 800ad3c:	dd01      	ble.n	800ad42 <_dtoa_r+0xa72>
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	3331      	adds	r3, #49	; 0x31
 800ad42:	9a02      	ldr	r2, [sp, #8]
 800ad44:	7013      	strb	r3, [r2, #0]
 800ad46:	e774      	b.n	800ac32 <_dtoa_r+0x962>
 800ad48:	4638      	mov	r0, r7
 800ad4a:	e7b9      	b.n	800acc0 <_dtoa_r+0x9f0>
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	e7e2      	b.n	800ad16 <_dtoa_r+0xa46>
 800ad50:	f1b9 0f00 	cmp.w	r9, #0
 800ad54:	db06      	blt.n	800ad64 <_dtoa_r+0xa94>
 800ad56:	9905      	ldr	r1, [sp, #20]
 800ad58:	ea41 0909 	orr.w	r9, r1, r9
 800ad5c:	9906      	ldr	r1, [sp, #24]
 800ad5e:	ea59 0101 	orrs.w	r1, r9, r1
 800ad62:	d120      	bne.n	800ada6 <_dtoa_r+0xad6>
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	ddec      	ble.n	800ad42 <_dtoa_r+0xa72>
 800ad68:	4659      	mov	r1, fp
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	f000 fad8 	bl	800b324 <__lshift>
 800ad74:	4631      	mov	r1, r6
 800ad76:	4683      	mov	fp, r0
 800ad78:	f000 fb40 	bl	800b3fc <__mcmp>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	9b01      	ldr	r3, [sp, #4]
 800ad80:	dc02      	bgt.n	800ad88 <_dtoa_r+0xab8>
 800ad82:	d1de      	bne.n	800ad42 <_dtoa_r+0xa72>
 800ad84:	07da      	lsls	r2, r3, #31
 800ad86:	d5dc      	bpl.n	800ad42 <_dtoa_r+0xa72>
 800ad88:	2b39      	cmp	r3, #57	; 0x39
 800ad8a:	d1d8      	bne.n	800ad3e <_dtoa_r+0xa6e>
 800ad8c:	9a02      	ldr	r2, [sp, #8]
 800ad8e:	2339      	movs	r3, #57	; 0x39
 800ad90:	7013      	strb	r3, [r2, #0]
 800ad92:	462b      	mov	r3, r5
 800ad94:	461d      	mov	r5, r3
 800ad96:	3b01      	subs	r3, #1
 800ad98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad9c:	2a39      	cmp	r2, #57	; 0x39
 800ad9e:	d050      	beq.n	800ae42 <_dtoa_r+0xb72>
 800ada0:	3201      	adds	r2, #1
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	e745      	b.n	800ac32 <_dtoa_r+0x962>
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	dd03      	ble.n	800adb2 <_dtoa_r+0xae2>
 800adaa:	2b39      	cmp	r3, #57	; 0x39
 800adac:	d0ee      	beq.n	800ad8c <_dtoa_r+0xabc>
 800adae:	3301      	adds	r3, #1
 800adb0:	e7c7      	b.n	800ad42 <_dtoa_r+0xa72>
 800adb2:	9a01      	ldr	r2, [sp, #4]
 800adb4:	9907      	ldr	r1, [sp, #28]
 800adb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800adba:	428a      	cmp	r2, r1
 800adbc:	d02a      	beq.n	800ae14 <_dtoa_r+0xb44>
 800adbe:	4659      	mov	r1, fp
 800adc0:	2300      	movs	r3, #0
 800adc2:	220a      	movs	r2, #10
 800adc4:	4620      	mov	r0, r4
 800adc6:	f000 f8fd 	bl	800afc4 <__multadd>
 800adca:	45b8      	cmp	r8, r7
 800adcc:	4683      	mov	fp, r0
 800adce:	f04f 0300 	mov.w	r3, #0
 800add2:	f04f 020a 	mov.w	r2, #10
 800add6:	4641      	mov	r1, r8
 800add8:	4620      	mov	r0, r4
 800adda:	d107      	bne.n	800adec <_dtoa_r+0xb1c>
 800addc:	f000 f8f2 	bl	800afc4 <__multadd>
 800ade0:	4680      	mov	r8, r0
 800ade2:	4607      	mov	r7, r0
 800ade4:	9b01      	ldr	r3, [sp, #4]
 800ade6:	3301      	adds	r3, #1
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	e775      	b.n	800acd8 <_dtoa_r+0xa08>
 800adec:	f000 f8ea 	bl	800afc4 <__multadd>
 800adf0:	4639      	mov	r1, r7
 800adf2:	4680      	mov	r8, r0
 800adf4:	2300      	movs	r3, #0
 800adf6:	220a      	movs	r2, #10
 800adf8:	4620      	mov	r0, r4
 800adfa:	f000 f8e3 	bl	800afc4 <__multadd>
 800adfe:	4607      	mov	r7, r0
 800ae00:	e7f0      	b.n	800ade4 <_dtoa_r+0xb14>
 800ae02:	f1b9 0f00 	cmp.w	r9, #0
 800ae06:	9a00      	ldr	r2, [sp, #0]
 800ae08:	bfcc      	ite	gt
 800ae0a:	464d      	movgt	r5, r9
 800ae0c:	2501      	movle	r5, #1
 800ae0e:	4415      	add	r5, r2
 800ae10:	f04f 0800 	mov.w	r8, #0
 800ae14:	4659      	mov	r1, fp
 800ae16:	2201      	movs	r2, #1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	9301      	str	r3, [sp, #4]
 800ae1c:	f000 fa82 	bl	800b324 <__lshift>
 800ae20:	4631      	mov	r1, r6
 800ae22:	4683      	mov	fp, r0
 800ae24:	f000 faea 	bl	800b3fc <__mcmp>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	dcb2      	bgt.n	800ad92 <_dtoa_r+0xac2>
 800ae2c:	d102      	bne.n	800ae34 <_dtoa_r+0xb64>
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	07db      	lsls	r3, r3, #31
 800ae32:	d4ae      	bmi.n	800ad92 <_dtoa_r+0xac2>
 800ae34:	462b      	mov	r3, r5
 800ae36:	461d      	mov	r5, r3
 800ae38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae3c:	2a30      	cmp	r2, #48	; 0x30
 800ae3e:	d0fa      	beq.n	800ae36 <_dtoa_r+0xb66>
 800ae40:	e6f7      	b.n	800ac32 <_dtoa_r+0x962>
 800ae42:	9a00      	ldr	r2, [sp, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d1a5      	bne.n	800ad94 <_dtoa_r+0xac4>
 800ae48:	f10a 0a01 	add.w	sl, sl, #1
 800ae4c:	2331      	movs	r3, #49	; 0x31
 800ae4e:	e779      	b.n	800ad44 <_dtoa_r+0xa74>
 800ae50:	4b13      	ldr	r3, [pc, #76]	; (800aea0 <_dtoa_r+0xbd0>)
 800ae52:	f7ff baaf 	b.w	800a3b4 <_dtoa_r+0xe4>
 800ae56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f47f aa86 	bne.w	800a36a <_dtoa_r+0x9a>
 800ae5e:	4b11      	ldr	r3, [pc, #68]	; (800aea4 <_dtoa_r+0xbd4>)
 800ae60:	f7ff baa8 	b.w	800a3b4 <_dtoa_r+0xe4>
 800ae64:	f1b9 0f00 	cmp.w	r9, #0
 800ae68:	dc03      	bgt.n	800ae72 <_dtoa_r+0xba2>
 800ae6a:	9b05      	ldr	r3, [sp, #20]
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	f73f aec9 	bgt.w	800ac04 <_dtoa_r+0x934>
 800ae72:	9d00      	ldr	r5, [sp, #0]
 800ae74:	4631      	mov	r1, r6
 800ae76:	4658      	mov	r0, fp
 800ae78:	f7ff f99e 	bl	800a1b8 <quorem>
 800ae7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae80:	f805 3b01 	strb.w	r3, [r5], #1
 800ae84:	9a00      	ldr	r2, [sp, #0]
 800ae86:	1aaa      	subs	r2, r5, r2
 800ae88:	4591      	cmp	r9, r2
 800ae8a:	ddba      	ble.n	800ae02 <_dtoa_r+0xb32>
 800ae8c:	4659      	mov	r1, fp
 800ae8e:	2300      	movs	r3, #0
 800ae90:	220a      	movs	r2, #10
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 f896 	bl	800afc4 <__multadd>
 800ae98:	4683      	mov	fp, r0
 800ae9a:	e7eb      	b.n	800ae74 <_dtoa_r+0xba4>
 800ae9c:	0800cb49 	.word	0x0800cb49
 800aea0:	0800c904 	.word	0x0800c904
 800aea4:	0800cadd 	.word	0x0800cadd

0800aea8 <fiprintf>:
 800aea8:	b40e      	push	{r1, r2, r3}
 800aeaa:	b503      	push	{r0, r1, lr}
 800aeac:	4601      	mov	r1, r0
 800aeae:	ab03      	add	r3, sp, #12
 800aeb0:	4805      	ldr	r0, [pc, #20]	; (800aec8 <fiprintf+0x20>)
 800aeb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb6:	6800      	ldr	r0, [r0, #0]
 800aeb8:	9301      	str	r3, [sp, #4]
 800aeba:	f000 fddf 	bl	800ba7c <_vfiprintf_r>
 800aebe:	b002      	add	sp, #8
 800aec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aec4:	b003      	add	sp, #12
 800aec6:	4770      	bx	lr
 800aec8:	20000110 	.word	0x20000110

0800aecc <_localeconv_r>:
 800aecc:	4800      	ldr	r0, [pc, #0]	; (800aed0 <_localeconv_r+0x4>)
 800aece:	4770      	bx	lr
 800aed0:	20000264 	.word	0x20000264

0800aed4 <malloc>:
 800aed4:	4b02      	ldr	r3, [pc, #8]	; (800aee0 <malloc+0xc>)
 800aed6:	4601      	mov	r1, r0
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	f000 bbef 	b.w	800b6bc <_malloc_r>
 800aede:	bf00      	nop
 800aee0:	20000110 	.word	0x20000110

0800aee4 <memcpy>:
 800aee4:	440a      	add	r2, r1
 800aee6:	4291      	cmp	r1, r2
 800aee8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeec:	d100      	bne.n	800aef0 <memcpy+0xc>
 800aeee:	4770      	bx	lr
 800aef0:	b510      	push	{r4, lr}
 800aef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aefa:	4291      	cmp	r1, r2
 800aefc:	d1f9      	bne.n	800aef2 <memcpy+0xe>
 800aefe:	bd10      	pop	{r4, pc}

0800af00 <_Balloc>:
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af04:	4604      	mov	r4, r0
 800af06:	460d      	mov	r5, r1
 800af08:	b976      	cbnz	r6, 800af28 <_Balloc+0x28>
 800af0a:	2010      	movs	r0, #16
 800af0c:	f7ff ffe2 	bl	800aed4 <malloc>
 800af10:	4602      	mov	r2, r0
 800af12:	6260      	str	r0, [r4, #36]	; 0x24
 800af14:	b920      	cbnz	r0, 800af20 <_Balloc+0x20>
 800af16:	4b18      	ldr	r3, [pc, #96]	; (800af78 <_Balloc+0x78>)
 800af18:	4818      	ldr	r0, [pc, #96]	; (800af7c <_Balloc+0x7c>)
 800af1a:	2166      	movs	r1, #102	; 0x66
 800af1c:	f7ff f92e 	bl	800a17c <__assert_func>
 800af20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af24:	6006      	str	r6, [r0, #0]
 800af26:	60c6      	str	r6, [r0, #12]
 800af28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af2a:	68f3      	ldr	r3, [r6, #12]
 800af2c:	b183      	cbz	r3, 800af50 <_Balloc+0x50>
 800af2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af36:	b9b8      	cbnz	r0, 800af68 <_Balloc+0x68>
 800af38:	2101      	movs	r1, #1
 800af3a:	fa01 f605 	lsl.w	r6, r1, r5
 800af3e:	1d72      	adds	r2, r6, #5
 800af40:	0092      	lsls	r2, r2, #2
 800af42:	4620      	mov	r0, r4
 800af44:	f000 fb5a 	bl	800b5fc <_calloc_r>
 800af48:	b160      	cbz	r0, 800af64 <_Balloc+0x64>
 800af4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af4e:	e00e      	b.n	800af6e <_Balloc+0x6e>
 800af50:	2221      	movs	r2, #33	; 0x21
 800af52:	2104      	movs	r1, #4
 800af54:	4620      	mov	r0, r4
 800af56:	f000 fb51 	bl	800b5fc <_calloc_r>
 800af5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af5c:	60f0      	str	r0, [r6, #12]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e4      	bne.n	800af2e <_Balloc+0x2e>
 800af64:	2000      	movs	r0, #0
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	6802      	ldr	r2, [r0, #0]
 800af6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af6e:	2300      	movs	r3, #0
 800af70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af74:	e7f7      	b.n	800af66 <_Balloc+0x66>
 800af76:	bf00      	nop
 800af78:	0800c928 	.word	0x0800c928
 800af7c:	0800cb5a 	.word	0x0800cb5a

0800af80 <_Bfree>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af84:	4605      	mov	r5, r0
 800af86:	460c      	mov	r4, r1
 800af88:	b976      	cbnz	r6, 800afa8 <_Bfree+0x28>
 800af8a:	2010      	movs	r0, #16
 800af8c:	f7ff ffa2 	bl	800aed4 <malloc>
 800af90:	4602      	mov	r2, r0
 800af92:	6268      	str	r0, [r5, #36]	; 0x24
 800af94:	b920      	cbnz	r0, 800afa0 <_Bfree+0x20>
 800af96:	4b09      	ldr	r3, [pc, #36]	; (800afbc <_Bfree+0x3c>)
 800af98:	4809      	ldr	r0, [pc, #36]	; (800afc0 <_Bfree+0x40>)
 800af9a:	218a      	movs	r1, #138	; 0x8a
 800af9c:	f7ff f8ee 	bl	800a17c <__assert_func>
 800afa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afa4:	6006      	str	r6, [r0, #0]
 800afa6:	60c6      	str	r6, [r0, #12]
 800afa8:	b13c      	cbz	r4, 800afba <_Bfree+0x3a>
 800afaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afac:	6862      	ldr	r2, [r4, #4]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afb4:	6021      	str	r1, [r4, #0]
 800afb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afba:	bd70      	pop	{r4, r5, r6, pc}
 800afbc:	0800c928 	.word	0x0800c928
 800afc0:	0800cb5a 	.word	0x0800cb5a

0800afc4 <__multadd>:
 800afc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc8:	690e      	ldr	r6, [r1, #16]
 800afca:	4607      	mov	r7, r0
 800afcc:	4698      	mov	r8, r3
 800afce:	460c      	mov	r4, r1
 800afd0:	f101 0014 	add.w	r0, r1, #20
 800afd4:	2300      	movs	r3, #0
 800afd6:	6805      	ldr	r5, [r0, #0]
 800afd8:	b2a9      	uxth	r1, r5
 800afda:	fb02 8101 	mla	r1, r2, r1, r8
 800afde:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800afe2:	0c2d      	lsrs	r5, r5, #16
 800afe4:	fb02 c505 	mla	r5, r2, r5, ip
 800afe8:	b289      	uxth	r1, r1
 800afea:	3301      	adds	r3, #1
 800afec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800aff0:	429e      	cmp	r6, r3
 800aff2:	f840 1b04 	str.w	r1, [r0], #4
 800aff6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800affa:	dcec      	bgt.n	800afd6 <__multadd+0x12>
 800affc:	f1b8 0f00 	cmp.w	r8, #0
 800b000:	d022      	beq.n	800b048 <__multadd+0x84>
 800b002:	68a3      	ldr	r3, [r4, #8]
 800b004:	42b3      	cmp	r3, r6
 800b006:	dc19      	bgt.n	800b03c <__multadd+0x78>
 800b008:	6861      	ldr	r1, [r4, #4]
 800b00a:	4638      	mov	r0, r7
 800b00c:	3101      	adds	r1, #1
 800b00e:	f7ff ff77 	bl	800af00 <_Balloc>
 800b012:	4605      	mov	r5, r0
 800b014:	b928      	cbnz	r0, 800b022 <__multadd+0x5e>
 800b016:	4602      	mov	r2, r0
 800b018:	4b0d      	ldr	r3, [pc, #52]	; (800b050 <__multadd+0x8c>)
 800b01a:	480e      	ldr	r0, [pc, #56]	; (800b054 <__multadd+0x90>)
 800b01c:	21b5      	movs	r1, #181	; 0xb5
 800b01e:	f7ff f8ad 	bl	800a17c <__assert_func>
 800b022:	6922      	ldr	r2, [r4, #16]
 800b024:	3202      	adds	r2, #2
 800b026:	f104 010c 	add.w	r1, r4, #12
 800b02a:	0092      	lsls	r2, r2, #2
 800b02c:	300c      	adds	r0, #12
 800b02e:	f7ff ff59 	bl	800aee4 <memcpy>
 800b032:	4621      	mov	r1, r4
 800b034:	4638      	mov	r0, r7
 800b036:	f7ff ffa3 	bl	800af80 <_Bfree>
 800b03a:	462c      	mov	r4, r5
 800b03c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b040:	3601      	adds	r6, #1
 800b042:	f8c3 8014 	str.w	r8, [r3, #20]
 800b046:	6126      	str	r6, [r4, #16]
 800b048:	4620      	mov	r0, r4
 800b04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04e:	bf00      	nop
 800b050:	0800cb49 	.word	0x0800cb49
 800b054:	0800cb5a 	.word	0x0800cb5a

0800b058 <__hi0bits>:
 800b058:	0c03      	lsrs	r3, r0, #16
 800b05a:	041b      	lsls	r3, r3, #16
 800b05c:	b9d3      	cbnz	r3, 800b094 <__hi0bits+0x3c>
 800b05e:	0400      	lsls	r0, r0, #16
 800b060:	2310      	movs	r3, #16
 800b062:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b066:	bf04      	itt	eq
 800b068:	0200      	lsleq	r0, r0, #8
 800b06a:	3308      	addeq	r3, #8
 800b06c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b070:	bf04      	itt	eq
 800b072:	0100      	lsleq	r0, r0, #4
 800b074:	3304      	addeq	r3, #4
 800b076:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b07a:	bf04      	itt	eq
 800b07c:	0080      	lsleq	r0, r0, #2
 800b07e:	3302      	addeq	r3, #2
 800b080:	2800      	cmp	r0, #0
 800b082:	db05      	blt.n	800b090 <__hi0bits+0x38>
 800b084:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b088:	f103 0301 	add.w	r3, r3, #1
 800b08c:	bf08      	it	eq
 800b08e:	2320      	moveq	r3, #32
 800b090:	4618      	mov	r0, r3
 800b092:	4770      	bx	lr
 800b094:	2300      	movs	r3, #0
 800b096:	e7e4      	b.n	800b062 <__hi0bits+0xa>

0800b098 <__lo0bits>:
 800b098:	6803      	ldr	r3, [r0, #0]
 800b09a:	f013 0207 	ands.w	r2, r3, #7
 800b09e:	4601      	mov	r1, r0
 800b0a0:	d00b      	beq.n	800b0ba <__lo0bits+0x22>
 800b0a2:	07da      	lsls	r2, r3, #31
 800b0a4:	d424      	bmi.n	800b0f0 <__lo0bits+0x58>
 800b0a6:	0798      	lsls	r0, r3, #30
 800b0a8:	bf49      	itett	mi
 800b0aa:	085b      	lsrmi	r3, r3, #1
 800b0ac:	089b      	lsrpl	r3, r3, #2
 800b0ae:	2001      	movmi	r0, #1
 800b0b0:	600b      	strmi	r3, [r1, #0]
 800b0b2:	bf5c      	itt	pl
 800b0b4:	600b      	strpl	r3, [r1, #0]
 800b0b6:	2002      	movpl	r0, #2
 800b0b8:	4770      	bx	lr
 800b0ba:	b298      	uxth	r0, r3
 800b0bc:	b9b0      	cbnz	r0, 800b0ec <__lo0bits+0x54>
 800b0be:	0c1b      	lsrs	r3, r3, #16
 800b0c0:	2010      	movs	r0, #16
 800b0c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b0c6:	bf04      	itt	eq
 800b0c8:	0a1b      	lsreq	r3, r3, #8
 800b0ca:	3008      	addeq	r0, #8
 800b0cc:	071a      	lsls	r2, r3, #28
 800b0ce:	bf04      	itt	eq
 800b0d0:	091b      	lsreq	r3, r3, #4
 800b0d2:	3004      	addeq	r0, #4
 800b0d4:	079a      	lsls	r2, r3, #30
 800b0d6:	bf04      	itt	eq
 800b0d8:	089b      	lsreq	r3, r3, #2
 800b0da:	3002      	addeq	r0, #2
 800b0dc:	07da      	lsls	r2, r3, #31
 800b0de:	d403      	bmi.n	800b0e8 <__lo0bits+0x50>
 800b0e0:	085b      	lsrs	r3, r3, #1
 800b0e2:	f100 0001 	add.w	r0, r0, #1
 800b0e6:	d005      	beq.n	800b0f4 <__lo0bits+0x5c>
 800b0e8:	600b      	str	r3, [r1, #0]
 800b0ea:	4770      	bx	lr
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	e7e8      	b.n	800b0c2 <__lo0bits+0x2a>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	4770      	bx	lr
 800b0f4:	2020      	movs	r0, #32
 800b0f6:	4770      	bx	lr

0800b0f8 <__i2b>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	f7ff feff 	bl	800af00 <_Balloc>
 800b102:	4602      	mov	r2, r0
 800b104:	b928      	cbnz	r0, 800b112 <__i2b+0x1a>
 800b106:	4b05      	ldr	r3, [pc, #20]	; (800b11c <__i2b+0x24>)
 800b108:	4805      	ldr	r0, [pc, #20]	; (800b120 <__i2b+0x28>)
 800b10a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b10e:	f7ff f835 	bl	800a17c <__assert_func>
 800b112:	2301      	movs	r3, #1
 800b114:	6144      	str	r4, [r0, #20]
 800b116:	6103      	str	r3, [r0, #16]
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	bf00      	nop
 800b11c:	0800cb49 	.word	0x0800cb49
 800b120:	0800cb5a 	.word	0x0800cb5a

0800b124 <__multiply>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	4614      	mov	r4, r2
 800b12a:	690a      	ldr	r2, [r1, #16]
 800b12c:	6923      	ldr	r3, [r4, #16]
 800b12e:	429a      	cmp	r2, r3
 800b130:	bfb8      	it	lt
 800b132:	460b      	movlt	r3, r1
 800b134:	460d      	mov	r5, r1
 800b136:	bfbc      	itt	lt
 800b138:	4625      	movlt	r5, r4
 800b13a:	461c      	movlt	r4, r3
 800b13c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b140:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b144:	68ab      	ldr	r3, [r5, #8]
 800b146:	6869      	ldr	r1, [r5, #4]
 800b148:	eb0a 0709 	add.w	r7, sl, r9
 800b14c:	42bb      	cmp	r3, r7
 800b14e:	b085      	sub	sp, #20
 800b150:	bfb8      	it	lt
 800b152:	3101      	addlt	r1, #1
 800b154:	f7ff fed4 	bl	800af00 <_Balloc>
 800b158:	b930      	cbnz	r0, 800b168 <__multiply+0x44>
 800b15a:	4602      	mov	r2, r0
 800b15c:	4b42      	ldr	r3, [pc, #264]	; (800b268 <__multiply+0x144>)
 800b15e:	4843      	ldr	r0, [pc, #268]	; (800b26c <__multiply+0x148>)
 800b160:	f240 115d 	movw	r1, #349	; 0x15d
 800b164:	f7ff f80a 	bl	800a17c <__assert_func>
 800b168:	f100 0614 	add.w	r6, r0, #20
 800b16c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b170:	4633      	mov	r3, r6
 800b172:	2200      	movs	r2, #0
 800b174:	4543      	cmp	r3, r8
 800b176:	d31e      	bcc.n	800b1b6 <__multiply+0x92>
 800b178:	f105 0c14 	add.w	ip, r5, #20
 800b17c:	f104 0314 	add.w	r3, r4, #20
 800b180:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b184:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b188:	9202      	str	r2, [sp, #8]
 800b18a:	ebac 0205 	sub.w	r2, ip, r5
 800b18e:	3a15      	subs	r2, #21
 800b190:	f022 0203 	bic.w	r2, r2, #3
 800b194:	3204      	adds	r2, #4
 800b196:	f105 0115 	add.w	r1, r5, #21
 800b19a:	458c      	cmp	ip, r1
 800b19c:	bf38      	it	cc
 800b19e:	2204      	movcc	r2, #4
 800b1a0:	9201      	str	r2, [sp, #4]
 800b1a2:	9a02      	ldr	r2, [sp, #8]
 800b1a4:	9303      	str	r3, [sp, #12]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d808      	bhi.n	800b1bc <__multiply+0x98>
 800b1aa:	2f00      	cmp	r7, #0
 800b1ac:	dc55      	bgt.n	800b25a <__multiply+0x136>
 800b1ae:	6107      	str	r7, [r0, #16]
 800b1b0:	b005      	add	sp, #20
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	f843 2b04 	str.w	r2, [r3], #4
 800b1ba:	e7db      	b.n	800b174 <__multiply+0x50>
 800b1bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1c0:	f1ba 0f00 	cmp.w	sl, #0
 800b1c4:	d020      	beq.n	800b208 <__multiply+0xe4>
 800b1c6:	f105 0e14 	add.w	lr, r5, #20
 800b1ca:	46b1      	mov	r9, r6
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b1d2:	f8d9 b000 	ldr.w	fp, [r9]
 800b1d6:	b2a1      	uxth	r1, r4
 800b1d8:	fa1f fb8b 	uxth.w	fp, fp
 800b1dc:	fb0a b101 	mla	r1, sl, r1, fp
 800b1e0:	4411      	add	r1, r2
 800b1e2:	f8d9 2000 	ldr.w	r2, [r9]
 800b1e6:	0c24      	lsrs	r4, r4, #16
 800b1e8:	0c12      	lsrs	r2, r2, #16
 800b1ea:	fb0a 2404 	mla	r4, sl, r4, r2
 800b1ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b1f2:	b289      	uxth	r1, r1
 800b1f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1f8:	45f4      	cmp	ip, lr
 800b1fa:	f849 1b04 	str.w	r1, [r9], #4
 800b1fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b202:	d8e4      	bhi.n	800b1ce <__multiply+0xaa>
 800b204:	9901      	ldr	r1, [sp, #4]
 800b206:	5072      	str	r2, [r6, r1]
 800b208:	9a03      	ldr	r2, [sp, #12]
 800b20a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b20e:	3304      	adds	r3, #4
 800b210:	f1b9 0f00 	cmp.w	r9, #0
 800b214:	d01f      	beq.n	800b256 <__multiply+0x132>
 800b216:	6834      	ldr	r4, [r6, #0]
 800b218:	f105 0114 	add.w	r1, r5, #20
 800b21c:	46b6      	mov	lr, r6
 800b21e:	f04f 0a00 	mov.w	sl, #0
 800b222:	880a      	ldrh	r2, [r1, #0]
 800b224:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b228:	fb09 b202 	mla	r2, r9, r2, fp
 800b22c:	4492      	add	sl, r2
 800b22e:	b2a4      	uxth	r4, r4
 800b230:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b234:	f84e 4b04 	str.w	r4, [lr], #4
 800b238:	f851 4b04 	ldr.w	r4, [r1], #4
 800b23c:	f8be 2000 	ldrh.w	r2, [lr]
 800b240:	0c24      	lsrs	r4, r4, #16
 800b242:	fb09 2404 	mla	r4, r9, r4, r2
 800b246:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b24a:	458c      	cmp	ip, r1
 800b24c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b250:	d8e7      	bhi.n	800b222 <__multiply+0xfe>
 800b252:	9a01      	ldr	r2, [sp, #4]
 800b254:	50b4      	str	r4, [r6, r2]
 800b256:	3604      	adds	r6, #4
 800b258:	e7a3      	b.n	800b1a2 <__multiply+0x7e>
 800b25a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1a5      	bne.n	800b1ae <__multiply+0x8a>
 800b262:	3f01      	subs	r7, #1
 800b264:	e7a1      	b.n	800b1aa <__multiply+0x86>
 800b266:	bf00      	nop
 800b268:	0800cb49 	.word	0x0800cb49
 800b26c:	0800cb5a 	.word	0x0800cb5a

0800b270 <__pow5mult>:
 800b270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b274:	4615      	mov	r5, r2
 800b276:	f012 0203 	ands.w	r2, r2, #3
 800b27a:	4606      	mov	r6, r0
 800b27c:	460f      	mov	r7, r1
 800b27e:	d007      	beq.n	800b290 <__pow5mult+0x20>
 800b280:	4c25      	ldr	r4, [pc, #148]	; (800b318 <__pow5mult+0xa8>)
 800b282:	3a01      	subs	r2, #1
 800b284:	2300      	movs	r3, #0
 800b286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b28a:	f7ff fe9b 	bl	800afc4 <__multadd>
 800b28e:	4607      	mov	r7, r0
 800b290:	10ad      	asrs	r5, r5, #2
 800b292:	d03d      	beq.n	800b310 <__pow5mult+0xa0>
 800b294:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b296:	b97c      	cbnz	r4, 800b2b8 <__pow5mult+0x48>
 800b298:	2010      	movs	r0, #16
 800b29a:	f7ff fe1b 	bl	800aed4 <malloc>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	6270      	str	r0, [r6, #36]	; 0x24
 800b2a2:	b928      	cbnz	r0, 800b2b0 <__pow5mult+0x40>
 800b2a4:	4b1d      	ldr	r3, [pc, #116]	; (800b31c <__pow5mult+0xac>)
 800b2a6:	481e      	ldr	r0, [pc, #120]	; (800b320 <__pow5mult+0xb0>)
 800b2a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2ac:	f7fe ff66 	bl	800a17c <__assert_func>
 800b2b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2b4:	6004      	str	r4, [r0, #0]
 800b2b6:	60c4      	str	r4, [r0, #12]
 800b2b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2c0:	b94c      	cbnz	r4, 800b2d6 <__pow5mult+0x66>
 800b2c2:	f240 2171 	movw	r1, #625	; 0x271
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f7ff ff16 	bl	800b0f8 <__i2b>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	6003      	str	r3, [r0, #0]
 800b2d6:	f04f 0900 	mov.w	r9, #0
 800b2da:	07eb      	lsls	r3, r5, #31
 800b2dc:	d50a      	bpl.n	800b2f4 <__pow5mult+0x84>
 800b2de:	4639      	mov	r1, r7
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ff1e 	bl	800b124 <__multiply>
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	4680      	mov	r8, r0
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f7ff fe47 	bl	800af80 <_Bfree>
 800b2f2:	4647      	mov	r7, r8
 800b2f4:	106d      	asrs	r5, r5, #1
 800b2f6:	d00b      	beq.n	800b310 <__pow5mult+0xa0>
 800b2f8:	6820      	ldr	r0, [r4, #0]
 800b2fa:	b938      	cbnz	r0, 800b30c <__pow5mult+0x9c>
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4621      	mov	r1, r4
 800b300:	4630      	mov	r0, r6
 800b302:	f7ff ff0f 	bl	800b124 <__multiply>
 800b306:	6020      	str	r0, [r4, #0]
 800b308:	f8c0 9000 	str.w	r9, [r0]
 800b30c:	4604      	mov	r4, r0
 800b30e:	e7e4      	b.n	800b2da <__pow5mult+0x6a>
 800b310:	4638      	mov	r0, r7
 800b312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b316:	bf00      	nop
 800b318:	0800ccb0 	.word	0x0800ccb0
 800b31c:	0800c928 	.word	0x0800c928
 800b320:	0800cb5a 	.word	0x0800cb5a

0800b324 <__lshift>:
 800b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	460c      	mov	r4, r1
 800b32a:	6849      	ldr	r1, [r1, #4]
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	4607      	mov	r7, r0
 800b336:	4691      	mov	r9, r2
 800b338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b33c:	f108 0601 	add.w	r6, r8, #1
 800b340:	42b3      	cmp	r3, r6
 800b342:	db0b      	blt.n	800b35c <__lshift+0x38>
 800b344:	4638      	mov	r0, r7
 800b346:	f7ff fddb 	bl	800af00 <_Balloc>
 800b34a:	4605      	mov	r5, r0
 800b34c:	b948      	cbnz	r0, 800b362 <__lshift+0x3e>
 800b34e:	4602      	mov	r2, r0
 800b350:	4b28      	ldr	r3, [pc, #160]	; (800b3f4 <__lshift+0xd0>)
 800b352:	4829      	ldr	r0, [pc, #164]	; (800b3f8 <__lshift+0xd4>)
 800b354:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b358:	f7fe ff10 	bl	800a17c <__assert_func>
 800b35c:	3101      	adds	r1, #1
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	e7ee      	b.n	800b340 <__lshift+0x1c>
 800b362:	2300      	movs	r3, #0
 800b364:	f100 0114 	add.w	r1, r0, #20
 800b368:	f100 0210 	add.w	r2, r0, #16
 800b36c:	4618      	mov	r0, r3
 800b36e:	4553      	cmp	r3, sl
 800b370:	db33      	blt.n	800b3da <__lshift+0xb6>
 800b372:	6920      	ldr	r0, [r4, #16]
 800b374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b378:	f104 0314 	add.w	r3, r4, #20
 800b37c:	f019 091f 	ands.w	r9, r9, #31
 800b380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b388:	d02b      	beq.n	800b3e2 <__lshift+0xbe>
 800b38a:	f1c9 0e20 	rsb	lr, r9, #32
 800b38e:	468a      	mov	sl, r1
 800b390:	2200      	movs	r2, #0
 800b392:	6818      	ldr	r0, [r3, #0]
 800b394:	fa00 f009 	lsl.w	r0, r0, r9
 800b398:	4302      	orrs	r2, r0
 800b39a:	f84a 2b04 	str.w	r2, [sl], #4
 800b39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3a2:	459c      	cmp	ip, r3
 800b3a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3a8:	d8f3      	bhi.n	800b392 <__lshift+0x6e>
 800b3aa:	ebac 0304 	sub.w	r3, ip, r4
 800b3ae:	3b15      	subs	r3, #21
 800b3b0:	f023 0303 	bic.w	r3, r3, #3
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	f104 0015 	add.w	r0, r4, #21
 800b3ba:	4584      	cmp	ip, r0
 800b3bc:	bf38      	it	cc
 800b3be:	2304      	movcc	r3, #4
 800b3c0:	50ca      	str	r2, [r1, r3]
 800b3c2:	b10a      	cbz	r2, 800b3c8 <__lshift+0xa4>
 800b3c4:	f108 0602 	add.w	r6, r8, #2
 800b3c8:	3e01      	subs	r6, #1
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	612e      	str	r6, [r5, #16]
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	f7ff fdd6 	bl	800af80 <_Bfree>
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3da:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3de:	3301      	adds	r3, #1
 800b3e0:	e7c5      	b.n	800b36e <__lshift+0x4a>
 800b3e2:	3904      	subs	r1, #4
 800b3e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3ec:	459c      	cmp	ip, r3
 800b3ee:	d8f9      	bhi.n	800b3e4 <__lshift+0xc0>
 800b3f0:	e7ea      	b.n	800b3c8 <__lshift+0xa4>
 800b3f2:	bf00      	nop
 800b3f4:	0800cb49 	.word	0x0800cb49
 800b3f8:	0800cb5a 	.word	0x0800cb5a

0800b3fc <__mcmp>:
 800b3fc:	b530      	push	{r4, r5, lr}
 800b3fe:	6902      	ldr	r2, [r0, #16]
 800b400:	690c      	ldr	r4, [r1, #16]
 800b402:	1b12      	subs	r2, r2, r4
 800b404:	d10e      	bne.n	800b424 <__mcmp+0x28>
 800b406:	f100 0314 	add.w	r3, r0, #20
 800b40a:	3114      	adds	r1, #20
 800b40c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b410:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b414:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b418:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b41c:	42a5      	cmp	r5, r4
 800b41e:	d003      	beq.n	800b428 <__mcmp+0x2c>
 800b420:	d305      	bcc.n	800b42e <__mcmp+0x32>
 800b422:	2201      	movs	r2, #1
 800b424:	4610      	mov	r0, r2
 800b426:	bd30      	pop	{r4, r5, pc}
 800b428:	4283      	cmp	r3, r0
 800b42a:	d3f3      	bcc.n	800b414 <__mcmp+0x18>
 800b42c:	e7fa      	b.n	800b424 <__mcmp+0x28>
 800b42e:	f04f 32ff 	mov.w	r2, #4294967295
 800b432:	e7f7      	b.n	800b424 <__mcmp+0x28>

0800b434 <__mdiff>:
 800b434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	460c      	mov	r4, r1
 800b43a:	4606      	mov	r6, r0
 800b43c:	4611      	mov	r1, r2
 800b43e:	4620      	mov	r0, r4
 800b440:	4617      	mov	r7, r2
 800b442:	f7ff ffdb 	bl	800b3fc <__mcmp>
 800b446:	1e05      	subs	r5, r0, #0
 800b448:	d110      	bne.n	800b46c <__mdiff+0x38>
 800b44a:	4629      	mov	r1, r5
 800b44c:	4630      	mov	r0, r6
 800b44e:	f7ff fd57 	bl	800af00 <_Balloc>
 800b452:	b930      	cbnz	r0, 800b462 <__mdiff+0x2e>
 800b454:	4b39      	ldr	r3, [pc, #228]	; (800b53c <__mdiff+0x108>)
 800b456:	4602      	mov	r2, r0
 800b458:	f240 2132 	movw	r1, #562	; 0x232
 800b45c:	4838      	ldr	r0, [pc, #224]	; (800b540 <__mdiff+0x10c>)
 800b45e:	f7fe fe8d 	bl	800a17c <__assert_func>
 800b462:	2301      	movs	r3, #1
 800b464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46c:	bfa4      	itt	ge
 800b46e:	463b      	movge	r3, r7
 800b470:	4627      	movge	r7, r4
 800b472:	4630      	mov	r0, r6
 800b474:	6879      	ldr	r1, [r7, #4]
 800b476:	bfa6      	itte	ge
 800b478:	461c      	movge	r4, r3
 800b47a:	2500      	movge	r5, #0
 800b47c:	2501      	movlt	r5, #1
 800b47e:	f7ff fd3f 	bl	800af00 <_Balloc>
 800b482:	b920      	cbnz	r0, 800b48e <__mdiff+0x5a>
 800b484:	4b2d      	ldr	r3, [pc, #180]	; (800b53c <__mdiff+0x108>)
 800b486:	4602      	mov	r2, r0
 800b488:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b48c:	e7e6      	b.n	800b45c <__mdiff+0x28>
 800b48e:	693e      	ldr	r6, [r7, #16]
 800b490:	60c5      	str	r5, [r0, #12]
 800b492:	6925      	ldr	r5, [r4, #16]
 800b494:	f107 0114 	add.w	r1, r7, #20
 800b498:	f104 0914 	add.w	r9, r4, #20
 800b49c:	f100 0e14 	add.w	lr, r0, #20
 800b4a0:	f107 0210 	add.w	r2, r7, #16
 800b4a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b4a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b4ac:	46f2      	mov	sl, lr
 800b4ae:	2700      	movs	r7, #0
 800b4b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4b8:	fa1f f883 	uxth.w	r8, r3
 800b4bc:	fa17 f78b 	uxtah	r7, r7, fp
 800b4c0:	0c1b      	lsrs	r3, r3, #16
 800b4c2:	eba7 0808 	sub.w	r8, r7, r8
 800b4c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4ce:	fa1f f888 	uxth.w	r8, r8
 800b4d2:	141f      	asrs	r7, r3, #16
 800b4d4:	454d      	cmp	r5, r9
 800b4d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4da:	f84a 3b04 	str.w	r3, [sl], #4
 800b4de:	d8e7      	bhi.n	800b4b0 <__mdiff+0x7c>
 800b4e0:	1b2b      	subs	r3, r5, r4
 800b4e2:	3b15      	subs	r3, #21
 800b4e4:	f023 0303 	bic.w	r3, r3, #3
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	3415      	adds	r4, #21
 800b4ec:	42a5      	cmp	r5, r4
 800b4ee:	bf38      	it	cc
 800b4f0:	2304      	movcc	r3, #4
 800b4f2:	4419      	add	r1, r3
 800b4f4:	4473      	add	r3, lr
 800b4f6:	469e      	mov	lr, r3
 800b4f8:	460d      	mov	r5, r1
 800b4fa:	4565      	cmp	r5, ip
 800b4fc:	d30e      	bcc.n	800b51c <__mdiff+0xe8>
 800b4fe:	f10c 0203 	add.w	r2, ip, #3
 800b502:	1a52      	subs	r2, r2, r1
 800b504:	f022 0203 	bic.w	r2, r2, #3
 800b508:	3903      	subs	r1, #3
 800b50a:	458c      	cmp	ip, r1
 800b50c:	bf38      	it	cc
 800b50e:	2200      	movcc	r2, #0
 800b510:	441a      	add	r2, r3
 800b512:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b516:	b17b      	cbz	r3, 800b538 <__mdiff+0x104>
 800b518:	6106      	str	r6, [r0, #16]
 800b51a:	e7a5      	b.n	800b468 <__mdiff+0x34>
 800b51c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b520:	fa17 f488 	uxtah	r4, r7, r8
 800b524:	1422      	asrs	r2, r4, #16
 800b526:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b52a:	b2a4      	uxth	r4, r4
 800b52c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b530:	f84e 4b04 	str.w	r4, [lr], #4
 800b534:	1417      	asrs	r7, r2, #16
 800b536:	e7e0      	b.n	800b4fa <__mdiff+0xc6>
 800b538:	3e01      	subs	r6, #1
 800b53a:	e7ea      	b.n	800b512 <__mdiff+0xde>
 800b53c:	0800cb49 	.word	0x0800cb49
 800b540:	0800cb5a 	.word	0x0800cb5a

0800b544 <__d2b>:
 800b544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b548:	4689      	mov	r9, r1
 800b54a:	2101      	movs	r1, #1
 800b54c:	ec57 6b10 	vmov	r6, r7, d0
 800b550:	4690      	mov	r8, r2
 800b552:	f7ff fcd5 	bl	800af00 <_Balloc>
 800b556:	4604      	mov	r4, r0
 800b558:	b930      	cbnz	r0, 800b568 <__d2b+0x24>
 800b55a:	4602      	mov	r2, r0
 800b55c:	4b25      	ldr	r3, [pc, #148]	; (800b5f4 <__d2b+0xb0>)
 800b55e:	4826      	ldr	r0, [pc, #152]	; (800b5f8 <__d2b+0xb4>)
 800b560:	f240 310a 	movw	r1, #778	; 0x30a
 800b564:	f7fe fe0a 	bl	800a17c <__assert_func>
 800b568:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b56c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b570:	bb35      	cbnz	r5, 800b5c0 <__d2b+0x7c>
 800b572:	2e00      	cmp	r6, #0
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	d028      	beq.n	800b5ca <__d2b+0x86>
 800b578:	4668      	mov	r0, sp
 800b57a:	9600      	str	r6, [sp, #0]
 800b57c:	f7ff fd8c 	bl	800b098 <__lo0bits>
 800b580:	9900      	ldr	r1, [sp, #0]
 800b582:	b300      	cbz	r0, 800b5c6 <__d2b+0x82>
 800b584:	9a01      	ldr	r2, [sp, #4]
 800b586:	f1c0 0320 	rsb	r3, r0, #32
 800b58a:	fa02 f303 	lsl.w	r3, r2, r3
 800b58e:	430b      	orrs	r3, r1
 800b590:	40c2      	lsrs	r2, r0
 800b592:	6163      	str	r3, [r4, #20]
 800b594:	9201      	str	r2, [sp, #4]
 800b596:	9b01      	ldr	r3, [sp, #4]
 800b598:	61a3      	str	r3, [r4, #24]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bf14      	ite	ne
 800b59e:	2202      	movne	r2, #2
 800b5a0:	2201      	moveq	r2, #1
 800b5a2:	6122      	str	r2, [r4, #16]
 800b5a4:	b1d5      	cbz	r5, 800b5dc <__d2b+0x98>
 800b5a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5aa:	4405      	add	r5, r0
 800b5ac:	f8c9 5000 	str.w	r5, [r9]
 800b5b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5b4:	f8c8 0000 	str.w	r0, [r8]
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	b003      	add	sp, #12
 800b5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5c4:	e7d5      	b.n	800b572 <__d2b+0x2e>
 800b5c6:	6161      	str	r1, [r4, #20]
 800b5c8:	e7e5      	b.n	800b596 <__d2b+0x52>
 800b5ca:	a801      	add	r0, sp, #4
 800b5cc:	f7ff fd64 	bl	800b098 <__lo0bits>
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	6163      	str	r3, [r4, #20]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	6122      	str	r2, [r4, #16]
 800b5d8:	3020      	adds	r0, #32
 800b5da:	e7e3      	b.n	800b5a4 <__d2b+0x60>
 800b5dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5e4:	f8c9 0000 	str.w	r0, [r9]
 800b5e8:	6918      	ldr	r0, [r3, #16]
 800b5ea:	f7ff fd35 	bl	800b058 <__hi0bits>
 800b5ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5f2:	e7df      	b.n	800b5b4 <__d2b+0x70>
 800b5f4:	0800cb49 	.word	0x0800cb49
 800b5f8:	0800cb5a 	.word	0x0800cb5a

0800b5fc <_calloc_r>:
 800b5fc:	b513      	push	{r0, r1, r4, lr}
 800b5fe:	434a      	muls	r2, r1
 800b600:	4611      	mov	r1, r2
 800b602:	9201      	str	r2, [sp, #4]
 800b604:	f000 f85a 	bl	800b6bc <_malloc_r>
 800b608:	4604      	mov	r4, r0
 800b60a:	b118      	cbz	r0, 800b614 <_calloc_r+0x18>
 800b60c:	9a01      	ldr	r2, [sp, #4]
 800b60e:	2100      	movs	r1, #0
 800b610:	f7fe f818 	bl	8009644 <memset>
 800b614:	4620      	mov	r0, r4
 800b616:	b002      	add	sp, #8
 800b618:	bd10      	pop	{r4, pc}
	...

0800b61c <_free_r>:
 800b61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b61e:	2900      	cmp	r1, #0
 800b620:	d048      	beq.n	800b6b4 <_free_r+0x98>
 800b622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b626:	9001      	str	r0, [sp, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f1a1 0404 	sub.w	r4, r1, #4
 800b62e:	bfb8      	it	lt
 800b630:	18e4      	addlt	r4, r4, r3
 800b632:	f000 fe75 	bl	800c320 <__malloc_lock>
 800b636:	4a20      	ldr	r2, [pc, #128]	; (800b6b8 <_free_r+0x9c>)
 800b638:	9801      	ldr	r0, [sp, #4]
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	4615      	mov	r5, r2
 800b63e:	b933      	cbnz	r3, 800b64e <_free_r+0x32>
 800b640:	6063      	str	r3, [r4, #4]
 800b642:	6014      	str	r4, [r2, #0]
 800b644:	b003      	add	sp, #12
 800b646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b64a:	f000 be6f 	b.w	800c32c <__malloc_unlock>
 800b64e:	42a3      	cmp	r3, r4
 800b650:	d90b      	bls.n	800b66a <_free_r+0x4e>
 800b652:	6821      	ldr	r1, [r4, #0]
 800b654:	1862      	adds	r2, r4, r1
 800b656:	4293      	cmp	r3, r2
 800b658:	bf04      	itt	eq
 800b65a:	681a      	ldreq	r2, [r3, #0]
 800b65c:	685b      	ldreq	r3, [r3, #4]
 800b65e:	6063      	str	r3, [r4, #4]
 800b660:	bf04      	itt	eq
 800b662:	1852      	addeq	r2, r2, r1
 800b664:	6022      	streq	r2, [r4, #0]
 800b666:	602c      	str	r4, [r5, #0]
 800b668:	e7ec      	b.n	800b644 <_free_r+0x28>
 800b66a:	461a      	mov	r2, r3
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	b10b      	cbz	r3, 800b674 <_free_r+0x58>
 800b670:	42a3      	cmp	r3, r4
 800b672:	d9fa      	bls.n	800b66a <_free_r+0x4e>
 800b674:	6811      	ldr	r1, [r2, #0]
 800b676:	1855      	adds	r5, r2, r1
 800b678:	42a5      	cmp	r5, r4
 800b67a:	d10b      	bne.n	800b694 <_free_r+0x78>
 800b67c:	6824      	ldr	r4, [r4, #0]
 800b67e:	4421      	add	r1, r4
 800b680:	1854      	adds	r4, r2, r1
 800b682:	42a3      	cmp	r3, r4
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	d1dd      	bne.n	800b644 <_free_r+0x28>
 800b688:	681c      	ldr	r4, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	4421      	add	r1, r4
 800b690:	6011      	str	r1, [r2, #0]
 800b692:	e7d7      	b.n	800b644 <_free_r+0x28>
 800b694:	d902      	bls.n	800b69c <_free_r+0x80>
 800b696:	230c      	movs	r3, #12
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	e7d3      	b.n	800b644 <_free_r+0x28>
 800b69c:	6825      	ldr	r5, [r4, #0]
 800b69e:	1961      	adds	r1, r4, r5
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	bf04      	itt	eq
 800b6a4:	6819      	ldreq	r1, [r3, #0]
 800b6a6:	685b      	ldreq	r3, [r3, #4]
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	bf04      	itt	eq
 800b6ac:	1949      	addeq	r1, r1, r5
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	6054      	str	r4, [r2, #4]
 800b6b2:	e7c7      	b.n	800b644 <_free_r+0x28>
 800b6b4:	b003      	add	sp, #12
 800b6b6:	bd30      	pop	{r4, r5, pc}
 800b6b8:	200010d0 	.word	0x200010d0

0800b6bc <_malloc_r>:
 800b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6be:	1ccd      	adds	r5, r1, #3
 800b6c0:	f025 0503 	bic.w	r5, r5, #3
 800b6c4:	3508      	adds	r5, #8
 800b6c6:	2d0c      	cmp	r5, #12
 800b6c8:	bf38      	it	cc
 800b6ca:	250c      	movcc	r5, #12
 800b6cc:	2d00      	cmp	r5, #0
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	db01      	blt.n	800b6d6 <_malloc_r+0x1a>
 800b6d2:	42a9      	cmp	r1, r5
 800b6d4:	d903      	bls.n	800b6de <_malloc_r+0x22>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	6033      	str	r3, [r6, #0]
 800b6da:	2000      	movs	r0, #0
 800b6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6de:	f000 fe1f 	bl	800c320 <__malloc_lock>
 800b6e2:	4921      	ldr	r1, [pc, #132]	; (800b768 <_malloc_r+0xac>)
 800b6e4:	680a      	ldr	r2, [r1, #0]
 800b6e6:	4614      	mov	r4, r2
 800b6e8:	b99c      	cbnz	r4, 800b712 <_malloc_r+0x56>
 800b6ea:	4f20      	ldr	r7, [pc, #128]	; (800b76c <_malloc_r+0xb0>)
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	b923      	cbnz	r3, 800b6fa <_malloc_r+0x3e>
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f000 faf2 	bl	800bcdc <_sbrk_r>
 800b6f8:	6038      	str	r0, [r7, #0]
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f000 faed 	bl	800bcdc <_sbrk_r>
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	d123      	bne.n	800b74e <_malloc_r+0x92>
 800b706:	230c      	movs	r3, #12
 800b708:	6033      	str	r3, [r6, #0]
 800b70a:	4630      	mov	r0, r6
 800b70c:	f000 fe0e 	bl	800c32c <__malloc_unlock>
 800b710:	e7e3      	b.n	800b6da <_malloc_r+0x1e>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	1b5b      	subs	r3, r3, r5
 800b716:	d417      	bmi.n	800b748 <_malloc_r+0x8c>
 800b718:	2b0b      	cmp	r3, #11
 800b71a:	d903      	bls.n	800b724 <_malloc_r+0x68>
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	441c      	add	r4, r3
 800b720:	6025      	str	r5, [r4, #0]
 800b722:	e004      	b.n	800b72e <_malloc_r+0x72>
 800b724:	6863      	ldr	r3, [r4, #4]
 800b726:	42a2      	cmp	r2, r4
 800b728:	bf0c      	ite	eq
 800b72a:	600b      	streq	r3, [r1, #0]
 800b72c:	6053      	strne	r3, [r2, #4]
 800b72e:	4630      	mov	r0, r6
 800b730:	f000 fdfc 	bl	800c32c <__malloc_unlock>
 800b734:	f104 000b 	add.w	r0, r4, #11
 800b738:	1d23      	adds	r3, r4, #4
 800b73a:	f020 0007 	bic.w	r0, r0, #7
 800b73e:	1ac2      	subs	r2, r0, r3
 800b740:	d0cc      	beq.n	800b6dc <_malloc_r+0x20>
 800b742:	1a1b      	subs	r3, r3, r0
 800b744:	50a3      	str	r3, [r4, r2]
 800b746:	e7c9      	b.n	800b6dc <_malloc_r+0x20>
 800b748:	4622      	mov	r2, r4
 800b74a:	6864      	ldr	r4, [r4, #4]
 800b74c:	e7cc      	b.n	800b6e8 <_malloc_r+0x2c>
 800b74e:	1cc4      	adds	r4, r0, #3
 800b750:	f024 0403 	bic.w	r4, r4, #3
 800b754:	42a0      	cmp	r0, r4
 800b756:	d0e3      	beq.n	800b720 <_malloc_r+0x64>
 800b758:	1a21      	subs	r1, r4, r0
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 fabe 	bl	800bcdc <_sbrk_r>
 800b760:	3001      	adds	r0, #1
 800b762:	d1dd      	bne.n	800b720 <_malloc_r+0x64>
 800b764:	e7cf      	b.n	800b706 <_malloc_r+0x4a>
 800b766:	bf00      	nop
 800b768:	200010d0 	.word	0x200010d0
 800b76c:	200010d4 	.word	0x200010d4

0800b770 <__ssputs_r>:
 800b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	688e      	ldr	r6, [r1, #8]
 800b776:	429e      	cmp	r6, r3
 800b778:	4682      	mov	sl, r0
 800b77a:	460c      	mov	r4, r1
 800b77c:	4690      	mov	r8, r2
 800b77e:	461f      	mov	r7, r3
 800b780:	d838      	bhi.n	800b7f4 <__ssputs_r+0x84>
 800b782:	898a      	ldrh	r2, [r1, #12]
 800b784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b788:	d032      	beq.n	800b7f0 <__ssputs_r+0x80>
 800b78a:	6825      	ldr	r5, [r4, #0]
 800b78c:	6909      	ldr	r1, [r1, #16]
 800b78e:	eba5 0901 	sub.w	r9, r5, r1
 800b792:	6965      	ldr	r5, [r4, #20]
 800b794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b79c:	3301      	adds	r3, #1
 800b79e:	444b      	add	r3, r9
 800b7a0:	106d      	asrs	r5, r5, #1
 800b7a2:	429d      	cmp	r5, r3
 800b7a4:	bf38      	it	cc
 800b7a6:	461d      	movcc	r5, r3
 800b7a8:	0553      	lsls	r3, r2, #21
 800b7aa:	d531      	bpl.n	800b810 <__ssputs_r+0xa0>
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	f7ff ff85 	bl	800b6bc <_malloc_r>
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	b950      	cbnz	r0, 800b7cc <__ssputs_r+0x5c>
 800b7b6:	230c      	movs	r3, #12
 800b7b8:	f8ca 3000 	str.w	r3, [sl]
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c2:	81a3      	strh	r3, [r4, #12]
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7cc:	6921      	ldr	r1, [r4, #16]
 800b7ce:	464a      	mov	r2, r9
 800b7d0:	f7ff fb88 	bl	800aee4 <memcpy>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	6126      	str	r6, [r4, #16]
 800b7e2:	6165      	str	r5, [r4, #20]
 800b7e4:	444e      	add	r6, r9
 800b7e6:	eba5 0509 	sub.w	r5, r5, r9
 800b7ea:	6026      	str	r6, [r4, #0]
 800b7ec:	60a5      	str	r5, [r4, #8]
 800b7ee:	463e      	mov	r6, r7
 800b7f0:	42be      	cmp	r6, r7
 800b7f2:	d900      	bls.n	800b7f6 <__ssputs_r+0x86>
 800b7f4:	463e      	mov	r6, r7
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	6820      	ldr	r0, [r4, #0]
 800b7fa:	4641      	mov	r1, r8
 800b7fc:	f000 fd76 	bl	800c2ec <memmove>
 800b800:	68a3      	ldr	r3, [r4, #8]
 800b802:	6822      	ldr	r2, [r4, #0]
 800b804:	1b9b      	subs	r3, r3, r6
 800b806:	4432      	add	r2, r6
 800b808:	60a3      	str	r3, [r4, #8]
 800b80a:	6022      	str	r2, [r4, #0]
 800b80c:	2000      	movs	r0, #0
 800b80e:	e7db      	b.n	800b7c8 <__ssputs_r+0x58>
 800b810:	462a      	mov	r2, r5
 800b812:	f000 fd91 	bl	800c338 <_realloc_r>
 800b816:	4606      	mov	r6, r0
 800b818:	2800      	cmp	r0, #0
 800b81a:	d1e1      	bne.n	800b7e0 <__ssputs_r+0x70>
 800b81c:	6921      	ldr	r1, [r4, #16]
 800b81e:	4650      	mov	r0, sl
 800b820:	f7ff fefc 	bl	800b61c <_free_r>
 800b824:	e7c7      	b.n	800b7b6 <__ssputs_r+0x46>
	...

0800b828 <_svfiprintf_r>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	4698      	mov	r8, r3
 800b82e:	898b      	ldrh	r3, [r1, #12]
 800b830:	061b      	lsls	r3, r3, #24
 800b832:	b09d      	sub	sp, #116	; 0x74
 800b834:	4607      	mov	r7, r0
 800b836:	460d      	mov	r5, r1
 800b838:	4614      	mov	r4, r2
 800b83a:	d50e      	bpl.n	800b85a <_svfiprintf_r+0x32>
 800b83c:	690b      	ldr	r3, [r1, #16]
 800b83e:	b963      	cbnz	r3, 800b85a <_svfiprintf_r+0x32>
 800b840:	2140      	movs	r1, #64	; 0x40
 800b842:	f7ff ff3b 	bl	800b6bc <_malloc_r>
 800b846:	6028      	str	r0, [r5, #0]
 800b848:	6128      	str	r0, [r5, #16]
 800b84a:	b920      	cbnz	r0, 800b856 <_svfiprintf_r+0x2e>
 800b84c:	230c      	movs	r3, #12
 800b84e:	603b      	str	r3, [r7, #0]
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	e0d1      	b.n	800b9fa <_svfiprintf_r+0x1d2>
 800b856:	2340      	movs	r3, #64	; 0x40
 800b858:	616b      	str	r3, [r5, #20]
 800b85a:	2300      	movs	r3, #0
 800b85c:	9309      	str	r3, [sp, #36]	; 0x24
 800b85e:	2320      	movs	r3, #32
 800b860:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b864:	f8cd 800c 	str.w	r8, [sp, #12]
 800b868:	2330      	movs	r3, #48	; 0x30
 800b86a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba14 <_svfiprintf_r+0x1ec>
 800b86e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b872:	f04f 0901 	mov.w	r9, #1
 800b876:	4623      	mov	r3, r4
 800b878:	469a      	mov	sl, r3
 800b87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b87e:	b10a      	cbz	r2, 800b884 <_svfiprintf_r+0x5c>
 800b880:	2a25      	cmp	r2, #37	; 0x25
 800b882:	d1f9      	bne.n	800b878 <_svfiprintf_r+0x50>
 800b884:	ebba 0b04 	subs.w	fp, sl, r4
 800b888:	d00b      	beq.n	800b8a2 <_svfiprintf_r+0x7a>
 800b88a:	465b      	mov	r3, fp
 800b88c:	4622      	mov	r2, r4
 800b88e:	4629      	mov	r1, r5
 800b890:	4638      	mov	r0, r7
 800b892:	f7ff ff6d 	bl	800b770 <__ssputs_r>
 800b896:	3001      	adds	r0, #1
 800b898:	f000 80aa 	beq.w	800b9f0 <_svfiprintf_r+0x1c8>
 800b89c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b89e:	445a      	add	r2, fp
 800b8a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f000 80a2 	beq.w	800b9f0 <_svfiprintf_r+0x1c8>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8b6:	f10a 0a01 	add.w	sl, sl, #1
 800b8ba:	9304      	str	r3, [sp, #16]
 800b8bc:	9307      	str	r3, [sp, #28]
 800b8be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8c2:	931a      	str	r3, [sp, #104]	; 0x68
 800b8c4:	4654      	mov	r4, sl
 800b8c6:	2205      	movs	r2, #5
 800b8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8cc:	4851      	ldr	r0, [pc, #324]	; (800ba14 <_svfiprintf_r+0x1ec>)
 800b8ce:	f7f4 fc87 	bl	80001e0 <memchr>
 800b8d2:	9a04      	ldr	r2, [sp, #16]
 800b8d4:	b9d8      	cbnz	r0, 800b90e <_svfiprintf_r+0xe6>
 800b8d6:	06d0      	lsls	r0, r2, #27
 800b8d8:	bf44      	itt	mi
 800b8da:	2320      	movmi	r3, #32
 800b8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e0:	0711      	lsls	r1, r2, #28
 800b8e2:	bf44      	itt	mi
 800b8e4:	232b      	movmi	r3, #43	; 0x2b
 800b8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f0:	d015      	beq.n	800b91e <_svfiprintf_r+0xf6>
 800b8f2:	9a07      	ldr	r2, [sp, #28]
 800b8f4:	4654      	mov	r4, sl
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	f04f 0c0a 	mov.w	ip, #10
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b902:	3b30      	subs	r3, #48	; 0x30
 800b904:	2b09      	cmp	r3, #9
 800b906:	d94e      	bls.n	800b9a6 <_svfiprintf_r+0x17e>
 800b908:	b1b0      	cbz	r0, 800b938 <_svfiprintf_r+0x110>
 800b90a:	9207      	str	r2, [sp, #28]
 800b90c:	e014      	b.n	800b938 <_svfiprintf_r+0x110>
 800b90e:	eba0 0308 	sub.w	r3, r0, r8
 800b912:	fa09 f303 	lsl.w	r3, r9, r3
 800b916:	4313      	orrs	r3, r2
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	46a2      	mov	sl, r4
 800b91c:	e7d2      	b.n	800b8c4 <_svfiprintf_r+0x9c>
 800b91e:	9b03      	ldr	r3, [sp, #12]
 800b920:	1d19      	adds	r1, r3, #4
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	9103      	str	r1, [sp, #12]
 800b926:	2b00      	cmp	r3, #0
 800b928:	bfbb      	ittet	lt
 800b92a:	425b      	neglt	r3, r3
 800b92c:	f042 0202 	orrlt.w	r2, r2, #2
 800b930:	9307      	strge	r3, [sp, #28]
 800b932:	9307      	strlt	r3, [sp, #28]
 800b934:	bfb8      	it	lt
 800b936:	9204      	strlt	r2, [sp, #16]
 800b938:	7823      	ldrb	r3, [r4, #0]
 800b93a:	2b2e      	cmp	r3, #46	; 0x2e
 800b93c:	d10c      	bne.n	800b958 <_svfiprintf_r+0x130>
 800b93e:	7863      	ldrb	r3, [r4, #1]
 800b940:	2b2a      	cmp	r3, #42	; 0x2a
 800b942:	d135      	bne.n	800b9b0 <_svfiprintf_r+0x188>
 800b944:	9b03      	ldr	r3, [sp, #12]
 800b946:	1d1a      	adds	r2, r3, #4
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	9203      	str	r2, [sp, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	bfb8      	it	lt
 800b950:	f04f 33ff 	movlt.w	r3, #4294967295
 800b954:	3402      	adds	r4, #2
 800b956:	9305      	str	r3, [sp, #20]
 800b958:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba24 <_svfiprintf_r+0x1fc>
 800b95c:	7821      	ldrb	r1, [r4, #0]
 800b95e:	2203      	movs	r2, #3
 800b960:	4650      	mov	r0, sl
 800b962:	f7f4 fc3d 	bl	80001e0 <memchr>
 800b966:	b140      	cbz	r0, 800b97a <_svfiprintf_r+0x152>
 800b968:	2340      	movs	r3, #64	; 0x40
 800b96a:	eba0 000a 	sub.w	r0, r0, sl
 800b96e:	fa03 f000 	lsl.w	r0, r3, r0
 800b972:	9b04      	ldr	r3, [sp, #16]
 800b974:	4303      	orrs	r3, r0
 800b976:	3401      	adds	r4, #1
 800b978:	9304      	str	r3, [sp, #16]
 800b97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b97e:	4826      	ldr	r0, [pc, #152]	; (800ba18 <_svfiprintf_r+0x1f0>)
 800b980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b984:	2206      	movs	r2, #6
 800b986:	f7f4 fc2b 	bl	80001e0 <memchr>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d038      	beq.n	800ba00 <_svfiprintf_r+0x1d8>
 800b98e:	4b23      	ldr	r3, [pc, #140]	; (800ba1c <_svfiprintf_r+0x1f4>)
 800b990:	bb1b      	cbnz	r3, 800b9da <_svfiprintf_r+0x1b2>
 800b992:	9b03      	ldr	r3, [sp, #12]
 800b994:	3307      	adds	r3, #7
 800b996:	f023 0307 	bic.w	r3, r3, #7
 800b99a:	3308      	adds	r3, #8
 800b99c:	9303      	str	r3, [sp, #12]
 800b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a0:	4433      	add	r3, r6
 800b9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a4:	e767      	b.n	800b876 <_svfiprintf_r+0x4e>
 800b9a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	2001      	movs	r0, #1
 800b9ae:	e7a5      	b.n	800b8fc <_svfiprintf_r+0xd4>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	3401      	adds	r4, #1
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	f04f 0c0a 	mov.w	ip, #10
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9c2:	3a30      	subs	r2, #48	; 0x30
 800b9c4:	2a09      	cmp	r2, #9
 800b9c6:	d903      	bls.n	800b9d0 <_svfiprintf_r+0x1a8>
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d0c5      	beq.n	800b958 <_svfiprintf_r+0x130>
 800b9cc:	9105      	str	r1, [sp, #20]
 800b9ce:	e7c3      	b.n	800b958 <_svfiprintf_r+0x130>
 800b9d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e7f0      	b.n	800b9bc <_svfiprintf_r+0x194>
 800b9da:	ab03      	add	r3, sp, #12
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	462a      	mov	r2, r5
 800b9e0:	4b0f      	ldr	r3, [pc, #60]	; (800ba20 <_svfiprintf_r+0x1f8>)
 800b9e2:	a904      	add	r1, sp, #16
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	f7fd fed5 	bl	8009794 <_printf_float>
 800b9ea:	1c42      	adds	r2, r0, #1
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	d1d6      	bne.n	800b99e <_svfiprintf_r+0x176>
 800b9f0:	89ab      	ldrh	r3, [r5, #12]
 800b9f2:	065b      	lsls	r3, r3, #25
 800b9f4:	f53f af2c 	bmi.w	800b850 <_svfiprintf_r+0x28>
 800b9f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9fa:	b01d      	add	sp, #116	; 0x74
 800b9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba00:	ab03      	add	r3, sp, #12
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	462a      	mov	r2, r5
 800ba06:	4b06      	ldr	r3, [pc, #24]	; (800ba20 <_svfiprintf_r+0x1f8>)
 800ba08:	a904      	add	r1, sp, #16
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	f7fe f966 	bl	8009cdc <_printf_i>
 800ba10:	e7eb      	b.n	800b9ea <_svfiprintf_r+0x1c2>
 800ba12:	bf00      	nop
 800ba14:	0800ccbc 	.word	0x0800ccbc
 800ba18:	0800ccc6 	.word	0x0800ccc6
 800ba1c:	08009795 	.word	0x08009795
 800ba20:	0800b771 	.word	0x0800b771
 800ba24:	0800ccc2 	.word	0x0800ccc2

0800ba28 <__sfputc_r>:
 800ba28:	6893      	ldr	r3, [r2, #8]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	b410      	push	{r4}
 800ba30:	6093      	str	r3, [r2, #8]
 800ba32:	da08      	bge.n	800ba46 <__sfputc_r+0x1e>
 800ba34:	6994      	ldr	r4, [r2, #24]
 800ba36:	42a3      	cmp	r3, r4
 800ba38:	db01      	blt.n	800ba3e <__sfputc_r+0x16>
 800ba3a:	290a      	cmp	r1, #10
 800ba3c:	d103      	bne.n	800ba46 <__sfputc_r+0x1e>
 800ba3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba42:	f000 b95b 	b.w	800bcfc <__swbuf_r>
 800ba46:	6813      	ldr	r3, [r2, #0]
 800ba48:	1c58      	adds	r0, r3, #1
 800ba4a:	6010      	str	r0, [r2, #0]
 800ba4c:	7019      	strb	r1, [r3, #0]
 800ba4e:	4608      	mov	r0, r1
 800ba50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <__sfputs_r>:
 800ba56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba58:	4606      	mov	r6, r0
 800ba5a:	460f      	mov	r7, r1
 800ba5c:	4614      	mov	r4, r2
 800ba5e:	18d5      	adds	r5, r2, r3
 800ba60:	42ac      	cmp	r4, r5
 800ba62:	d101      	bne.n	800ba68 <__sfputs_r+0x12>
 800ba64:	2000      	movs	r0, #0
 800ba66:	e007      	b.n	800ba78 <__sfputs_r+0x22>
 800ba68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6c:	463a      	mov	r2, r7
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff ffda 	bl	800ba28 <__sfputc_r>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	d1f3      	bne.n	800ba60 <__sfputs_r+0xa>
 800ba78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba7c <_vfiprintf_r>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	460d      	mov	r5, r1
 800ba82:	b09d      	sub	sp, #116	; 0x74
 800ba84:	4614      	mov	r4, r2
 800ba86:	4698      	mov	r8, r3
 800ba88:	4606      	mov	r6, r0
 800ba8a:	b118      	cbz	r0, 800ba94 <_vfiprintf_r+0x18>
 800ba8c:	6983      	ldr	r3, [r0, #24]
 800ba8e:	b90b      	cbnz	r3, 800ba94 <_vfiprintf_r+0x18>
 800ba90:	f000 fb16 	bl	800c0c0 <__sinit>
 800ba94:	4b89      	ldr	r3, [pc, #548]	; (800bcbc <_vfiprintf_r+0x240>)
 800ba96:	429d      	cmp	r5, r3
 800ba98:	d11b      	bne.n	800bad2 <_vfiprintf_r+0x56>
 800ba9a:	6875      	ldr	r5, [r6, #4]
 800ba9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba9e:	07d9      	lsls	r1, r3, #31
 800baa0:	d405      	bmi.n	800baae <_vfiprintf_r+0x32>
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	059a      	lsls	r2, r3, #22
 800baa6:	d402      	bmi.n	800baae <_vfiprintf_r+0x32>
 800baa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baaa:	f000 fba7 	bl	800c1fc <__retarget_lock_acquire_recursive>
 800baae:	89ab      	ldrh	r3, [r5, #12]
 800bab0:	071b      	lsls	r3, r3, #28
 800bab2:	d501      	bpl.n	800bab8 <_vfiprintf_r+0x3c>
 800bab4:	692b      	ldr	r3, [r5, #16]
 800bab6:	b9eb      	cbnz	r3, 800baf4 <_vfiprintf_r+0x78>
 800bab8:	4629      	mov	r1, r5
 800baba:	4630      	mov	r0, r6
 800babc:	f000 f970 	bl	800bda0 <__swsetup_r>
 800bac0:	b1c0      	cbz	r0, 800baf4 <_vfiprintf_r+0x78>
 800bac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac4:	07dc      	lsls	r4, r3, #31
 800bac6:	d50e      	bpl.n	800bae6 <_vfiprintf_r+0x6a>
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	b01d      	add	sp, #116	; 0x74
 800bace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad2:	4b7b      	ldr	r3, [pc, #492]	; (800bcc0 <_vfiprintf_r+0x244>)
 800bad4:	429d      	cmp	r5, r3
 800bad6:	d101      	bne.n	800badc <_vfiprintf_r+0x60>
 800bad8:	68b5      	ldr	r5, [r6, #8]
 800bada:	e7df      	b.n	800ba9c <_vfiprintf_r+0x20>
 800badc:	4b79      	ldr	r3, [pc, #484]	; (800bcc4 <_vfiprintf_r+0x248>)
 800bade:	429d      	cmp	r5, r3
 800bae0:	bf08      	it	eq
 800bae2:	68f5      	ldreq	r5, [r6, #12]
 800bae4:	e7da      	b.n	800ba9c <_vfiprintf_r+0x20>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	0598      	lsls	r0, r3, #22
 800baea:	d4ed      	bmi.n	800bac8 <_vfiprintf_r+0x4c>
 800baec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baee:	f000 fb86 	bl	800c1fe <__retarget_lock_release_recursive>
 800baf2:	e7e9      	b.n	800bac8 <_vfiprintf_r+0x4c>
 800baf4:	2300      	movs	r3, #0
 800baf6:	9309      	str	r3, [sp, #36]	; 0x24
 800baf8:	2320      	movs	r3, #32
 800bafa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb02:	2330      	movs	r3, #48	; 0x30
 800bb04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bcc8 <_vfiprintf_r+0x24c>
 800bb08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb0c:	f04f 0901 	mov.w	r9, #1
 800bb10:	4623      	mov	r3, r4
 800bb12:	469a      	mov	sl, r3
 800bb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb18:	b10a      	cbz	r2, 800bb1e <_vfiprintf_r+0xa2>
 800bb1a:	2a25      	cmp	r2, #37	; 0x25
 800bb1c:	d1f9      	bne.n	800bb12 <_vfiprintf_r+0x96>
 800bb1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb22:	d00b      	beq.n	800bb3c <_vfiprintf_r+0xc0>
 800bb24:	465b      	mov	r3, fp
 800bb26:	4622      	mov	r2, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff ff93 	bl	800ba56 <__sfputs_r>
 800bb30:	3001      	adds	r0, #1
 800bb32:	f000 80aa 	beq.w	800bc8a <_vfiprintf_r+0x20e>
 800bb36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb38:	445a      	add	r2, fp
 800bb3a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80a2 	beq.w	800bc8a <_vfiprintf_r+0x20e>
 800bb46:	2300      	movs	r3, #0
 800bb48:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb50:	f10a 0a01 	add.w	sl, sl, #1
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	9307      	str	r3, [sp, #28]
 800bb58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb5c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb5e:	4654      	mov	r4, sl
 800bb60:	2205      	movs	r2, #5
 800bb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb66:	4858      	ldr	r0, [pc, #352]	; (800bcc8 <_vfiprintf_r+0x24c>)
 800bb68:	f7f4 fb3a 	bl	80001e0 <memchr>
 800bb6c:	9a04      	ldr	r2, [sp, #16]
 800bb6e:	b9d8      	cbnz	r0, 800bba8 <_vfiprintf_r+0x12c>
 800bb70:	06d1      	lsls	r1, r2, #27
 800bb72:	bf44      	itt	mi
 800bb74:	2320      	movmi	r3, #32
 800bb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb7a:	0713      	lsls	r3, r2, #28
 800bb7c:	bf44      	itt	mi
 800bb7e:	232b      	movmi	r3, #43	; 0x2b
 800bb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb84:	f89a 3000 	ldrb.w	r3, [sl]
 800bb88:	2b2a      	cmp	r3, #42	; 0x2a
 800bb8a:	d015      	beq.n	800bbb8 <_vfiprintf_r+0x13c>
 800bb8c:	9a07      	ldr	r2, [sp, #28]
 800bb8e:	4654      	mov	r4, sl
 800bb90:	2000      	movs	r0, #0
 800bb92:	f04f 0c0a 	mov.w	ip, #10
 800bb96:	4621      	mov	r1, r4
 800bb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb9c:	3b30      	subs	r3, #48	; 0x30
 800bb9e:	2b09      	cmp	r3, #9
 800bba0:	d94e      	bls.n	800bc40 <_vfiprintf_r+0x1c4>
 800bba2:	b1b0      	cbz	r0, 800bbd2 <_vfiprintf_r+0x156>
 800bba4:	9207      	str	r2, [sp, #28]
 800bba6:	e014      	b.n	800bbd2 <_vfiprintf_r+0x156>
 800bba8:	eba0 0308 	sub.w	r3, r0, r8
 800bbac:	fa09 f303 	lsl.w	r3, r9, r3
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	46a2      	mov	sl, r4
 800bbb6:	e7d2      	b.n	800bb5e <_vfiprintf_r+0xe2>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	1d19      	adds	r1, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	9103      	str	r1, [sp, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfbb      	ittet	lt
 800bbc4:	425b      	neglt	r3, r3
 800bbc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbca:	9307      	strge	r3, [sp, #28]
 800bbcc:	9307      	strlt	r3, [sp, #28]
 800bbce:	bfb8      	it	lt
 800bbd0:	9204      	strlt	r2, [sp, #16]
 800bbd2:	7823      	ldrb	r3, [r4, #0]
 800bbd4:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd6:	d10c      	bne.n	800bbf2 <_vfiprintf_r+0x176>
 800bbd8:	7863      	ldrb	r3, [r4, #1]
 800bbda:	2b2a      	cmp	r3, #42	; 0x2a
 800bbdc:	d135      	bne.n	800bc4a <_vfiprintf_r+0x1ce>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	1d1a      	adds	r2, r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	9203      	str	r2, [sp, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	bfb8      	it	lt
 800bbea:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbee:	3402      	adds	r4, #2
 800bbf0:	9305      	str	r3, [sp, #20]
 800bbf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcd8 <_vfiprintf_r+0x25c>
 800bbf6:	7821      	ldrb	r1, [r4, #0]
 800bbf8:	2203      	movs	r2, #3
 800bbfa:	4650      	mov	r0, sl
 800bbfc:	f7f4 faf0 	bl	80001e0 <memchr>
 800bc00:	b140      	cbz	r0, 800bc14 <_vfiprintf_r+0x198>
 800bc02:	2340      	movs	r3, #64	; 0x40
 800bc04:	eba0 000a 	sub.w	r0, r0, sl
 800bc08:	fa03 f000 	lsl.w	r0, r3, r0
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	4303      	orrs	r3, r0
 800bc10:	3401      	adds	r4, #1
 800bc12:	9304      	str	r3, [sp, #16]
 800bc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc18:	482c      	ldr	r0, [pc, #176]	; (800bccc <_vfiprintf_r+0x250>)
 800bc1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc1e:	2206      	movs	r2, #6
 800bc20:	f7f4 fade 	bl	80001e0 <memchr>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d03f      	beq.n	800bca8 <_vfiprintf_r+0x22c>
 800bc28:	4b29      	ldr	r3, [pc, #164]	; (800bcd0 <_vfiprintf_r+0x254>)
 800bc2a:	bb1b      	cbnz	r3, 800bc74 <_vfiprintf_r+0x1f8>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	3307      	adds	r3, #7
 800bc30:	f023 0307 	bic.w	r3, r3, #7
 800bc34:	3308      	adds	r3, #8
 800bc36:	9303      	str	r3, [sp, #12]
 800bc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3a:	443b      	add	r3, r7
 800bc3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc3e:	e767      	b.n	800bb10 <_vfiprintf_r+0x94>
 800bc40:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc44:	460c      	mov	r4, r1
 800bc46:	2001      	movs	r0, #1
 800bc48:	e7a5      	b.n	800bb96 <_vfiprintf_r+0x11a>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	3401      	adds	r4, #1
 800bc4e:	9305      	str	r3, [sp, #20]
 800bc50:	4619      	mov	r1, r3
 800bc52:	f04f 0c0a 	mov.w	ip, #10
 800bc56:	4620      	mov	r0, r4
 800bc58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc5c:	3a30      	subs	r2, #48	; 0x30
 800bc5e:	2a09      	cmp	r2, #9
 800bc60:	d903      	bls.n	800bc6a <_vfiprintf_r+0x1ee>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0c5      	beq.n	800bbf2 <_vfiprintf_r+0x176>
 800bc66:	9105      	str	r1, [sp, #20]
 800bc68:	e7c3      	b.n	800bbf2 <_vfiprintf_r+0x176>
 800bc6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc6e:	4604      	mov	r4, r0
 800bc70:	2301      	movs	r3, #1
 800bc72:	e7f0      	b.n	800bc56 <_vfiprintf_r+0x1da>
 800bc74:	ab03      	add	r3, sp, #12
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	462a      	mov	r2, r5
 800bc7a:	4b16      	ldr	r3, [pc, #88]	; (800bcd4 <_vfiprintf_r+0x258>)
 800bc7c:	a904      	add	r1, sp, #16
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f7fd fd88 	bl	8009794 <_printf_float>
 800bc84:	4607      	mov	r7, r0
 800bc86:	1c78      	adds	r0, r7, #1
 800bc88:	d1d6      	bne.n	800bc38 <_vfiprintf_r+0x1bc>
 800bc8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc8c:	07d9      	lsls	r1, r3, #31
 800bc8e:	d405      	bmi.n	800bc9c <_vfiprintf_r+0x220>
 800bc90:	89ab      	ldrh	r3, [r5, #12]
 800bc92:	059a      	lsls	r2, r3, #22
 800bc94:	d402      	bmi.n	800bc9c <_vfiprintf_r+0x220>
 800bc96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc98:	f000 fab1 	bl	800c1fe <__retarget_lock_release_recursive>
 800bc9c:	89ab      	ldrh	r3, [r5, #12]
 800bc9e:	065b      	lsls	r3, r3, #25
 800bca0:	f53f af12 	bmi.w	800bac8 <_vfiprintf_r+0x4c>
 800bca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bca6:	e711      	b.n	800bacc <_vfiprintf_r+0x50>
 800bca8:	ab03      	add	r3, sp, #12
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	462a      	mov	r2, r5
 800bcae:	4b09      	ldr	r3, [pc, #36]	; (800bcd4 <_vfiprintf_r+0x258>)
 800bcb0:	a904      	add	r1, sp, #16
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	f7fe f812 	bl	8009cdc <_printf_i>
 800bcb8:	e7e4      	b.n	800bc84 <_vfiprintf_r+0x208>
 800bcba:	bf00      	nop
 800bcbc:	0800ccf0 	.word	0x0800ccf0
 800bcc0:	0800cd10 	.word	0x0800cd10
 800bcc4:	0800ccd0 	.word	0x0800ccd0
 800bcc8:	0800ccbc 	.word	0x0800ccbc
 800bccc:	0800ccc6 	.word	0x0800ccc6
 800bcd0:	08009795 	.word	0x08009795
 800bcd4:	0800ba57 	.word	0x0800ba57
 800bcd8:	0800ccc2 	.word	0x0800ccc2

0800bcdc <_sbrk_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d06      	ldr	r5, [pc, #24]	; (800bcf8 <_sbrk_r+0x1c>)
 800bce0:	2300      	movs	r3, #0
 800bce2:	4604      	mov	r4, r0
 800bce4:	4608      	mov	r0, r1
 800bce6:	602b      	str	r3, [r5, #0]
 800bce8:	f7f8 fb32 	bl	8004350 <_sbrk>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d102      	bne.n	800bcf6 <_sbrk_r+0x1a>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	b103      	cbz	r3, 800bcf6 <_sbrk_r+0x1a>
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	20001404 	.word	0x20001404

0800bcfc <__swbuf_r>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	460e      	mov	r6, r1
 800bd00:	4614      	mov	r4, r2
 800bd02:	4605      	mov	r5, r0
 800bd04:	b118      	cbz	r0, 800bd0e <__swbuf_r+0x12>
 800bd06:	6983      	ldr	r3, [r0, #24]
 800bd08:	b90b      	cbnz	r3, 800bd0e <__swbuf_r+0x12>
 800bd0a:	f000 f9d9 	bl	800c0c0 <__sinit>
 800bd0e:	4b21      	ldr	r3, [pc, #132]	; (800bd94 <__swbuf_r+0x98>)
 800bd10:	429c      	cmp	r4, r3
 800bd12:	d12b      	bne.n	800bd6c <__swbuf_r+0x70>
 800bd14:	686c      	ldr	r4, [r5, #4]
 800bd16:	69a3      	ldr	r3, [r4, #24]
 800bd18:	60a3      	str	r3, [r4, #8]
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	071a      	lsls	r2, r3, #28
 800bd1e:	d52f      	bpl.n	800bd80 <__swbuf_r+0x84>
 800bd20:	6923      	ldr	r3, [r4, #16]
 800bd22:	b36b      	cbz	r3, 800bd80 <__swbuf_r+0x84>
 800bd24:	6923      	ldr	r3, [r4, #16]
 800bd26:	6820      	ldr	r0, [r4, #0]
 800bd28:	1ac0      	subs	r0, r0, r3
 800bd2a:	6963      	ldr	r3, [r4, #20]
 800bd2c:	b2f6      	uxtb	r6, r6
 800bd2e:	4283      	cmp	r3, r0
 800bd30:	4637      	mov	r7, r6
 800bd32:	dc04      	bgt.n	800bd3e <__swbuf_r+0x42>
 800bd34:	4621      	mov	r1, r4
 800bd36:	4628      	mov	r0, r5
 800bd38:	f000 f92e 	bl	800bf98 <_fflush_r>
 800bd3c:	bb30      	cbnz	r0, 800bd8c <__swbuf_r+0x90>
 800bd3e:	68a3      	ldr	r3, [r4, #8]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	60a3      	str	r3, [r4, #8]
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	6022      	str	r2, [r4, #0]
 800bd4a:	701e      	strb	r6, [r3, #0]
 800bd4c:	6963      	ldr	r3, [r4, #20]
 800bd4e:	3001      	adds	r0, #1
 800bd50:	4283      	cmp	r3, r0
 800bd52:	d004      	beq.n	800bd5e <__swbuf_r+0x62>
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	07db      	lsls	r3, r3, #31
 800bd58:	d506      	bpl.n	800bd68 <__swbuf_r+0x6c>
 800bd5a:	2e0a      	cmp	r6, #10
 800bd5c:	d104      	bne.n	800bd68 <__swbuf_r+0x6c>
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4628      	mov	r0, r5
 800bd62:	f000 f919 	bl	800bf98 <_fflush_r>
 800bd66:	b988      	cbnz	r0, 800bd8c <__swbuf_r+0x90>
 800bd68:	4638      	mov	r0, r7
 800bd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <__swbuf_r+0x9c>)
 800bd6e:	429c      	cmp	r4, r3
 800bd70:	d101      	bne.n	800bd76 <__swbuf_r+0x7a>
 800bd72:	68ac      	ldr	r4, [r5, #8]
 800bd74:	e7cf      	b.n	800bd16 <__swbuf_r+0x1a>
 800bd76:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <__swbuf_r+0xa0>)
 800bd78:	429c      	cmp	r4, r3
 800bd7a:	bf08      	it	eq
 800bd7c:	68ec      	ldreq	r4, [r5, #12]
 800bd7e:	e7ca      	b.n	800bd16 <__swbuf_r+0x1a>
 800bd80:	4621      	mov	r1, r4
 800bd82:	4628      	mov	r0, r5
 800bd84:	f000 f80c 	bl	800bda0 <__swsetup_r>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d0cb      	beq.n	800bd24 <__swbuf_r+0x28>
 800bd8c:	f04f 37ff 	mov.w	r7, #4294967295
 800bd90:	e7ea      	b.n	800bd68 <__swbuf_r+0x6c>
 800bd92:	bf00      	nop
 800bd94:	0800ccf0 	.word	0x0800ccf0
 800bd98:	0800cd10 	.word	0x0800cd10
 800bd9c:	0800ccd0 	.word	0x0800ccd0

0800bda0 <__swsetup_r>:
 800bda0:	4b32      	ldr	r3, [pc, #200]	; (800be6c <__swsetup_r+0xcc>)
 800bda2:	b570      	push	{r4, r5, r6, lr}
 800bda4:	681d      	ldr	r5, [r3, #0]
 800bda6:	4606      	mov	r6, r0
 800bda8:	460c      	mov	r4, r1
 800bdaa:	b125      	cbz	r5, 800bdb6 <__swsetup_r+0x16>
 800bdac:	69ab      	ldr	r3, [r5, #24]
 800bdae:	b913      	cbnz	r3, 800bdb6 <__swsetup_r+0x16>
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f000 f985 	bl	800c0c0 <__sinit>
 800bdb6:	4b2e      	ldr	r3, [pc, #184]	; (800be70 <__swsetup_r+0xd0>)
 800bdb8:	429c      	cmp	r4, r3
 800bdba:	d10f      	bne.n	800bddc <__swsetup_r+0x3c>
 800bdbc:	686c      	ldr	r4, [r5, #4]
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdc4:	0719      	lsls	r1, r3, #28
 800bdc6:	d42c      	bmi.n	800be22 <__swsetup_r+0x82>
 800bdc8:	06dd      	lsls	r5, r3, #27
 800bdca:	d411      	bmi.n	800bdf0 <__swsetup_r+0x50>
 800bdcc:	2309      	movs	r3, #9
 800bdce:	6033      	str	r3, [r6, #0]
 800bdd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdd4:	81a3      	strh	r3, [r4, #12]
 800bdd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdda:	e03e      	b.n	800be5a <__swsetup_r+0xba>
 800bddc:	4b25      	ldr	r3, [pc, #148]	; (800be74 <__swsetup_r+0xd4>)
 800bdde:	429c      	cmp	r4, r3
 800bde0:	d101      	bne.n	800bde6 <__swsetup_r+0x46>
 800bde2:	68ac      	ldr	r4, [r5, #8]
 800bde4:	e7eb      	b.n	800bdbe <__swsetup_r+0x1e>
 800bde6:	4b24      	ldr	r3, [pc, #144]	; (800be78 <__swsetup_r+0xd8>)
 800bde8:	429c      	cmp	r4, r3
 800bdea:	bf08      	it	eq
 800bdec:	68ec      	ldreq	r4, [r5, #12]
 800bdee:	e7e6      	b.n	800bdbe <__swsetup_r+0x1e>
 800bdf0:	0758      	lsls	r0, r3, #29
 800bdf2:	d512      	bpl.n	800be1a <__swsetup_r+0x7a>
 800bdf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdf6:	b141      	cbz	r1, 800be0a <__swsetup_r+0x6a>
 800bdf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdfc:	4299      	cmp	r1, r3
 800bdfe:	d002      	beq.n	800be06 <__swsetup_r+0x66>
 800be00:	4630      	mov	r0, r6
 800be02:	f7ff fc0b 	bl	800b61c <_free_r>
 800be06:	2300      	movs	r3, #0
 800be08:	6363      	str	r3, [r4, #52]	; 0x34
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be10:	81a3      	strh	r3, [r4, #12]
 800be12:	2300      	movs	r3, #0
 800be14:	6063      	str	r3, [r4, #4]
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	f043 0308 	orr.w	r3, r3, #8
 800be20:	81a3      	strh	r3, [r4, #12]
 800be22:	6923      	ldr	r3, [r4, #16]
 800be24:	b94b      	cbnz	r3, 800be3a <__swsetup_r+0x9a>
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be30:	d003      	beq.n	800be3a <__swsetup_r+0x9a>
 800be32:	4621      	mov	r1, r4
 800be34:	4630      	mov	r0, r6
 800be36:	f000 fa07 	bl	800c248 <__smakebuf_r>
 800be3a:	89a0      	ldrh	r0, [r4, #12]
 800be3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be40:	f010 0301 	ands.w	r3, r0, #1
 800be44:	d00a      	beq.n	800be5c <__swsetup_r+0xbc>
 800be46:	2300      	movs	r3, #0
 800be48:	60a3      	str	r3, [r4, #8]
 800be4a:	6963      	ldr	r3, [r4, #20]
 800be4c:	425b      	negs	r3, r3
 800be4e:	61a3      	str	r3, [r4, #24]
 800be50:	6923      	ldr	r3, [r4, #16]
 800be52:	b943      	cbnz	r3, 800be66 <__swsetup_r+0xc6>
 800be54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be58:	d1ba      	bne.n	800bdd0 <__swsetup_r+0x30>
 800be5a:	bd70      	pop	{r4, r5, r6, pc}
 800be5c:	0781      	lsls	r1, r0, #30
 800be5e:	bf58      	it	pl
 800be60:	6963      	ldrpl	r3, [r4, #20]
 800be62:	60a3      	str	r3, [r4, #8]
 800be64:	e7f4      	b.n	800be50 <__swsetup_r+0xb0>
 800be66:	2000      	movs	r0, #0
 800be68:	e7f7      	b.n	800be5a <__swsetup_r+0xba>
 800be6a:	bf00      	nop
 800be6c:	20000110 	.word	0x20000110
 800be70:	0800ccf0 	.word	0x0800ccf0
 800be74:	0800cd10 	.word	0x0800cd10
 800be78:	0800ccd0 	.word	0x0800ccd0

0800be7c <abort>:
 800be7c:	b508      	push	{r3, lr}
 800be7e:	2006      	movs	r0, #6
 800be80:	f000 faa8 	bl	800c3d4 <raise>
 800be84:	2001      	movs	r0, #1
 800be86:	f7f8 f9eb 	bl	8004260 <_exit>
	...

0800be8c <__sflush_r>:
 800be8c:	898a      	ldrh	r2, [r1, #12]
 800be8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be92:	4605      	mov	r5, r0
 800be94:	0710      	lsls	r0, r2, #28
 800be96:	460c      	mov	r4, r1
 800be98:	d458      	bmi.n	800bf4c <__sflush_r+0xc0>
 800be9a:	684b      	ldr	r3, [r1, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dc05      	bgt.n	800beac <__sflush_r+0x20>
 800bea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	dc02      	bgt.n	800beac <__sflush_r+0x20>
 800bea6:	2000      	movs	r0, #0
 800bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beae:	2e00      	cmp	r6, #0
 800beb0:	d0f9      	beq.n	800bea6 <__sflush_r+0x1a>
 800beb2:	2300      	movs	r3, #0
 800beb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800beb8:	682f      	ldr	r7, [r5, #0]
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	d032      	beq.n	800bf24 <__sflush_r+0x98>
 800bebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bec0:	89a3      	ldrh	r3, [r4, #12]
 800bec2:	075a      	lsls	r2, r3, #29
 800bec4:	d505      	bpl.n	800bed2 <__sflush_r+0x46>
 800bec6:	6863      	ldr	r3, [r4, #4]
 800bec8:	1ac0      	subs	r0, r0, r3
 800beca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800becc:	b10b      	cbz	r3, 800bed2 <__sflush_r+0x46>
 800bece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bed0:	1ac0      	subs	r0, r0, r3
 800bed2:	2300      	movs	r3, #0
 800bed4:	4602      	mov	r2, r0
 800bed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bed8:	6a21      	ldr	r1, [r4, #32]
 800beda:	4628      	mov	r0, r5
 800bedc:	47b0      	blx	r6
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	d106      	bne.n	800bef2 <__sflush_r+0x66>
 800bee4:	6829      	ldr	r1, [r5, #0]
 800bee6:	291d      	cmp	r1, #29
 800bee8:	d82c      	bhi.n	800bf44 <__sflush_r+0xb8>
 800beea:	4a2a      	ldr	r2, [pc, #168]	; (800bf94 <__sflush_r+0x108>)
 800beec:	40ca      	lsrs	r2, r1
 800beee:	07d6      	lsls	r6, r2, #31
 800bef0:	d528      	bpl.n	800bf44 <__sflush_r+0xb8>
 800bef2:	2200      	movs	r2, #0
 800bef4:	6062      	str	r2, [r4, #4]
 800bef6:	04d9      	lsls	r1, r3, #19
 800bef8:	6922      	ldr	r2, [r4, #16]
 800befa:	6022      	str	r2, [r4, #0]
 800befc:	d504      	bpl.n	800bf08 <__sflush_r+0x7c>
 800befe:	1c42      	adds	r2, r0, #1
 800bf00:	d101      	bne.n	800bf06 <__sflush_r+0x7a>
 800bf02:	682b      	ldr	r3, [r5, #0]
 800bf04:	b903      	cbnz	r3, 800bf08 <__sflush_r+0x7c>
 800bf06:	6560      	str	r0, [r4, #84]	; 0x54
 800bf08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf0a:	602f      	str	r7, [r5, #0]
 800bf0c:	2900      	cmp	r1, #0
 800bf0e:	d0ca      	beq.n	800bea6 <__sflush_r+0x1a>
 800bf10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf14:	4299      	cmp	r1, r3
 800bf16:	d002      	beq.n	800bf1e <__sflush_r+0x92>
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f7ff fb7f 	bl	800b61c <_free_r>
 800bf1e:	2000      	movs	r0, #0
 800bf20:	6360      	str	r0, [r4, #52]	; 0x34
 800bf22:	e7c1      	b.n	800bea8 <__sflush_r+0x1c>
 800bf24:	6a21      	ldr	r1, [r4, #32]
 800bf26:	2301      	movs	r3, #1
 800bf28:	4628      	mov	r0, r5
 800bf2a:	47b0      	blx	r6
 800bf2c:	1c41      	adds	r1, r0, #1
 800bf2e:	d1c7      	bne.n	800bec0 <__sflush_r+0x34>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d0c4      	beq.n	800bec0 <__sflush_r+0x34>
 800bf36:	2b1d      	cmp	r3, #29
 800bf38:	d001      	beq.n	800bf3e <__sflush_r+0xb2>
 800bf3a:	2b16      	cmp	r3, #22
 800bf3c:	d101      	bne.n	800bf42 <__sflush_r+0xb6>
 800bf3e:	602f      	str	r7, [r5, #0]
 800bf40:	e7b1      	b.n	800bea6 <__sflush_r+0x1a>
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf48:	81a3      	strh	r3, [r4, #12]
 800bf4a:	e7ad      	b.n	800bea8 <__sflush_r+0x1c>
 800bf4c:	690f      	ldr	r7, [r1, #16]
 800bf4e:	2f00      	cmp	r7, #0
 800bf50:	d0a9      	beq.n	800bea6 <__sflush_r+0x1a>
 800bf52:	0793      	lsls	r3, r2, #30
 800bf54:	680e      	ldr	r6, [r1, #0]
 800bf56:	bf08      	it	eq
 800bf58:	694b      	ldreq	r3, [r1, #20]
 800bf5a:	600f      	str	r7, [r1, #0]
 800bf5c:	bf18      	it	ne
 800bf5e:	2300      	movne	r3, #0
 800bf60:	eba6 0807 	sub.w	r8, r6, r7
 800bf64:	608b      	str	r3, [r1, #8]
 800bf66:	f1b8 0f00 	cmp.w	r8, #0
 800bf6a:	dd9c      	ble.n	800bea6 <__sflush_r+0x1a>
 800bf6c:	6a21      	ldr	r1, [r4, #32]
 800bf6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf70:	4643      	mov	r3, r8
 800bf72:	463a      	mov	r2, r7
 800bf74:	4628      	mov	r0, r5
 800bf76:	47b0      	blx	r6
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	dc06      	bgt.n	800bf8a <__sflush_r+0xfe>
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf82:	81a3      	strh	r3, [r4, #12]
 800bf84:	f04f 30ff 	mov.w	r0, #4294967295
 800bf88:	e78e      	b.n	800bea8 <__sflush_r+0x1c>
 800bf8a:	4407      	add	r7, r0
 800bf8c:	eba8 0800 	sub.w	r8, r8, r0
 800bf90:	e7e9      	b.n	800bf66 <__sflush_r+0xda>
 800bf92:	bf00      	nop
 800bf94:	20400001 	.word	0x20400001

0800bf98 <_fflush_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	690b      	ldr	r3, [r1, #16]
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	b913      	cbnz	r3, 800bfa8 <_fflush_r+0x10>
 800bfa2:	2500      	movs	r5, #0
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	b118      	cbz	r0, 800bfb2 <_fflush_r+0x1a>
 800bfaa:	6983      	ldr	r3, [r0, #24]
 800bfac:	b90b      	cbnz	r3, 800bfb2 <_fflush_r+0x1a>
 800bfae:	f000 f887 	bl	800c0c0 <__sinit>
 800bfb2:	4b14      	ldr	r3, [pc, #80]	; (800c004 <_fflush_r+0x6c>)
 800bfb4:	429c      	cmp	r4, r3
 800bfb6:	d11b      	bne.n	800bff0 <_fflush_r+0x58>
 800bfb8:	686c      	ldr	r4, [r5, #4]
 800bfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0ef      	beq.n	800bfa2 <_fflush_r+0xa>
 800bfc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfc4:	07d0      	lsls	r0, r2, #31
 800bfc6:	d404      	bmi.n	800bfd2 <_fflush_r+0x3a>
 800bfc8:	0599      	lsls	r1, r3, #22
 800bfca:	d402      	bmi.n	800bfd2 <_fflush_r+0x3a>
 800bfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfce:	f000 f915 	bl	800c1fc <__retarget_lock_acquire_recursive>
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	f7ff ff59 	bl	800be8c <__sflush_r>
 800bfda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfdc:	07da      	lsls	r2, r3, #31
 800bfde:	4605      	mov	r5, r0
 800bfe0:	d4e0      	bmi.n	800bfa4 <_fflush_r+0xc>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	059b      	lsls	r3, r3, #22
 800bfe6:	d4dd      	bmi.n	800bfa4 <_fflush_r+0xc>
 800bfe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfea:	f000 f908 	bl	800c1fe <__retarget_lock_release_recursive>
 800bfee:	e7d9      	b.n	800bfa4 <_fflush_r+0xc>
 800bff0:	4b05      	ldr	r3, [pc, #20]	; (800c008 <_fflush_r+0x70>)
 800bff2:	429c      	cmp	r4, r3
 800bff4:	d101      	bne.n	800bffa <_fflush_r+0x62>
 800bff6:	68ac      	ldr	r4, [r5, #8]
 800bff8:	e7df      	b.n	800bfba <_fflush_r+0x22>
 800bffa:	4b04      	ldr	r3, [pc, #16]	; (800c00c <_fflush_r+0x74>)
 800bffc:	429c      	cmp	r4, r3
 800bffe:	bf08      	it	eq
 800c000:	68ec      	ldreq	r4, [r5, #12]
 800c002:	e7da      	b.n	800bfba <_fflush_r+0x22>
 800c004:	0800ccf0 	.word	0x0800ccf0
 800c008:	0800cd10 	.word	0x0800cd10
 800c00c:	0800ccd0 	.word	0x0800ccd0

0800c010 <std>:
 800c010:	2300      	movs	r3, #0
 800c012:	b510      	push	{r4, lr}
 800c014:	4604      	mov	r4, r0
 800c016:	e9c0 3300 	strd	r3, r3, [r0]
 800c01a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c01e:	6083      	str	r3, [r0, #8]
 800c020:	8181      	strh	r1, [r0, #12]
 800c022:	6643      	str	r3, [r0, #100]	; 0x64
 800c024:	81c2      	strh	r2, [r0, #14]
 800c026:	6183      	str	r3, [r0, #24]
 800c028:	4619      	mov	r1, r3
 800c02a:	2208      	movs	r2, #8
 800c02c:	305c      	adds	r0, #92	; 0x5c
 800c02e:	f7fd fb09 	bl	8009644 <memset>
 800c032:	4b05      	ldr	r3, [pc, #20]	; (800c048 <std+0x38>)
 800c034:	6263      	str	r3, [r4, #36]	; 0x24
 800c036:	4b05      	ldr	r3, [pc, #20]	; (800c04c <std+0x3c>)
 800c038:	62a3      	str	r3, [r4, #40]	; 0x28
 800c03a:	4b05      	ldr	r3, [pc, #20]	; (800c050 <std+0x40>)
 800c03c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c03e:	4b05      	ldr	r3, [pc, #20]	; (800c054 <std+0x44>)
 800c040:	6224      	str	r4, [r4, #32]
 800c042:	6323      	str	r3, [r4, #48]	; 0x30
 800c044:	bd10      	pop	{r4, pc}
 800c046:	bf00      	nop
 800c048:	0800c40d 	.word	0x0800c40d
 800c04c:	0800c42f 	.word	0x0800c42f
 800c050:	0800c467 	.word	0x0800c467
 800c054:	0800c48b 	.word	0x0800c48b

0800c058 <_cleanup_r>:
 800c058:	4901      	ldr	r1, [pc, #4]	; (800c060 <_cleanup_r+0x8>)
 800c05a:	f000 b8af 	b.w	800c1bc <_fwalk_reent>
 800c05e:	bf00      	nop
 800c060:	0800bf99 	.word	0x0800bf99

0800c064 <__sfmoreglue>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	1e4a      	subs	r2, r1, #1
 800c068:	2568      	movs	r5, #104	; 0x68
 800c06a:	4355      	muls	r5, r2
 800c06c:	460e      	mov	r6, r1
 800c06e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c072:	f7ff fb23 	bl	800b6bc <_malloc_r>
 800c076:	4604      	mov	r4, r0
 800c078:	b140      	cbz	r0, 800c08c <__sfmoreglue+0x28>
 800c07a:	2100      	movs	r1, #0
 800c07c:	e9c0 1600 	strd	r1, r6, [r0]
 800c080:	300c      	adds	r0, #12
 800c082:	60a0      	str	r0, [r4, #8]
 800c084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c088:	f7fd fadc 	bl	8009644 <memset>
 800c08c:	4620      	mov	r0, r4
 800c08e:	bd70      	pop	{r4, r5, r6, pc}

0800c090 <__sfp_lock_acquire>:
 800c090:	4801      	ldr	r0, [pc, #4]	; (800c098 <__sfp_lock_acquire+0x8>)
 800c092:	f000 b8b3 	b.w	800c1fc <__retarget_lock_acquire_recursive>
 800c096:	bf00      	nop
 800c098:	20001400 	.word	0x20001400

0800c09c <__sfp_lock_release>:
 800c09c:	4801      	ldr	r0, [pc, #4]	; (800c0a4 <__sfp_lock_release+0x8>)
 800c09e:	f000 b8ae 	b.w	800c1fe <__retarget_lock_release_recursive>
 800c0a2:	bf00      	nop
 800c0a4:	20001400 	.word	0x20001400

0800c0a8 <__sinit_lock_acquire>:
 800c0a8:	4801      	ldr	r0, [pc, #4]	; (800c0b0 <__sinit_lock_acquire+0x8>)
 800c0aa:	f000 b8a7 	b.w	800c1fc <__retarget_lock_acquire_recursive>
 800c0ae:	bf00      	nop
 800c0b0:	200013fb 	.word	0x200013fb

0800c0b4 <__sinit_lock_release>:
 800c0b4:	4801      	ldr	r0, [pc, #4]	; (800c0bc <__sinit_lock_release+0x8>)
 800c0b6:	f000 b8a2 	b.w	800c1fe <__retarget_lock_release_recursive>
 800c0ba:	bf00      	nop
 800c0bc:	200013fb 	.word	0x200013fb

0800c0c0 <__sinit>:
 800c0c0:	b510      	push	{r4, lr}
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	f7ff fff0 	bl	800c0a8 <__sinit_lock_acquire>
 800c0c8:	69a3      	ldr	r3, [r4, #24]
 800c0ca:	b11b      	cbz	r3, 800c0d4 <__sinit+0x14>
 800c0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0d0:	f7ff bff0 	b.w	800c0b4 <__sinit_lock_release>
 800c0d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0d8:	6523      	str	r3, [r4, #80]	; 0x50
 800c0da:	4b13      	ldr	r3, [pc, #76]	; (800c128 <__sinit+0x68>)
 800c0dc:	4a13      	ldr	r2, [pc, #76]	; (800c12c <__sinit+0x6c>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0e2:	42a3      	cmp	r3, r4
 800c0e4:	bf04      	itt	eq
 800c0e6:	2301      	moveq	r3, #1
 800c0e8:	61a3      	streq	r3, [r4, #24]
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f000 f820 	bl	800c130 <__sfp>
 800c0f0:	6060      	str	r0, [r4, #4]
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 f81c 	bl	800c130 <__sfp>
 800c0f8:	60a0      	str	r0, [r4, #8]
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f000 f818 	bl	800c130 <__sfp>
 800c100:	2200      	movs	r2, #0
 800c102:	60e0      	str	r0, [r4, #12]
 800c104:	2104      	movs	r1, #4
 800c106:	6860      	ldr	r0, [r4, #4]
 800c108:	f7ff ff82 	bl	800c010 <std>
 800c10c:	68a0      	ldr	r0, [r4, #8]
 800c10e:	2201      	movs	r2, #1
 800c110:	2109      	movs	r1, #9
 800c112:	f7ff ff7d 	bl	800c010 <std>
 800c116:	68e0      	ldr	r0, [r4, #12]
 800c118:	2202      	movs	r2, #2
 800c11a:	2112      	movs	r1, #18
 800c11c:	f7ff ff78 	bl	800c010 <std>
 800c120:	2301      	movs	r3, #1
 800c122:	61a3      	str	r3, [r4, #24]
 800c124:	e7d2      	b.n	800c0cc <__sinit+0xc>
 800c126:	bf00      	nop
 800c128:	0800c8f0 	.word	0x0800c8f0
 800c12c:	0800c059 	.word	0x0800c059

0800c130 <__sfp>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	4607      	mov	r7, r0
 800c134:	f7ff ffac 	bl	800c090 <__sfp_lock_acquire>
 800c138:	4b1e      	ldr	r3, [pc, #120]	; (800c1b4 <__sfp+0x84>)
 800c13a:	681e      	ldr	r6, [r3, #0]
 800c13c:	69b3      	ldr	r3, [r6, #24]
 800c13e:	b913      	cbnz	r3, 800c146 <__sfp+0x16>
 800c140:	4630      	mov	r0, r6
 800c142:	f7ff ffbd 	bl	800c0c0 <__sinit>
 800c146:	3648      	adds	r6, #72	; 0x48
 800c148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	d503      	bpl.n	800c158 <__sfp+0x28>
 800c150:	6833      	ldr	r3, [r6, #0]
 800c152:	b30b      	cbz	r3, 800c198 <__sfp+0x68>
 800c154:	6836      	ldr	r6, [r6, #0]
 800c156:	e7f7      	b.n	800c148 <__sfp+0x18>
 800c158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c15c:	b9d5      	cbnz	r5, 800c194 <__sfp+0x64>
 800c15e:	4b16      	ldr	r3, [pc, #88]	; (800c1b8 <__sfp+0x88>)
 800c160:	60e3      	str	r3, [r4, #12]
 800c162:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c166:	6665      	str	r5, [r4, #100]	; 0x64
 800c168:	f000 f847 	bl	800c1fa <__retarget_lock_init_recursive>
 800c16c:	f7ff ff96 	bl	800c09c <__sfp_lock_release>
 800c170:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c174:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c178:	6025      	str	r5, [r4, #0]
 800c17a:	61a5      	str	r5, [r4, #24]
 800c17c:	2208      	movs	r2, #8
 800c17e:	4629      	mov	r1, r5
 800c180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c184:	f7fd fa5e 	bl	8009644 <memset>
 800c188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c18c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c190:	4620      	mov	r0, r4
 800c192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c194:	3468      	adds	r4, #104	; 0x68
 800c196:	e7d9      	b.n	800c14c <__sfp+0x1c>
 800c198:	2104      	movs	r1, #4
 800c19a:	4638      	mov	r0, r7
 800c19c:	f7ff ff62 	bl	800c064 <__sfmoreglue>
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	6030      	str	r0, [r6, #0]
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d1d5      	bne.n	800c154 <__sfp+0x24>
 800c1a8:	f7ff ff78 	bl	800c09c <__sfp_lock_release>
 800c1ac:	230c      	movs	r3, #12
 800c1ae:	603b      	str	r3, [r7, #0]
 800c1b0:	e7ee      	b.n	800c190 <__sfp+0x60>
 800c1b2:	bf00      	nop
 800c1b4:	0800c8f0 	.word	0x0800c8f0
 800c1b8:	ffff0001 	.word	0xffff0001

0800c1bc <_fwalk_reent>:
 800c1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	4688      	mov	r8, r1
 800c1c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1c8:	2700      	movs	r7, #0
 800c1ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1ce:	f1b9 0901 	subs.w	r9, r9, #1
 800c1d2:	d505      	bpl.n	800c1e0 <_fwalk_reent+0x24>
 800c1d4:	6824      	ldr	r4, [r4, #0]
 800c1d6:	2c00      	cmp	r4, #0
 800c1d8:	d1f7      	bne.n	800c1ca <_fwalk_reent+0xe>
 800c1da:	4638      	mov	r0, r7
 800c1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e0:	89ab      	ldrh	r3, [r5, #12]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d907      	bls.n	800c1f6 <_fwalk_reent+0x3a>
 800c1e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	d003      	beq.n	800c1f6 <_fwalk_reent+0x3a>
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	47c0      	blx	r8
 800c1f4:	4307      	orrs	r7, r0
 800c1f6:	3568      	adds	r5, #104	; 0x68
 800c1f8:	e7e9      	b.n	800c1ce <_fwalk_reent+0x12>

0800c1fa <__retarget_lock_init_recursive>:
 800c1fa:	4770      	bx	lr

0800c1fc <__retarget_lock_acquire_recursive>:
 800c1fc:	4770      	bx	lr

0800c1fe <__retarget_lock_release_recursive>:
 800c1fe:	4770      	bx	lr

0800c200 <__swhatbuf_r>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	460e      	mov	r6, r1
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	2900      	cmp	r1, #0
 800c20a:	b096      	sub	sp, #88	; 0x58
 800c20c:	4614      	mov	r4, r2
 800c20e:	461d      	mov	r5, r3
 800c210:	da07      	bge.n	800c222 <__swhatbuf_r+0x22>
 800c212:	2300      	movs	r3, #0
 800c214:	602b      	str	r3, [r5, #0]
 800c216:	89b3      	ldrh	r3, [r6, #12]
 800c218:	061a      	lsls	r2, r3, #24
 800c21a:	d410      	bmi.n	800c23e <__swhatbuf_r+0x3e>
 800c21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c220:	e00e      	b.n	800c240 <__swhatbuf_r+0x40>
 800c222:	466a      	mov	r2, sp
 800c224:	f000 f964 	bl	800c4f0 <_fstat_r>
 800c228:	2800      	cmp	r0, #0
 800c22a:	dbf2      	blt.n	800c212 <__swhatbuf_r+0x12>
 800c22c:	9a01      	ldr	r2, [sp, #4]
 800c22e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c232:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c236:	425a      	negs	r2, r3
 800c238:	415a      	adcs	r2, r3
 800c23a:	602a      	str	r2, [r5, #0]
 800c23c:	e7ee      	b.n	800c21c <__swhatbuf_r+0x1c>
 800c23e:	2340      	movs	r3, #64	; 0x40
 800c240:	2000      	movs	r0, #0
 800c242:	6023      	str	r3, [r4, #0]
 800c244:	b016      	add	sp, #88	; 0x58
 800c246:	bd70      	pop	{r4, r5, r6, pc}

0800c248 <__smakebuf_r>:
 800c248:	898b      	ldrh	r3, [r1, #12]
 800c24a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c24c:	079d      	lsls	r5, r3, #30
 800c24e:	4606      	mov	r6, r0
 800c250:	460c      	mov	r4, r1
 800c252:	d507      	bpl.n	800c264 <__smakebuf_r+0x1c>
 800c254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	6123      	str	r3, [r4, #16]
 800c25c:	2301      	movs	r3, #1
 800c25e:	6163      	str	r3, [r4, #20]
 800c260:	b002      	add	sp, #8
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	ab01      	add	r3, sp, #4
 800c266:	466a      	mov	r2, sp
 800c268:	f7ff ffca 	bl	800c200 <__swhatbuf_r>
 800c26c:	9900      	ldr	r1, [sp, #0]
 800c26e:	4605      	mov	r5, r0
 800c270:	4630      	mov	r0, r6
 800c272:	f7ff fa23 	bl	800b6bc <_malloc_r>
 800c276:	b948      	cbnz	r0, 800c28c <__smakebuf_r+0x44>
 800c278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c27c:	059a      	lsls	r2, r3, #22
 800c27e:	d4ef      	bmi.n	800c260 <__smakebuf_r+0x18>
 800c280:	f023 0303 	bic.w	r3, r3, #3
 800c284:	f043 0302 	orr.w	r3, r3, #2
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	e7e3      	b.n	800c254 <__smakebuf_r+0xc>
 800c28c:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <__smakebuf_r+0x7c>)
 800c28e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	6020      	str	r0, [r4, #0]
 800c294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	9b00      	ldr	r3, [sp, #0]
 800c29c:	6163      	str	r3, [r4, #20]
 800c29e:	9b01      	ldr	r3, [sp, #4]
 800c2a0:	6120      	str	r0, [r4, #16]
 800c2a2:	b15b      	cbz	r3, 800c2bc <__smakebuf_r+0x74>
 800c2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f933 	bl	800c514 <_isatty_r>
 800c2ae:	b128      	cbz	r0, 800c2bc <__smakebuf_r+0x74>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f023 0303 	bic.w	r3, r3, #3
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	89a0      	ldrh	r0, [r4, #12]
 800c2be:	4305      	orrs	r5, r0
 800c2c0:	81a5      	strh	r5, [r4, #12]
 800c2c2:	e7cd      	b.n	800c260 <__smakebuf_r+0x18>
 800c2c4:	0800c059 	.word	0x0800c059

0800c2c8 <__ascii_mbtowc>:
 800c2c8:	b082      	sub	sp, #8
 800c2ca:	b901      	cbnz	r1, 800c2ce <__ascii_mbtowc+0x6>
 800c2cc:	a901      	add	r1, sp, #4
 800c2ce:	b142      	cbz	r2, 800c2e2 <__ascii_mbtowc+0x1a>
 800c2d0:	b14b      	cbz	r3, 800c2e6 <__ascii_mbtowc+0x1e>
 800c2d2:	7813      	ldrb	r3, [r2, #0]
 800c2d4:	600b      	str	r3, [r1, #0]
 800c2d6:	7812      	ldrb	r2, [r2, #0]
 800c2d8:	1e10      	subs	r0, r2, #0
 800c2da:	bf18      	it	ne
 800c2dc:	2001      	movne	r0, #1
 800c2de:	b002      	add	sp, #8
 800c2e0:	4770      	bx	lr
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	e7fb      	b.n	800c2de <__ascii_mbtowc+0x16>
 800c2e6:	f06f 0001 	mvn.w	r0, #1
 800c2ea:	e7f8      	b.n	800c2de <__ascii_mbtowc+0x16>

0800c2ec <memmove>:
 800c2ec:	4288      	cmp	r0, r1
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	eb01 0402 	add.w	r4, r1, r2
 800c2f4:	d902      	bls.n	800c2fc <memmove+0x10>
 800c2f6:	4284      	cmp	r4, r0
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	d807      	bhi.n	800c30c <memmove+0x20>
 800c2fc:	1e43      	subs	r3, r0, #1
 800c2fe:	42a1      	cmp	r1, r4
 800c300:	d008      	beq.n	800c314 <memmove+0x28>
 800c302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c30a:	e7f8      	b.n	800c2fe <memmove+0x12>
 800c30c:	4402      	add	r2, r0
 800c30e:	4601      	mov	r1, r0
 800c310:	428a      	cmp	r2, r1
 800c312:	d100      	bne.n	800c316 <memmove+0x2a>
 800c314:	bd10      	pop	{r4, pc}
 800c316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c31a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c31e:	e7f7      	b.n	800c310 <memmove+0x24>

0800c320 <__malloc_lock>:
 800c320:	4801      	ldr	r0, [pc, #4]	; (800c328 <__malloc_lock+0x8>)
 800c322:	f7ff bf6b 	b.w	800c1fc <__retarget_lock_acquire_recursive>
 800c326:	bf00      	nop
 800c328:	200013fc 	.word	0x200013fc

0800c32c <__malloc_unlock>:
 800c32c:	4801      	ldr	r0, [pc, #4]	; (800c334 <__malloc_unlock+0x8>)
 800c32e:	f7ff bf66 	b.w	800c1fe <__retarget_lock_release_recursive>
 800c332:	bf00      	nop
 800c334:	200013fc 	.word	0x200013fc

0800c338 <_realloc_r>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	4607      	mov	r7, r0
 800c33c:	4614      	mov	r4, r2
 800c33e:	460e      	mov	r6, r1
 800c340:	b921      	cbnz	r1, 800c34c <_realloc_r+0x14>
 800c342:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c346:	4611      	mov	r1, r2
 800c348:	f7ff b9b8 	b.w	800b6bc <_malloc_r>
 800c34c:	b922      	cbnz	r2, 800c358 <_realloc_r+0x20>
 800c34e:	f7ff f965 	bl	800b61c <_free_r>
 800c352:	4625      	mov	r5, r4
 800c354:	4628      	mov	r0, r5
 800c356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c358:	f000 f8fe 	bl	800c558 <_malloc_usable_size_r>
 800c35c:	42a0      	cmp	r0, r4
 800c35e:	d20f      	bcs.n	800c380 <_realloc_r+0x48>
 800c360:	4621      	mov	r1, r4
 800c362:	4638      	mov	r0, r7
 800c364:	f7ff f9aa 	bl	800b6bc <_malloc_r>
 800c368:	4605      	mov	r5, r0
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d0f2      	beq.n	800c354 <_realloc_r+0x1c>
 800c36e:	4631      	mov	r1, r6
 800c370:	4622      	mov	r2, r4
 800c372:	f7fe fdb7 	bl	800aee4 <memcpy>
 800c376:	4631      	mov	r1, r6
 800c378:	4638      	mov	r0, r7
 800c37a:	f7ff f94f 	bl	800b61c <_free_r>
 800c37e:	e7e9      	b.n	800c354 <_realloc_r+0x1c>
 800c380:	4635      	mov	r5, r6
 800c382:	e7e7      	b.n	800c354 <_realloc_r+0x1c>

0800c384 <_raise_r>:
 800c384:	291f      	cmp	r1, #31
 800c386:	b538      	push	{r3, r4, r5, lr}
 800c388:	4604      	mov	r4, r0
 800c38a:	460d      	mov	r5, r1
 800c38c:	d904      	bls.n	800c398 <_raise_r+0x14>
 800c38e:	2316      	movs	r3, #22
 800c390:	6003      	str	r3, [r0, #0]
 800c392:	f04f 30ff 	mov.w	r0, #4294967295
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c39a:	b112      	cbz	r2, 800c3a2 <_raise_r+0x1e>
 800c39c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3a0:	b94b      	cbnz	r3, 800c3b6 <_raise_r+0x32>
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f000 f830 	bl	800c408 <_getpid_r>
 800c3a8:	462a      	mov	r2, r5
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3b2:	f000 b817 	b.w	800c3e4 <_kill_r>
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d00a      	beq.n	800c3d0 <_raise_r+0x4c>
 800c3ba:	1c59      	adds	r1, r3, #1
 800c3bc:	d103      	bne.n	800c3c6 <_raise_r+0x42>
 800c3be:	2316      	movs	r3, #22
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	e7e7      	b.n	800c396 <_raise_r+0x12>
 800c3c6:	2400      	movs	r4, #0
 800c3c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	4798      	blx	r3
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e7e0      	b.n	800c396 <_raise_r+0x12>

0800c3d4 <raise>:
 800c3d4:	4b02      	ldr	r3, [pc, #8]	; (800c3e0 <raise+0xc>)
 800c3d6:	4601      	mov	r1, r0
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	f7ff bfd3 	b.w	800c384 <_raise_r>
 800c3de:	bf00      	nop
 800c3e0:	20000110 	.word	0x20000110

0800c3e4 <_kill_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4d07      	ldr	r5, [pc, #28]	; (800c404 <_kill_r+0x20>)
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	602b      	str	r3, [r5, #0]
 800c3f2:	f7f7 ff25 	bl	8004240 <_kill>
 800c3f6:	1c43      	adds	r3, r0, #1
 800c3f8:	d102      	bne.n	800c400 <_kill_r+0x1c>
 800c3fa:	682b      	ldr	r3, [r5, #0]
 800c3fc:	b103      	cbz	r3, 800c400 <_kill_r+0x1c>
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	bd38      	pop	{r3, r4, r5, pc}
 800c402:	bf00      	nop
 800c404:	20001404 	.word	0x20001404

0800c408 <_getpid_r>:
 800c408:	f7f7 bf12 	b.w	8004230 <_getpid>

0800c40c <__sread>:
 800c40c:	b510      	push	{r4, lr}
 800c40e:	460c      	mov	r4, r1
 800c410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c414:	f000 f8a8 	bl	800c568 <_read_r>
 800c418:	2800      	cmp	r0, #0
 800c41a:	bfab      	itete	ge
 800c41c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c41e:	89a3      	ldrhlt	r3, [r4, #12]
 800c420:	181b      	addge	r3, r3, r0
 800c422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c426:	bfac      	ite	ge
 800c428:	6563      	strge	r3, [r4, #84]	; 0x54
 800c42a:	81a3      	strhlt	r3, [r4, #12]
 800c42c:	bd10      	pop	{r4, pc}

0800c42e <__swrite>:
 800c42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c432:	461f      	mov	r7, r3
 800c434:	898b      	ldrh	r3, [r1, #12]
 800c436:	05db      	lsls	r3, r3, #23
 800c438:	4605      	mov	r5, r0
 800c43a:	460c      	mov	r4, r1
 800c43c:	4616      	mov	r6, r2
 800c43e:	d505      	bpl.n	800c44c <__swrite+0x1e>
 800c440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c444:	2302      	movs	r3, #2
 800c446:	2200      	movs	r2, #0
 800c448:	f000 f874 	bl	800c534 <_lseek_r>
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	4632      	mov	r2, r6
 800c45a:	463b      	mov	r3, r7
 800c45c:	4628      	mov	r0, r5
 800c45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c462:	f000 b823 	b.w	800c4ac <_write_r>

0800c466 <__sseek>:
 800c466:	b510      	push	{r4, lr}
 800c468:	460c      	mov	r4, r1
 800c46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c46e:	f000 f861 	bl	800c534 <_lseek_r>
 800c472:	1c43      	adds	r3, r0, #1
 800c474:	89a3      	ldrh	r3, [r4, #12]
 800c476:	bf15      	itete	ne
 800c478:	6560      	strne	r0, [r4, #84]	; 0x54
 800c47a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c47e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c482:	81a3      	strheq	r3, [r4, #12]
 800c484:	bf18      	it	ne
 800c486:	81a3      	strhne	r3, [r4, #12]
 800c488:	bd10      	pop	{r4, pc}

0800c48a <__sclose>:
 800c48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48e:	f000 b81f 	b.w	800c4d0 <_close_r>

0800c492 <__ascii_wctomb>:
 800c492:	b149      	cbz	r1, 800c4a8 <__ascii_wctomb+0x16>
 800c494:	2aff      	cmp	r2, #255	; 0xff
 800c496:	bf85      	ittet	hi
 800c498:	238a      	movhi	r3, #138	; 0x8a
 800c49a:	6003      	strhi	r3, [r0, #0]
 800c49c:	700a      	strbls	r2, [r1, #0]
 800c49e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4a2:	bf98      	it	ls
 800c4a4:	2001      	movls	r0, #1
 800c4a6:	4770      	bx	lr
 800c4a8:	4608      	mov	r0, r1
 800c4aa:	4770      	bx	lr

0800c4ac <_write_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4d07      	ldr	r5, [pc, #28]	; (800c4cc <_write_r+0x20>)
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	4608      	mov	r0, r1
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	602a      	str	r2, [r5, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f7f7 fef7 	bl	80042ae <_write>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d102      	bne.n	800c4ca <_write_r+0x1e>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b103      	cbz	r3, 800c4ca <_write_r+0x1e>
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	20001404 	.word	0x20001404

0800c4d0 <_close_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4d06      	ldr	r5, [pc, #24]	; (800c4ec <_close_r+0x1c>)
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	4608      	mov	r0, r1
 800c4da:	602b      	str	r3, [r5, #0]
 800c4dc:	f7f7 ff03 	bl	80042e6 <_close>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d102      	bne.n	800c4ea <_close_r+0x1a>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	b103      	cbz	r3, 800c4ea <_close_r+0x1a>
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	20001404 	.word	0x20001404

0800c4f0 <_fstat_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4d07      	ldr	r5, [pc, #28]	; (800c510 <_fstat_r+0x20>)
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	4608      	mov	r0, r1
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	602b      	str	r3, [r5, #0]
 800c4fe:	f7f7 fefe 	bl	80042fe <_fstat>
 800c502:	1c43      	adds	r3, r0, #1
 800c504:	d102      	bne.n	800c50c <_fstat_r+0x1c>
 800c506:	682b      	ldr	r3, [r5, #0]
 800c508:	b103      	cbz	r3, 800c50c <_fstat_r+0x1c>
 800c50a:	6023      	str	r3, [r4, #0]
 800c50c:	bd38      	pop	{r3, r4, r5, pc}
 800c50e:	bf00      	nop
 800c510:	20001404 	.word	0x20001404

0800c514 <_isatty_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d06      	ldr	r5, [pc, #24]	; (800c530 <_isatty_r+0x1c>)
 800c518:	2300      	movs	r3, #0
 800c51a:	4604      	mov	r4, r0
 800c51c:	4608      	mov	r0, r1
 800c51e:	602b      	str	r3, [r5, #0]
 800c520:	f7f7 fefd 	bl	800431e <_isatty>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_isatty_r+0x1a>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_isatty_r+0x1a>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	20001404 	.word	0x20001404

0800c534 <_lseek_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4d07      	ldr	r5, [pc, #28]	; (800c554 <_lseek_r+0x20>)
 800c538:	4604      	mov	r4, r0
 800c53a:	4608      	mov	r0, r1
 800c53c:	4611      	mov	r1, r2
 800c53e:	2200      	movs	r2, #0
 800c540:	602a      	str	r2, [r5, #0]
 800c542:	461a      	mov	r2, r3
 800c544:	f7f7 fef6 	bl	8004334 <_lseek>
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d102      	bne.n	800c552 <_lseek_r+0x1e>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	b103      	cbz	r3, 800c552 <_lseek_r+0x1e>
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	bd38      	pop	{r3, r4, r5, pc}
 800c554:	20001404 	.word	0x20001404

0800c558 <_malloc_usable_size_r>:
 800c558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c55c:	1f18      	subs	r0, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	bfbc      	itt	lt
 800c562:	580b      	ldrlt	r3, [r1, r0]
 800c564:	18c0      	addlt	r0, r0, r3
 800c566:	4770      	bx	lr

0800c568 <_read_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d07      	ldr	r5, [pc, #28]	; (800c588 <_read_r+0x20>)
 800c56c:	4604      	mov	r4, r0
 800c56e:	4608      	mov	r0, r1
 800c570:	4611      	mov	r1, r2
 800c572:	2200      	movs	r2, #0
 800c574:	602a      	str	r2, [r5, #0]
 800c576:	461a      	mov	r2, r3
 800c578:	f7f7 fe7c 	bl	8004274 <_read>
 800c57c:	1c43      	adds	r3, r0, #1
 800c57e:	d102      	bne.n	800c586 <_read_r+0x1e>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	b103      	cbz	r3, 800c586 <_read_r+0x1e>
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	bd38      	pop	{r3, r4, r5, pc}
 800c588:	20001404 	.word	0x20001404

0800c58c <_init>:
 800c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58e:	bf00      	nop
 800c590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c592:	bc08      	pop	{r3}
 800c594:	469e      	mov	lr, r3
 800c596:	4770      	bx	lr

0800c598 <_fini>:
 800c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59a:	bf00      	nop
 800c59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c59e:	bc08      	pop	{r3}
 800c5a0:	469e      	mov	lr, r3
 800c5a2:	4770      	bx	lr
