
KTTV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006850  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef8  08006ef8  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08006ef8  08006ef8  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ef8  08006ef8  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08006f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc0  20000120  08007020  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce0  08007020  00020ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ceb  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a12  00000000  00000000  00030e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00033850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00034460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7fb  00000000  00000000  00034f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef87  00000000  00000000  00054793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5540  00000000  00000000  0006371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118c5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  00118cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069c8 	.word	0x080069c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	080069c8 	.word	0x080069c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HTTP_configParams>:
  * @param  None.
  * @retval RET_FAIL if configuration failed.
  * 		RET_OK if configuration successful.
  */
STATUS HTTP_configParams(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	Sim_send("AT+CGDCONT=cid,\"ip\",\"APN\"\r",strlen("AT+CGDCONT=cid,\"ip\",\"APN\"\r"));
 8000284:	211a      	movs	r1, #26
 8000286:	482f      	ldr	r0, [pc, #188]	; (8000344 <HTTP_configParams+0xc4>)
 8000288:	f000 f9a8 	bl	80005dc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 800028c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000290:	2102      	movs	r1, #2
 8000292:	482d      	ldr	r0, [pc, #180]	; (8000348 <HTTP_configParams+0xc8>)
 8000294:	f000 fa06 	bl	80006a4 <Sim_checkResponseWith>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b2b      	ldr	r3, [pc, #172]	; (800034c <HTTP_configParams+0xcc>)
 800029e:	701a      	strb	r2, [r3, #0]
	__NOP();
 80002a0:	bf00      	nop
	if(ret == RET_OK)
 80002a2:	4b2a      	ldr	r3, [pc, #168]	; (800034c <HTTP_configParams+0xcc>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d147      	bne.n	800033a <HTTP_configParams+0xba>
	{
		Sim_send("AT+CGACT=1,cid\r",strlen("AT+CGACT=1,cid\r"));
 80002aa:	210f      	movs	r1, #15
 80002ac:	4828      	ldr	r0, [pc, #160]	; (8000350 <HTTP_configParams+0xd0>)
 80002ae:	f000 f995 	bl	80005dc <Sim_send>
		ret = Sim_checkResponseWith("OK", 2, 5000);
 80002b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80002b6:	2102      	movs	r1, #2
 80002b8:	4823      	ldr	r0, [pc, #140]	; (8000348 <HTTP_configParams+0xc8>)
 80002ba:	f000 f9f3 	bl	80006a4 <Sim_checkResponseWith>
 80002be:	4603      	mov	r3, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b22      	ldr	r3, [pc, #136]	; (800034c <HTTP_configParams+0xcc>)
 80002c4:	701a      	strb	r2, [r3, #0]
		__NOP();
 80002c6:	bf00      	nop
		if(ret == RET_OK)
 80002c8:	4b20      	ldr	r3, [pc, #128]	; (800034c <HTTP_configParams+0xcc>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d134      	bne.n	800033a <HTTP_configParams+0xba>
		{
			Sim_send("AT+HTTPINIT\r",strlen("AT+HTTPINIT\r"));
 80002d0:	210c      	movs	r1, #12
 80002d2:	4820      	ldr	r0, [pc, #128]	; (8000354 <HTTP_configParams+0xd4>)
 80002d4:	f000 f982 	bl	80005dc <Sim_send>
			ret = Sim_checkResponseWith("OK", 2, 5000);
 80002d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80002dc:	2102      	movs	r1, #2
 80002de:	481a      	ldr	r0, [pc, #104]	; (8000348 <HTTP_configParams+0xc8>)
 80002e0:	f000 f9e0 	bl	80006a4 <Sim_checkResponseWith>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <HTTP_configParams+0xcc>)
 80002ea:	701a      	strb	r2, [r3, #0]
			__NOP();
 80002ec:	bf00      	nop
			if(ret == RET_FAIL)
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <HTTP_configParams+0xcc>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d121      	bne.n	800033a <HTTP_configParams+0xba>
			{
				Sim_send("AT+HTTPTERM\r",strlen("AT+HTTPTERM\r"));
 80002f6:	210c      	movs	r1, #12
 80002f8:	4817      	ldr	r0, [pc, #92]	; (8000358 <HTTP_configParams+0xd8>)
 80002fa:	f000 f96f 	bl	80005dc <Sim_send>
				ret = Sim_checkResponseWith("OK", 2, 5000);
 80002fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000302:	2102      	movs	r1, #2
 8000304:	4810      	ldr	r0, [pc, #64]	; (8000348 <HTTP_configParams+0xc8>)
 8000306:	f000 f9cd 	bl	80006a4 <Sim_checkResponseWith>
 800030a:	4603      	mov	r3, r0
 800030c:	461a      	mov	r2, r3
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HTTP_configParams+0xcc>)
 8000310:	701a      	strb	r2, [r3, #0]
				__NOP();
 8000312:	bf00      	nop
				if(ret == RET_OK)
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <HTTP_configParams+0xcc>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d10e      	bne.n	800033a <HTTP_configParams+0xba>
				{
					Sim_send("AT+HTTPINIT\r",strlen("AT+HTTPINIT\r"));
 800031c:	210c      	movs	r1, #12
 800031e:	480d      	ldr	r0, [pc, #52]	; (8000354 <HTTP_configParams+0xd4>)
 8000320:	f000 f95c 	bl	80005dc <Sim_send>
					ret = Sim_checkResponseWith("OK", 2, 5000);
 8000324:	f241 3288 	movw	r2, #5000	; 0x1388
 8000328:	2102      	movs	r1, #2
 800032a:	4807      	ldr	r0, [pc, #28]	; (8000348 <HTTP_configParams+0xc8>)
 800032c:	f000 f9ba 	bl	80006a4 <Sim_checkResponseWith>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <HTTP_configParams+0xcc>)
 8000336:	701a      	strb	r2, [r3, #0]
					__NOP();
 8000338:	bf00      	nop
				}
			}
		}
	}
	return ret;
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <HTTP_configParams+0xcc>)
 800033c:	781b      	ldrb	r3, [r3, #0]
}
 800033e:	4618      	mov	r0, r3
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	080069e0 	.word	0x080069e0
 8000348:	080069fc 	.word	0x080069fc
 800034c:	20000b64 	.word	0x20000b64
 8000350:	08006a00 	.word	0x08006a00
 8000354:	08006a10 	.word	0x08006a10
 8000358:	08006a20 	.word	0x08006a20

0800035c <HTTP_sendGETRequest>:
  * @param  url is URL to access.
  * @retval RET_OK if Server responds to code 200.
  * 		RET_FAIL if otherwise.
  */
STATUS HTTP_sendGETRequest(char* url)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b09c      	sub	sp, #112	; 0x70
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	char cmd[100] = {0};
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	2260      	movs	r2, #96	; 0x60
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f005 f883 	bl	800547c <memset>
	sprintf(cmd,"AT+HTTPPARA=\"URL\",\"%s\"\r",url);
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	4926      	ldr	r1, [pc, #152]	; (8000418 <HTTP_sendGETRequest+0xbc>)
 800037e:	4618      	mov	r0, r3
 8000380:	f005 f884 	bl	800548c <siprintf>
	Sim_send(cmd,strlen(cmd));
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff21 	bl	80001d0 <strlen>
 800038e:	4603      	mov	r3, r0
 8000390:	b29a      	uxth	r2, r3
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	4611      	mov	r1, r2
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f91f 	bl	80005dc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 800039e:	f241 3288 	movw	r2, #5000	; 0x1388
 80003a2:	2102      	movs	r1, #2
 80003a4:	481d      	ldr	r0, [pc, #116]	; (800041c <HTTP_sendGETRequest+0xc0>)
 80003a6:	f000 f97d 	bl	80006a4 <Sim_checkResponseWith>
 80003aa:	4603      	mov	r3, r0
 80003ac:	461a      	mov	r2, r3
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <HTTP_sendGETRequest+0xc4>)
 80003b0:	701a      	strb	r2, [r3, #0]
	__NOP();
 80003b2:	bf00      	nop
	if(ret == RET_OK)
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <HTTP_sendGETRequest+0xc4>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d126      	bne.n	800040a <HTTP_sendGETRequest+0xae>
	{
		Sim_send("AT+HTTPACTION=0\r",16);
 80003bc:	2110      	movs	r1, #16
 80003be:	4819      	ldr	r0, [pc, #100]	; (8000424 <HTTP_sendGETRequest+0xc8>)
 80003c0:	f000 f90c 	bl	80005dc <Sim_send>
		ret = Sim_checkResponseWith("+HTTPACTION: 0,200", 2, 30000);
 80003c4:	f247 5230 	movw	r2, #30000	; 0x7530
 80003c8:	2102      	movs	r1, #2
 80003ca:	4817      	ldr	r0, [pc, #92]	; (8000428 <HTTP_sendGETRequest+0xcc>)
 80003cc:	f000 f96a 	bl	80006a4 <Sim_checkResponseWith>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HTTP_sendGETRequest+0xc4>)
 80003d6:	701a      	strb	r2, [r3, #0]
		__NOP();
 80003d8:	bf00      	nop
		if(ret == RET_OK)
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <HTTP_sendGETRequest+0xc4>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d113      	bne.n	800040a <HTTP_sendGETRequest+0xae>
		{
			Sim_send("AT+HTTPHEAD\r",12);
 80003e2:	210c      	movs	r1, #12
 80003e4:	4811      	ldr	r0, [pc, #68]	; (800042c <HTTP_sendGETRequest+0xd0>)
 80003e6:	f000 f8f9 	bl	80005dc <Sim_send>
			ret = Sim_checkResponseWith("200 OK", 3, 60000);
 80003ea:	f64e 2260 	movw	r2, #60000	; 0xea60
 80003ee:	2103      	movs	r1, #3
 80003f0:	480f      	ldr	r0, [pc, #60]	; (8000430 <HTTP_sendGETRequest+0xd4>)
 80003f2:	f000 f957 	bl	80006a4 <Sim_checkResponseWith>
 80003f6:	4603      	mov	r3, r0
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <HTTP_sendGETRequest+0xc4>)
 80003fc:	701a      	strb	r2, [r3, #0]
			__NOP();
 80003fe:	bf00      	nop
			if(ret == RET_OK)
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <HTTP_sendGETRequest+0xc4>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d100      	bne.n	800040a <HTTP_sendGETRequest+0xae>
			{
				__NOP();
 8000408:	bf00      	nop
			}
		}
	}
	return ret;
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HTTP_sendGETRequest+0xc4>)
 800040c:	781b      	ldrb	r3, [r3, #0]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3770      	adds	r7, #112	; 0x70
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	08006a30 	.word	0x08006a30
 800041c:	080069fc 	.word	0x080069fc
 8000420:	20000b64 	.word	0x20000b64
 8000424:	08006a48 	.word	0x08006a48
 8000428:	08006a5c 	.word	0x08006a5c
 800042c:	08006a70 	.word	0x08006a70
 8000430:	08006a80 	.word	0x08006a80

08000434 <HTTP_readGETResponse>:
  * @param  datatoget is used to store response data from the server.
  * @retval RET_OK if read success.
  * 		RET_FAIL if read fail.
  */
STATUS HTTP_readGETResponse(char* datatoget)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	deleteBuffer(datatoget, strlen(datatoget));
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff fec7 	bl	80001d0 <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f000 f886 	bl	8000558 <deleteBuffer>
	Sim_send("AT+HTTPHEAD\r",strlen("AT+HTTPHEAD\r"));
 800044c:	210c      	movs	r1, #12
 800044e:	481d      	ldr	r0, [pc, #116]	; (80004c4 <HTTP_readGETResponse+0x90>)
 8000450:	f000 f8c4 	bl	80005dc <Sim_send>
	ret = Sim_checkResponseWith("\r\nOK\r\n", 4, 60000);
 8000454:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000458:	2104      	movs	r1, #4
 800045a:	481b      	ldr	r0, [pc, #108]	; (80004c8 <HTTP_readGETResponse+0x94>)
 800045c:	f000 f922 	bl	80006a4 <Sim_checkResponseWith>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <HTTP_readGETResponse+0x98>)
 8000466:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000468:	bf00      	nop
	if(ret == RET_OK)
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <HTTP_readGETResponse+0x98>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d122      	bne.n	80004b8 <HTTP_readGETResponse+0x84>
	{
		char* ptr = NULL;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
		ptr = strstr((char*)Sim_Rxdata,"HTTP/");
 8000476:	4916      	ldr	r1, [pc, #88]	; (80004d0 <HTTP_readGETResponse+0x9c>)
 8000478:	4816      	ldr	r0, [pc, #88]	; (80004d4 <HTTP_readGETResponse+0xa0>)
 800047a:	f005 f82f 	bl	80054dc <strstr>
 800047e:	6178      	str	r0, [r7, #20]
		if(ptr != NULL)
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d015      	beq.n	80004b2 <HTTP_readGETResponse+0x7e>
		{
			char* ptr1 = NULL;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
			ptr1 = strstr((char*)Sim_Rxdata,"\r\nOK");
 800048a:	4913      	ldr	r1, [pc, #76]	; (80004d8 <HTTP_readGETResponse+0xa4>)
 800048c:	4811      	ldr	r0, [pc, #68]	; (80004d4 <HTTP_readGETResponse+0xa0>)
 800048e:	f005 f825 	bl	80054dc <strstr>
 8000492:	6138      	str	r0, [r7, #16]
			uint16_t startpos = ptr - (char*)Sim_Rxdata;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	4a0f      	ldr	r2, [pc, #60]	; (80004d4 <HTTP_readGETResponse+0xa0>)
 8000498:	1a9b      	subs	r3, r3, r2
 800049a:	81fb      	strh	r3, [r7, #14]
			uint16_t endpos = ptr1 - (char*)Sim_Rxdata;
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <HTTP_readGETResponse+0xa0>)
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	81bb      	strh	r3, [r7, #12]
			subString((char*)Sim_Rxdata, datatoget, startpos, endpos);
 80004a4:	89fa      	ldrh	r2, [r7, #14]
 80004a6:	89bb      	ldrh	r3, [r7, #12]
 80004a8:	6879      	ldr	r1, [r7, #4]
 80004aa:	480a      	ldr	r0, [pc, #40]	; (80004d4 <HTTP_readGETResponse+0xa0>)
 80004ac:	f000 f86f 	bl	800058e <subString>
 80004b0:	e002      	b.n	80004b8 <HTTP_readGETResponse+0x84>
		}
		else
		{
			ret = RET_FAIL;
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <HTTP_readGETResponse+0x98>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
		}
	}
	return ret;
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <HTTP_readGETResponse+0x98>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	08006a70 	.word	0x08006a70
 80004c8:	08006a88 	.word	0x08006a88
 80004cc:	20000b64 	.word	0x20000b64
 80004d0:	08006a90 	.word	0x08006a90
 80004d4:	20000528 	.word	0x20000528
 80004d8:	08006a98 	.word	0x08006a98

080004dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == SIM_USART)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <HAL_UART_RxCpltCallback+0x60>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d121      	bne.n	8000532 <HAL_UART_RxCpltCallback+0x56>
	{
		if(Sim_Count == MAX_RECVBUF_LEN)
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <HAL_UART_RxCpltCallback+0x64>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004f8:	d102      	bne.n	8000500 <HAL_UART_RxCpltCallback+0x24>
		{
			Sim_Count = 0;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <HAL_UART_RxCpltCallback+0x64>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	801a      	strh	r2, [r3, #0]
		}
		Sim_Rxdata[Sim_Count++] = Sim_Rxbyte[0];
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_UART_RxCpltCallback+0x64>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	b291      	uxth	r1, r2
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <HAL_UART_RxCpltCallback+0x64>)
 800050c:	8011      	strh	r1, [r2, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_UART_RxCpltCallback+0x68>)
 8000512:	7819      	ldrb	r1, [r3, #0]
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_UART_RxCpltCallback+0x6c>)
 8000516:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	490a      	ldr	r1, [pc, #40]	; (8000544 <HAL_UART_RxCpltCallback+0x68>)
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_UART_RxCpltCallback+0x70>)
 800051e:	f004 f833 	bl	8004588 <HAL_UART_Receive_IT>
		Sim_UartTime = HAL_GetTick();
 8000522:	f001 fc03 	bl	8001d2c <HAL_GetTick>
 8000526:	4603      	mov	r3, r0
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <HAL_UART_RxCpltCallback+0x74>)
 800052a:	6013      	str	r3, [r2, #0]
		isSimResponse = true;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_UART_RxCpltCallback+0x78>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
	}
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40004400 	.word	0x40004400
 8000540:	20000910 	.word	0x20000910
 8000544:	20000524 	.word	0x20000524
 8000548:	20000528 	.word	0x20000528
 800054c:	20000c48 	.word	0x20000c48
 8000550:	20000914 	.word	0x20000914
 8000554:	20000912 	.word	0x20000912

08000558 <deleteBuffer>:
  * @param  buf which buffer needs to be deleted
  * @param  len which length of buffer to be deleted.
  * @retval None
  */
void deleteBuffer(char* buf, uint32_t len)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < len; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e007      	b.n	8000578 <deleteBuffer+0x20>
	{
		buf[i] = '\0';
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	4413      	add	r3, r2
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d3f3      	bcc.n	8000568 <deleteBuffer+0x10>
	}
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <subString>:
  * @param  startpos is the index to start the substring at.
  * @param  endpos is the index to end the substring before.
  * @retval None
  */
void subString(char* maindata, char* subdata, uint32_t startpos, uint32_t endpos)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
 800059a:	603b      	str	r3, [r7, #0]
	if(endpos < strlen(maindata))
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f7ff fe17 	bl	80001d0 <strlen>
 80005a2:	4602      	mov	r2, r0
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d213      	bcs.n	80005d2 <subString+0x44>
	{
		for(uint32_t i = startpos; i < endpos; i++)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e00c      	b.n	80005ca <subString+0x3c>
		{
			subdata[i - startpos] = maindata[i];
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	441a      	add	r2, r3
 80005b6:	6979      	ldr	r1, [r7, #20]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1acb      	subs	r3, r1, r3
 80005bc:	68b9      	ldr	r1, [r7, #8]
 80005be:	440b      	add	r3, r1
 80005c0:	7812      	ldrb	r2, [r2, #0]
 80005c2:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = startpos; i < endpos; i++)
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	3301      	adds	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d3ee      	bcc.n	80005b0 <subString+0x22>
		}
	}
}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <Sim_send>:
  * @param  command which is AT commands or data.
  * @param  len which is length of AT commands or data.
  * @retval None
  */
STATUS Sim_send(char *command, uint16_t len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	807b      	strh	r3, [r7, #2]
	deleteBuffer((char*)Sim_Rxdata, strlen((char*)Sim_Rxdata));
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <Sim_send+0x44>)
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4619      	mov	r1, r3
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <Sim_send+0x44>)
 80005f4:	f7ff ffb0 	bl	8000558 <deleteBuffer>
	Sim_Count = 0;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <Sim_send+0x48>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	801a      	strh	r2, [r3, #0]
	if(HAL_UART_Transmit(&SIM_UART, (uint8_t*) command, len, MAX_SEND_TIME) == HAL_OK)
 80005fe:	887a      	ldrh	r2, [r7, #2]
 8000600:	f44f 7359 	mov.w	r3, #868	; 0x364
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <Sim_send+0x4c>)
 8000608:	f003 ff2a 	bl	8004460 <HAL_UART_Transmit>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <Sim_send+0x3a>
	{
		return RET_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <Sim_send+0x3c>
	}
	return RET_TIMEOUT;
 8000616:	2302      	movs	r3, #2
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000528 	.word	0x20000528
 8000624:	20000910 	.word	0x20000910
 8000628:	20000c48 	.word	0x20000c48

0800062c <Sim_recv>:
  * @param  timeout which is maximum waiting time for receiving data.
  * @retval RET_TIMEOUT if no response data.
  * 		RET_OK if received a string of data.
  */
STATUS Sim_recv(uint32_t timeout)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8000634:	f001 fb7a 	bl	8001d2c <HAL_GetTick>
 8000638:	60f8      	str	r0, [r7, #12]
	while(isSimResponse == false)
 800063a:	e009      	b.n	8000650 <Sim_recv+0x24>
	{
		if(HAL_GetTick() - time > timeout)
 800063c:	f001 fb76 	bl	8001d2c <HAL_GetTick>
 8000640:	4602      	mov	r2, r0
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	d201      	bcs.n	8000650 <Sim_recv+0x24>
		{
			return RET_TIMEOUT;
 800064c:	2302      	movs	r3, #2
 800064e:	e020      	b.n	8000692 <Sim_recv+0x66>
	while(isSimResponse == false)
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <Sim_recv+0x70>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f083 0301 	eor.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1ed      	bne.n	800063c <Sim_recv+0x10>
		}
	}
	HAL_Delay(5);
 8000660:	2005      	movs	r0, #5
 8000662:	f001 fb6f 	bl	8001d44 <HAL_Delay>
	uint32_t time1 = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		time1 = HAL_GetTick();
 800066a:	f001 fb5f 	bl	8001d2c <HAL_GetTick>
 800066e:	60b8      	str	r0, [r7, #8]
		if((time1 - Sim_UartTime) > 100)
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <Sim_recv+0x74>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	2b64      	cmp	r3, #100	; 0x64
 800067a:	d906      	bls.n	800068a <Sim_recv+0x5e>
		{
			__NOP();
 800067c:	bf00      	nop
			break;
 800067e:	bf00      	nop
		}
		HAL_Delay(1);
	}
	isSimResponse = false;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <Sim_recv+0x70>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e003      	b.n	8000692 <Sim_recv+0x66>
		HAL_Delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f001 fb5a 	bl	8001d44 <HAL_Delay>
		time1 = HAL_GetTick();
 8000690:	e7eb      	b.n	800066a <Sim_recv+0x3e>
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000912 	.word	0x20000912
 80006a0:	20000914 	.word	0x20000914

080006a4 <Sim_checkResponseWith>:
  * @param	timeout is maximum waiting time of a data
  * @retval RET_FAIL if no userdata data in Sim_Rxdata.
  * 		RET_OK if otherwise.
  */
STATUS Sim_checkResponseWith(char* userdata, uint8_t maxretry, uint32_t timeout)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	for(i = 0; i < maxretry; i++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	75fb      	strb	r3, [r7, #23]
 80006b6:	e012      	b.n	80006de <Sim_checkResponseWith+0x3a>
	{
		if(Sim_recv(timeout) == RET_OK)
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffb7 	bl	800062c <Sim_recv>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d109      	bne.n	80006d8 <Sim_checkResponseWith+0x34>
		{
			if(strstr((char*)Sim_Rxdata,userdata) != NULL)
 80006c4:	68f9      	ldr	r1, [r7, #12]
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <Sim_checkResponseWith+0x50>)
 80006c8:	f004 ff08 	bl	80054dc <strstr>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <Sim_checkResponseWith+0x34>
			{
				__NOP();
 80006d2:	bf00      	nop
				#if (SIM_DEBUG == 1)
					printf("%s\r\n",(char*)Sim_Rxdata);
				#endif
				return RET_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	e008      	b.n	80006ea <Sim_checkResponseWith+0x46>
	for(i = 0; i < maxretry; i++)
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	3301      	adds	r3, #1
 80006dc:	75fb      	strb	r3, [r7, #23]
 80006de:	7dfa      	ldrb	r2, [r7, #23]
 80006e0:	7afb      	ldrb	r3, [r7, #11]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d3e8      	bcc.n	80006b8 <Sim_checkResponseWith+0x14>
		printf("-----Error-----\r\n");
		printf("Max retry = %d\r\n",i);
		printf("%s",(char*)Sim_Rxdata);
		printf("---------------\r\n");
	#endif
	__NOP();
 80006e6:	bf00      	nop
	return RET_FAIL;
 80006e8:	2301      	movs	r3, #1
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000528 	.word	0x20000528

080006f8 <Sim_checkOK>:
  * @param  None.
  * @retval RET_FAIL if no response or incorrect data.
  * 		RET_OK if response correct data.
  */
STATUS Sim_checkOK(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	Sim_send("AT\r",3);
 80006fc:	2103      	movs	r1, #3
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <Sim_checkOK+0x2c>)
 8000700:	f7ff ff6c 	bl	80005dc <Sim_send>
	ret = Sim_checkResponseWith("OK", 1, 1000);
 8000704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000708:	2101      	movs	r1, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <Sim_checkOK+0x30>)
 800070c:	f7ff ffca 	bl	80006a4 <Sim_checkResponseWith>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <Sim_checkOK+0x34>)
 8000716:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000718:	bf00      	nop
	return ret;
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <Sim_checkOK+0x34>)
 800071c:	781b      	ldrb	r3, [r3, #0]
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	08006aa0 	.word	0x08006aa0
 8000728:	08006aa4 	.word	0x08006aa4
 800072c:	20000b64 	.word	0x20000b64

08000730 <Sim_getSignalQuality>:
  * @param  None.
  * @retval RET_FAIL if 0 < RSSI < 32.
  * 		RET_OK if otherwise.
  */
uint8_t Sim_getSignalQuality(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	uint8_t rssi = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
	Sim_send("AT+CSQ\r",7);
 800073a:	2107      	movs	r1, #7
 800073c:	4817      	ldr	r0, [pc, #92]	; (800079c <Sim_getSignalQuality+0x6c>)
 800073e:	f7ff ff4d 	bl	80005dc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 3000);
 8000742:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000746:	2102      	movs	r1, #2
 8000748:	4815      	ldr	r0, [pc, #84]	; (80007a0 <Sim_getSignalQuality+0x70>)
 800074a:	f7ff ffab 	bl	80006a4 <Sim_checkResponseWith>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <Sim_getSignalQuality+0x74>)
 8000754:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000756:	bf00      	nop
	if(ret == RET_OK)
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <Sim_getSignalQuality+0x74>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d117      	bne.n	8000790 <Sim_getSignalQuality+0x60>
	{
		char* tok = strtok((char*)Sim_Rxdata,":");
 8000760:	4911      	ldr	r1, [pc, #68]	; (80007a8 <Sim_getSignalQuality+0x78>)
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <Sim_getSignalQuality+0x7c>)
 8000764:	f004 fed2 	bl	800550c <strtok>
 8000768:	6038      	str	r0, [r7, #0]
		tok = strtok(NULL,",");
 800076a:	4911      	ldr	r1, [pc, #68]	; (80007b0 <Sim_getSignalQuality+0x80>)
 800076c:	2000      	movs	r0, #0
 800076e:	f004 fecd 	bl	800550c <strtok>
 8000772:	6038      	str	r0, [r7, #0]
		rssi = atoi(tok);
 8000774:	6838      	ldr	r0, [r7, #0]
 8000776:	f004 fe53 	bl	8005420 <atoi>
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
		deleteBuffer((char*)Sim_Rxdata, 100);
 800077e:	2164      	movs	r1, #100	; 0x64
 8000780:	480a      	ldr	r0, [pc, #40]	; (80007ac <Sim_getSignalQuality+0x7c>)
 8000782:	f7ff fee9 	bl	8000558 <deleteBuffer>
		if(rssi < 32)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b1f      	cmp	r3, #31
 800078a:	d801      	bhi.n	8000790 <Sim_getSignalQuality+0x60>
		{
			return rssi;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	e000      	b.n	8000792 <Sim_getSignalQuality+0x62>
		}
	}
	return 99;
 8000790:	2363      	movs	r3, #99	; 0x63
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08006aa8 	.word	0x08006aa8
 80007a0:	08006aa4 	.word	0x08006aa4
 80007a4:	20000b64 	.word	0x20000b64
 80007a8:	08006ab0 	.word	0x08006ab0
 80007ac:	20000528 	.word	0x20000528
 80007b0:	08006ab4 	.word	0x08006ab4

080007b4 <Sim_disconnectInternet>:
  * @param  None.
  * @retval RET_FAIL if disconnection failed.
  * 		RET_OK if disconnection successful.
  */
STATUS Sim_disconnectInternet(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	Sim_send("AT+QIDEACT=1\r",13);
 80007b8:	210d      	movs	r1, #13
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <Sim_disconnectInternet+0x2c>)
 80007bc:	f7ff ff0e 	bl	80005dc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 80007c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80007c4:	2102      	movs	r1, #2
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <Sim_disconnectInternet+0x30>)
 80007c8:	f7ff ff6c 	bl	80006a4 <Sim_checkResponseWith>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <Sim_disconnectInternet+0x34>)
 80007d2:	701a      	strb	r2, [r3, #0]
	__NOP();
 80007d4:	bf00      	nop
	return ret;
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <Sim_disconnectInternet+0x34>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	08006b18 	.word	0x08006b18
 80007e4:	08006aa4 	.word	0x08006aa4
 80007e8:	20000b64 	.word	0x20000b64

080007ec <Sim_initSMS>:

STATUS Sim_initSMS(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	//Select SMS Message Format
	Sim_send("AT+CMGF=1\r",strlen("AT+CMGF=1\r"));
 80007f0:	210a      	movs	r1, #10
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <Sim_initSMS+0x48>)
 80007f4:	f7ff fef2 	bl	80005dc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 80007f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80007fc:	2102      	movs	r1, #2
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <Sim_initSMS+0x4c>)
 8000800:	f7ff ff50 	bl	80006a4 <Sim_checkResponseWith>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <Sim_initSMS+0x50>)
 800080a:	701a      	strb	r2, [r3, #0]
	__NOP();
 800080c:	bf00      	nop
	//Delete all message
	Sim_send("AT+CMGD=1,4\r",strlen("AT+CMGD=1,4\r"));
 800080e:	210c      	movs	r1, #12
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <Sim_initSMS+0x54>)
 8000812:	f7ff fee3 	bl	80005dc <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8000816:	f241 3288 	movw	r2, #5000	; 0x1388
 800081a:	2102      	movs	r1, #2
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <Sim_initSMS+0x4c>)
 800081e:	f7ff ff41 	bl	80006a4 <Sim_checkResponseWith>
 8000822:	4603      	mov	r3, r0
 8000824:	461a      	mov	r2, r3
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <Sim_initSMS+0x50>)
 8000828:	701a      	strb	r2, [r3, #0]
	__NOP();
 800082a:	bf00      	nop
	return ret;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <Sim_initSMS+0x50>)
 800082e:	781b      	ldrb	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08006b28 	.word	0x08006b28
 8000838:	08006aa4 	.word	0x08006aa4
 800083c:	20000b64 	.word	0x20000b64
 8000840:	08006b34 	.word	0x08006b34

08000844 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000848:	f3bf 8f4f 	dsb	sy
}
 800084c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <__NVIC_SystemReset+0x24>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000856:	4904      	ldr	r1, [pc, #16]	; (8000868 <__NVIC_SystemReset+0x24>)
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_SystemReset+0x28>)
 800085a:	4313      	orrs	r3, r2
 800085c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800085e:	f3bf 8f4f 	dsb	sy
}
 8000862:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <__NVIC_SystemReset+0x20>
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	05fa0004 	.word	0x05fa0004

08000870 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIM_RI_Pin)
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d102      	bne.n	8000886 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Sim_isRISignal = true;
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <HAL_GPIO_EXTI_Callback+0x24>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
	}
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000091a 	.word	0x2000091a

08000898 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	//Thuc hien lay thoi gian hien tai cua RTC
	HAL_RTC_GetTime(hrtc, &currentTime, RTC_FORMAT_BIN);
 80008a0:	2200      	movs	r2, #0
 80008a2:	4917      	ldr	r1, [pc, #92]	; (8000900 <HAL_RTC_AlarmAEventCallback+0x68>)
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f003 f9ef 	bl	8003c88 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &currentDate, RTC_FORMAT_BIN);
 80008aa:	2200      	movs	r2, #0
 80008ac:	4915      	ldr	r1, [pc, #84]	; (8000904 <HAL_RTC_AlarmAEventCallback+0x6c>)
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f003 faef 	bl	8003e92 <HAL_RTC_GetDate>
	//Thuc hien cai dat thoi gian Alarm
	RTC_initAlarm(currentTime.Hours, currentTime.Minutes, 0);
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_RTC_AlarmAEventCallback+0x68>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <HAL_RTC_AlarmAEventCallback+0x68>)
 80008ba:	7851      	ldrb	r1, [r2, #1]
 80008bc:	2200      	movs	r2, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ff0a 	bl	80016d8 <RTC_initAlarm>
	rtc_count++;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_RTC_AlarmAEventCallback+0x70>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	3301      	adds	r3, #1
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_RTC_AlarmAEventCallback+0x70>)
 80008d0:	801a      	strh	r2, [r3, #0]
	if((userAlarm.AlarmTime.Hours == 0) && (userAlarm.AlarmTime.Minutes == 0))
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_RTC_AlarmAEventCallback+0x74>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d108      	bne.n	80008ec <HAL_RTC_AlarmAEventCallback+0x54>
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_RTC_AlarmAEventCallback+0x74>)
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d104      	bne.n	80008ec <HAL_RTC_AlarmAEventCallback+0x54>
	{
		RTC_saveDateTime();
 80008e2:	f000 ff61 	bl	80017a8 <RTC_saveDateTime>
		isRTCStartCounting = true;
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_RTC_AlarmAEventCallback+0x78>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
	}
	HAL_RTC_SetAlarm_IT(hrtc, &userAlarm, RTC_FORMAT_BIN);
 80008ec:	2200      	movs	r2, #0
 80008ee:	4907      	ldr	r1, [pc, #28]	; (800090c <HAL_RTC_AlarmAEventCallback+0x74>)
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f003 fb1d 	bl	8003f30 <HAL_RTC_SetAlarm_IT>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000b14 	.word	0x20000b14
 8000904:	20000b28 	.word	0x20000b28
 8000908:	20000b56 	.word	0x20000b56
 800090c:	20000b2c 	.word	0x20000b2c
 8000910:	20000b54 	.word	0x20000b54

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091a:	f001 f9ad 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f8af 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f000 fa63 	bl	8000dec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000926:	f000 fa01 	bl	8000d2c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800092a:	f000 fa2f 	bl	8000d8c <MX_USART3_UART_Init>
  MX_RTC_Init();
 800092e:	f000 f90b 	bl	8000b48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  	HAL_Delay(1000);
 8000932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000936:	f001 fa05 	bl	8001d44 <HAL_Delay>
  	RTC_readDateTime();
 800093a:	f000 ff57 	bl	80017ec <RTC_readDateTime>
    HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	4940      	ldr	r1, [pc, #256]	; (8000a44 <main+0x130>)
 8000942:	4841      	ldr	r0, [pc, #260]	; (8000a48 <main+0x134>)
 8000944:	f003 fe20 	bl	8004588 <HAL_UART_Receive_IT>
    Sim_resetSIM();
 8000948:	f000 fd16 	bl	8001378 <Sim_resetSIM>
    /* First Connection */
	char StationStart[25]  = {0};
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	751a      	strb	r2, [r3, #20]
	char StationConfig[25] = {0};
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	751a      	strb	r2, [r3, #20]
	sprintf(StationStart,"station=%d&status=%s",STATION,"START");
 8000976:	f107 001c 	add.w	r0, r7, #28
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <main+0x138>)
 800097c:	221e      	movs	r2, #30
 800097e:	4934      	ldr	r1, [pc, #208]	; (8000a50 <main+0x13c>)
 8000980:	f004 fd84 	bl	800548c <siprintf>
	sprintf(StationConfig,"station=%d&status=%s",STATION,"CONFIG");
 8000984:	4638      	mov	r0, r7
 8000986:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <main+0x140>)
 8000988:	221e      	movs	r2, #30
 800098a:	4931      	ldr	r1, [pc, #196]	; (8000a50 <main+0x13c>)
 800098c:	f004 fd7e 	bl	800548c <siprintf>
	Sim_exitSLEEPMode();
 8000990:	f000 fcd6 	bl	8001340 <Sim_exitSLEEPMode>
	Sim_checkOK();
 8000994:	f7ff feb0 	bl	80006f8 <Sim_checkOK>
	HAL_Delay(3000);
 8000998:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800099c:	f001 f9d2 	bl	8001d44 <HAL_Delay>
    if(Sim_checkOK() == RET_OK)
 80009a0:	f7ff feaa 	bl	80006f8 <Sim_checkOK>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11b      	bne.n	80009e2 <main+0xce>
    {
		Sim_RSSI = Sim_getSignalQuality();
 80009aa:	f7ff fec1 	bl	8000730 <Sim_getSignalQuality>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <main+0x144>)
 80009b4:	701a      	strb	r2, [r3, #0]
		if(Sim_RSSI != 99) //99 <=> error
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <main+0x144>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b63      	cmp	r3, #99	; 0x63
 80009bc:	d011      	beq.n	80009e2 <main+0xce>
		{
			if(Sim_initSMS() == RET_OK)
 80009be:	f7ff ff15 	bl	80007ec <Sim_initSMS>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d10c      	bne.n	80009e2 <main+0xce>
			{
				if(HTTP_configParams() == RET_OK)
 80009c8:	f7ff fc5a 	bl	8000280 <HTTP_configParams>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d107      	bne.n	80009e2 <main+0xce>
				{
					__NOP();
 80009d2:	bf00      	nop
					Sim_connectHTTP(Host1, "status.php", StationStart, (char*)HTTP_DataToGet);
 80009d4:	f107 021c 	add.w	r2, r7, #28
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <main+0x148>)
 80009da:	4921      	ldr	r1, [pc, #132]	; (8000a60 <main+0x14c>)
 80009dc:	4821      	ldr	r0, [pc, #132]	; (8000a64 <main+0x150>)
 80009de:	f000 fa9d 	bl	8000f1c <Sim_connectHTTP>
				}
			}
		}
    }
    __NOP();
 80009e2:	bf00      	nop
    Sim_enterSLEEPMode();
 80009e4:	f000 fc6e 	bl	80012c4 <Sim_enterSLEEPMode>
    Sim_isRISignal = false; //After reset, RISignal will raise
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <main+0x154>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Sim_isRISignal == true)
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <main+0x154>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d004      	beq.n	8000a02 <main+0xee>
	  {
		  Sim_restartControl();
 80009f8:	f000 fd5c 	bl	80014b4 <Sim_restartControl>
		  Sim_isRISignal = false;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <main+0x154>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	  }

	  if(configStatus == 1)
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <main+0x158>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d102      	bne.n	8000a10 <main+0xfc>
	  {
//	  	Sim_connectHTTP(StationStart, HostConfig, URLConfig, PortConfig);
	  	configStatus = 0;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <main+0x158>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	  }

	  if(isRTCStartCounting)
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <main+0x15c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0e9      	beq.n	80009ee <main+0xda>
	  {
		  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4915      	ldr	r1, [pc, #84]	; (8000a74 <main+0x160>)
 8000a1e:	4816      	ldr	r0, [pc, #88]	; (8000a78 <main+0x164>)
 8000a20:	f003 f932 	bl	8003c88 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000a24:	2200      	movs	r2, #0
 8000a26:	4915      	ldr	r1, [pc, #84]	; (8000a7c <main+0x168>)
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <main+0x164>)
 8000a2a:	f003 fa32 	bl	8003e92 <HAL_RTC_GetDate>
		  if((currentTime.Hours == 0)&&(currentTime.Minutes > 4))
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <main+0x160>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1db      	bne.n	80009ee <main+0xda>
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <main+0x160>)
 8000a38:	785b      	ldrb	r3, [r3, #1]
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d9d7      	bls.n	80009ee <main+0xda>
		  {
			  NVIC_SystemReset();
 8000a3e:	f7ff ff01 	bl	8000844 <__NVIC_SystemReset>
 8000a42:	bf00      	nop
 8000a44:	20000524 	.word	0x20000524
 8000a48:	20000c48 	.word	0x20000c48
 8000a4c:	08006b74 	.word	0x08006b74
 8000a50:	08006b7c 	.word	0x08006b7c
 8000a54:	08006b94 	.word	0x08006b94
 8000a58:	20000918 	.word	0x20000918
 8000a5c:	2000013c 	.word	0x2000013c
 8000a60:	08006b9c 	.word	0x08006b9c
 8000a64:	20000020 	.word	0x20000020
 8000a68:	2000091a 	.word	0x2000091a
 8000a6c:	20000b10 	.word	0x20000b10
 8000a70:	20000b54 	.word	0x20000b54
 8000a74:	20000b14 	.word	0x20000b14
 8000a78:	20000c28 	.word	0x20000c28
 8000a7c:	20000b28 	.word	0x20000b28

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09e      	sub	sp, #120	; 0x78
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a8a:	2228      	movs	r2, #40	; 0x28
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 fcf4 	bl	800547c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	223c      	movs	r2, #60	; 0x3c
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 fce6 	bl	800547c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ab0:	f001 fc9e 	bl	80023f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <SystemClock_Config+0xc0>)
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <SystemClock_Config+0xc0>)
 8000aba:	f023 0318 	bic.w	r3, r3, #24
 8000abe:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ac0:	2305      	movs	r3, #5
 8000ac2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000aca:	2301      	movs	r3, #1
 8000acc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fc98 	bl	8002410 <HAL_RCC_OscConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 feab 	bl	8001840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	230f      	movs	r3, #15
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000afe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fb8b 	bl	8003220 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b10:	f000 fe96 	bl	8001840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <SystemClock_Config+0xc4>)
 8000b16:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b24:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 fdaf 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b34:	f000 fe84 	bl	8001840 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3778      	adds	r7, #120	; 0x78
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	00010006 	.word	0x00010006

08000b48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b48:	b5b0      	push	{r4, r5, r7, lr}
 8000b4a:	b090      	sub	sp, #64	; 0x40
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2228      	movs	r2, #40	; 0x28
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fc87 	bl	800547c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b6e:	4b6a      	ldr	r3, [pc, #424]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000b70:	4a6a      	ldr	r2, [pc, #424]	; (8000d1c <MX_RTC_Init+0x1d4>)
 8000b72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b74:	4b68      	ldr	r3, [pc, #416]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b7a:	4b67      	ldr	r3, [pc, #412]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000b7c:	227f      	movs	r2, #127	; 0x7f
 8000b7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b80:	4b65      	ldr	r3, [pc, #404]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b86:	4b64      	ldr	r3, [pc, #400]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b8c:	4b62      	ldr	r3, [pc, #392]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b92:	4b61      	ldr	r3, [pc, #388]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b98:	485f      	ldr	r0, [pc, #380]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000b9a:	f002 ff27 	bl	80039ec <HAL_RTC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000ba4:	f000 fe4c 	bl	8001840 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F5)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	485b      	ldr	r0, [pc, #364]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000bac:	f003 fbe8 	bl	8004380 <HAL_RTCEx_BKUPRead>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f243 22f5 	movw	r2, #13045	; 0x32f5
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d071      	beq.n	8000c9e <MX_RTC_Init+0x156>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 9;
 8000bba:	2309      	movs	r3, #9
 8000bbc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	484e      	ldr	r0, [pc, #312]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000bde:	f002 ff96 	bl	8003b0e <HAL_RTC_SetTime>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000be8:	f000 fe2a 	bl	8001840 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 10;
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 21;
 8000bfe:	2315      	movs	r3, #21
 8000c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4842      	ldr	r0, [pc, #264]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000c0e:	f003 f899 	bl	8003d44 <HAL_RTC_SetDate>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8000c18:	f000 fe12 	bl	8001840 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 9;
 8000c1c:	2309      	movs	r3, #9
 8000c1e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 8000c24:	230a      	movs	r3, #10
 8000c26:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000c34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c38:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4830      	ldr	r0, [pc, #192]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000c56:	f003 f96b 	bl	8003f30 <HAL_RTC_SetAlarm_IT>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000c60:	f000 fdee 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //Khoi tao cac gia tri ban dau cho cac bien
  userAlarm = sAlarm;
 8000c64:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000c66:	461d      	mov	r5, r3
 8000c68:	463c      	mov	r4, r7
 8000c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c76:	e885 0003 	stmia.w	r5, {r0, r1}
  currentTime = sTime;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <MX_RTC_Init+0x1dc>)
 8000c7c:	461d      	mov	r5, r3
 8000c7e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	602b      	str	r3, [r5, #0]
  currentDate = sDate;
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <MX_RTC_Init+0x1e0>)
 8000c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8e:	6013      	str	r3, [r2, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F5);
 8000c90:	f243 22f5 	movw	r2, #13045	; 0x32f5
 8000c94:	2101      	movs	r1, #1
 8000c96:	4820      	ldr	r0, [pc, #128]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000c98:	f003 fb58 	bl	800434c <HAL_RTCEx_BKUPWrite>
	  userAlarm.Alarm = RTC_ALARM_A;
	  RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
  }
  /* USER CODE END RTC_Init 2 */

}
 8000c9c:	e037      	b.n	8000d0e <MX_RTC_Init+0x1c6>
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4920      	ldr	r1, [pc, #128]	; (8000d24 <MX_RTC_Init+0x1dc>)
 8000ca2:	481d      	ldr	r0, [pc, #116]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000ca4:	f002 fff0 	bl	8003c88 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	491f      	ldr	r1, [pc, #124]	; (8000d28 <MX_RTC_Init+0x1e0>)
 8000cac:	481a      	ldr	r0, [pc, #104]	; (8000d18 <MX_RTC_Init+0x1d0>)
 8000cae:	f003 f8f0 	bl	8003e92 <HAL_RTC_GetDate>
	  userAlarm.AlarmTime.Hours = currentTime.Hours;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_RTC_Init+0x1dc>)
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cb8:	701a      	strb	r2, [r3, #0]
	  userAlarm.AlarmTime.Minutes = currentTime.Minutes;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_RTC_Init+0x1dc>)
 8000cbc:	785a      	ldrb	r2, [r3, #1]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cc0:	705a      	strb	r2, [r3, #1]
	  userAlarm.AlarmTime.Seconds = 0;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	709a      	strb	r2, [r3, #2]
	  userAlarm.AlarmTime.SubSeconds = 0;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
	  userAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
	  userAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
	  userAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ce0:	615a      	str	r2, [r3, #20]
	  userAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
	  userAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
	  userAlarm.AlarmDateWeekDay = 1;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]
	  userAlarm.Alarm = RTC_ALARM_A;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
	  RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <MX_RTC_Init+0x1d8>)
 8000d04:	7851      	ldrb	r1, [r2, #1]
 8000d06:	2200      	movs	r2, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fce5 	bl	80016d8 <RTC_initAlarm>
}
 8000d0e:	bf00      	nop
 8000d10:	3740      	adds	r7, #64	; 0x40
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bdb0      	pop	{r4, r5, r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000c28 	.word	0x20000c28
 8000d1c:	40002800 	.word	0x40002800
 8000d20:	20000b2c 	.word	0x20000b2c
 8000d24:	20000b14 	.word	0x20000b14
 8000d28:	20000b28 	.word	0x20000b28

08000d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d70:	f003 fb28 	bl	80043c4 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f000 fd61 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000c48 	.word	0x20000c48
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000d92:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_USART3_UART_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000d98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USART3_UART_Init+0x58>)
 8000dd0:	f003 faf8 	bl	80043c4 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 fd31 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000b68 	.word	0x20000b68
 8000de8:	40004800 	.word	0x40004800

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b42      	ldr	r3, [pc, #264]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a41      	ldr	r2, [pc, #260]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4a3b      	ldr	r2, [pc, #236]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e24:	6153      	str	r3, [r2, #20]
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a35      	ldr	r2, [pc, #212]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a2f      	ldr	r2, [pc, #188]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <MX_GPIO_Init+0x120>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_RESET_Pin|SIM_PWR_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	210c      	movs	r1, #12
 8000e66:	482a      	ldr	r0, [pc, #168]	; (8000f10 <MX_GPIO_Init+0x124>)
 8000e68:	f001 fa92 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2101      	movs	r1, #1
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f001 fa8c 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4825      	ldr	r0, [pc, #148]	; (8000f14 <MX_GPIO_Init+0x128>)
 8000e7e:	f001 fa87 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SIM_RESET_Pin SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_RESET_Pin|SIM_PWR_Pin;
 8000e82:	230c      	movs	r3, #12
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	481d      	ldr	r0, [pc, #116]	; (8000f10 <MX_GPIO_Init+0x124>)
 8000e9a:	f001 f8ff 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_DTR_Pin */
  GPIO_InitStruct.Pin = SIM_DTR_Pin;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SIM_DTR_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f001 f8f0 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_RI_Pin */
  GPIO_InitStruct.Pin = SIM_RI_Pin;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_GPIO_Init+0x12c>)
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_RI_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f001 f8e3 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_GPIO_Init+0x128>)
 8000eee:	f001 f8d5 	bl	800209c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2007      	movs	r0, #7
 8000ef8:	f001 f823 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000efc:	2007      	movs	r0, #7
 8000efe:	f001 f83c 	bl	8001f7a <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000400 	.word	0x48000400
 8000f18:	10210000 	.word	0x10210000

08000f1c <Sim_connectHTTP>:

/* USER CODE BEGIN 4 */
STATUS Sim_connectHTTP(char* host, char* url, char* sentdata, char* recvdata)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	603b      	str	r3, [r7, #0]
	Sim_exitSLEEPMode();
 8000f2a:	f000 fa09 	bl	8001340 <Sim_exitSLEEPMode>
	deleteBuffer(HTTPServer_URL, strlen(HTTPServer_URL));
 8000f2e:	484b      	ldr	r0, [pc, #300]	; (800105c <Sim_connectHTTP+0x140>)
 8000f30:	f7ff f94e 	bl	80001d0 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4848      	ldr	r0, [pc, #288]	; (800105c <Sim_connectHTTP+0x140>)
 8000f3a:	f7ff fb0d 	bl	8000558 <deleteBuffer>
	sprintf(HTTPServer_URL,"http://%s/%s?%s",host,url,sentdata);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4946      	ldr	r1, [pc, #280]	; (8001060 <Sim_connectHTTP+0x144>)
 8000f48:	4844      	ldr	r0, [pc, #272]	; (800105c <Sim_connectHTTP+0x140>)
 8000f4a:	f004 fa9f 	bl	800548c <siprintf>
	STATUS m_ret = RET_FAIL;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	77bb      	strb	r3, [r7, #30]
 8000f56:	e077      	b.n	8001048 <Sim_connectHTTP+0x12c>
	{
		if(HTTP_sendGETRequest(HTTPServer_URL) == RET_OK)
 8000f58:	4840      	ldr	r0, [pc, #256]	; (800105c <Sim_connectHTTP+0x140>)
 8000f5a:	f7ff f9ff 	bl	800035c <HTTP_sendGETRequest>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d165      	bne.n	8001030 <Sim_connectHTTP+0x114>
		{
			__NOP();
 8000f64:	bf00      	nop
			if(HTTP_readGETResponse(recvdata) == RET_OK)
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f7ff fa64 	bl	8000434 <HTTP_readGETResponse>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d15e      	bne.n	8001030 <Sim_connectHTTP+0x114>
			{
				__NOP();
 8000f72:	bf00      	nop
				if(strstr(recvdata,"200 OK") != NULL)
 8000f74:	493b      	ldr	r1, [pc, #236]	; (8001064 <Sim_connectHTTP+0x148>)
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f004 fab0 	bl	80054dc <strstr>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d056      	beq.n	8001030 <Sim_connectHTTP+0x114>
				{
					Sim_extractTimeStamp(recvdata);
 8000f82:	6838      	ldr	r0, [r7, #0]
 8000f84:	f000 f880 	bl	8001088 <Sim_extractTimeStamp>
					if(strstr(recvdata,"||CC") != NULL)
 8000f88:	4937      	ldr	r1, [pc, #220]	; (8001068 <Sim_connectHTTP+0x14c>)
 8000f8a:	6838      	ldr	r0, [r7, #0]
 8000f8c:	f004 faa6 	bl	80054dc <strstr>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <Sim_connectHTTP+0x86>
					{
						Sim_getHostnUrl(recvdata);
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f000 f920 	bl	80011dc <Sim_getHostnUrl>
						m_ret = RET_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	77fb      	strb	r3, [r7, #31]
 8000fa0:	e046      	b.n	8001030 <Sim_connectHTTP+0x114>
					}
					else if(strstr(recvdata,"||00") != NULL)
 8000fa2:	4932      	ldr	r1, [pc, #200]	; (800106c <Sim_connectHTTP+0x150>)
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	f004 fa99 	bl	80054dc <strstr>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <Sim_connectHTTP+0xa0>
					{
						configStatus = 1;
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <Sim_connectHTTP+0x154>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
						m_ret = RET_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	77fb      	strb	r3, [r7, #31]
 8000fba:	e039      	b.n	8001030 <Sim_connectHTTP+0x114>
					}
					else if(strstr(recvdata,"||11") != NULL)
 8000fbc:	492d      	ldr	r1, [pc, #180]	; (8001074 <Sim_connectHTTP+0x158>)
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f004 fa8c 	bl	80054dc <strstr>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d032      	beq.n	8001030 <Sim_connectHTTP+0x114>
					{
						char* tok = NULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
						tok = strtok(recvdata,"|");
 8000fce:	492a      	ldr	r1, [pc, #168]	; (8001078 <Sim_connectHTTP+0x15c>)
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f004 fa9b 	bl	800550c <strtok>
 8000fd6:	61b8      	str	r0, [r7, #24]
						tok = strtok(NULL,"<");
 8000fd8:	4928      	ldr	r1, [pc, #160]	; (800107c <Sim_connectHTTP+0x160>)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f004 fa96 	bl	800550c <strtok>
 8000fe0:	61b8      	str	r0, [r7, #24]
						int8_t rtc_alarm = atoi(tok);
 8000fe2:	69b8      	ldr	r0, [r7, #24]
 8000fe4:	f004 fa1c 	bl	8005420 <atoi>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	75fb      	strb	r3, [r7, #23]
						if((rtc_alarm >= 0) && (rtc_alarm <= 60))
 8000fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db1b      	blt.n	800102c <Sim_connectHTTP+0x110>
 8000ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff8:	2b3c      	cmp	r3, #60	; 0x3c
 8000ffa:	dc17      	bgt.n	800102c <Sim_connectHTTP+0x110>
						{
							if((rtc_alarm % 5) == 0)
 8000ffc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <Sim_connectHTTP+0x164>)
 8001002:	fb83 1302 	smull	r1, r3, r3, r2
 8001006:	1059      	asrs	r1, r3, #1
 8001008:	17d3      	asrs	r3, r2, #31
 800100a:	1ac9      	subs	r1, r1, r3
 800100c:	460b      	mov	r3, r1
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b25b      	sxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d108      	bne.n	800102c <Sim_connectHTTP+0x110>
							{
								if(rtc_alarm != RTC_ALARM)
 800101a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <Sim_connectHTTP+0x168>)
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	4293      	cmp	r3, r2
 8001024:	d002      	beq.n	800102c <Sim_connectHTTP+0x110>
								{
									RTC_ALARM = rtc_alarm;
 8001026:	7dfa      	ldrb	r2, [r7, #23]
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <Sim_connectHTTP+0x168>)
 800102a:	701a      	strb	r2, [r3, #0]
//									HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
//									RTC_initAlarm(sTime.Hours, sTime.Minutes, 0);
								}
							}
						}
						m_ret = RET_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
		}
		Sim_disconnectInternet();
 8001030:	f7ff fbc0 	bl	80007b4 <Sim_disconnectInternet>
		if(m_ret == RET_OK)
 8001034:	7ffb      	ldrb	r3, [r7, #31]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00a      	beq.n	8001050 <Sim_connectHTTP+0x134>
		{
			break;
		}
		else
		{
			HAL_Delay(2000);
 800103a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800103e:	f000 fe81 	bl	8001d44 <HAL_Delay>
	for(uint8_t i = 0; i < 3; i++)
 8001042:	7fbb      	ldrb	r3, [r7, #30]
 8001044:	3301      	adds	r3, #1
 8001046:	77bb      	strb	r3, [r7, #30]
 8001048:	7fbb      	ldrb	r3, [r7, #30]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d984      	bls.n	8000f58 <Sim_connectHTTP+0x3c>
 800104e:	e000      	b.n	8001052 <Sim_connectHTTP+0x136>
			break;
 8001050:	bf00      	nop
		}
	}
	return m_ret;
 8001052:	7ffb      	ldrb	r3, [r7, #31]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000091c 	.word	0x2000091c
 8001060:	08006ba8 	.word	0x08006ba8
 8001064:	08006bb8 	.word	0x08006bb8
 8001068:	08006bc0 	.word	0x08006bc0
 800106c:	08006bc8 	.word	0x08006bc8
 8001070:	20000b10 	.word	0x20000b10
 8001074:	08006bd0 	.word	0x08006bd0
 8001078:	08006bd8 	.word	0x08006bd8
 800107c:	08006bdc 	.word	0x08006bdc
 8001080:	66666667 	.word	0x66666667
 8001084:	2000007e 	.word	0x2000007e

08001088 <Sim_extractTimeStamp>:

void Sim_extractTimeStamp(char* data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
	char* ptr1 = strstr(data,"Date:");
 8001094:	494b      	ldr	r1, [pc, #300]	; (80011c4 <Sim_extractTimeStamp+0x13c>)
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f004 fa20 	bl	80054dc <strstr>
 800109c:	61b8      	str	r0, [r7, #24]
	char* ptr2 = strstr(data," GMT");
 800109e:	494a      	ldr	r1, [pc, #296]	; (80011c8 <Sim_extractTimeStamp+0x140>)
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f004 fa1b 	bl	80054dc <strstr>
 80010a6:	6138      	str	r0, [r7, #16]
	if((ptr1 != NULL) & (ptr2 != NULL))
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	bf14      	ite	ne
 80010ae:	2301      	movne	r3, #1
 80010b0:	2300      	moveq	r3, #0
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4013      	ands	r3, r2
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d079      	beq.n	80011bc <Sim_extractTimeStamp+0x134>
	{
		while(ptr1 != ptr2)
 80010c8:	e009      	b.n	80010de <Sim_extractTimeStamp+0x56>
		{
			TimeStamp.timezone[i++] = *ptr1;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	61fa      	str	r2, [r7, #28]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	7811      	ldrb	r1, [r2, #0]
 80010d4:	4a3d      	ldr	r2, [pc, #244]	; (80011cc <Sim_extractTimeStamp+0x144>)
 80010d6:	54d1      	strb	r1, [r2, r3]
			ptr1++;
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	3301      	adds	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
		while(ptr1 != ptr2)
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d1f1      	bne.n	80010ca <Sim_extractTimeStamp+0x42>
		}
		char* tok = strtok(TimeStamp.timezone," ");
 80010e6:	493a      	ldr	r1, [pc, #232]	; (80011d0 <Sim_extractTimeStamp+0x148>)
 80010e8:	4838      	ldr	r0, [pc, #224]	; (80011cc <Sim_extractTimeStamp+0x144>)
 80010ea:	f004 fa0f 	bl	800550c <strtok>
 80010ee:	60f8      	str	r0, [r7, #12]
		tok = strtok(NULL," ");
 80010f0:	4937      	ldr	r1, [pc, #220]	; (80011d0 <Sim_extractTimeStamp+0x148>)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f004 fa0a 	bl	800550c <strtok>
 80010f8:	60f8      	str	r0, [r7, #12]
		tok = strtok(NULL," ");
 80010fa:	4935      	ldr	r1, [pc, #212]	; (80011d0 <Sim_extractTimeStamp+0x148>)
 80010fc:	2000      	movs	r0, #0
 80010fe:	f004 fa05 	bl	800550c <strtok>
 8001102:	60f8      	str	r0, [r7, #12]
		TimeStamp.date = atoi(tok);
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f004 f98b 	bl	8005420 <atoi>
 800110a:	4603      	mov	r3, r0
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <Sim_extractTimeStamp+0x144>)
 8001110:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		tok = strtok(NULL," ");
 8001114:	492e      	ldr	r1, [pc, #184]	; (80011d0 <Sim_extractTimeStamp+0x148>)
 8001116:	2000      	movs	r0, #0
 8001118:	f004 f9f8 	bl	800550c <strtok>
 800111c:	60f8      	str	r0, [r7, #12]
		for(int i = 0; i < 12; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e015      	b.n	8001150 <Sim_extractTimeStamp+0xc8>
		{
			if(strstr(tok,Months[i]) != NULL)
 8001124:	4a2b      	ldr	r2, [pc, #172]	; (80011d4 <Sim_extractTimeStamp+0x14c>)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	4619      	mov	r1, r3
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f004 f9d4 	bl	80054dc <strstr>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <Sim_extractTimeStamp+0xc2>
			{
				TimeStamp.mon = i + 1;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <Sim_extractTimeStamp+0x144>)
 8001144:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				break;
 8001148:	e005      	b.n	8001156 <Sim_extractTimeStamp+0xce>
		for(int i = 0; i < 12; i++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b0b      	cmp	r3, #11
 8001154:	dde6      	ble.n	8001124 <Sim_extractTimeStamp+0x9c>
			}
		}
		tok = strtok(NULL," ");
 8001156:	491e      	ldr	r1, [pc, #120]	; (80011d0 <Sim_extractTimeStamp+0x148>)
 8001158:	2000      	movs	r0, #0
 800115a:	f004 f9d7 	bl	800550c <strtok>
 800115e:	60f8      	str	r0, [r7, #12]
		TimeStamp.year = atoi(tok);
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f004 f95d 	bl	8005420 <atoi>
 8001166:	4603      	mov	r3, r0
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <Sim_extractTimeStamp+0x144>)
 800116c:	869a      	strh	r2, [r3, #52]	; 0x34
		tok = strtok(NULL,":");
 800116e:	491a      	ldr	r1, [pc, #104]	; (80011d8 <Sim_extractTimeStamp+0x150>)
 8001170:	2000      	movs	r0, #0
 8001172:	f004 f9cb 	bl	800550c <strtok>
 8001176:	60f8      	str	r0, [r7, #12]
		TimeStamp.hour = atoi(tok);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f004 f951 	bl	8005420 <atoi>
 800117e:	4603      	mov	r3, r0
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <Sim_extractTimeStamp+0x144>)
 8001184:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		tok = strtok(NULL,":");
 8001188:	4913      	ldr	r1, [pc, #76]	; (80011d8 <Sim_extractTimeStamp+0x150>)
 800118a:	2000      	movs	r0, #0
 800118c:	f004 f9be 	bl	800550c <strtok>
 8001190:	60f8      	str	r0, [r7, #12]
		TimeStamp.min = atoi(tok);
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f004 f944 	bl	8005420 <atoi>
 8001198:	4603      	mov	r3, r0
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <Sim_extractTimeStamp+0x144>)
 800119e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		tok = strtok(NULL,":");
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <Sim_extractTimeStamp+0x150>)
 80011a4:	2000      	movs	r0, #0
 80011a6:	f004 f9b1 	bl	800550c <strtok>
 80011aa:	60f8      	str	r0, [r7, #12]
		TimeStamp.sec = atoi(tok);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f004 f937 	bl	8005420 <atoi>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <Sim_extractTimeStamp+0x144>)
 80011b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
//		//update RTC Time
//		RTC_UserTimeUpdate();
	}
}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	08006be0 	.word	0x08006be0
 80011c8:	08006be8 	.word	0x08006be8
 80011cc:	20000bec 	.word	0x20000bec
 80011d0:	08006bf0 	.word	0x08006bf0
 80011d4:	20000080 	.word	0x20000080
 80011d8:	08006bf4 	.word	0x08006bf4

080011dc <Sim_getHostnUrl>:

void Sim_getHostnUrl(char* data)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	memset(Host1,0,strlen(Host1));
 80011e4:	482f      	ldr	r0, [pc, #188]	; (80012a4 <Sim_getHostnUrl+0xc8>)
 80011e6:	f7fe fff3 	bl	80001d0 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	2100      	movs	r1, #0
 80011f0:	482c      	ldr	r0, [pc, #176]	; (80012a4 <Sim_getHostnUrl+0xc8>)
 80011f2:	f004 f943 	bl	800547c <memset>
	memset(Host2,0,strlen(Host2));
 80011f6:	482c      	ldr	r0, [pc, #176]	; (80012a8 <Sim_getHostnUrl+0xcc>)
 80011f8:	f7fe ffea 	bl	80001d0 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	2100      	movs	r1, #0
 8001202:	4829      	ldr	r0, [pc, #164]	; (80012a8 <Sim_getHostnUrl+0xcc>)
 8001204:	f004 f93a 	bl	800547c <memset>
	memset(URL1,0,strlen(URL1));
 8001208:	4828      	ldr	r0, [pc, #160]	; (80012ac <Sim_getHostnUrl+0xd0>)
 800120a:	f7fe ffe1 	bl	80001d0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	4825      	ldr	r0, [pc, #148]	; (80012ac <Sim_getHostnUrl+0xd0>)
 8001216:	f004 f931 	bl	800547c <memset>
	memset(URL2,0,strlen(URL2));
 800121a:	4825      	ldr	r0, [pc, #148]	; (80012b0 <Sim_getHostnUrl+0xd4>)
 800121c:	f7fe ffd8 	bl	80001d0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	2100      	movs	r1, #0
 8001226:	4822      	ldr	r0, [pc, #136]	; (80012b0 <Sim_getHostnUrl+0xd4>)
 8001228:	f004 f928 	bl	800547c <memset>
	char* token;
	token = strtok(data,"|");
 800122c:	4921      	ldr	r1, [pc, #132]	; (80012b4 <Sim_getHostnUrl+0xd8>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f004 f96c 	bl	800550c <strtok>
 8001234:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,":");
 8001236:	4920      	ldr	r1, [pc, #128]	; (80012b8 <Sim_getHostnUrl+0xdc>)
 8001238:	2000      	movs	r0, #0
 800123a:	f004 f967 	bl	800550c <strtok>
 800123e:	60f8      	str	r0, [r7, #12]
	strcpy(Host1,token);
 8001240:	68f9      	ldr	r1, [r7, #12]
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <Sim_getHostnUrl+0xc8>)
 8001244:	f004 f942 	bl	80054cc <strcpy>
	token = strtok(NULL,"/");
 8001248:	491c      	ldr	r1, [pc, #112]	; (80012bc <Sim_getHostnUrl+0xe0>)
 800124a:	2000      	movs	r0, #0
 800124c:	f004 f95e 	bl	800550c <strtok>
 8001250:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,"<");
 8001252:	491b      	ldr	r1, [pc, #108]	; (80012c0 <Sim_getHostnUrl+0xe4>)
 8001254:	2000      	movs	r0, #0
 8001256:	f004 f959 	bl	800550c <strtok>
 800125a:	60f8      	str	r0, [r7, #12]
	strcpy(URL1,token);
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	4813      	ldr	r0, [pc, #76]	; (80012ac <Sim_getHostnUrl+0xd0>)
 8001260:	f004 f934 	bl	80054cc <strcpy>
	token = strtok(NULL,"|");
 8001264:	4913      	ldr	r1, [pc, #76]	; (80012b4 <Sim_getHostnUrl+0xd8>)
 8001266:	2000      	movs	r0, #0
 8001268:	f004 f950 	bl	800550c <strtok>
 800126c:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,":");
 800126e:	4912      	ldr	r1, [pc, #72]	; (80012b8 <Sim_getHostnUrl+0xdc>)
 8001270:	2000      	movs	r0, #0
 8001272:	f004 f94b 	bl	800550c <strtok>
 8001276:	60f8      	str	r0, [r7, #12]
	strcpy(Host2,token);
 8001278:	68f9      	ldr	r1, [r7, #12]
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <Sim_getHostnUrl+0xcc>)
 800127c:	f004 f926 	bl	80054cc <strcpy>
	token = strtok(NULL,"/");
 8001280:	490e      	ldr	r1, [pc, #56]	; (80012bc <Sim_getHostnUrl+0xe0>)
 8001282:	2000      	movs	r0, #0
 8001284:	f004 f942 	bl	800550c <strtok>
 8001288:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,"<");
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <Sim_getHostnUrl+0xe4>)
 800128c:	2000      	movs	r0, #0
 800128e:	f004 f93d 	bl	800550c <strtok>
 8001292:	60f8      	str	r0, [r7, #12]
	strcpy(URL2,token);
 8001294:	68f9      	ldr	r1, [r7, #12]
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <Sim_getHostnUrl+0xd4>)
 8001298:	f004 f918 	bl	80054cc <strcpy>
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000020 	.word	0x20000020
 80012a8:	20000060 	.word	0x20000060
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000040 	.word	0x20000040
 80012b4:	08006bd8 	.word	0x08006bd8
 80012b8:	08006bf4 	.word	0x08006bf4
 80012bc:	08006bf8 	.word	0x08006bf8
 80012c0:	08006bdc 	.word	0x08006bdc

080012c4 <Sim_enterSLEEPMode>:

void Sim_enterSLEEPMode(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	STATUS m_ret;
	for(uint8_t i = 0; i < 2; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	e01d      	b.n	800130c <Sim_enterSLEEPMode+0x48>
	{
		Sim_send("AT+CSCLK=1\r", strlen("AT+CSCLK=1\r"));
 80012d0:	210b      	movs	r1, #11
 80012d2:	4818      	ldr	r0, [pc, #96]	; (8001334 <Sim_enterSLEEPMode+0x70>)
 80012d4:	f7ff f982 	bl	80005dc <Sim_send>
		m_ret = Sim_checkResponseWith("OK", 2, 5000);
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	2102      	movs	r1, #2
 80012de:	4816      	ldr	r0, [pc, #88]	; (8001338 <Sim_enterSLEEPMode+0x74>)
 80012e0:	f7ff f9e0 	bl	80006a4 <Sim_checkResponseWith>
 80012e4:	4603      	mov	r3, r0
 80012e6:	71bb      	strb	r3, [r7, #6]
		__NOP();
 80012e8:	bf00      	nop
		if(m_ret == RET_OK)
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10a      	bne.n	8001306 <Sim_enterSLEEPMode+0x42>
		{
			//DTR high
			HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2101      	movs	r1, #1
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f001 f84a 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80012fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001300:	f000 fd20 	bl	8001d44 <HAL_Delay>
			break;
 8001304:	e005      	b.n	8001312 <Sim_enterSLEEPMode+0x4e>
	for(uint8_t i = 0; i < 2; i++)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	3301      	adds	r3, #1
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d9de      	bls.n	80012d0 <Sim_enterSLEEPMode+0xc>
		}
	}
	if(Sim_checkOK() == RET_FAIL)
 8001312:	f7ff f9f1 	bl	80006f8 <Sim_checkOK>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d103      	bne.n	8001324 <Sim_enterSLEEPMode+0x60>
	{
		Sim_SleepMode = true;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <Sim_enterSLEEPMode+0x78>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Sim_SleepMode = false;
	}
}
 8001322:	e002      	b.n	800132a <Sim_enterSLEEPMode+0x66>
		Sim_SleepMode = false;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <Sim_enterSLEEPMode+0x78>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	08006bfc 	.word	0x08006bfc
 8001338:	08006c08 	.word	0x08006c08
 800133c:	20000919 	.word	0x20000919

08001340 <Sim_exitSLEEPMode>:

void Sim_exitSLEEPMode(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	Sim_SleepMode = true; //Sim van con o che do sleep mode
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <Sim_exitSLEEPMode+0x34>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
	//DTR low
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f001 f81d 	bl	8002390 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135a:	f000 fcf3 	bl	8001d44 <HAL_Delay>
	if(Sim_checkOK() == RET_OK)
 800135e:	f7ff f9cb 	bl	80006f8 <Sim_checkOK>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <Sim_exitSLEEPMode+0x2e>
	{
		Sim_SleepMode = false;
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <Sim_exitSLEEPMode+0x34>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
	}
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000919 	.word	0x20000919

08001378 <Sim_resetSIM>:

void Sim_resetSIM(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	//DTR high
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2101      	movs	r1, #1
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f001 f804 	bl	8002390 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001388:	2064      	movs	r0, #100	; 0x64
 800138a:	f000 fcdb 	bl	8001d44 <HAL_Delay>
	//DTR low
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2101      	movs	r1, #1
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f000 fffb 	bl	8002390 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800139a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139e:	f000 fcd1 	bl	8001d44 <HAL_Delay>
	if(Sim_checkOK() == RET_OK) //SIM response
 80013a2:	f7ff f9a9 	bl	80006f8 <Sim_checkOK>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d134      	bne.n	8001416 <Sim_resetSIM+0x9e>
	{
		/*turn off*/
		//pull down PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2108      	movs	r1, #8
 80013b0:	483f      	ldr	r0, [pc, #252]	; (80014b0 <Sim_resetSIM+0x138>)
 80013b2:	f000 ffed 	bl	8002390 <HAL_GPIO_WritePin>
		//wait at least 2.5s
		HAL_Delay(3000);
 80013b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013ba:	f000 fcc3 	bl	8001d44 <HAL_Delay>
		//release PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	483b      	ldr	r0, [pc, #236]	; (80014b0 <Sim_resetSIM+0x138>)
 80013c4:	f000 ffe4 	bl	8002390 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 80013c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80013cc:	f000 fcba 	bl	8001d44 <HAL_Delay>
		HAL_Delay(5000);
 80013d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80013d4:	f000 fcb6 	bl	8001d44 <HAL_Delay>
		/* turn on power*/
		//pull down PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2108      	movs	r1, #8
 80013dc:	4834      	ldr	r0, [pc, #208]	; (80014b0 <Sim_resetSIM+0x138>)
 80013de:	f000 ffd7 	bl	8002390 <HAL_GPIO_WritePin>
		//wait at least 0.5s
		HAL_Delay(3000);
 80013e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013e6:	f000 fcad 	bl	8001d44 <HAL_Delay>
		//release PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2108      	movs	r1, #8
 80013ee:	4830      	ldr	r0, [pc, #192]	; (80014b0 <Sim_resetSIM+0x138>)
 80013f0:	f000 ffce 	bl	8002390 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 80013f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80013f8:	f000 fca4 	bl	8001d44 <HAL_Delay>
		HAL_Delay(5000);
 80013fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001400:	f000 fca0 	bl	8001d44 <HAL_Delay>
		HAL_Delay(5000);
 8001404:	f241 3088 	movw	r0, #5000	; 0x1388
 8001408:	f000 fc9c 	bl	8001d44 <HAL_Delay>
		HAL_Delay(5000);
 800140c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001410:	f000 fc98 	bl	8001d44 <HAL_Delay>
			HAL_Delay(5000);
			HAL_Delay(5000);
			HAL_Delay(5000);
		}
	}
}
 8001414:	e04a      	b.n	80014ac <Sim_resetSIM+0x134>
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2108      	movs	r1, #8
 800141a:	4825      	ldr	r0, [pc, #148]	; (80014b0 <Sim_resetSIM+0x138>)
 800141c:	f000 ffb8 	bl	8002390 <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 8001420:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001424:	f000 fc8e 	bl	8001d44 <HAL_Delay>
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2108      	movs	r1, #8
 800142c:	4820      	ldr	r0, [pc, #128]	; (80014b0 <Sim_resetSIM+0x138>)
 800142e:	f000 ffaf 	bl	8002390 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8001432:	f241 3088 	movw	r0, #5000	; 0x1388
 8001436:	f000 fc85 	bl	8001d44 <HAL_Delay>
		HAL_Delay(5000);
 800143a:	f241 3088 	movw	r0, #5000	; 0x1388
 800143e:	f000 fc81 	bl	8001d44 <HAL_Delay>
		HAL_Delay(5000);
 8001442:	f241 3088 	movw	r0, #5000	; 0x1388
 8001446:	f000 fc7d 	bl	8001d44 <HAL_Delay>
		HAL_Delay(5000);
 800144a:	f241 3088 	movw	r0, #5000	; 0x1388
 800144e:	f000 fc79 	bl	8001d44 <HAL_Delay>
		Sim_exitSLEEPMode();
 8001452:	f7ff ff75 	bl	8001340 <Sim_exitSLEEPMode>
		Sim_checkOK();
 8001456:	f7ff f94f 	bl	80006f8 <Sim_checkOK>
		HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f000 fc71 	bl	8001d44 <HAL_Delay>
		if(Sim_checkOK() == RET_OK) //SIM ON
 8001462:	f7ff f949 	bl	80006f8 <Sim_checkOK>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <Sim_resetSIM+0xf8>
			__NOP();
 800146c:	bf00      	nop
}
 800146e:	e01d      	b.n	80014ac <Sim_resetSIM+0x134>
			HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2108      	movs	r1, #8
 8001474:	480e      	ldr	r0, [pc, #56]	; (80014b0 <Sim_resetSIM+0x138>)
 8001476:	f000 ff8b 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_Delay(3000);
 800147a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800147e:	f000 fc61 	bl	8001d44 <HAL_Delay>
			HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2108      	movs	r1, #8
 8001486:	480a      	ldr	r0, [pc, #40]	; (80014b0 <Sim_resetSIM+0x138>)
 8001488:	f000 ff82 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_Delay(5000);
 800148c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001490:	f000 fc58 	bl	8001d44 <HAL_Delay>
			HAL_Delay(5000);
 8001494:	f241 3088 	movw	r0, #5000	; 0x1388
 8001498:	f000 fc54 	bl	8001d44 <HAL_Delay>
			HAL_Delay(5000);
 800149c:	f241 3088 	movw	r0, #5000	; 0x1388
 80014a0:	f000 fc50 	bl	8001d44 <HAL_Delay>
			HAL_Delay(5000);
 80014a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80014a8:	f000 fc4c 	bl	8001d44 <HAL_Delay>
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	48000800 	.word	0x48000800

080014b4 <Sim_restartControl>:

void Sim_restartControl(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0a0      	sub	sp, #128	; 0x80
 80014b8:	af00      	add	r7, sp, #0
	bool isResetSystem = false;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	char Sim_PhoneNumb[15] = {0};
 80014c0:	2300      	movs	r3, #0
 80014c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80014c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	f8c3 2007 	str.w	r2, [r3, #7]
	STATUS m_ret;
	m_ret = Sim_checkResponseWith("+CMTI:", 3, 5000);
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	2103      	movs	r1, #3
 80014d8:	484d      	ldr	r0, [pc, #308]	; (8001610 <Sim_restartControl+0x15c>)
 80014da:	f7ff f8e3 	bl	80006a4 <Sim_checkResponseWith>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	__NOP();
 80014e4:	bf00      	nop
	if(m_ret == RET_OK)
 80014e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 808b 	bne.w	8001606 <Sim_restartControl+0x152>
	{
		char Sim_Cmd[100] = {0};
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2260      	movs	r2, #96	; 0x60
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 ffbd 	bl	800547c <memset>
		Sim_exitSLEEPMode();
 8001502:	f7ff ff1d 	bl	8001340 <Sim_exitSLEEPMode>
		for(uint8_t i = 1; i < 11; i++)
 8001506:	2301      	movs	r3, #1
 8001508:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800150c:	e061      	b.n	80015d2 <Sim_restartControl+0x11e>
		{
			sprintf(Sim_Cmd,"AT+CMGR=%d\r",i);
 800150e:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	493f      	ldr	r1, [pc, #252]	; (8001614 <Sim_restartControl+0x160>)
 8001516:	4618      	mov	r0, r3
 8001518:	f003 ffb8 	bl	800548c <siprintf>
			//Doc noi dung tin nhan
			Sim_send(Sim_Cmd, strlen(Sim_Cmd));
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f855 	bl	80005dc <Sim_send>
			m_ret = Sim_checkResponseWith("RESET", 3, 3000);
 8001532:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001536:	2103      	movs	r1, #3
 8001538:	4837      	ldr	r0, [pc, #220]	; (8001618 <Sim_restartControl+0x164>)
 800153a:	f7ff f8b3 	bl	80006a4 <Sim_checkResponseWith>
 800153e:	4603      	mov	r3, r0
 8001540:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			char* tok = NULL;
 8001544:	2300      	movs	r3, #0
 8001546:	67bb      	str	r3, [r7, #120]	; 0x78
			tok = strtok((char*)Sim_Rxdata,"\"");
 8001548:	4934      	ldr	r1, [pc, #208]	; (800161c <Sim_restartControl+0x168>)
 800154a:	4835      	ldr	r0, [pc, #212]	; (8001620 <Sim_restartControl+0x16c>)
 800154c:	f003 ffde 	bl	800550c <strtok>
 8001550:	67b8      	str	r0, [r7, #120]	; 0x78
			if(tok != NULL)
 8001552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001554:	2b00      	cmp	r3, #0
 8001556:	d037      	beq.n	80015c8 <Sim_restartControl+0x114>
			{
				while(tok != NULL)
 8001558:	e02f      	b.n	80015ba <Sim_restartControl+0x106>
				{
					tok = strtok(NULL,"\"");
 800155a:	4930      	ldr	r1, [pc, #192]	; (800161c <Sim_restartControl+0x168>)
 800155c:	2000      	movs	r0, #0
 800155e:	f003 ffd5 	bl	800550c <strtok>
 8001562:	67b8      	str	r0, [r7, #120]	; 0x78
					if(strstr(tok,"+84") != NULL)
 8001564:	492f      	ldr	r1, [pc, #188]	; (8001624 <Sim_restartControl+0x170>)
 8001566:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001568:	f003 ffb8 	bl	80054dc <strstr>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d012      	beq.n	8001598 <Sim_restartControl+0xe4>
					{
						memset(Sim_PhoneNumb,0,strlen(Sim_PhoneNumb));
 8001572:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fe2a 	bl	80001d0 <strlen>
 800157c:	4602      	mov	r2, r0
 800157e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f003 ff79 	bl	800547c <memset>
						strcpy(Sim_PhoneNumb,tok);
 800158a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800158e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001590:	4618      	mov	r0, r3
 8001592:	f003 ff9b 	bl	80054cc <strcpy>
 8001596:	e010      	b.n	80015ba <Sim_restartControl+0x106>
					}
					else if(strstr(tok,"RESET") != NULL)
 8001598:	491f      	ldr	r1, [pc, #124]	; (8001618 <Sim_restartControl+0x164>)
 800159a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800159c:	f003 ff9e 	bl	80054dc <strstr>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <Sim_restartControl+0x106>
					{
						Sim_sendMess(Sim_PhoneNumb, "Reset he thong thanh cong");
 80015a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015aa:	491f      	ldr	r1, [pc, #124]	; (8001628 <Sim_restartControl+0x174>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f841 	bl	8001634 <Sim_sendMess>
						isResetSystem = true;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						break; //break while
 80015b8:	e002      	b.n	80015c0 <Sim_restartControl+0x10c>
				while(tok != NULL)
 80015ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1cc      	bne.n	800155a <Sim_restartControl+0xa6>
					}
				}
				if(isResetSystem == true)
 80015c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <Sim_restartControl+0x128>
		for(uint8_t i = 1; i < 11; i++)
 80015c8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80015cc:	3301      	adds	r3, #1
 80015ce:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80015d2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d999      	bls.n	800150e <Sim_restartControl+0x5a>
 80015da:	e000      	b.n	80015de <Sim_restartControl+0x12a>
				{
					break; //break for
 80015dc:	bf00      	nop
				}
			}
		}
		Sim_send("AT+CMGD=1,4\r",strlen("AT+CMGD=1,4\r"));
 80015de:	210c      	movs	r1, #12
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <Sim_restartControl+0x178>)
 80015e2:	f7fe fffb 	bl	80005dc <Sim_send>
		m_ret = Sim_checkResponseWith("OK", 2, 5000);
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	2102      	movs	r1, #2
 80015ec:	4810      	ldr	r0, [pc, #64]	; (8001630 <Sim_restartControl+0x17c>)
 80015ee:	f7ff f859 	bl	80006a4 <Sim_checkResponseWith>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		__NOP();
 80015f8:	bf00      	nop
		if(isResetSystem == true)
 80015fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <Sim_restartControl+0x152>
		{
			NVIC_SystemReset();
 8001602:	f7ff f91f 	bl	8000844 <__NVIC_SystemReset>
		}
	}
}
 8001606:	bf00      	nop
 8001608:	3780      	adds	r7, #128	; 0x80
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	08006c0c 	.word	0x08006c0c
 8001614:	08006c14 	.word	0x08006c14
 8001618:	08006c20 	.word	0x08006c20
 800161c:	08006c28 	.word	0x08006c28
 8001620:	20000528 	.word	0x20000528
 8001624:	08006c2c 	.word	0x08006c2c
 8001628:	08006c30 	.word	0x08006c30
 800162c:	08006c4c 	.word	0x08006c4c
 8001630:	08006c08 	.word	0x08006c08

08001634 <Sim_sendMess>:

void Sim_sendMess(char* phonenumber, char* content)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b096      	sub	sp, #88	; 0x58
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	char Sim_Cmd1[40] = {0};
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
 8001642:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f003 ff16 	bl	800547c <memset>
	sprintf(Sim_Cmd1,"AT+CMGS=\"%s\"\r",phonenumber);
 8001650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	491d      	ldr	r1, [pc, #116]	; (80016cc <Sim_sendMess+0x98>)
 8001658:	4618      	mov	r0, r3
 800165a:	f003 ff17 	bl	800548c <siprintf>
	char Sim_Cmd2[40] = {0};
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f003 ff06 	bl	800547c <memset>
	sprintf(Sim_Cmd2,"%s\x1A",content);
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4916      	ldr	r1, [pc, #88]	; (80016d0 <Sim_sendMess+0x9c>)
 8001678:	4618      	mov	r0, r3
 800167a:	f003 ff07 	bl	800548c <siprintf>
	Sim_send(Sim_Cmd1, strlen(Sim_Cmd1));
 800167e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fda4 	bl	80001d0 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ffa2 	bl	80005dc <Sim_send>
	if(Sim_checkResponseWith(">",2,5000) == RET_OK)
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	2102      	movs	r1, #2
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <Sim_sendMess+0xa0>)
 80016a0:	f7ff f800 	bl	80006a4 <Sim_checkResponseWith>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10c      	bne.n	80016c4 <Sim_sendMess+0x90>
	{
		Sim_send(Sim_Cmd2, strlen(Sim_Cmd2));
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fd8e 	bl	80001d0 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff8c 	bl	80005dc <Sim_send>
	}
}
 80016c4:	bf00      	nop
 80016c6:	3758      	adds	r7, #88	; 0x58
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	08006c5c 	.word	0x08006c5c
 80016d0:	08006c6c 	.word	0x08006c6c
 80016d4:	08006c70 	.word	0x08006c70

080016d8 <RTC_initAlarm>:

bool RTC_initAlarm(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	460b      	mov	r3, r1
 80016e4:	71bb      	strb	r3, [r7, #6]
 80016e6:	4613      	mov	r3, r2
 80016e8:	717b      	strb	r3, [r7, #5]
	minutes = (minutes/RTC_ALARM)*RTC_ALARM + RTC_ALARM;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <RTC_initAlarm+0xbc>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	79ba      	ldrb	r2, [r7, #6]
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <RTC_initAlarm+0xbc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	fb12 f303 	smulbb	r3, r2, r3
 8001702:	71bb      	strb	r3, [r7, #6]
	if(minutes > 59)
 8001704:	79bb      	ldrb	r3, [r7, #6]
 8001706:	2b3b      	cmp	r3, #59	; 0x3b
 8001708:	d915      	bls.n	8001736 <RTC_initAlarm+0x5e>
	{
		if(hours+1 > 23)
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b16      	cmp	r3, #22
 800170e:	d90f      	bls.n	8001730 <RTC_initAlarm+0x58>
		{
			hours = (hours+1)%24;
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <RTC_initAlarm+0xc0>)
 8001716:	fb83 1302 	smull	r1, r3, r3, r2
 800171a:	1099      	asrs	r1, r3, #2
 800171c:	17d3      	asrs	r3, r2, #31
 800171e:	1ac9      	subs	r1, r1, r3
 8001720:	460b      	mov	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	440b      	add	r3, r1
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1ad1      	subs	r1, r2, r3
 800172a:	460b      	mov	r3, r1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e002      	b.n	8001736 <RTC_initAlarm+0x5e>
		}
		else hours = hours+1;
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	3301      	adds	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		hours = hours;
	}
	minutes = minutes%60;
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <RTC_initAlarm+0xc4>)
 800173a:	fba3 1302 	umull	r1, r3, r3, r2
 800173e:	0959      	lsrs	r1, r3, #5
 8001740:	460b      	mov	r3, r1
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	1a5b      	subs	r3, r3, r1
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	71bb      	strb	r3, [r7, #6]
	seconds = seconds%60;
 800174c:	797a      	ldrb	r2, [r7, #5]
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <RTC_initAlarm+0xc4>)
 8001750:	fba3 1302 	umull	r1, r3, r3, r2
 8001754:	0959      	lsrs	r1, r3, #5
 8001756:	460b      	mov	r3, r1
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	1a5b      	subs	r3, r3, r1
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	717b      	strb	r3, [r7, #5]
	userAlarm.AlarmTime.Hours = hours;
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <RTC_initAlarm+0xc8>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	7013      	strb	r3, [r2, #0]
	userAlarm.AlarmTime.Minutes = minutes;
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <RTC_initAlarm+0xc8>)
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	7053      	strb	r3, [r2, #1]
	userAlarm.AlarmTime.Seconds = 0;
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <RTC_initAlarm+0xc8>)
 8001770:	2200      	movs	r2, #0
 8001772:	709a      	strb	r2, [r3, #2]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &userAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001774:	2200      	movs	r2, #0
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <RTC_initAlarm+0xc8>)
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <RTC_initAlarm+0xcc>)
 800177a:	f002 fbd9 	bl	8003f30 <HAL_RTC_SetAlarm_IT>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <RTC_initAlarm+0xb0>
	{
		return false;
 8001784:	2300      	movs	r3, #0
 8001786:	e000      	b.n	800178a <RTC_initAlarm+0xb2>
	}
	return true;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000007e 	.word	0x2000007e
 8001798:	2aaaaaab 	.word	0x2aaaaaab
 800179c:	88888889 	.word	0x88888889
 80017a0:	20000b2c 	.word	0x20000b2c
 80017a4:	20000c28 	.word	0x20000c28

080017a8 <RTC_saveDateTime>:

void RTC_saveDateTime(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80017ae:	2200      	movs	r2, #0
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <RTC_saveDateTime+0x3c>)
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <RTC_saveDateTime+0x40>)
 80017b4:	f002 fb6d 	bl	8003e92 <HAL_RTC_GetDate>
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <RTC_saveDateTime+0x3c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
	uint32_t dateToStore;
	memcpy(&dateToStore, &currentDate, 4);
 80017bc:	607b      	str	r3, [r7, #4]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2,(dateToStore >> 16));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	461a      	mov	r2, r3
 80017c4:	2102      	movs	r1, #2
 80017c6:	4808      	ldr	r0, [pc, #32]	; (80017e8 <RTC_saveDateTime+0x40>)
 80017c8:	f002 fdc0 	bl	800434c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3,(dateToStore & 0xffff));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	2103      	movs	r1, #3
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <RTC_saveDateTime+0x40>)
 80017d6:	f002 fdb9 	bl	800434c <HAL_RTCEx_BKUPWrite>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000b28 	.word	0x20000b28
 80017e8:	20000c28 	.word	0x20000c28

080017ec <RTC_readDateTime>:

void RTC_readDateTime(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	uint32_t dateToRead;
	RTC_DateTypeDef tempDate = {0};
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
	dateToRead  = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 80017f6:	2103      	movs	r1, #3
 80017f8:	480f      	ldr	r0, [pc, #60]	; (8001838 <RTC_readDateTime+0x4c>)
 80017fa:	f002 fdc1 	bl	8004380 <HAL_RTCEx_BKUPRead>
 80017fe:	4603      	mov	r3, r0
 8001800:	607b      	str	r3, [r7, #4]
	dateToRead |= HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) << 16;
 8001802:	2102      	movs	r1, #2
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <RTC_readDateTime+0x4c>)
 8001806:	f002 fdbb 	bl	8004380 <HAL_RTCEx_BKUPRead>
 800180a:	4603      	mov	r3, r0
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4313      	orrs	r3, r2
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
	memcpy(&tempDate, &dateToRead, sizeof(uint32_t));
 8001816:	603b      	str	r3, [r7, #0]
	HAL_RTC_SetDate(&hrtc, &tempDate, RTC_FORMAT_BIN);
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <RTC_readDateTime+0x4c>)
 8001820:	f002 fa90 	bl	8003d44 <HAL_RTC_SetDate>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001824:	2200      	movs	r2, #0
 8001826:	4905      	ldr	r1, [pc, #20]	; (800183c <RTC_readDateTime+0x50>)
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <RTC_readDateTime+0x4c>)
 800182a:	f002 fb32 	bl	8003e92 <HAL_RTC_GetDate>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000c28 	.word	0x20000c28
 800183c:	20000b28 	.word	0x20000b28

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>
	...

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_MspInit+0x44>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_MspInit+0x44>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_MspInit+0x44>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_MspInit+0x44>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x44>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x44>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <HAL_RTC_MspInit+0x50>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d119      	bne.n	80018da <HAL_RTC_MspInit+0x46>
 80018a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018aa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018b4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RTC_MspInit+0x54>)
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	2301      	movs	r3, #1
 80018c8:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2029      	movs	r0, #41	; 0x29
 80018d0:	f000 fb37 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018d4:	2029      	movs	r0, #41	; 0x29
 80018d6:	f000 fb50 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40002800 	.word	0x40002800
 80018e8:	10908100 	.word	0x10908100

080018ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a33      	ldr	r2, [pc, #204]	; (80019d8 <HAL_UART_MspInit+0xec>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d131      	bne.n	8001972 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190e:	4b33      	ldr	r3, [pc, #204]	; (80019dc <HAL_UART_MspInit+0xf0>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a32      	ldr	r2, [pc, #200]	; (80019dc <HAL_UART_MspInit+0xf0>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_UART_MspInit+0xf0>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_UART_MspInit+0xf0>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	4a2c      	ldr	r2, [pc, #176]	; (80019dc <HAL_UART_MspInit+0xf0>)
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	6153      	str	r3, [r2, #20]
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_UART_MspInit+0xf0>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_RX_Pin|SIM_TX_Pin;
 800193e:	230c      	movs	r3, #12
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194e:	2307      	movs	r3, #7
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195c:	f000 fb9e 	bl	800209c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2026      	movs	r0, #38	; 0x26
 8001966:	f000 faec 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800196a:	2026      	movs	r0, #38	; 0x26
 800196c:	f000 fb05 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001970:	e02d      	b.n	80019ce <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <HAL_UART_MspInit+0xf4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d128      	bne.n	80019ce <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_UART_MspInit+0xf0>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_UART_MspInit+0xf0>)
 8001982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001986:	61d3      	str	r3, [r2, #28]
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_UART_MspInit+0xf0>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0xf0>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_UART_MspInit+0xf0>)
 800199a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199e:	6153      	str	r3, [r2, #20]
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_UART_MspInit+0xf0>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 80019ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019be:	2307      	movs	r3, #7
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4806      	ldr	r0, [pc, #24]	; (80019e4 <HAL_UART_MspInit+0xf8>)
 80019ca:	f000 fb67 	bl	800209c <HAL_GPIO_Init>
}
 80019ce:	bf00      	nop
 80019d0:	3730      	adds	r7, #48	; 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40004800 	.word	0x40004800
 80019e4:	48000400 	.word	0x48000400

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f966 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f000 fcbd 	bl	80023c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <USART2_IRQHandler+0x10>)
 8001a52:	f002 fdd7 	bl	8004604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000c48 	.word	0x20000c48

08001a60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <RTC_Alarm_IRQHandler+0x10>)
 8001a66:	f002 fb9b 	bl	80041a0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000c28 	.word	0x20000c28

08001a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	return 1;
 8001a78:	2301      	movs	r3, #1
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_kill>:

int _kill(int pid, int sig)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a8e:	f003 fccb 	bl	8005428 <__errno>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2216      	movs	r2, #22
 8001a96:	601a      	str	r2, [r3, #0]
	return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_exit>:

void _exit (int status)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffe7 	bl	8001a84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ab6:	e7fe      	b.n	8001ab6 <_exit+0x12>

08001ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e00a      	b.n	8001ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aca:	f3af 8000 	nop.w
 8001ace:	4601      	mov	r1, r0
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	b2ca      	uxtb	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf0      	blt.n	8001aca <_read+0x12>
	}

return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e009      	b.n	8001b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dbf1      	blt.n	8001b04 <_write+0x12>
	}
	return len;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_close>:

int _close(int file)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b52:	605a      	str	r2, [r3, #4]
	return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_isatty>:

int _isatty(int file)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
	return 1;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
	return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f003 fc30 	bl	8005428 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000a000 	.word	0x2000a000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	20000b58 	.word	0x20000b58
 8001bfc:	20000ce0 	.word	0x20000ce0

08001c00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <SystemInit+0x20>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <SystemInit+0x20>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2a:	490e      	ldr	r1, [pc, #56]	; (8001c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <LoopForever+0xe>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c40:	4c0b      	ldr	r4, [pc, #44]	; (8001c70 <LoopForever+0x16>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c4e:	f7ff ffd7 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f003 fbef 	bl	8005434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c56:	f7fe fe5d 	bl	8000914 <main>

08001c5a <LoopForever>:

LoopForever:
    b LoopForever
 8001c5a:	e7fe      	b.n	8001c5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c5c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001c68:	08006f00 	.word	0x08006f00
  ldr r2, =_sbss
 8001c6c:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8001c70:	20000ce0 	.word	0x20000ce0

08001c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_2_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_Init+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_Init+0x28>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f94f 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f808 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff fdda 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f967 	bl	8001f96 <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 f92f 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200000b0 	.word	0x200000b0
 8001cfc:	200000b8 	.word	0x200000b8
 8001d00:	200000b4 	.word	0x200000b4

08001d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200000b8 	.word	0x200000b8
 8001d28:	20000ccc 	.word	0x20000ccc

08001d2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000ccc 	.word	0x20000ccc

08001d44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200000b8 	.word	0x200000b8

08001d8c <__NVIC_SetPriorityGrouping>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff29 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff3e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff8e 	bl	8001e80 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5d 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff31 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d008      	beq.n	8001fd2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e020      	b.n	8002014 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 020e 	bic.w	r2, r2, #14
 8001fe0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8002000:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002032:	2b02      	cmp	r3, #2
 8002034:	d005      	beq.n	8002042 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e027      	b.n	8002092 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 020e 	bic.w	r2, r2, #14
 8002050:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
    } 
  }
  return status;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	e154      	b.n	8002356 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8146 	beq.w	8002350 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d00b      	beq.n	80020e4 <HAL_GPIO_Init+0x48>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d007      	beq.n	80020e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d8:	2b11      	cmp	r3, #17
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d130      	bne.n	8002146 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211a:	2201      	movs	r2, #1
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 0201 	and.w	r2, r3, #1
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0xea>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b12      	cmp	r3, #18
 8002184:	d123      	bne.n	80021ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0203 	and.w	r2, r3, #3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80a0 	beq.w	8002350 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002210:	4b58      	ldr	r3, [pc, #352]	; (8002374 <HAL_GPIO_Init+0x2d8>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a57      	ldr	r2, [pc, #348]	; (8002374 <HAL_GPIO_Init+0x2d8>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b55      	ldr	r3, [pc, #340]	; (8002374 <HAL_GPIO_Init+0x2d8>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002228:	4a53      	ldr	r2, [pc, #332]	; (8002378 <HAL_GPIO_Init+0x2dc>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002252:	d019      	beq.n	8002288 <HAL_GPIO_Init+0x1ec>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a49      	ldr	r2, [pc, #292]	; (800237c <HAL_GPIO_Init+0x2e0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_GPIO_Init+0x1e8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_GPIO_Init+0x2e4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00d      	beq.n	8002280 <HAL_GPIO_Init+0x1e4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a47      	ldr	r2, [pc, #284]	; (8002384 <HAL_GPIO_Init+0x2e8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x1e0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a46      	ldr	r2, [pc, #280]	; (8002388 <HAL_GPIO_Init+0x2ec>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_GPIO_Init+0x1dc>
 8002274:	2304      	movs	r3, #4
 8002276:	e008      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 8002278:	2305      	movs	r3, #5
 800227a:	e006      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 800227c:	2303      	movs	r3, #3
 800227e:	e004      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 8002280:	2302      	movs	r3, #2
 8002282:	e002      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <HAL_GPIO_Init+0x1ee>
 8002288:	2300      	movs	r3, #0
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	f002 0203 	and.w	r2, r2, #3
 8002290:	0092      	lsls	r2, r2, #2
 8002292:	4093      	lsls	r3, r2
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800229a:	4937      	ldr	r1, [pc, #220]	; (8002378 <HAL_GPIO_Init+0x2dc>)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_GPIO_Init+0x2f0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022cc:	4a2f      	ldr	r2, [pc, #188]	; (800238c <HAL_GPIO_Init+0x2f0>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_GPIO_Init+0x2f0>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022f6:	4a25      	ldr	r2, [pc, #148]	; (800238c <HAL_GPIO_Init+0x2f0>)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_GPIO_Init+0x2f0>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002320:	4a1a      	ldr	r2, [pc, #104]	; (800238c <HAL_GPIO_Init+0x2f0>)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_GPIO_Init+0x2f0>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_GPIO_Init+0x2f0>)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	f47f aea3 	bne.w	80020ac <HAL_GPIO_Init+0x10>
  }
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40021000 	.word	0x40021000
 8002378:	40010000 	.word	0x40010000
 800237c:	48000400 	.word	0x48000400
 8002380:	48000800 	.word	0x48000800
 8002384:	48000c00 	.word	0x48000c00
 8002388:	48001000 	.word	0x48001000
 800238c:	40010400 	.word	0x40010400

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fa46 	bl	8000870 <HAL_GPIO_EXTI_Callback>
  }
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40010400 	.word	0x40010400

080023f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40007000 	.word	0x40007000

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002416:	af00      	add	r7, sp, #0
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f000 bef4 	b.w	8003212 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 816a 	beq.w	800270e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800243a:	4bb3      	ldr	r3, [pc, #716]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002446:	4bb0      	ldr	r3, [pc, #704]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b08      	cmp	r3, #8
 8002450:	d159      	bne.n	8002506 <HAL_RCC_OscConfig+0xf6>
 8002452:	4bad      	ldr	r3, [pc, #692]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245e:	d152      	bne.n	8002506 <HAL_RCC_OscConfig+0xf6>
 8002460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002464:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8002474:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x82>
 800248c:	4b9e      	ldr	r3, [pc, #632]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0xae>
 8002492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002496:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024aa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024ae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024ba:	4b93      	ldr	r3, [pc, #588]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024c6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024ca:	fa92 f2a2 	rbit	r2, r2
 80024ce:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80024d2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0220 	orr.w	r2, r2, #32
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 810c 	beq.w	800270c <HAL_RCC_OscConfig+0x2fc>
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8106 	bne.w	800270c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f000 be86 	b.w	8003212 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x110>
 8002512:	4b7d      	ldr	r3, [pc, #500]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7c      	ldr	r2, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e030      	b.n	8002582 <HAL_RCC_OscConfig+0x172>
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x134>
 800252a:	4b77      	ldr	r3, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a76      	ldr	r2, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b74      	ldr	r3, [pc, #464]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a73      	ldr	r2, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01e      	b.n	8002582 <HAL_RCC_OscConfig+0x172>
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0x15a>
 8002550:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6c      	ldr	r2, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a69      	ldr	r2, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0x172>
 800256a:	4b67      	ldr	r3, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a66      	ldr	r2, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b64      	ldr	r3, [pc, #400]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a63      	ldr	r2, [pc, #396]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002582:	4b61      	ldr	r3, [pc, #388]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	f023 020f 	bic.w	r2, r3, #15
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	495d      	ldr	r1, [pc, #372]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d059      	beq.n	8002654 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fbc4 	bl	8001d2c <HAL_GetTick>
 80025a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025aa:	f7ff fbbf 	bl	8001d2c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d902      	bls.n	80025c0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	f000 be29 	b.w	8003212 <HAL_RCC_OscConfig+0xe02>
 80025c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025d4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0x1e2>
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x20e>
 80025f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800260e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002622:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002626:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800262a:	fa92 f2a2 	rbit	r2, r2
 800262e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002632:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ab      	beq.n	80025aa <HAL_RCC_OscConfig+0x19a>
 8002652:	e05c      	b.n	800270e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff fb6a 	bl	8001d2c <HAL_GetTick>
 8002658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265e:	f7ff fb65 	bl	8001d2c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d902      	bls.n	8002674 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	f000 bdcf 	b.w	8003212 <HAL_RCC_OscConfig+0xe02>
 8002674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002678:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002688:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_OscConfig+0x296>
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x2c2>
 80026a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026be:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026c2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_RCC_OscConfig+0x2f8>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026d6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026da:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026de:	fa92 f2a2 	rbit	r2, r2
 80026e2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026e6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ab      	bne.n	800265e <HAL_RCC_OscConfig+0x24e>
 8002706:	e002      	b.n	800270e <HAL_RCC_OscConfig+0x2fe>
 8002708:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 816f 	beq.w	80029fc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800271e:	4bd0      	ldr	r3, [pc, #832]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800272a:	4bcd      	ldr	r3, [pc, #820]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d16c      	bne.n	8002810 <HAL_RCC_OscConfig+0x400>
 8002736:	4bca      	ldr	r3, [pc, #808]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d166      	bne.n	8002810 <HAL_RCC_OscConfig+0x400>
 8002742:	2302      	movs	r3, #2
 8002744:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002754:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d102      	bne.n	8002772 <HAL_RCC_OscConfig+0x362>
 800276c:	4bbc      	ldr	r3, [pc, #752]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	e013      	b.n	800279a <HAL_RCC_OscConfig+0x38a>
 8002772:	2302      	movs	r3, #2
 8002774:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002784:	2302      	movs	r3, #2
 8002786:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800278a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002796:	4bb2      	ldr	r3, [pc, #712]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2202      	movs	r2, #2
 800279c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027a0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027a4:	fa92 f2a2 	rbit	r2, r2
 80027a8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027ac:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f042 0220 	orr.w	r2, r2, #32
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f002 021f 	and.w	r2, r2, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_RCC_OscConfig+0x3cc>
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f000 bd1b 	b.w	8003212 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	21f8      	movs	r1, #248	; 0xf8
 80027ec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027f4:	fa91 f1a1 	rbit	r1, r1
 80027f8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027fc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002800:	fab1 f181 	clz	r1, r1
 8002804:	b2c9      	uxtb	r1, r1
 8002806:	408b      	lsls	r3, r1
 8002808:	4995      	ldr	r1, [pc, #596]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	e0f5      	b.n	80029fc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8085 	beq.w	8002926 <HAL_RCC_OscConfig+0x516>
 800281c:	2301      	movs	r3, #1
 800281e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800282e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800283c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	461a      	mov	r2, r3
 8002844:	2301      	movs	r3, #1
 8002846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff fa70 	bl	8001d2c <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002852:	f7ff fa6b 	bl	8001d2c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	f000 bcd5 	b.w	8003212 <HAL_RCC_OscConfig+0xe02>
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800287a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0x488>
 8002892:	4b73      	ldr	r3, [pc, #460]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	e013      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b0>
 8002898:	2302      	movs	r3, #2
 800289a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028aa:	2302      	movs	r3, #2
 80028ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028bc:	4b68      	ldr	r3, [pc, #416]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2202      	movs	r2, #2
 80028c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028ca:	fa92 f2a2 	rbit	r2, r2
 80028ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028d6:	fab2 f282 	clz	r2, r2
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	f042 0220 	orr.w	r2, r2, #32
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	f002 021f 	and.w	r2, r2, #31
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0af      	beq.n	8002852 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	21f8      	movs	r1, #248	; 0xf8
 8002902:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800290a:	fa91 f1a1 	rbit	r1, r1
 800290e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002912:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002916:	fab1 f181 	clz	r1, r1
 800291a:	b2c9      	uxtb	r1, r1
 800291c:	408b      	lsls	r3, r1
 800291e:	4950      	ldr	r1, [pc, #320]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e06a      	b.n	80029fc <HAL_RCC_OscConfig+0x5ec>
 8002926:	2301      	movs	r3, #1
 8002928:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002938:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002946:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	461a      	mov	r2, r3
 800294e:	2300      	movs	r3, #0
 8002950:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7ff f9eb 	bl	8001d2c <HAL_GetTick>
 8002956:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295c:	f7ff f9e6 	bl	8001d2c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d902      	bls.n	8002972 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	f000 bc50 	b.w	8003212 <HAL_RCC_OscConfig+0xe02>
 8002972:	2302      	movs	r3, #2
 8002974:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_RCC_OscConfig+0x592>
 800299c:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	e013      	b.n	80029ca <HAL_RCC_OscConfig+0x5ba>
 80029a2:	2302      	movs	r3, #2
 80029a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029b4:	2302      	movs	r3, #2
 80029b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <HAL_RCC_OscConfig+0x650>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2202      	movs	r2, #2
 80029cc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029d4:	fa92 f2a2 	rbit	r2, r2
 80029d8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029e0:	fab2 f282 	clz	r2, r2
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f042 0220 	orr.w	r2, r2, #32
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f002 021f 	and.w	r2, r2, #31
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1af      	bne.n	800295c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80da 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d069      	beq.n	8002aea <HAL_RCC_OscConfig+0x6da>
 8002a16:	2301      	movs	r3, #1
 8002a18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_OscConfig+0x654>)
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7ff f974 	bl	8001d2c <HAL_GetTick>
 8002a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a48:	e00e      	b.n	8002a68 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4a:	f7ff f96f 	bl	8001d2c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d906      	bls.n	8002a68 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e3d9      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	10908120 	.word	0x10908120
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a7a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a7e:	2202      	movs	r2, #2
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a96:	2202      	movs	r2, #2
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002aa8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4ba5      	ldr	r3, [pc, #660]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	6019      	str	r1, [r3, #0]
 8002ab6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f1a3 	rbit	r1, r3
 8002ac0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ac4:	6019      	str	r1, [r3, #0]
  return result;
 8002ac6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0b0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x63a>
 8002ae8:	e06a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7b0>
 8002aea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b00:	601a      	str	r2, [r3, #0]
  return result;
 8002b02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b06:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b8c      	ldr	r3, [pc, #560]	; (8002d44 <HAL_RCC_OscConfig+0x934>)
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	461a      	mov	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1c:	f7ff f906 	bl	8001d2c <HAL_GetTick>
 8002b20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	e009      	b.n	8002b3a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b26:	f7ff f901 	bl	8001d2c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e36b      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
 8002b3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b3e:	2202      	movs	r2, #2
 8002b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fa93 f2a3 	rbit	r2, r3
 8002b4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b56:	2202      	movs	r2, #2
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa93 f2a3 	rbit	r2, r3
 8002b64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b6e:	2202      	movs	r2, #2
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b86:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	6019      	str	r1, [r3, #0]
 8002b8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	fa93 f1a3 	rbit	r1, r3
 8002b98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b9c:	6019      	str	r1, [r3, #0]
  return result;
 8002b9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1b2      	bne.n	8002b26 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8158 	beq.w	8002e80 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b5a      	ldr	r3, [pc, #360]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d112      	bne.n	8002c08 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b57      	ldr	r3, [pc, #348]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	4a56      	ldr	r2, [pc, #344]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	61d3      	str	r3, [r2, #28]
 8002bee:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <HAL_RCC_OscConfig+0x938>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11a      	bne.n	8002c4a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_RCC_OscConfig+0x938>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <HAL_RCC_OscConfig+0x938>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c20:	f7ff f884 	bl	8001d2c <HAL_GetTick>
 8002c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e009      	b.n	8002c3e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7ff f87f 	bl	8001d2c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e2e9      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCC_OscConfig+0x938>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ef      	beq.n	8002c2a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x852>
 8002c54:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a39      	ldr	r2, [pc, #228]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	e02f      	b.n	8002cc2 <HAL_RCC_OscConfig+0x8b2>
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x876>
 8002c6c:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a30      	ldr	r2, [pc, #192]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	6213      	str	r3, [r2, #32]
 8002c84:	e01d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x8b2>
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCC_OscConfig+0x89a>
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6213      	str	r3, [r2, #32]
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x8b2>
 8002caa:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6213      	str	r3, [r2, #32]
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a21      	ldr	r2, [pc, #132]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002cbc:	f023 0304 	bic.w	r3, r3, #4
 8002cc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d06b      	beq.n	8002da4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ccc:	f7ff f82e 	bl	8001d2c <HAL_GetTick>
 8002cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7ff f829 	bl	8001d2c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e291      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
 8002cee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d1c:	601a      	str	r2, [r3, #0]
  return result;
 8002d1e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d109      	bne.n	8002d4c <HAL_RCC_OscConfig+0x93c>
 8002d38:	4b01      	ldr	r3, [pc, #4]	; (8002d40 <HAL_RCC_OscConfig+0x930>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	e014      	b.n	8002d68 <HAL_RCC_OscConfig+0x958>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	10908120 	.word	0x10908120
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d50:	2202      	movs	r2, #2
 8002d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	4bbb      	ldr	r3, [pc, #748]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	6011      	str	r1, [r2, #0]
 8002d70:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	fa92 f1a2 	rbit	r1, r2
 8002d7a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d7e:	6011      	str	r1, [r2, #0]
  return result;
 8002d80:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	fab2 f282 	clz	r2, r2
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	f002 021f 	and.w	r2, r2, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d099      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x8c6>
 8002da2:	e063      	b.n	8002e6c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fe ffc2 	bl	8001d2c <HAL_GetTick>
 8002da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe ffbd 	bl	8001d2c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e225      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
 8002dc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002dca:	2202      	movs	r2, #2
 8002dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f2a3 	rbit	r2, r3
 8002dd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002de2:	2202      	movs	r2, #2
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002df4:	601a      	str	r2, [r3, #0]
  return result;
 8002df6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dfa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f043 0302 	orr.w	r3, r3, #2
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_OscConfig+0xa06>
 8002e10:	4b90      	ldr	r3, [pc, #576]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	e00d      	b.n	8002e32 <HAL_RCC_OscConfig+0xa22>
 8002e16:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fa93 f2a3 	rbit	r2, r3
 8002e28:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	4b89      	ldr	r3, [pc, #548]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e36:	2102      	movs	r1, #2
 8002e38:	6011      	str	r1, [r2, #0]
 8002e3a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	fa92 f1a2 	rbit	r1, r2
 8002e44:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e48:	6011      	str	r1, [r2, #0]
  return result;
 8002e4a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	fab2 f282 	clz	r2, r2
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f002 021f 	and.w	r2, r2, #31
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f202 	lsl.w	r2, r1, r2
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1a0      	bne.n	8002dae <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e6c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e74:	4b77      	ldr	r3, [pc, #476]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	4a76      	ldr	r2, [pc, #472]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 81c2 	beq.w	8003210 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e8c:	4b71      	ldr	r3, [pc, #452]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	f000 819c 	beq.w	80031d2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	f040 8114 	bne.w	80030ce <HAL_RCC_OscConfig+0xcbe>
 8002ea6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002eaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ebe:	601a      	str	r2, [r3, #0]
  return result;
 8002ec0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ec4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ed0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe ff26 	bl	8001d2c <HAL_GetTick>
 8002ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee4:	e009      	b.n	8002efa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe ff21 	bl	8001d2c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e18b      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
 8002efa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	fa93 f2a3 	rbit	r2, r3
 8002f0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f12:	601a      	str	r2, [r3, #0]
  return result;
 8002f14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d102      	bne.n	8002f34 <HAL_RCC_OscConfig+0xb24>
 8002f2e:	4b49      	ldr	r3, [pc, #292]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	e01b      	b.n	8002f6c <HAL_RCC_OscConfig+0xb5c>
 8002f34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	fa93 f2a3 	rbit	r2, r3
 8002f48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f74:	6011      	str	r1, [r2, #0]
 8002f76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	fa92 f1a2 	rbit	r1, r2
 8002f80:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f84:	6011      	str	r1, [r2, #0]
  return result;
 8002f86:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	fab2 f282 	clz	r2, r2
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f042 0220 	orr.w	r2, r2, #32
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	f002 021f 	and.w	r2, r2, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d19e      	bne.n	8002ee6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	4925      	ldr	r1, [pc, #148]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
 8002fc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fdc:	601a      	str	r2, [r3, #0]
  return result;
 8002fde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fe2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fe97 	bl	8001d2c <HAL_GetTick>
 8002ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003002:	e009      	b.n	8003018 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fe92 	bl	8001d2c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0fc      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
 8003018:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800301c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003030:	601a      	str	r2, [r3, #0]
  return result;
 8003032:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003036:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0xc48>
 800304c:	4b01      	ldr	r3, [pc, #4]	; (8003054 <HAL_RCC_OscConfig+0xc44>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	e01e      	b.n	8003090 <HAL_RCC_OscConfig+0xc80>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800305c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	fa93 f2a3 	rbit	r2, r3
 8003086:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCC_OscConfig+0xe0c>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003094:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003098:	6011      	str	r1, [r2, #0]
 800309a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	fa92 f1a2 	rbit	r1, r2
 80030a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030a8:	6011      	str	r1, [r2, #0]
  return result;
 80030aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	fab2 f282 	clz	r2, r2
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f042 0220 	orr.w	r2, r2, #32
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f002 021f 	and.w	r2, r2, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d09b      	beq.n	8003004 <HAL_RCC_OscConfig+0xbf4>
 80030cc:	e0a0      	b.n	8003210 <HAL_RCC_OscConfig+0xe00>
 80030ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	fa93 f2a3 	rbit	r2, r3
 80030e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e6:	601a      	str	r2, [r3, #0]
  return result;
 80030e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	461a      	mov	r2, r3
 8003100:	2300      	movs	r3, #0
 8003102:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe fe12 	bl	8001d2c <HAL_GetTick>
 8003108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310c:	e009      	b.n	8003122 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310e:	f7fe fe0d 	bl	8001d2c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e077      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
 8003122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800312a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fa93 f2a3 	rbit	r2, r3
 8003136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800313a:	601a      	str	r2, [r3, #0]
  return result;
 800313c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003140:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_RCC_OscConfig+0xd4c>
 8003156:	4b31      	ldr	r3, [pc, #196]	; (800321c <HAL_RCC_OscConfig+0xe0c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	e01b      	b.n	8003194 <HAL_RCC_OscConfig+0xd84>
 800315c:	f107 0320 	add.w	r3, r7, #32
 8003160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f107 0320 	add.w	r3, r7, #32
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f107 031c 	add.w	r3, r7, #28
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f107 0318 	add.w	r3, r7, #24
 800317a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f107 0318 	add.w	r3, r7, #24
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	fa93 f2a3 	rbit	r2, r3
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	4b22      	ldr	r3, [pc, #136]	; (800321c <HAL_RCC_OscConfig+0xe0c>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	f107 0210 	add.w	r2, r7, #16
 8003198:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800319c:	6011      	str	r1, [r2, #0]
 800319e:	f107 0210 	add.w	r2, r7, #16
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	fa92 f1a2 	rbit	r1, r2
 80031a8:	f107 020c 	add.w	r2, r7, #12
 80031ac:	6011      	str	r1, [r2, #0]
  return result;
 80031ae:	f107 020c 	add.w	r2, r7, #12
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f042 0220 	orr.w	r2, r2, #32
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f002 021f 	and.w	r2, r2, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d19e      	bne.n	800310e <HAL_RCC_OscConfig+0xcfe>
 80031d0:	e01e      	b.n	8003210 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e018      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_RCC_OscConfig+0xe0c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d108      	bne.n	800320c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b09e      	sub	sp, #120	; 0x78
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e162      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b90      	ldr	r3, [pc, #576]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d910      	bls.n	8003268 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b8d      	ldr	r3, [pc, #564]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	498b      	ldr	r1, [pc, #556]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e14a      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b82      	ldr	r3, [pc, #520]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	497f      	ldr	r1, [pc, #508]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80dc 	beq.w	800344c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d13c      	bne.n	8003316 <HAL_RCC_ClockConfig+0xf6>
 800329c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xa6>
 80032c0:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e00f      	b.n	80032e6 <HAL_RCC_ClockConfig+0xc6>
 80032c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	667b      	str	r3, [r7, #100]	; 0x64
 80032d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d8:	663b      	str	r3, [r7, #96]	; 0x60
 80032da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80032ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ee:	fa92 f2a2 	rbit	r2, r2
 80032f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f002 021f 	and.w	r2, r2, #31
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f202 	lsl.w	r2, r1, r2
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d17b      	bne.n	800340a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0f3      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d13c      	bne.n	8003398 <HAL_RCC_ClockConfig+0x178>
 800331e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003322:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800332c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_RCC_ClockConfig+0x128>
 8003342:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	e00f      	b.n	8003368 <HAL_RCC_ClockConfig+0x148>
 8003348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	647b      	str	r3, [r7, #68]	; 0x44
 8003356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335a:	643b      	str	r3, [r7, #64]	; 0x40
 800335c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336c:	63ba      	str	r2, [r7, #56]	; 0x38
 800336e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003370:	fa92 f2a2 	rbit	r2, r2
 8003374:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003378:	fab2 f282 	clz	r2, r2
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	f042 0220 	orr.w	r2, r2, #32
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	f002 021f 	and.w	r2, r2, #31
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f202 	lsl.w	r2, r1, r2
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d13a      	bne.n	800340a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b2      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
 8003398:	2302      	movs	r3, #2
 800339a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d102      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x1a0>
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	e00d      	b.n	80033dc <HAL_RCC_ClockConfig+0x1bc>
 80033c0:	2302      	movs	r3, #2
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	2302      	movs	r3, #2
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	2202      	movs	r2, #2
 80033de:	61ba      	str	r2, [r7, #24]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	fa92 f2a2 	rbit	r2, r2
 80033e6:	617a      	str	r2, [r7, #20]
  return result;
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	fab2 f282 	clz	r2, r2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f042 0220 	orr.w	r2, r2, #32
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f002 021f 	and.w	r2, r2, #31
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e079      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	491a      	ldr	r1, [pc, #104]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341c:	f7fe fc86 	bl	8001d2c <HAL_GetTick>
 8003420:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fc82 	bl	8001d2c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e061      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCC_ClockConfig+0x260>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d214      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 0207 	bic.w	r2, r3, #7
 8003462:	4906      	ldr	r1, [pc, #24]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_RCC_ClockConfig+0x25c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e040      	b.n	80034fe <HAL_RCC_ClockConfig+0x2de>
 800347c:	40022000 	.word	0x40022000
 8003480:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	491a      	ldr	r1, [pc, #104]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4912      	ldr	r1, [pc, #72]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034c2:	f000 f829 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034c6:	4601      	mov	r1, r0
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_RCC_ClockConfig+0x2e8>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d0:	22f0      	movs	r2, #240	; 0xf0
 80034d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	fa92 f2a2 	rbit	r2, r2
 80034da:	60fa      	str	r2, [r7, #12]
  return result;
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	fab2 f282 	clz	r2, r2
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	40d3      	lsrs	r3, r2
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x2ec>)
 80034e8:	5cd3      	ldrb	r3, [r2, r3]
 80034ea:	fa21 f303 	lsr.w	r3, r1, r3
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <HAL_RCC_ClockConfig+0x2f0>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_RCC_ClockConfig+0x2f4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fbd4 	bl	8001ca4 <HAL_InitTick>
  
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3778      	adds	r7, #120	; 0x78
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	08006c74 	.word	0x08006c74
 8003510:	200000b0 	.word	0x200000b0
 8003514:	200000b4 	.word	0x200000b4

08003518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b08b      	sub	sp, #44	; 0x2c
 800351c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003532:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d002      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x30>
 8003542:	2b08      	cmp	r3, #8
 8003544:	d003      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x36>
 8003546:	e03c      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003548:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800354a:	623b      	str	r3, [r7, #32]
      break;
 800354c:	e03c      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003554:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003558:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	fa92 f2a2 	rbit	r2, r2
 8003560:	607a      	str	r2, [r7, #4]
  return result;
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	40d3      	lsrs	r3, r2
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800356e:	5cd3      	ldrb	r3, [r2, r3]
 8003570:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	220f      	movs	r2, #15
 800357c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	fa92 f2a2 	rbit	r2, r2
 8003584:	60fa      	str	r2, [r7, #12]
  return result;
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	40d3      	lsrs	r3, r2
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035a0:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
 80035b0:	e004      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	623b      	str	r3, [r7, #32]
      break;
 80035c0:	e002      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80035c4:	623b      	str	r3, [r7, #32]
      break;
 80035c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c8:	6a3b      	ldr	r3, [r7, #32]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	372c      	adds	r7, #44	; 0x2c
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	007a1200 	.word	0x007a1200
 80035e0:	08006c8c 	.word	0x08006c8c
 80035e4:	08006c9c 	.word	0x08006c9c
 80035e8:	003d0900 	.word	0x003d0900

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	200000b0 	.word	0x200000b0

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800360a:	f7ff ffef 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360e:	4601      	mov	r1, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003618:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800361c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	fa92 f2a2 	rbit	r2, r2
 8003624:	603a      	str	r2, [r7, #0]
  return result;
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	fab2 f282 	clz	r2, r2
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	40d3      	lsrs	r3, r2
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003632:	5cd3      	ldrb	r3, [r2, r3]
 8003634:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	08006c84 	.word	0x08006c84

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800364e:	f7ff ffcd 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003652:	4601      	mov	r1, r0
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800365c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003660:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	fa92 f2a2 	rbit	r2, r2
 8003668:	603a      	str	r2, [r7, #0]
  return result;
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	fab2 f282 	clz	r2, r2
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	40d3      	lsrs	r3, r2
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08006c84 	.word	0x08006c84

0800368c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b092      	sub	sp, #72	; 0x48
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800369c:	2300      	movs	r3, #0
 800369e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80d4 	beq.w	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b0:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10e      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4a4a      	ldr	r2, [pc, #296]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	61d3      	str	r3, [r2, #28]
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036da:	4b45      	ldr	r3, [pc, #276]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d118      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e6:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a41      	ldr	r2, [pc, #260]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f2:	f7fe fb1b 	bl	8001d2c <HAL_GetTick>
 80036f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	e008      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fa:	f7fe fb17 	bl	8001d2c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b64      	cmp	r3, #100	; 0x64
 8003706:	d901      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e169      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8084 	beq.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003734:	429a      	cmp	r2, r3
 8003736:	d07c      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003738:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	461a      	mov	r2, r3
 8003762:	2301      	movs	r3, #1
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	461a      	mov	r2, r3
 8003786:	2300      	movs	r3, #0
 8003788:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800378a:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04b      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fe fac7 	bl	8001d2c <HAL_GetTick>
 800379e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fe fac3 	bl	8001d2c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e113      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80037b8:	2302      	movs	r3, #2
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
 80037c4:	2302      	movs	r3, #2
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	61fb      	str	r3, [r7, #28]
  return result;
 80037d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d108      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037e6:	4b01      	ldr	r3, [pc, #4]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	e00d      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40007000 	.word	0x40007000
 80037f4:	10908100 	.word	0x10908100
 80037f8:	2302      	movs	r3, #2
 80037fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	4b78      	ldr	r3, [pc, #480]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	2202      	movs	r2, #2
 800380a:	613a      	str	r2, [r7, #16]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	fa92 f2a2 	rbit	r2, r2
 8003812:	60fa      	str	r2, [r7, #12]
  return result;
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	fab2 f282 	clz	r2, r2
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f002 021f 	and.w	r2, r2, #31
 8003826:	2101      	movs	r1, #1
 8003828:	fa01 f202 	lsl.w	r2, r1, r2
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0b7      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	496a      	ldr	r1, [pc, #424]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384c:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003856:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003864:	4b60      	ldr	r3, [pc, #384]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	f023 0203 	bic.w	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	495d      	ldr	r1, [pc, #372]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003882:	4b59      	ldr	r3, [pc, #356]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4956      	ldr	r1, [pc, #344]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038a0:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	494e      	ldr	r1, [pc, #312]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f023 0210 	bic.w	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	4947      	ldr	r1, [pc, #284]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80038dc:	4b42      	ldr	r3, [pc, #264]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	493f      	ldr	r1, [pc, #252]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038fa:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f023 0220 	bic.w	r2, r3, #32
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4938      	ldr	r1, [pc, #224]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003918:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	4930      	ldr	r1, [pc, #192]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003936:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	4929      	ldr	r1, [pc, #164]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4921      	ldr	r1, [pc, #132]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	491a      	ldr	r1, [pc, #104]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003980:	4313      	orrs	r3, r2
 8003982:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003990:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	4912      	ldr	r1, [pc, #72]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	490b      	ldr	r1, [pc, #44]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	4903      	ldr	r1, [pc, #12]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3748      	adds	r7, #72	; 0x48
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e083      	b.n	8003b06 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7f5b      	ldrb	r3, [r3, #29]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd ff40 	bl	8001894 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	22ca      	movs	r2, #202	; 0xca
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2253      	movs	r2, #83	; 0x53
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fc26 	bl	800427c <RTC_EnterInitMode>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2204      	movs	r2, #4
 8003a42:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e05e      	b.n	8003b06 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a5a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6899      	ldr	r1, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6919      	ldr	r1, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	041a      	lsls	r2, r3, #16
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fbb8 	bl	800422c <HAL_RTC_WaitForSynchro>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2204      	movs	r2, #4
 8003ace:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e018      	b.n	8003b06 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	22ff      	movs	r2, #255	; 0xff
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b0e:	b590      	push	{r4, r7, lr}
 8003b10:	b087      	sub	sp, #28
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	7f1b      	ldrb	r3, [r3, #28]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_RTC_SetTime+0x1c>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e0aa      	b.n	8003c80 <HAL_RTC_SetTime+0x172>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2202      	movs	r2, #2
 8003b34:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d126      	bne.n	8003b8a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fbbd 	bl	80042d4 <RTC_ByteToBcd2>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	785b      	ldrb	r3, [r3, #1]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fbb6 	bl	80042d4 <RTC_ByteToBcd2>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b6c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	789b      	ldrb	r3, [r3, #2]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fbae 	bl	80042d4 <RTC_ByteToBcd2>
 8003b78:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b7a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	78db      	ldrb	r3, [r3, #3]
 8003b82:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e018      	b.n	8003bbc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003baa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003bb0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	78db      	ldrb	r3, [r3, #3]
 8003bb6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	22ca      	movs	r2, #202	; 0xca
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2253      	movs	r2, #83	; 0x53
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fb55 	bl	800427c <RTC_EnterInitMode>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2204      	movs	r2, #4
 8003be4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e047      	b.n	8003c80 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003bfa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c0e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6899      	ldr	r1, [r3, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c36:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d111      	bne.n	8003c6a <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 faf0 	bl	800422c <HAL_RTC_WaitForSynchro>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	22ff      	movs	r2, #255	; 0xff
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00a      	b.n	8003c80 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	22ff      	movs	r2, #255	; 0xff
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd90      	pop	{r4, r7, pc}

08003c88 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003cba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d11a      	bne.n	8003d3a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fb01 	bl	8004310 <RTC_Bcd2ToByte>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 faf8 	bl	8004310 <RTC_Bcd2ToByte>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461a      	mov	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	789b      	ldrb	r3, [r3, #2]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 faef 	bl	8004310 <RTC_Bcd2ToByte>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	7f1b      	ldrb	r3, [r3, #28]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_RTC_SetDate+0x1c>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e094      	b.n	8003e8a <HAL_RTC_SetDate+0x146>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10e      	bne.n	8003d90 <HAL_RTC_SetDate+0x4c>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	330a      	adds	r3, #10
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11c      	bne.n	8003dd0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	78db      	ldrb	r3, [r3, #3]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fa9a 	bl	80042d4 <RTC_ByteToBcd2>
 8003da0:	4603      	mov	r3, r0
 8003da2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fa93 	bl	80042d4 <RTC_ByteToBcd2>
 8003dae:	4603      	mov	r3, r0
 8003db0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003db2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	789b      	ldrb	r3, [r3, #2]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fa8b 	bl	80042d4 <RTC_ByteToBcd2>
 8003dbe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003dc0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e00e      	b.n	8003dee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	78db      	ldrb	r3, [r3, #3]
 8003dd4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ddc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003de2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	22ca      	movs	r2, #202	; 0xca
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2253      	movs	r2, #83	; 0x53
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fa3c 	bl	800427c <RTC_EnterInitMode>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	22ff      	movs	r2, #255	; 0xff
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2204      	movs	r2, #4
 8003e16:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e033      	b.n	8003e8a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e40:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d111      	bne.n	8003e74 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f9eb 	bl	800422c <HAL_RTC_WaitForSynchro>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00b      	beq.n	8003e74 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	22ff      	movs	r2, #255	; 0xff
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2204      	movs	r2, #4
 8003e68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e00a      	b.n	8003e8a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	22ff      	movs	r2, #255	; 0xff
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd90      	pop	{r4, r7, pc}

08003e92 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003eac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	0b5b      	lsrs	r3, r3, #13
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11a      	bne.n	8003f26 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	78db      	ldrb	r3, [r3, #3]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fa0b 	bl	8004310 <RTC_Bcd2ToByte>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fa02 	bl	8004310 <RTC_Bcd2ToByte>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	789b      	ldrb	r3, [r3, #2]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f9f9 	bl	8004310 <RTC_Bcd2ToByte>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	7f1b      	ldrb	r3, [r3, #28]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_RTC_SetAlarm_IT+0x24>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e11f      	b.n	8004194 <HAL_RTC_SetAlarm_IT+0x264>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d137      	bne.n	8003fd6 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f9a8 	bl	80042d4 <RTC_ByteToBcd2>
 8003f84:	4603      	mov	r3, r0
 8003f86:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f9a1 	bl	80042d4 <RTC_ByteToBcd2>
 8003f92:	4603      	mov	r3, r0
 8003f94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003f96:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	789b      	ldrb	r3, [r3, #2]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f999 	bl	80042d4 <RTC_ByteToBcd2>
 8003fa2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003fa4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	78db      	ldrb	r3, [r3, #3]
 8003fac:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003fae:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f98b 	bl	80042d4 <RTC_ByteToBcd2>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003fc2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003fca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e023      	b.n	800401e <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003ff6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003ffc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	78db      	ldrb	r3, [r3, #3]
 8004002:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004004:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800400c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800400e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004014:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800401a:	4313      	orrs	r3, r2
 800401c:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	22ca      	movs	r2, #202	; 0xca
 8004030:	625a      	str	r2, [r3, #36]	; 0x24
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2253      	movs	r2, #83	; 0x53
 8004038:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004042:	d148      	bne.n	80040d6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004052:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004064:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004066:	f7fd fe61 	bl	8001d2c <HAL_GetTick>
 800406a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800406c:	e013      	b.n	8004096 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800406e:	f7fd fe5d 	bl	8001d2c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407c:	d90b      	bls.n	8004096 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	22ff      	movs	r2, #255	; 0xff
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2203      	movs	r2, #3
 800408a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e07e      	b.n	8004194 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0e4      	beq.n	800406e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	e047      	b.n	8004166 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040e4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80040f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80040f8:	f7fd fe18 	bl	8001d2c <HAL_GetTick>
 80040fc:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80040fe:	e013      	b.n	8004128 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004100:	f7fd fe14 	bl	8001d2c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800410e:	d90b      	bls.n	8004128 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	22ff      	movs	r2, #255	; 0xff
 8004116:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2203      	movs	r2, #3
 800411c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e035      	b.n	8004194 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0e4      	beq.n	8004100 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004154:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004164:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a0c      	ldr	r2, [pc, #48]	; (800419c <HAL_RTC_SetAlarm_IT+0x26c>)
 800416c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004170:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3724      	adds	r7, #36	; 0x24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd90      	pop	{r4, r7, pc}
 800419c:	40010400 	.word	0x40010400

080041a0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d012      	beq.n	80041dc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fc fb67 	bl	8000898 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80041da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d012      	beq.n	8004210 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f8d9 	bl	80043b0 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800420e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004216:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	775a      	strb	r2, [r3, #29]
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40010400 	.word	0x40010400

0800422c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004246:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004248:	f7fd fd70 	bl	8001d2c <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800424e:	e009      	b.n	8004264 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004250:	f7fd fd6c 	bl	8001d2c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800425e:	d901      	bls.n	8004264 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e007      	b.n	8004274 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ee      	beq.n	8004250 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d119      	bne.n	80042ca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f04f 32ff 	mov.w	r2, #4294967295
 800429e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80042a0:	f7fd fd44 	bl	8001d2c <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80042a6:	e009      	b.n	80042bc <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042a8:	f7fd fd40 	bl	8001d2c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042b6:	d901      	bls.n	80042bc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e007      	b.n	80042cc <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ee      	beq.n	80042a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80042e2:	e005      	b.n	80042f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3301      	adds	r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	3b0a      	subs	r3, #10
 80042ee:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b09      	cmp	r3, #9
 80042f4:	d8f6      	bhi.n	80042e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	4313      	orrs	r3, r2
 8004302:	b2db      	uxtb	r3, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	4413      	add	r3, r2
 800433e:	b2db      	uxtb	r3, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3350      	adds	r3, #80	; 0x50
 8004362:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4413      	add	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3350      	adds	r3, #80	; 0x50
 8004394:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e040      	b.n	8004458 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fa80 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb1e 	bl	8004a44 <UART_SetConfig>
 8004408:	4603      	mov	r3, r0
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e022      	b.n	8004458 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fce6 	bl	8004dec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800442e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800443e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fd6d 	bl	8004f30 <UART_CheckIdleState>
 8004456:	4603      	mov	r3, r0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004474:	2b20      	cmp	r3, #32
 8004476:	f040 8082 	bne.w	800457e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_UART_Transmit+0x26>
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07a      	b.n	8004580 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_UART_Transmit+0x38>
 8004494:	2302      	movs	r3, #2
 8004496:	e073      	b.n	8004580 <HAL_UART_Transmit+0x120>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2221      	movs	r2, #33	; 0x21
 80044ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ae:	f7fd fc3d 	bl	8001d2c <HAL_GetTick>
 80044b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044cc:	d108      	bne.n	80044e0 <HAL_UART_Transmit+0x80>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e003      	b.n	80044e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044f0:	e02d      	b.n	800454e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	2180      	movs	r1, #128	; 0x80
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fd60 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e039      	b.n	8004580 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800451e:	b292      	uxth	r2, r2
 8004520:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	3302      	adds	r3, #2
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e008      	b.n	800453c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	b292      	uxth	r2, r2
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3301      	adds	r3, #1
 800453a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1cb      	bne.n	80044f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2200      	movs	r2, #0
 8004562:	2140      	movs	r1, #64	; 0x40
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fd2c 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e005      	b.n	8004580 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e000      	b.n	8004580 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800457e:	2302      	movs	r3, #2
  }
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800459a:	2b20      	cmp	r3, #32
 800459c:	d12c      	bne.n	80045f8 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_UART_Receive_IT+0x22>
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e025      	b.n	80045fa <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Receive_IT+0x34>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e01e      	b.n	80045fa <HAL_UART_Receive_IT+0x72>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80045e6:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fd64 	bl	80050bc <UART_Start_Receive_IT>
 80045f4:	4603      	mov	r3, r0
 80045f6:	e000      	b.n	80045fa <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f640 030f 	movw	r3, #2063	; 0x80f
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d113      	bne.n	800465c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 81cc 	beq.w	80049ea <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4798      	blx	r3
      }
      return;
 800465a:	e1c6      	b.n	80049ea <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80e3 	beq.w	800482a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d105      	bne.n	800467a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4ba5      	ldr	r3, [pc, #660]	; (8004908 <HAL_UART_IRQHandler+0x304>)
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80d8 	beq.w	800482a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <HAL_UART_IRQHandler+0xa2>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2201      	movs	r2, #1
 8004694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d010      	beq.n	80046d2 <HAL_UART_IRQHandler+0xce>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2202      	movs	r2, #2
 80046c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c8:	f043 0204 	orr.w	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_UART_IRQHandler+0xfa>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2204      	movs	r2, #4
 80046ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f4:	f043 0202 	orr.w	r2, r3, #2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d015      	beq.n	8004734 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d104      	bne.n	800471c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472a:	f043 0208 	orr.w	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473a:	2b00      	cmp	r3, #0
 800473c:	d011      	beq.n	8004762 <HAL_UART_IRQHandler+0x15e>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8140 	beq.w	80049ee <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00c      	beq.n	8004792 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004798:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d004      	beq.n	80047b2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d031      	beq.n	8004816 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fcf8 	bl	80051a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d123      	bne.n	800480e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d013      	beq.n	8004806 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	4a4a      	ldr	r2, [pc, #296]	; (800490c <HAL_UART_IRQHandler+0x308>)
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fd fc18 	bl	8002020 <HAL_DMA_Abort_IT>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d017      	beq.n	8004826 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004800:	4610      	mov	r0, r2
 8004802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	e00f      	b.n	8004826 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f906 	bl	8004a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	e00b      	b.n	8004826 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f902 	bl	8004a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	e007      	b.n	8004826 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f8fe 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004824:	e0e3      	b.n	80049ee <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004826:	bf00      	nop
    return;
 8004828:	e0e1      	b.n	80049ee <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482e:	2b01      	cmp	r3, #1
 8004830:	f040 80a7 	bne.w	8004982 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80a1 	beq.w	8004982 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 809b 	beq.w	8004982 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2210      	movs	r2, #16
 8004852:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d156      	bne.n	8004910 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800486c:	893b      	ldrh	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80bf 	beq.w	80049f2 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800487a:	893a      	ldrh	r2, [r7, #8]
 800487c:	429a      	cmp	r2, r3
 800487e:	f080 80b8 	bcs.w	80049f2 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	893a      	ldrh	r2, [r7, #8]
 8004886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b20      	cmp	r3, #32
 8004892:	d02a      	beq.n	80048ea <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048a2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0210 	bic.w	r2, r2, #16
 80048de:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd fb62 	bl	8001fae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f894 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004904:	e075      	b.n	80049f2 <HAL_UART_IRQHandler+0x3ee>
 8004906:	bf00      	nop
 8004908:	04000120 	.word	0x04000120
 800490c:	08005207 	.word	0x08005207
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800491c:	b29b      	uxth	r3, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d063      	beq.n	80049f6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 800492e:	897b      	ldrh	r3, [r7, #10]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d060      	beq.n	80049f6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004942:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0210 	bic.w	r2, r2, #16
 8004974:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004976:	897b      	ldrh	r3, [r7, #10]
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f856 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004980:	e039      	b.n	80049f6 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <HAL_UART_IRQHandler+0x3a4>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800499e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fd33 	bl	800540c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049a6:	e029      	b.n	80049fc <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01a      	beq.n	80049fa <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
    }
    return;
 80049cc:	e015      	b.n	80049fa <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d011      	beq.n	80049fc <HAL_UART_IRQHandler+0x3f8>
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fc25 	bl	8005232 <UART_EndTransmit_IT>
    return;
 80049e8:	e008      	b.n	80049fc <HAL_UART_IRQHandler+0x3f8>
      return;
 80049ea:	bf00      	nop
 80049ec:	e006      	b.n	80049fc <HAL_UART_IRQHandler+0x3f8>
    return;
 80049ee:	bf00      	nop
 80049f0:	e004      	b.n	80049fc <HAL_UART_IRQHandler+0x3f8>
      return;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <HAL_UART_IRQHandler+0x3f8>
      return;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_UART_IRQHandler+0x3f8>
    return;
 80049fa:	bf00      	nop
  }

}
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a72:	f023 030c 	bic.w	r3, r3, #12
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	6979      	ldr	r1, [r7, #20]
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4aae      	ldr	r2, [pc, #696]	; (8004d78 <UART_SetConfig+0x334>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d120      	bne.n	8004b06 <UART_SetConfig+0xc2>
 8004ac4:	4bad      	ldr	r3, [pc, #692]	; (8004d7c <UART_SetConfig+0x338>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d817      	bhi.n	8004b00 <UART_SetConfig+0xbc>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0x94>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004af5 	.word	0x08004af5
 8004ae0:	08004afb 	.word	0x08004afb
 8004ae4:	08004aef 	.word	0x08004aef
 8004ae8:	2301      	movs	r3, #1
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e0b5      	b.n	8004c5a <UART_SetConfig+0x216>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e0b2      	b.n	8004c5a <UART_SetConfig+0x216>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e0af      	b.n	8004c5a <UART_SetConfig+0x216>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e0ac      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e0a9      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a9d      	ldr	r2, [pc, #628]	; (8004d80 <UART_SetConfig+0x33c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d124      	bne.n	8004b5a <UART_SetConfig+0x116>
 8004b10:	4b9a      	ldr	r3, [pc, #616]	; (8004d7c <UART_SetConfig+0x338>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b1c:	d011      	beq.n	8004b42 <UART_SetConfig+0xfe>
 8004b1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b22:	d817      	bhi.n	8004b54 <UART_SetConfig+0x110>
 8004b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b28:	d011      	beq.n	8004b4e <UART_SetConfig+0x10a>
 8004b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b2e:	d811      	bhi.n	8004b54 <UART_SetConfig+0x110>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <UART_SetConfig+0xf8>
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d006      	beq.n	8004b48 <UART_SetConfig+0x104>
 8004b3a:	e00b      	b.n	8004b54 <UART_SetConfig+0x110>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e08b      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b42:	2302      	movs	r3, #2
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e088      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e085      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b4e:	2308      	movs	r3, #8
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e082      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b54:	2310      	movs	r3, #16
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e07f      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a89      	ldr	r2, [pc, #548]	; (8004d84 <UART_SetConfig+0x340>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d124      	bne.n	8004bae <UART_SetConfig+0x16a>
 8004b64:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <UART_SetConfig+0x338>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b70:	d011      	beq.n	8004b96 <UART_SetConfig+0x152>
 8004b72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b76:	d817      	bhi.n	8004ba8 <UART_SetConfig+0x164>
 8004b78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b7c:	d011      	beq.n	8004ba2 <UART_SetConfig+0x15e>
 8004b7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b82:	d811      	bhi.n	8004ba8 <UART_SetConfig+0x164>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <UART_SetConfig+0x14c>
 8004b88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b8c:	d006      	beq.n	8004b9c <UART_SetConfig+0x158>
 8004b8e:	e00b      	b.n	8004ba8 <UART_SetConfig+0x164>
 8004b90:	2300      	movs	r3, #0
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e061      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b96:	2302      	movs	r3, #2
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e05e      	b.n	8004c5a <UART_SetConfig+0x216>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e05b      	b.n	8004c5a <UART_SetConfig+0x216>
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e058      	b.n	8004c5a <UART_SetConfig+0x216>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e055      	b.n	8004c5a <UART_SetConfig+0x216>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a75      	ldr	r2, [pc, #468]	; (8004d88 <UART_SetConfig+0x344>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d124      	bne.n	8004c02 <UART_SetConfig+0x1be>
 8004bb8:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <UART_SetConfig+0x338>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004bc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bc4:	d011      	beq.n	8004bea <UART_SetConfig+0x1a6>
 8004bc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bca:	d817      	bhi.n	8004bfc <UART_SetConfig+0x1b8>
 8004bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bd0:	d011      	beq.n	8004bf6 <UART_SetConfig+0x1b2>
 8004bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bd6:	d811      	bhi.n	8004bfc <UART_SetConfig+0x1b8>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <UART_SetConfig+0x1a0>
 8004bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be0:	d006      	beq.n	8004bf0 <UART_SetConfig+0x1ac>
 8004be2:	e00b      	b.n	8004bfc <UART_SetConfig+0x1b8>
 8004be4:	2300      	movs	r3, #0
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e037      	b.n	8004c5a <UART_SetConfig+0x216>
 8004bea:	2302      	movs	r3, #2
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e034      	b.n	8004c5a <UART_SetConfig+0x216>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e031      	b.n	8004c5a <UART_SetConfig+0x216>
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e02e      	b.n	8004c5a <UART_SetConfig+0x216>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e02b      	b.n	8004c5a <UART_SetConfig+0x216>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a61      	ldr	r2, [pc, #388]	; (8004d8c <UART_SetConfig+0x348>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d124      	bne.n	8004c56 <UART_SetConfig+0x212>
 8004c0c:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <UART_SetConfig+0x338>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004c14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c18:	d011      	beq.n	8004c3e <UART_SetConfig+0x1fa>
 8004c1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c1e:	d817      	bhi.n	8004c50 <UART_SetConfig+0x20c>
 8004c20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c24:	d011      	beq.n	8004c4a <UART_SetConfig+0x206>
 8004c26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c2a:	d811      	bhi.n	8004c50 <UART_SetConfig+0x20c>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <UART_SetConfig+0x1f4>
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d006      	beq.n	8004c44 <UART_SetConfig+0x200>
 8004c36:	e00b      	b.n	8004c50 <UART_SetConfig+0x20c>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e00d      	b.n	8004c5a <UART_SetConfig+0x216>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	77fb      	strb	r3, [r7, #31]
 8004c42:	e00a      	b.n	8004c5a <UART_SetConfig+0x216>
 8004c44:	2304      	movs	r3, #4
 8004c46:	77fb      	strb	r3, [r7, #31]
 8004c48:	e007      	b.n	8004c5a <UART_SetConfig+0x216>
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	77fb      	strb	r3, [r7, #31]
 8004c4e:	e004      	b.n	8004c5a <UART_SetConfig+0x216>
 8004c50:	2310      	movs	r3, #16
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e001      	b.n	8004c5a <UART_SetConfig+0x216>
 8004c56:	2310      	movs	r3, #16
 8004c58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c62:	d15c      	bne.n	8004d1e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8004c64:	7ffb      	ldrb	r3, [r7, #31]
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d827      	bhi.n	8004cba <UART_SetConfig+0x276>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <UART_SetConfig+0x22c>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004cbb 	.word	0x08004cbb
 8004c80:	08004cab 	.word	0x08004cab
 8004c84:	08004cbb 	.word	0x08004cbb
 8004c88:	08004cbb 	.word	0x08004cbb
 8004c8c:	08004cbb 	.word	0x08004cbb
 8004c90:	08004cb3 	.word	0x08004cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c94:	f7fe fcb6 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8004c98:	61b8      	str	r0, [r7, #24]
        break;
 8004c9a:	e013      	b.n	8004cc4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c9c:	f7fe fcd4 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8004ca0:	61b8      	str	r0, [r7, #24]
        break;
 8004ca2:	e00f      	b.n	8004cc4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca4:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <UART_SetConfig+0x34c>)
 8004ca6:	61bb      	str	r3, [r7, #24]
        break;
 8004ca8:	e00c      	b.n	8004cc4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004caa:	f7fe fc35 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8004cae:	61b8      	str	r0, [r7, #24]
        break;
 8004cb0:	e008      	b.n	8004cc4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb6:	61bb      	str	r3, [r7, #24]
        break;
 8004cb8:	e004      	b.n	8004cc4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	77bb      	strb	r3, [r7, #30]
        break;
 8004cc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8085 	beq.w	8004dd6 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	005a      	lsls	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	441a      	add	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d916      	bls.n	8004d18 <UART_SetConfig+0x2d4>
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d212      	bcs.n	8004d18 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f023 030f 	bic.w	r3, r3, #15
 8004cfa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	89fb      	ldrh	r3, [r7, #14]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	89fa      	ldrh	r2, [r7, #14]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	e05e      	b.n	8004dd6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	77bb      	strb	r3, [r7, #30]
 8004d1c:	e05b      	b.n	8004dd6 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d837      	bhi.n	8004d94 <UART_SetConfig+0x350>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <UART_SetConfig+0x2e8>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d95 	.word	0x08004d95
 8004d3c:	08004d67 	.word	0x08004d67
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004d95 	.word	0x08004d95
 8004d4c:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7fe fc58 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8004d54:	61b8      	str	r0, [r7, #24]
        break;
 8004d56:	e022      	b.n	8004d9e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe fc76 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 8004d5c:	61b8      	str	r0, [r7, #24]
        break;
 8004d5e:	e01e      	b.n	8004d9e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <UART_SetConfig+0x34c>)
 8004d62:	61bb      	str	r3, [r7, #24]
        break;
 8004d64:	e01b      	b.n	8004d9e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fe fbd7 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8004d6a:	61b8      	str	r0, [r7, #24]
        break;
 8004d6c:	e017      	b.n	8004d9e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	61bb      	str	r3, [r7, #24]
        break;
 8004d74:	e013      	b.n	8004d9e <UART_SetConfig+0x35a>
 8004d76:	bf00      	nop
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40004400 	.word	0x40004400
 8004d84:	40004800 	.word	0x40004800
 8004d88:	40004c00 	.word	0x40004c00
 8004d8c:	40005000 	.word	0x40005000
 8004d90:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	77bb      	strb	r3, [r7, #30]
        break;
 8004d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d018      	beq.n	8004dd6 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	085a      	lsrs	r2, r3, #1
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b0f      	cmp	r3, #15
 8004dbe:	d908      	bls.n	8004dd2 <UART_SetConfig+0x38e>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc6:	d204      	bcs.n	8004dd2 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e001      	b.n	8004dd6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004de2:	7fbb      	ldrb	r3, [r7, #30]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01a      	beq.n	8004f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eea:	d10a      	bne.n	8004f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
  }
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f40:	f7fc fef4 	bl	8001d2c <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d10e      	bne.n	8004f72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f82d 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e023      	b.n	8004fba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d10e      	bne.n	8004f9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f817 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e00d      	b.n	8004fba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd2:	e05e      	b.n	8005092 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d05a      	beq.n	8005092 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fdc:	f7fc fea6 	bl	8001d2c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d302      	bcc.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d11b      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005000:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e043      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d02c      	beq.n	8005092 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005046:	d124      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005050:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005060:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e00f      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4013      	ands	r3, r2
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2300      	movne	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d091      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	d10e      	bne.n	800510e <UART_Start_Receive_IT+0x52>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <UART_Start_Receive_IT+0x48>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80050fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005102:	e01a      	b.n	800513a <UART_Start_Receive_IT+0x7e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	22ff      	movs	r2, #255	; 0xff
 8005108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800510c:	e015      	b.n	800513a <UART_Start_Receive_IT+0x7e>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10d      	bne.n	8005132 <UART_Start_Receive_IT+0x76>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <UART_Start_Receive_IT+0x6c>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	22ff      	movs	r2, #255	; 0xff
 8005122:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005126:	e008      	b.n	800513a <UART_Start_Receive_IT+0x7e>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	227f      	movs	r2, #127	; 0x7f
 800512c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005130:	e003      	b.n	800513a <UART_Start_Receive_IT+0x7e>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2222      	movs	r2, #34	; 0x22
 8005146:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d107      	bne.n	8005172 <UART_Start_Receive_IT+0xb6>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <UART_Start_Receive_IT+0xe4>)
 800516e:	665a      	str	r2, [r3, #100]	; 0x64
 8005170:	e002      	b.n	8005178 <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <UART_Start_Receive_IT+0xe8>)
 8005176:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800518e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	08005339 	.word	0x08005339
 80051a4:	08005265 	.word	0x08005265

080051a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d107      	bne.n	80051e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0210 	bic.w	r2, r2, #16
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff fbf7 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005248:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fbd4 	bl	8004a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005272:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005278:	2b22      	cmp	r3, #34	; 0x22
 800527a:	d151      	bne.n	8005320 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005282:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005284:	89bb      	ldrh	r3, [r7, #12]
 8005286:	b2d9      	uxtb	r1, r3
 8005288:	89fb      	ldrh	r3, [r7, #14]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	400a      	ands	r2, r1
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d138      	bne.n	8005330 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052cc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d10f      	bne.n	8005312 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0210 	bic.w	r2, r2, #16
 8005300:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fb8e 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
 8005310:	e002      	b.n	8005318 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fb f8e2 	bl	80004dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800531e:	e007      	b.n	8005330 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0208 	orr.w	r2, r2, #8
 800532e:	619a      	str	r2, [r3, #24]
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005346:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534c:	2b22      	cmp	r3, #34	; 0x22
 800534e:	d151      	bne.n	80053f4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005356:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800535e:	89ba      	ldrh	r2, [r7, #12]
 8005360:	89fb      	ldrh	r3, [r7, #14]
 8005362:	4013      	ands	r3, r2
 8005364:	b29a      	uxth	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536e:	1c9a      	adds	r2, r3, #2
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d138      	bne.n	8005404 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053a0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0201 	bic.w	r2, r2, #1
 80053b0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d10f      	bne.n	80053e6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0210 	bic.w	r2, r2, #16
 80053d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fb24 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
 80053e4:	e002      	b.n	80053ec <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fb f878 	bl	80004dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053f2:	e007      	b.n	8005404 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0208 	orr.w	r2, r2, #8
 8005402:	619a      	str	r2, [r3, #24]
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <atoi>:
 8005420:	220a      	movs	r2, #10
 8005422:	2100      	movs	r1, #0
 8005424:	f000 b952 	b.w	80056cc <strtol>

08005428 <__errno>:
 8005428:	4b01      	ldr	r3, [pc, #4]	; (8005430 <__errno+0x8>)
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	200000bc 	.word	0x200000bc

08005434 <__libc_init_array>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4d0d      	ldr	r5, [pc, #52]	; (800546c <__libc_init_array+0x38>)
 8005438:	4c0d      	ldr	r4, [pc, #52]	; (8005470 <__libc_init_array+0x3c>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	2600      	movs	r6, #0
 8005440:	42a6      	cmp	r6, r4
 8005442:	d109      	bne.n	8005458 <__libc_init_array+0x24>
 8005444:	4d0b      	ldr	r5, [pc, #44]	; (8005474 <__libc_init_array+0x40>)
 8005446:	4c0c      	ldr	r4, [pc, #48]	; (8005478 <__libc_init_array+0x44>)
 8005448:	f001 fabe 	bl	80069c8 <_init>
 800544c:	1b64      	subs	r4, r4, r5
 800544e:	10a4      	asrs	r4, r4, #2
 8005450:	2600      	movs	r6, #0
 8005452:	42a6      	cmp	r6, r4
 8005454:	d105      	bne.n	8005462 <__libc_init_array+0x2e>
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	f855 3b04 	ldr.w	r3, [r5], #4
 800545c:	4798      	blx	r3
 800545e:	3601      	adds	r6, #1
 8005460:	e7ee      	b.n	8005440 <__libc_init_array+0xc>
 8005462:	f855 3b04 	ldr.w	r3, [r5], #4
 8005466:	4798      	blx	r3
 8005468:	3601      	adds	r6, #1
 800546a:	e7f2      	b.n	8005452 <__libc_init_array+0x1e>
 800546c:	08006ef8 	.word	0x08006ef8
 8005470:	08006ef8 	.word	0x08006ef8
 8005474:	08006ef8 	.word	0x08006ef8
 8005478:	08006efc 	.word	0x08006efc

0800547c <memset>:
 800547c:	4402      	add	r2, r0
 800547e:	4603      	mov	r3, r0
 8005480:	4293      	cmp	r3, r2
 8005482:	d100      	bne.n	8005486 <memset+0xa>
 8005484:	4770      	bx	lr
 8005486:	f803 1b01 	strb.w	r1, [r3], #1
 800548a:	e7f9      	b.n	8005480 <memset+0x4>

0800548c <siprintf>:
 800548c:	b40e      	push	{r1, r2, r3}
 800548e:	b500      	push	{lr}
 8005490:	b09c      	sub	sp, #112	; 0x70
 8005492:	ab1d      	add	r3, sp, #116	; 0x74
 8005494:	9002      	str	r0, [sp, #8]
 8005496:	9006      	str	r0, [sp, #24]
 8005498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800549c:	4809      	ldr	r0, [pc, #36]	; (80054c4 <siprintf+0x38>)
 800549e:	9107      	str	r1, [sp, #28]
 80054a0:	9104      	str	r1, [sp, #16]
 80054a2:	4909      	ldr	r1, [pc, #36]	; (80054c8 <siprintf+0x3c>)
 80054a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a8:	9105      	str	r1, [sp, #20]
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	a902      	add	r1, sp, #8
 80054b0:	f000 fa54 	bl	800595c <_svfiprintf_r>
 80054b4:	9b02      	ldr	r3, [sp, #8]
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	b01c      	add	sp, #112	; 0x70
 80054bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c0:	b003      	add	sp, #12
 80054c2:	4770      	bx	lr
 80054c4:	200000bc 	.word	0x200000bc
 80054c8:	ffff0208 	.word	0xffff0208

080054cc <strcpy>:
 80054cc:	4603      	mov	r3, r0
 80054ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d2:	f803 2b01 	strb.w	r2, [r3], #1
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	d1f9      	bne.n	80054ce <strcpy+0x2>
 80054da:	4770      	bx	lr

080054dc <strstr>:
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	780c      	ldrb	r4, [r1, #0]
 80054e0:	b164      	cbz	r4, 80054fc <strstr+0x20>
 80054e2:	4603      	mov	r3, r0
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	1c5e      	adds	r6, r3, #1
 80054ea:	b90a      	cbnz	r2, 80054f0 <strstr+0x14>
 80054ec:	4610      	mov	r0, r2
 80054ee:	e005      	b.n	80054fc <strstr+0x20>
 80054f0:	4294      	cmp	r4, r2
 80054f2:	d108      	bne.n	8005506 <strstr+0x2a>
 80054f4:	460d      	mov	r5, r1
 80054f6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80054fa:	b902      	cbnz	r2, 80054fe <strstr+0x22>
 80054fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005502:	4297      	cmp	r7, r2
 8005504:	d0f7      	beq.n	80054f6 <strstr+0x1a>
 8005506:	4633      	mov	r3, r6
 8005508:	e7ec      	b.n	80054e4 <strstr+0x8>
	...

0800550c <strtok>:
 800550c:	4b16      	ldr	r3, [pc, #88]	; (8005568 <strtok+0x5c>)
 800550e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005510:	681e      	ldr	r6, [r3, #0]
 8005512:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005514:	4605      	mov	r5, r0
 8005516:	b9fc      	cbnz	r4, 8005558 <strtok+0x4c>
 8005518:	2050      	movs	r0, #80	; 0x50
 800551a:	9101      	str	r1, [sp, #4]
 800551c:	f000 f910 	bl	8005740 <malloc>
 8005520:	9901      	ldr	r1, [sp, #4]
 8005522:	65b0      	str	r0, [r6, #88]	; 0x58
 8005524:	4602      	mov	r2, r0
 8005526:	b920      	cbnz	r0, 8005532 <strtok+0x26>
 8005528:	4b10      	ldr	r3, [pc, #64]	; (800556c <strtok+0x60>)
 800552a:	4811      	ldr	r0, [pc, #68]	; (8005570 <strtok+0x64>)
 800552c:	2157      	movs	r1, #87	; 0x57
 800552e:	f000 f8d7 	bl	80056e0 <__assert_func>
 8005532:	e9c0 4400 	strd	r4, r4, [r0]
 8005536:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800553a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800553e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005542:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005546:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800554a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800554e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005552:	6184      	str	r4, [r0, #24]
 8005554:	7704      	strb	r4, [r0, #28]
 8005556:	6244      	str	r4, [r0, #36]	; 0x24
 8005558:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800555a:	2301      	movs	r3, #1
 800555c:	4628      	mov	r0, r5
 800555e:	b002      	add	sp, #8
 8005560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005564:	f000 b806 	b.w	8005574 <__strtok_r>
 8005568:	200000bc 	.word	0x200000bc
 800556c:	08006cb0 	.word	0x08006cb0
 8005570:	08006cc7 	.word	0x08006cc7

08005574 <__strtok_r>:
 8005574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005576:	b908      	cbnz	r0, 800557c <__strtok_r+0x8>
 8005578:	6810      	ldr	r0, [r2, #0]
 800557a:	b188      	cbz	r0, 80055a0 <__strtok_r+0x2c>
 800557c:	4604      	mov	r4, r0
 800557e:	4620      	mov	r0, r4
 8005580:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005584:	460f      	mov	r7, r1
 8005586:	f817 6b01 	ldrb.w	r6, [r7], #1
 800558a:	b91e      	cbnz	r6, 8005594 <__strtok_r+0x20>
 800558c:	b965      	cbnz	r5, 80055a8 <__strtok_r+0x34>
 800558e:	6015      	str	r5, [r2, #0]
 8005590:	4628      	mov	r0, r5
 8005592:	e005      	b.n	80055a0 <__strtok_r+0x2c>
 8005594:	42b5      	cmp	r5, r6
 8005596:	d1f6      	bne.n	8005586 <__strtok_r+0x12>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f0      	bne.n	800557e <__strtok_r+0xa>
 800559c:	6014      	str	r4, [r2, #0]
 800559e:	7003      	strb	r3, [r0, #0]
 80055a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a2:	461c      	mov	r4, r3
 80055a4:	e00c      	b.n	80055c0 <__strtok_r+0x4c>
 80055a6:	b915      	cbnz	r5, 80055ae <__strtok_r+0x3a>
 80055a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80055ac:	460e      	mov	r6, r1
 80055ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80055b2:	42ab      	cmp	r3, r5
 80055b4:	d1f7      	bne.n	80055a6 <__strtok_r+0x32>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f3      	beq.n	80055a2 <__strtok_r+0x2e>
 80055ba:	2300      	movs	r3, #0
 80055bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80055c0:	6014      	str	r4, [r2, #0]
 80055c2:	e7ed      	b.n	80055a0 <__strtok_r+0x2c>

080055c4 <_strtol_l.isra.0>:
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ca:	d001      	beq.n	80055d0 <_strtol_l.isra.0+0xc>
 80055cc:	2b24      	cmp	r3, #36	; 0x24
 80055ce:	d906      	bls.n	80055de <_strtol_l.isra.0+0x1a>
 80055d0:	f7ff ff2a 	bl	8005428 <__errno>
 80055d4:	2316      	movs	r3, #22
 80055d6:	6003      	str	r3, [r0, #0]
 80055d8:	2000      	movs	r0, #0
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	4f3a      	ldr	r7, [pc, #232]	; (80056c8 <_strtol_l.isra.0+0x104>)
 80055e0:	468e      	mov	lr, r1
 80055e2:	4676      	mov	r6, lr
 80055e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80055e8:	5de5      	ldrb	r5, [r4, r7]
 80055ea:	f015 0508 	ands.w	r5, r5, #8
 80055ee:	d1f8      	bne.n	80055e2 <_strtol_l.isra.0+0x1e>
 80055f0:	2c2d      	cmp	r4, #45	; 0x2d
 80055f2:	d134      	bne.n	800565e <_strtol_l.isra.0+0x9a>
 80055f4:	f89e 4000 	ldrb.w	r4, [lr]
 80055f8:	f04f 0801 	mov.w	r8, #1
 80055fc:	f106 0e02 	add.w	lr, r6, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d05c      	beq.n	80056be <_strtol_l.isra.0+0xfa>
 8005604:	2b10      	cmp	r3, #16
 8005606:	d10c      	bne.n	8005622 <_strtol_l.isra.0+0x5e>
 8005608:	2c30      	cmp	r4, #48	; 0x30
 800560a:	d10a      	bne.n	8005622 <_strtol_l.isra.0+0x5e>
 800560c:	f89e 4000 	ldrb.w	r4, [lr]
 8005610:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005614:	2c58      	cmp	r4, #88	; 0x58
 8005616:	d14d      	bne.n	80056b4 <_strtol_l.isra.0+0xf0>
 8005618:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800561c:	2310      	movs	r3, #16
 800561e:	f10e 0e02 	add.w	lr, lr, #2
 8005622:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005626:	f10c 3cff 	add.w	ip, ip, #4294967295
 800562a:	2600      	movs	r6, #0
 800562c:	fbbc f9f3 	udiv	r9, ip, r3
 8005630:	4635      	mov	r5, r6
 8005632:	fb03 ca19 	mls	sl, r3, r9, ip
 8005636:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800563a:	2f09      	cmp	r7, #9
 800563c:	d818      	bhi.n	8005670 <_strtol_l.isra.0+0xac>
 800563e:	463c      	mov	r4, r7
 8005640:	42a3      	cmp	r3, r4
 8005642:	dd24      	ble.n	800568e <_strtol_l.isra.0+0xca>
 8005644:	2e00      	cmp	r6, #0
 8005646:	db1f      	blt.n	8005688 <_strtol_l.isra.0+0xc4>
 8005648:	45a9      	cmp	r9, r5
 800564a:	d31d      	bcc.n	8005688 <_strtol_l.isra.0+0xc4>
 800564c:	d101      	bne.n	8005652 <_strtol_l.isra.0+0x8e>
 800564e:	45a2      	cmp	sl, r4
 8005650:	db1a      	blt.n	8005688 <_strtol_l.isra.0+0xc4>
 8005652:	fb05 4503 	mla	r5, r5, r3, r4
 8005656:	2601      	movs	r6, #1
 8005658:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800565c:	e7eb      	b.n	8005636 <_strtol_l.isra.0+0x72>
 800565e:	2c2b      	cmp	r4, #43	; 0x2b
 8005660:	bf08      	it	eq
 8005662:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005666:	46a8      	mov	r8, r5
 8005668:	bf08      	it	eq
 800566a:	f106 0e02 	addeq.w	lr, r6, #2
 800566e:	e7c7      	b.n	8005600 <_strtol_l.isra.0+0x3c>
 8005670:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005674:	2f19      	cmp	r7, #25
 8005676:	d801      	bhi.n	800567c <_strtol_l.isra.0+0xb8>
 8005678:	3c37      	subs	r4, #55	; 0x37
 800567a:	e7e1      	b.n	8005640 <_strtol_l.isra.0+0x7c>
 800567c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005680:	2f19      	cmp	r7, #25
 8005682:	d804      	bhi.n	800568e <_strtol_l.isra.0+0xca>
 8005684:	3c57      	subs	r4, #87	; 0x57
 8005686:	e7db      	b.n	8005640 <_strtol_l.isra.0+0x7c>
 8005688:	f04f 36ff 	mov.w	r6, #4294967295
 800568c:	e7e4      	b.n	8005658 <_strtol_l.isra.0+0x94>
 800568e:	2e00      	cmp	r6, #0
 8005690:	da05      	bge.n	800569e <_strtol_l.isra.0+0xda>
 8005692:	2322      	movs	r3, #34	; 0x22
 8005694:	6003      	str	r3, [r0, #0]
 8005696:	4665      	mov	r5, ip
 8005698:	b942      	cbnz	r2, 80056ac <_strtol_l.isra.0+0xe8>
 800569a:	4628      	mov	r0, r5
 800569c:	e79d      	b.n	80055da <_strtol_l.isra.0+0x16>
 800569e:	f1b8 0f00 	cmp.w	r8, #0
 80056a2:	d000      	beq.n	80056a6 <_strtol_l.isra.0+0xe2>
 80056a4:	426d      	negs	r5, r5
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	d0f7      	beq.n	800569a <_strtol_l.isra.0+0xd6>
 80056aa:	b10e      	cbz	r6, 80056b0 <_strtol_l.isra.0+0xec>
 80056ac:	f10e 31ff 	add.w	r1, lr, #4294967295
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	e7f2      	b.n	800569a <_strtol_l.isra.0+0xd6>
 80056b4:	2430      	movs	r4, #48	; 0x30
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1b3      	bne.n	8005622 <_strtol_l.isra.0+0x5e>
 80056ba:	2308      	movs	r3, #8
 80056bc:	e7b1      	b.n	8005622 <_strtol_l.isra.0+0x5e>
 80056be:	2c30      	cmp	r4, #48	; 0x30
 80056c0:	d0a4      	beq.n	800560c <_strtol_l.isra.0+0x48>
 80056c2:	230a      	movs	r3, #10
 80056c4:	e7ad      	b.n	8005622 <_strtol_l.isra.0+0x5e>
 80056c6:	bf00      	nop
 80056c8:	08006d65 	.word	0x08006d65

080056cc <strtol>:
 80056cc:	4613      	mov	r3, r2
 80056ce:	460a      	mov	r2, r1
 80056d0:	4601      	mov	r1, r0
 80056d2:	4802      	ldr	r0, [pc, #8]	; (80056dc <strtol+0x10>)
 80056d4:	6800      	ldr	r0, [r0, #0]
 80056d6:	f7ff bf75 	b.w	80055c4 <_strtol_l.isra.0>
 80056da:	bf00      	nop
 80056dc:	200000bc 	.word	0x200000bc

080056e0 <__assert_func>:
 80056e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056e2:	4614      	mov	r4, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <__assert_func+0x2c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4605      	mov	r5, r0
 80056ec:	68d8      	ldr	r0, [r3, #12]
 80056ee:	b14c      	cbz	r4, 8005704 <__assert_func+0x24>
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <__assert_func+0x30>)
 80056f2:	9100      	str	r1, [sp, #0]
 80056f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056f8:	4906      	ldr	r1, [pc, #24]	; (8005714 <__assert_func+0x34>)
 80056fa:	462b      	mov	r3, r5
 80056fc:	f000 f80e 	bl	800571c <fiprintf>
 8005700:	f000 fdea 	bl	80062d8 <abort>
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <__assert_func+0x38>)
 8005706:	461c      	mov	r4, r3
 8005708:	e7f3      	b.n	80056f2 <__assert_func+0x12>
 800570a:	bf00      	nop
 800570c:	200000bc 	.word	0x200000bc
 8005710:	08006d28 	.word	0x08006d28
 8005714:	08006d35 	.word	0x08006d35
 8005718:	08006d63 	.word	0x08006d63

0800571c <fiprintf>:
 800571c:	b40e      	push	{r1, r2, r3}
 800571e:	b503      	push	{r0, r1, lr}
 8005720:	4601      	mov	r1, r0
 8005722:	ab03      	add	r3, sp, #12
 8005724:	4805      	ldr	r0, [pc, #20]	; (800573c <fiprintf+0x20>)
 8005726:	f853 2b04 	ldr.w	r2, [r3], #4
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	f000 fa3f 	bl	8005bb0 <_vfiprintf_r>
 8005732:	b002      	add	sp, #8
 8005734:	f85d eb04 	ldr.w	lr, [sp], #4
 8005738:	b003      	add	sp, #12
 800573a:	4770      	bx	lr
 800573c:	200000bc 	.word	0x200000bc

08005740 <malloc>:
 8005740:	4b02      	ldr	r3, [pc, #8]	; (800574c <malloc+0xc>)
 8005742:	4601      	mov	r1, r0
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	f000 b853 	b.w	80057f0 <_malloc_r>
 800574a:	bf00      	nop
 800574c:	200000bc 	.word	0x200000bc

08005750 <_free_r>:
 8005750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005752:	2900      	cmp	r1, #0
 8005754:	d048      	beq.n	80057e8 <_free_r+0x98>
 8005756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800575a:	9001      	str	r0, [sp, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f1a1 0404 	sub.w	r4, r1, #4
 8005762:	bfb8      	it	lt
 8005764:	18e4      	addlt	r4, r4, r3
 8005766:	f001 f805 	bl	8006774 <__malloc_lock>
 800576a:	4a20      	ldr	r2, [pc, #128]	; (80057ec <_free_r+0x9c>)
 800576c:	9801      	ldr	r0, [sp, #4]
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	4615      	mov	r5, r2
 8005772:	b933      	cbnz	r3, 8005782 <_free_r+0x32>
 8005774:	6063      	str	r3, [r4, #4]
 8005776:	6014      	str	r4, [r2, #0]
 8005778:	b003      	add	sp, #12
 800577a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800577e:	f000 bfff 	b.w	8006780 <__malloc_unlock>
 8005782:	42a3      	cmp	r3, r4
 8005784:	d90b      	bls.n	800579e <_free_r+0x4e>
 8005786:	6821      	ldr	r1, [r4, #0]
 8005788:	1862      	adds	r2, r4, r1
 800578a:	4293      	cmp	r3, r2
 800578c:	bf04      	itt	eq
 800578e:	681a      	ldreq	r2, [r3, #0]
 8005790:	685b      	ldreq	r3, [r3, #4]
 8005792:	6063      	str	r3, [r4, #4]
 8005794:	bf04      	itt	eq
 8005796:	1852      	addeq	r2, r2, r1
 8005798:	6022      	streq	r2, [r4, #0]
 800579a:	602c      	str	r4, [r5, #0]
 800579c:	e7ec      	b.n	8005778 <_free_r+0x28>
 800579e:	461a      	mov	r2, r3
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b10b      	cbz	r3, 80057a8 <_free_r+0x58>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d9fa      	bls.n	800579e <_free_r+0x4e>
 80057a8:	6811      	ldr	r1, [r2, #0]
 80057aa:	1855      	adds	r5, r2, r1
 80057ac:	42a5      	cmp	r5, r4
 80057ae:	d10b      	bne.n	80057c8 <_free_r+0x78>
 80057b0:	6824      	ldr	r4, [r4, #0]
 80057b2:	4421      	add	r1, r4
 80057b4:	1854      	adds	r4, r2, r1
 80057b6:	42a3      	cmp	r3, r4
 80057b8:	6011      	str	r1, [r2, #0]
 80057ba:	d1dd      	bne.n	8005778 <_free_r+0x28>
 80057bc:	681c      	ldr	r4, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	6053      	str	r3, [r2, #4]
 80057c2:	4421      	add	r1, r4
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	e7d7      	b.n	8005778 <_free_r+0x28>
 80057c8:	d902      	bls.n	80057d0 <_free_r+0x80>
 80057ca:	230c      	movs	r3, #12
 80057cc:	6003      	str	r3, [r0, #0]
 80057ce:	e7d3      	b.n	8005778 <_free_r+0x28>
 80057d0:	6825      	ldr	r5, [r4, #0]
 80057d2:	1961      	adds	r1, r4, r5
 80057d4:	428b      	cmp	r3, r1
 80057d6:	bf04      	itt	eq
 80057d8:	6819      	ldreq	r1, [r3, #0]
 80057da:	685b      	ldreq	r3, [r3, #4]
 80057dc:	6063      	str	r3, [r4, #4]
 80057de:	bf04      	itt	eq
 80057e0:	1949      	addeq	r1, r1, r5
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	6054      	str	r4, [r2, #4]
 80057e6:	e7c7      	b.n	8005778 <_free_r+0x28>
 80057e8:	b003      	add	sp, #12
 80057ea:	bd30      	pop	{r4, r5, pc}
 80057ec:	20000b5c 	.word	0x20000b5c

080057f0 <_malloc_r>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	1ccd      	adds	r5, r1, #3
 80057f4:	f025 0503 	bic.w	r5, r5, #3
 80057f8:	3508      	adds	r5, #8
 80057fa:	2d0c      	cmp	r5, #12
 80057fc:	bf38      	it	cc
 80057fe:	250c      	movcc	r5, #12
 8005800:	2d00      	cmp	r5, #0
 8005802:	4606      	mov	r6, r0
 8005804:	db01      	blt.n	800580a <_malloc_r+0x1a>
 8005806:	42a9      	cmp	r1, r5
 8005808:	d903      	bls.n	8005812 <_malloc_r+0x22>
 800580a:	230c      	movs	r3, #12
 800580c:	6033      	str	r3, [r6, #0]
 800580e:	2000      	movs	r0, #0
 8005810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005812:	f000 ffaf 	bl	8006774 <__malloc_lock>
 8005816:	4921      	ldr	r1, [pc, #132]	; (800589c <_malloc_r+0xac>)
 8005818:	680a      	ldr	r2, [r1, #0]
 800581a:	4614      	mov	r4, r2
 800581c:	b99c      	cbnz	r4, 8005846 <_malloc_r+0x56>
 800581e:	4f20      	ldr	r7, [pc, #128]	; (80058a0 <_malloc_r+0xb0>)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	b923      	cbnz	r3, 800582e <_malloc_r+0x3e>
 8005824:	4621      	mov	r1, r4
 8005826:	4630      	mov	r0, r6
 8005828:	f000 fc86 	bl	8006138 <_sbrk_r>
 800582c:	6038      	str	r0, [r7, #0]
 800582e:	4629      	mov	r1, r5
 8005830:	4630      	mov	r0, r6
 8005832:	f000 fc81 	bl	8006138 <_sbrk_r>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	d123      	bne.n	8005882 <_malloc_r+0x92>
 800583a:	230c      	movs	r3, #12
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	4630      	mov	r0, r6
 8005840:	f000 ff9e 	bl	8006780 <__malloc_unlock>
 8005844:	e7e3      	b.n	800580e <_malloc_r+0x1e>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	1b5b      	subs	r3, r3, r5
 800584a:	d417      	bmi.n	800587c <_malloc_r+0x8c>
 800584c:	2b0b      	cmp	r3, #11
 800584e:	d903      	bls.n	8005858 <_malloc_r+0x68>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	441c      	add	r4, r3
 8005854:	6025      	str	r5, [r4, #0]
 8005856:	e004      	b.n	8005862 <_malloc_r+0x72>
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	42a2      	cmp	r2, r4
 800585c:	bf0c      	ite	eq
 800585e:	600b      	streq	r3, [r1, #0]
 8005860:	6053      	strne	r3, [r2, #4]
 8005862:	4630      	mov	r0, r6
 8005864:	f000 ff8c 	bl	8006780 <__malloc_unlock>
 8005868:	f104 000b 	add.w	r0, r4, #11
 800586c:	1d23      	adds	r3, r4, #4
 800586e:	f020 0007 	bic.w	r0, r0, #7
 8005872:	1ac2      	subs	r2, r0, r3
 8005874:	d0cc      	beq.n	8005810 <_malloc_r+0x20>
 8005876:	1a1b      	subs	r3, r3, r0
 8005878:	50a3      	str	r3, [r4, r2]
 800587a:	e7c9      	b.n	8005810 <_malloc_r+0x20>
 800587c:	4622      	mov	r2, r4
 800587e:	6864      	ldr	r4, [r4, #4]
 8005880:	e7cc      	b.n	800581c <_malloc_r+0x2c>
 8005882:	1cc4      	adds	r4, r0, #3
 8005884:	f024 0403 	bic.w	r4, r4, #3
 8005888:	42a0      	cmp	r0, r4
 800588a:	d0e3      	beq.n	8005854 <_malloc_r+0x64>
 800588c:	1a21      	subs	r1, r4, r0
 800588e:	4630      	mov	r0, r6
 8005890:	f000 fc52 	bl	8006138 <_sbrk_r>
 8005894:	3001      	adds	r0, #1
 8005896:	d1dd      	bne.n	8005854 <_malloc_r+0x64>
 8005898:	e7cf      	b.n	800583a <_malloc_r+0x4a>
 800589a:	bf00      	nop
 800589c:	20000b5c 	.word	0x20000b5c
 80058a0:	20000b60 	.word	0x20000b60

080058a4 <__ssputs_r>:
 80058a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	688e      	ldr	r6, [r1, #8]
 80058aa:	429e      	cmp	r6, r3
 80058ac:	4682      	mov	sl, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	4690      	mov	r8, r2
 80058b2:	461f      	mov	r7, r3
 80058b4:	d838      	bhi.n	8005928 <__ssputs_r+0x84>
 80058b6:	898a      	ldrh	r2, [r1, #12]
 80058b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058bc:	d032      	beq.n	8005924 <__ssputs_r+0x80>
 80058be:	6825      	ldr	r5, [r4, #0]
 80058c0:	6909      	ldr	r1, [r1, #16]
 80058c2:	eba5 0901 	sub.w	r9, r5, r1
 80058c6:	6965      	ldr	r5, [r4, #20]
 80058c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058d0:	3301      	adds	r3, #1
 80058d2:	444b      	add	r3, r9
 80058d4:	106d      	asrs	r5, r5, #1
 80058d6:	429d      	cmp	r5, r3
 80058d8:	bf38      	it	cc
 80058da:	461d      	movcc	r5, r3
 80058dc:	0553      	lsls	r3, r2, #21
 80058de:	d531      	bpl.n	8005944 <__ssputs_r+0xa0>
 80058e0:	4629      	mov	r1, r5
 80058e2:	f7ff ff85 	bl	80057f0 <_malloc_r>
 80058e6:	4606      	mov	r6, r0
 80058e8:	b950      	cbnz	r0, 8005900 <__ssputs_r+0x5c>
 80058ea:	230c      	movs	r3, #12
 80058ec:	f8ca 3000 	str.w	r3, [sl]
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	6921      	ldr	r1, [r4, #16]
 8005902:	464a      	mov	r2, r9
 8005904:	f000 ff0e 	bl	8006724 <memcpy>
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800590e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	6126      	str	r6, [r4, #16]
 8005916:	6165      	str	r5, [r4, #20]
 8005918:	444e      	add	r6, r9
 800591a:	eba5 0509 	sub.w	r5, r5, r9
 800591e:	6026      	str	r6, [r4, #0]
 8005920:	60a5      	str	r5, [r4, #8]
 8005922:	463e      	mov	r6, r7
 8005924:	42be      	cmp	r6, r7
 8005926:	d900      	bls.n	800592a <__ssputs_r+0x86>
 8005928:	463e      	mov	r6, r7
 800592a:	4632      	mov	r2, r6
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	4641      	mov	r1, r8
 8005930:	f000 ff06 	bl	8006740 <memmove>
 8005934:	68a3      	ldr	r3, [r4, #8]
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	4432      	add	r2, r6
 800593c:	60a3      	str	r3, [r4, #8]
 800593e:	6022      	str	r2, [r4, #0]
 8005940:	2000      	movs	r0, #0
 8005942:	e7db      	b.n	80058fc <__ssputs_r+0x58>
 8005944:	462a      	mov	r2, r5
 8005946:	f000 ff21 	bl	800678c <_realloc_r>
 800594a:	4606      	mov	r6, r0
 800594c:	2800      	cmp	r0, #0
 800594e:	d1e1      	bne.n	8005914 <__ssputs_r+0x70>
 8005950:	6921      	ldr	r1, [r4, #16]
 8005952:	4650      	mov	r0, sl
 8005954:	f7ff fefc 	bl	8005750 <_free_r>
 8005958:	e7c7      	b.n	80058ea <__ssputs_r+0x46>
	...

0800595c <_svfiprintf_r>:
 800595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	4698      	mov	r8, r3
 8005962:	898b      	ldrh	r3, [r1, #12]
 8005964:	061b      	lsls	r3, r3, #24
 8005966:	b09d      	sub	sp, #116	; 0x74
 8005968:	4607      	mov	r7, r0
 800596a:	460d      	mov	r5, r1
 800596c:	4614      	mov	r4, r2
 800596e:	d50e      	bpl.n	800598e <_svfiprintf_r+0x32>
 8005970:	690b      	ldr	r3, [r1, #16]
 8005972:	b963      	cbnz	r3, 800598e <_svfiprintf_r+0x32>
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	f7ff ff3b 	bl	80057f0 <_malloc_r>
 800597a:	6028      	str	r0, [r5, #0]
 800597c:	6128      	str	r0, [r5, #16]
 800597e:	b920      	cbnz	r0, 800598a <_svfiprintf_r+0x2e>
 8005980:	230c      	movs	r3, #12
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	e0d1      	b.n	8005b2e <_svfiprintf_r+0x1d2>
 800598a:	2340      	movs	r3, #64	; 0x40
 800598c:	616b      	str	r3, [r5, #20]
 800598e:	2300      	movs	r3, #0
 8005990:	9309      	str	r3, [sp, #36]	; 0x24
 8005992:	2320      	movs	r3, #32
 8005994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005998:	f8cd 800c 	str.w	r8, [sp, #12]
 800599c:	2330      	movs	r3, #48	; 0x30
 800599e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b48 <_svfiprintf_r+0x1ec>
 80059a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059a6:	f04f 0901 	mov.w	r9, #1
 80059aa:	4623      	mov	r3, r4
 80059ac:	469a      	mov	sl, r3
 80059ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059b2:	b10a      	cbz	r2, 80059b8 <_svfiprintf_r+0x5c>
 80059b4:	2a25      	cmp	r2, #37	; 0x25
 80059b6:	d1f9      	bne.n	80059ac <_svfiprintf_r+0x50>
 80059b8:	ebba 0b04 	subs.w	fp, sl, r4
 80059bc:	d00b      	beq.n	80059d6 <_svfiprintf_r+0x7a>
 80059be:	465b      	mov	r3, fp
 80059c0:	4622      	mov	r2, r4
 80059c2:	4629      	mov	r1, r5
 80059c4:	4638      	mov	r0, r7
 80059c6:	f7ff ff6d 	bl	80058a4 <__ssputs_r>
 80059ca:	3001      	adds	r0, #1
 80059cc:	f000 80aa 	beq.w	8005b24 <_svfiprintf_r+0x1c8>
 80059d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059d2:	445a      	add	r2, fp
 80059d4:	9209      	str	r2, [sp, #36]	; 0x24
 80059d6:	f89a 3000 	ldrb.w	r3, [sl]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80a2 	beq.w	8005b24 <_svfiprintf_r+0x1c8>
 80059e0:	2300      	movs	r3, #0
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ea:	f10a 0a01 	add.w	sl, sl, #1
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	9307      	str	r3, [sp, #28]
 80059f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059f6:	931a      	str	r3, [sp, #104]	; 0x68
 80059f8:	4654      	mov	r4, sl
 80059fa:	2205      	movs	r2, #5
 80059fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a00:	4851      	ldr	r0, [pc, #324]	; (8005b48 <_svfiprintf_r+0x1ec>)
 8005a02:	f7fa fbed 	bl	80001e0 <memchr>
 8005a06:	9a04      	ldr	r2, [sp, #16]
 8005a08:	b9d8      	cbnz	r0, 8005a42 <_svfiprintf_r+0xe6>
 8005a0a:	06d0      	lsls	r0, r2, #27
 8005a0c:	bf44      	itt	mi
 8005a0e:	2320      	movmi	r3, #32
 8005a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a14:	0711      	lsls	r1, r2, #28
 8005a16:	bf44      	itt	mi
 8005a18:	232b      	movmi	r3, #43	; 0x2b
 8005a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a22:	2b2a      	cmp	r3, #42	; 0x2a
 8005a24:	d015      	beq.n	8005a52 <_svfiprintf_r+0xf6>
 8005a26:	9a07      	ldr	r2, [sp, #28]
 8005a28:	4654      	mov	r4, sl
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f04f 0c0a 	mov.w	ip, #10
 8005a30:	4621      	mov	r1, r4
 8005a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a36:	3b30      	subs	r3, #48	; 0x30
 8005a38:	2b09      	cmp	r3, #9
 8005a3a:	d94e      	bls.n	8005ada <_svfiprintf_r+0x17e>
 8005a3c:	b1b0      	cbz	r0, 8005a6c <_svfiprintf_r+0x110>
 8005a3e:	9207      	str	r2, [sp, #28]
 8005a40:	e014      	b.n	8005a6c <_svfiprintf_r+0x110>
 8005a42:	eba0 0308 	sub.w	r3, r0, r8
 8005a46:	fa09 f303 	lsl.w	r3, r9, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	46a2      	mov	sl, r4
 8005a50:	e7d2      	b.n	80059f8 <_svfiprintf_r+0x9c>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	1d19      	adds	r1, r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	9103      	str	r1, [sp, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bfbb      	ittet	lt
 8005a5e:	425b      	neglt	r3, r3
 8005a60:	f042 0202 	orrlt.w	r2, r2, #2
 8005a64:	9307      	strge	r3, [sp, #28]
 8005a66:	9307      	strlt	r3, [sp, #28]
 8005a68:	bfb8      	it	lt
 8005a6a:	9204      	strlt	r2, [sp, #16]
 8005a6c:	7823      	ldrb	r3, [r4, #0]
 8005a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a70:	d10c      	bne.n	8005a8c <_svfiprintf_r+0x130>
 8005a72:	7863      	ldrb	r3, [r4, #1]
 8005a74:	2b2a      	cmp	r3, #42	; 0x2a
 8005a76:	d135      	bne.n	8005ae4 <_svfiprintf_r+0x188>
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	1d1a      	adds	r2, r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	9203      	str	r2, [sp, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bfb8      	it	lt
 8005a84:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a88:	3402      	adds	r4, #2
 8005a8a:	9305      	str	r3, [sp, #20]
 8005a8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b58 <_svfiprintf_r+0x1fc>
 8005a90:	7821      	ldrb	r1, [r4, #0]
 8005a92:	2203      	movs	r2, #3
 8005a94:	4650      	mov	r0, sl
 8005a96:	f7fa fba3 	bl	80001e0 <memchr>
 8005a9a:	b140      	cbz	r0, 8005aae <_svfiprintf_r+0x152>
 8005a9c:	2340      	movs	r3, #64	; 0x40
 8005a9e:	eba0 000a 	sub.w	r0, r0, sl
 8005aa2:	fa03 f000 	lsl.w	r0, r3, r0
 8005aa6:	9b04      	ldr	r3, [sp, #16]
 8005aa8:	4303      	orrs	r3, r0
 8005aaa:	3401      	adds	r4, #1
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab2:	4826      	ldr	r0, [pc, #152]	; (8005b4c <_svfiprintf_r+0x1f0>)
 8005ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ab8:	2206      	movs	r2, #6
 8005aba:	f7fa fb91 	bl	80001e0 <memchr>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d038      	beq.n	8005b34 <_svfiprintf_r+0x1d8>
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <_svfiprintf_r+0x1f4>)
 8005ac4:	bb1b      	cbnz	r3, 8005b0e <_svfiprintf_r+0x1b2>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	3307      	adds	r3, #7
 8005aca:	f023 0307 	bic.w	r3, r3, #7
 8005ace:	3308      	adds	r3, #8
 8005ad0:	9303      	str	r3, [sp, #12]
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	4433      	add	r3, r6
 8005ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad8:	e767      	b.n	80059aa <_svfiprintf_r+0x4e>
 8005ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ade:	460c      	mov	r4, r1
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	e7a5      	b.n	8005a30 <_svfiprintf_r+0xd4>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	3401      	adds	r4, #1
 8005ae8:	9305      	str	r3, [sp, #20]
 8005aea:	4619      	mov	r1, r3
 8005aec:	f04f 0c0a 	mov.w	ip, #10
 8005af0:	4620      	mov	r0, r4
 8005af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005af6:	3a30      	subs	r2, #48	; 0x30
 8005af8:	2a09      	cmp	r2, #9
 8005afa:	d903      	bls.n	8005b04 <_svfiprintf_r+0x1a8>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0c5      	beq.n	8005a8c <_svfiprintf_r+0x130>
 8005b00:	9105      	str	r1, [sp, #20]
 8005b02:	e7c3      	b.n	8005a8c <_svfiprintf_r+0x130>
 8005b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b08:	4604      	mov	r4, r0
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e7f0      	b.n	8005af0 <_svfiprintf_r+0x194>
 8005b0e:	ab03      	add	r3, sp, #12
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	462a      	mov	r2, r5
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <_svfiprintf_r+0x1f8>)
 8005b16:	a904      	add	r1, sp, #16
 8005b18:	4638      	mov	r0, r7
 8005b1a:	f3af 8000 	nop.w
 8005b1e:	1c42      	adds	r2, r0, #1
 8005b20:	4606      	mov	r6, r0
 8005b22:	d1d6      	bne.n	8005ad2 <_svfiprintf_r+0x176>
 8005b24:	89ab      	ldrh	r3, [r5, #12]
 8005b26:	065b      	lsls	r3, r3, #25
 8005b28:	f53f af2c 	bmi.w	8005984 <_svfiprintf_r+0x28>
 8005b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b2e:	b01d      	add	sp, #116	; 0x74
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	ab03      	add	r3, sp, #12
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <_svfiprintf_r+0x1f8>)
 8005b3c:	a904      	add	r1, sp, #16
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f000 f9d4 	bl	8005eec <_printf_i>
 8005b44:	e7eb      	b.n	8005b1e <_svfiprintf_r+0x1c2>
 8005b46:	bf00      	nop
 8005b48:	08006e65 	.word	0x08006e65
 8005b4c:	08006e6f 	.word	0x08006e6f
 8005b50:	00000000 	.word	0x00000000
 8005b54:	080058a5 	.word	0x080058a5
 8005b58:	08006e6b 	.word	0x08006e6b

08005b5c <__sfputc_r>:
 8005b5c:	6893      	ldr	r3, [r2, #8]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	b410      	push	{r4}
 8005b64:	6093      	str	r3, [r2, #8]
 8005b66:	da08      	bge.n	8005b7a <__sfputc_r+0x1e>
 8005b68:	6994      	ldr	r4, [r2, #24]
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	db01      	blt.n	8005b72 <__sfputc_r+0x16>
 8005b6e:	290a      	cmp	r1, #10
 8005b70:	d103      	bne.n	8005b7a <__sfputc_r+0x1e>
 8005b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b76:	f000 baef 	b.w	8006158 <__swbuf_r>
 8005b7a:	6813      	ldr	r3, [r2, #0]
 8005b7c:	1c58      	adds	r0, r3, #1
 8005b7e:	6010      	str	r0, [r2, #0]
 8005b80:	7019      	strb	r1, [r3, #0]
 8005b82:	4608      	mov	r0, r1
 8005b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <__sfputs_r>:
 8005b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	460f      	mov	r7, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	18d5      	adds	r5, r2, r3
 8005b94:	42ac      	cmp	r4, r5
 8005b96:	d101      	bne.n	8005b9c <__sfputs_r+0x12>
 8005b98:	2000      	movs	r0, #0
 8005b9a:	e007      	b.n	8005bac <__sfputs_r+0x22>
 8005b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba0:	463a      	mov	r2, r7
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f7ff ffda 	bl	8005b5c <__sfputc_r>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d1f3      	bne.n	8005b94 <__sfputs_r+0xa>
 8005bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bb0 <_vfiprintf_r>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	460d      	mov	r5, r1
 8005bb6:	b09d      	sub	sp, #116	; 0x74
 8005bb8:	4614      	mov	r4, r2
 8005bba:	4698      	mov	r8, r3
 8005bbc:	4606      	mov	r6, r0
 8005bbe:	b118      	cbz	r0, 8005bc8 <_vfiprintf_r+0x18>
 8005bc0:	6983      	ldr	r3, [r0, #24]
 8005bc2:	b90b      	cbnz	r3, 8005bc8 <_vfiprintf_r+0x18>
 8005bc4:	f000 fcaa 	bl	800651c <__sinit>
 8005bc8:	4b89      	ldr	r3, [pc, #548]	; (8005df0 <_vfiprintf_r+0x240>)
 8005bca:	429d      	cmp	r5, r3
 8005bcc:	d11b      	bne.n	8005c06 <_vfiprintf_r+0x56>
 8005bce:	6875      	ldr	r5, [r6, #4]
 8005bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bd2:	07d9      	lsls	r1, r3, #31
 8005bd4:	d405      	bmi.n	8005be2 <_vfiprintf_r+0x32>
 8005bd6:	89ab      	ldrh	r3, [r5, #12]
 8005bd8:	059a      	lsls	r2, r3, #22
 8005bda:	d402      	bmi.n	8005be2 <_vfiprintf_r+0x32>
 8005bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bde:	f000 fd3b 	bl	8006658 <__retarget_lock_acquire_recursive>
 8005be2:	89ab      	ldrh	r3, [r5, #12]
 8005be4:	071b      	lsls	r3, r3, #28
 8005be6:	d501      	bpl.n	8005bec <_vfiprintf_r+0x3c>
 8005be8:	692b      	ldr	r3, [r5, #16]
 8005bea:	b9eb      	cbnz	r3, 8005c28 <_vfiprintf_r+0x78>
 8005bec:	4629      	mov	r1, r5
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f000 fb04 	bl	80061fc <__swsetup_r>
 8005bf4:	b1c0      	cbz	r0, 8005c28 <_vfiprintf_r+0x78>
 8005bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf8:	07dc      	lsls	r4, r3, #31
 8005bfa:	d50e      	bpl.n	8005c1a <_vfiprintf_r+0x6a>
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005c00:	b01d      	add	sp, #116	; 0x74
 8005c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c06:	4b7b      	ldr	r3, [pc, #492]	; (8005df4 <_vfiprintf_r+0x244>)
 8005c08:	429d      	cmp	r5, r3
 8005c0a:	d101      	bne.n	8005c10 <_vfiprintf_r+0x60>
 8005c0c:	68b5      	ldr	r5, [r6, #8]
 8005c0e:	e7df      	b.n	8005bd0 <_vfiprintf_r+0x20>
 8005c10:	4b79      	ldr	r3, [pc, #484]	; (8005df8 <_vfiprintf_r+0x248>)
 8005c12:	429d      	cmp	r5, r3
 8005c14:	bf08      	it	eq
 8005c16:	68f5      	ldreq	r5, [r6, #12]
 8005c18:	e7da      	b.n	8005bd0 <_vfiprintf_r+0x20>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	0598      	lsls	r0, r3, #22
 8005c1e:	d4ed      	bmi.n	8005bfc <_vfiprintf_r+0x4c>
 8005c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c22:	f000 fd1a 	bl	800665a <__retarget_lock_release_recursive>
 8005c26:	e7e9      	b.n	8005bfc <_vfiprintf_r+0x4c>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c2c:	2320      	movs	r3, #32
 8005c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c36:	2330      	movs	r3, #48	; 0x30
 8005c38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005dfc <_vfiprintf_r+0x24c>
 8005c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c40:	f04f 0901 	mov.w	r9, #1
 8005c44:	4623      	mov	r3, r4
 8005c46:	469a      	mov	sl, r3
 8005c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c4c:	b10a      	cbz	r2, 8005c52 <_vfiprintf_r+0xa2>
 8005c4e:	2a25      	cmp	r2, #37	; 0x25
 8005c50:	d1f9      	bne.n	8005c46 <_vfiprintf_r+0x96>
 8005c52:	ebba 0b04 	subs.w	fp, sl, r4
 8005c56:	d00b      	beq.n	8005c70 <_vfiprintf_r+0xc0>
 8005c58:	465b      	mov	r3, fp
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff ff93 	bl	8005b8a <__sfputs_r>
 8005c64:	3001      	adds	r0, #1
 8005c66:	f000 80aa 	beq.w	8005dbe <_vfiprintf_r+0x20e>
 8005c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c6c:	445a      	add	r2, fp
 8005c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c70:	f89a 3000 	ldrb.w	r3, [sl]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80a2 	beq.w	8005dbe <_vfiprintf_r+0x20e>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c84:	f10a 0a01 	add.w	sl, sl, #1
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	9307      	str	r3, [sp, #28]
 8005c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c90:	931a      	str	r3, [sp, #104]	; 0x68
 8005c92:	4654      	mov	r4, sl
 8005c94:	2205      	movs	r2, #5
 8005c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9a:	4858      	ldr	r0, [pc, #352]	; (8005dfc <_vfiprintf_r+0x24c>)
 8005c9c:	f7fa faa0 	bl	80001e0 <memchr>
 8005ca0:	9a04      	ldr	r2, [sp, #16]
 8005ca2:	b9d8      	cbnz	r0, 8005cdc <_vfiprintf_r+0x12c>
 8005ca4:	06d1      	lsls	r1, r2, #27
 8005ca6:	bf44      	itt	mi
 8005ca8:	2320      	movmi	r3, #32
 8005caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cae:	0713      	lsls	r3, r2, #28
 8005cb0:	bf44      	itt	mi
 8005cb2:	232b      	movmi	r3, #43	; 0x2b
 8005cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8005cbe:	d015      	beq.n	8005cec <_vfiprintf_r+0x13c>
 8005cc0:	9a07      	ldr	r2, [sp, #28]
 8005cc2:	4654      	mov	r4, sl
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f04f 0c0a 	mov.w	ip, #10
 8005cca:	4621      	mov	r1, r4
 8005ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd0:	3b30      	subs	r3, #48	; 0x30
 8005cd2:	2b09      	cmp	r3, #9
 8005cd4:	d94e      	bls.n	8005d74 <_vfiprintf_r+0x1c4>
 8005cd6:	b1b0      	cbz	r0, 8005d06 <_vfiprintf_r+0x156>
 8005cd8:	9207      	str	r2, [sp, #28]
 8005cda:	e014      	b.n	8005d06 <_vfiprintf_r+0x156>
 8005cdc:	eba0 0308 	sub.w	r3, r0, r8
 8005ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	9304      	str	r3, [sp, #16]
 8005ce8:	46a2      	mov	sl, r4
 8005cea:	e7d2      	b.n	8005c92 <_vfiprintf_r+0xe2>
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	1d19      	adds	r1, r3, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	9103      	str	r1, [sp, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bfbb      	ittet	lt
 8005cf8:	425b      	neglt	r3, r3
 8005cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8005cfe:	9307      	strge	r3, [sp, #28]
 8005d00:	9307      	strlt	r3, [sp, #28]
 8005d02:	bfb8      	it	lt
 8005d04:	9204      	strlt	r2, [sp, #16]
 8005d06:	7823      	ldrb	r3, [r4, #0]
 8005d08:	2b2e      	cmp	r3, #46	; 0x2e
 8005d0a:	d10c      	bne.n	8005d26 <_vfiprintf_r+0x176>
 8005d0c:	7863      	ldrb	r3, [r4, #1]
 8005d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d10:	d135      	bne.n	8005d7e <_vfiprintf_r+0x1ce>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	9203      	str	r2, [sp, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bfb8      	it	lt
 8005d1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d22:	3402      	adds	r4, #2
 8005d24:	9305      	str	r3, [sp, #20]
 8005d26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e0c <_vfiprintf_r+0x25c>
 8005d2a:	7821      	ldrb	r1, [r4, #0]
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	4650      	mov	r0, sl
 8005d30:	f7fa fa56 	bl	80001e0 <memchr>
 8005d34:	b140      	cbz	r0, 8005d48 <_vfiprintf_r+0x198>
 8005d36:	2340      	movs	r3, #64	; 0x40
 8005d38:	eba0 000a 	sub.w	r0, r0, sl
 8005d3c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d40:	9b04      	ldr	r3, [sp, #16]
 8005d42:	4303      	orrs	r3, r0
 8005d44:	3401      	adds	r4, #1
 8005d46:	9304      	str	r3, [sp, #16]
 8005d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4c:	482c      	ldr	r0, [pc, #176]	; (8005e00 <_vfiprintf_r+0x250>)
 8005d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d52:	2206      	movs	r2, #6
 8005d54:	f7fa fa44 	bl	80001e0 <memchr>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d03f      	beq.n	8005ddc <_vfiprintf_r+0x22c>
 8005d5c:	4b29      	ldr	r3, [pc, #164]	; (8005e04 <_vfiprintf_r+0x254>)
 8005d5e:	bb1b      	cbnz	r3, 8005da8 <_vfiprintf_r+0x1f8>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	3307      	adds	r3, #7
 8005d64:	f023 0307 	bic.w	r3, r3, #7
 8005d68:	3308      	adds	r3, #8
 8005d6a:	9303      	str	r3, [sp, #12]
 8005d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d6e:	443b      	add	r3, r7
 8005d70:	9309      	str	r3, [sp, #36]	; 0x24
 8005d72:	e767      	b.n	8005c44 <_vfiprintf_r+0x94>
 8005d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d78:	460c      	mov	r4, r1
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	e7a5      	b.n	8005cca <_vfiprintf_r+0x11a>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	3401      	adds	r4, #1
 8005d82:	9305      	str	r3, [sp, #20]
 8005d84:	4619      	mov	r1, r3
 8005d86:	f04f 0c0a 	mov.w	ip, #10
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d90:	3a30      	subs	r2, #48	; 0x30
 8005d92:	2a09      	cmp	r2, #9
 8005d94:	d903      	bls.n	8005d9e <_vfiprintf_r+0x1ee>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0c5      	beq.n	8005d26 <_vfiprintf_r+0x176>
 8005d9a:	9105      	str	r1, [sp, #20]
 8005d9c:	e7c3      	b.n	8005d26 <_vfiprintf_r+0x176>
 8005d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005da2:	4604      	mov	r4, r0
 8005da4:	2301      	movs	r3, #1
 8005da6:	e7f0      	b.n	8005d8a <_vfiprintf_r+0x1da>
 8005da8:	ab03      	add	r3, sp, #12
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	462a      	mov	r2, r5
 8005dae:	4b16      	ldr	r3, [pc, #88]	; (8005e08 <_vfiprintf_r+0x258>)
 8005db0:	a904      	add	r1, sp, #16
 8005db2:	4630      	mov	r0, r6
 8005db4:	f3af 8000 	nop.w
 8005db8:	4607      	mov	r7, r0
 8005dba:	1c78      	adds	r0, r7, #1
 8005dbc:	d1d6      	bne.n	8005d6c <_vfiprintf_r+0x1bc>
 8005dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dc0:	07d9      	lsls	r1, r3, #31
 8005dc2:	d405      	bmi.n	8005dd0 <_vfiprintf_r+0x220>
 8005dc4:	89ab      	ldrh	r3, [r5, #12]
 8005dc6:	059a      	lsls	r2, r3, #22
 8005dc8:	d402      	bmi.n	8005dd0 <_vfiprintf_r+0x220>
 8005dca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dcc:	f000 fc45 	bl	800665a <__retarget_lock_release_recursive>
 8005dd0:	89ab      	ldrh	r3, [r5, #12]
 8005dd2:	065b      	lsls	r3, r3, #25
 8005dd4:	f53f af12 	bmi.w	8005bfc <_vfiprintf_r+0x4c>
 8005dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dda:	e711      	b.n	8005c00 <_vfiprintf_r+0x50>
 8005ddc:	ab03      	add	r3, sp, #12
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	462a      	mov	r2, r5
 8005de2:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <_vfiprintf_r+0x258>)
 8005de4:	a904      	add	r1, sp, #16
 8005de6:	4630      	mov	r0, r6
 8005de8:	f000 f880 	bl	8005eec <_printf_i>
 8005dec:	e7e4      	b.n	8005db8 <_vfiprintf_r+0x208>
 8005dee:	bf00      	nop
 8005df0:	08006eb8 	.word	0x08006eb8
 8005df4:	08006ed8 	.word	0x08006ed8
 8005df8:	08006e98 	.word	0x08006e98
 8005dfc:	08006e65 	.word	0x08006e65
 8005e00:	08006e6f 	.word	0x08006e6f
 8005e04:	00000000 	.word	0x00000000
 8005e08:	08005b8b 	.word	0x08005b8b
 8005e0c:	08006e6b 	.word	0x08006e6b

08005e10 <_printf_common>:
 8005e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	4616      	mov	r6, r2
 8005e16:	4699      	mov	r9, r3
 8005e18:	688a      	ldr	r2, [r1, #8]
 8005e1a:	690b      	ldr	r3, [r1, #16]
 8005e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	bfb8      	it	lt
 8005e24:	4613      	movlt	r3, r2
 8005e26:	6033      	str	r3, [r6, #0]
 8005e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	b10a      	cbz	r2, 8005e36 <_printf_common+0x26>
 8005e32:	3301      	adds	r3, #1
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	0699      	lsls	r1, r3, #26
 8005e3a:	bf42      	ittt	mi
 8005e3c:	6833      	ldrmi	r3, [r6, #0]
 8005e3e:	3302      	addmi	r3, #2
 8005e40:	6033      	strmi	r3, [r6, #0]
 8005e42:	6825      	ldr	r5, [r4, #0]
 8005e44:	f015 0506 	ands.w	r5, r5, #6
 8005e48:	d106      	bne.n	8005e58 <_printf_common+0x48>
 8005e4a:	f104 0a19 	add.w	sl, r4, #25
 8005e4e:	68e3      	ldr	r3, [r4, #12]
 8005e50:	6832      	ldr	r2, [r6, #0]
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	dc26      	bgt.n	8005ea6 <_printf_common+0x96>
 8005e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e5c:	1e13      	subs	r3, r2, #0
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	bf18      	it	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	0692      	lsls	r2, r2, #26
 8005e66:	d42b      	bmi.n	8005ec0 <_printf_common+0xb0>
 8005e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c0      	blx	r8
 8005e72:	3001      	adds	r0, #1
 8005e74:	d01e      	beq.n	8005eb4 <_printf_common+0xa4>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	68e5      	ldr	r5, [r4, #12]
 8005e7a:	6832      	ldr	r2, [r6, #0]
 8005e7c:	f003 0306 	and.w	r3, r3, #6
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	bf08      	it	eq
 8005e84:	1aad      	subeq	r5, r5, r2
 8005e86:	68a3      	ldr	r3, [r4, #8]
 8005e88:	6922      	ldr	r2, [r4, #16]
 8005e8a:	bf0c      	ite	eq
 8005e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e90:	2500      	movne	r5, #0
 8005e92:	4293      	cmp	r3, r2
 8005e94:	bfc4      	itt	gt
 8005e96:	1a9b      	subgt	r3, r3, r2
 8005e98:	18ed      	addgt	r5, r5, r3
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	341a      	adds	r4, #26
 8005e9e:	42b5      	cmp	r5, r6
 8005ea0:	d11a      	bne.n	8005ed8 <_printf_common+0xc8>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e008      	b.n	8005eb8 <_printf_common+0xa8>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4638      	mov	r0, r7
 8005eae:	47c0      	blx	r8
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d103      	bne.n	8005ebc <_printf_common+0xac>
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	3501      	adds	r5, #1
 8005ebe:	e7c6      	b.n	8005e4e <_printf_common+0x3e>
 8005ec0:	18e1      	adds	r1, r4, r3
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	2030      	movs	r0, #48	; 0x30
 8005ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eca:	4422      	add	r2, r4
 8005ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	e7c7      	b.n	8005e68 <_printf_common+0x58>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4622      	mov	r2, r4
 8005edc:	4649      	mov	r1, r9
 8005ede:	4638      	mov	r0, r7
 8005ee0:	47c0      	blx	r8
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d0e6      	beq.n	8005eb4 <_printf_common+0xa4>
 8005ee6:	3601      	adds	r6, #1
 8005ee8:	e7d9      	b.n	8005e9e <_printf_common+0x8e>
	...

08005eec <_printf_i>:
 8005eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	4691      	mov	r9, r2
 8005ef4:	7e27      	ldrb	r7, [r4, #24]
 8005ef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ef8:	2f78      	cmp	r7, #120	; 0x78
 8005efa:	4680      	mov	r8, r0
 8005efc:	469a      	mov	sl, r3
 8005efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f02:	d807      	bhi.n	8005f14 <_printf_i+0x28>
 8005f04:	2f62      	cmp	r7, #98	; 0x62
 8005f06:	d80a      	bhi.n	8005f1e <_printf_i+0x32>
 8005f08:	2f00      	cmp	r7, #0
 8005f0a:	f000 80d8 	beq.w	80060be <_printf_i+0x1d2>
 8005f0e:	2f58      	cmp	r7, #88	; 0x58
 8005f10:	f000 80a3 	beq.w	800605a <_printf_i+0x16e>
 8005f14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f1c:	e03a      	b.n	8005f94 <_printf_i+0xa8>
 8005f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f22:	2b15      	cmp	r3, #21
 8005f24:	d8f6      	bhi.n	8005f14 <_printf_i+0x28>
 8005f26:	a001      	add	r0, pc, #4	; (adr r0, 8005f2c <_printf_i+0x40>)
 8005f28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f15 	.word	0x08005f15
 8005f38:	08005f15 	.word	0x08005f15
 8005f3c:	08005f15 	.word	0x08005f15
 8005f40:	08005f15 	.word	0x08005f15
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005f15 	.word	0x08005f15
 8005f4c:	08005f15 	.word	0x08005f15
 8005f50:	08005f15 	.word	0x08005f15
 8005f54:	08005f15 	.word	0x08005f15
 8005f58:	080060a5 	.word	0x080060a5
 8005f5c:	08005fc9 	.word	0x08005fc9
 8005f60:	08006087 	.word	0x08006087
 8005f64:	08005f15 	.word	0x08005f15
 8005f68:	08005f15 	.word	0x08005f15
 8005f6c:	080060c7 	.word	0x080060c7
 8005f70:	08005f15 	.word	0x08005f15
 8005f74:	08005fc9 	.word	0x08005fc9
 8005f78:	08005f15 	.word	0x08005f15
 8005f7c:	08005f15 	.word	0x08005f15
 8005f80:	0800608f 	.word	0x0800608f
 8005f84:	680b      	ldr	r3, [r1, #0]
 8005f86:	1d1a      	adds	r2, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	600a      	str	r2, [r1, #0]
 8005f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0a3      	b.n	80060e0 <_printf_i+0x1f4>
 8005f98:	6825      	ldr	r5, [r4, #0]
 8005f9a:	6808      	ldr	r0, [r1, #0]
 8005f9c:	062e      	lsls	r6, r5, #24
 8005f9e:	f100 0304 	add.w	r3, r0, #4
 8005fa2:	d50a      	bpl.n	8005fba <_printf_i+0xce>
 8005fa4:	6805      	ldr	r5, [r0, #0]
 8005fa6:	600b      	str	r3, [r1, #0]
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	da03      	bge.n	8005fb4 <_printf_i+0xc8>
 8005fac:	232d      	movs	r3, #45	; 0x2d
 8005fae:	426d      	negs	r5, r5
 8005fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb4:	485e      	ldr	r0, [pc, #376]	; (8006130 <_printf_i+0x244>)
 8005fb6:	230a      	movs	r3, #10
 8005fb8:	e019      	b.n	8005fee <_printf_i+0x102>
 8005fba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fbe:	6805      	ldr	r5, [r0, #0]
 8005fc0:	600b      	str	r3, [r1, #0]
 8005fc2:	bf18      	it	ne
 8005fc4:	b22d      	sxthne	r5, r5
 8005fc6:	e7ef      	b.n	8005fa8 <_printf_i+0xbc>
 8005fc8:	680b      	ldr	r3, [r1, #0]
 8005fca:	6825      	ldr	r5, [r4, #0]
 8005fcc:	1d18      	adds	r0, r3, #4
 8005fce:	6008      	str	r0, [r1, #0]
 8005fd0:	0628      	lsls	r0, r5, #24
 8005fd2:	d501      	bpl.n	8005fd8 <_printf_i+0xec>
 8005fd4:	681d      	ldr	r5, [r3, #0]
 8005fd6:	e002      	b.n	8005fde <_printf_i+0xf2>
 8005fd8:	0669      	lsls	r1, r5, #25
 8005fda:	d5fb      	bpl.n	8005fd4 <_printf_i+0xe8>
 8005fdc:	881d      	ldrh	r5, [r3, #0]
 8005fde:	4854      	ldr	r0, [pc, #336]	; (8006130 <_printf_i+0x244>)
 8005fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2308      	moveq	r3, #8
 8005fe6:	230a      	movne	r3, #10
 8005fe8:	2100      	movs	r1, #0
 8005fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fee:	6866      	ldr	r6, [r4, #4]
 8005ff0:	60a6      	str	r6, [r4, #8]
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	bfa2      	ittt	ge
 8005ff6:	6821      	ldrge	r1, [r4, #0]
 8005ff8:	f021 0104 	bicge.w	r1, r1, #4
 8005ffc:	6021      	strge	r1, [r4, #0]
 8005ffe:	b90d      	cbnz	r5, 8006004 <_printf_i+0x118>
 8006000:	2e00      	cmp	r6, #0
 8006002:	d04d      	beq.n	80060a0 <_printf_i+0x1b4>
 8006004:	4616      	mov	r6, r2
 8006006:	fbb5 f1f3 	udiv	r1, r5, r3
 800600a:	fb03 5711 	mls	r7, r3, r1, r5
 800600e:	5dc7      	ldrb	r7, [r0, r7]
 8006010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006014:	462f      	mov	r7, r5
 8006016:	42bb      	cmp	r3, r7
 8006018:	460d      	mov	r5, r1
 800601a:	d9f4      	bls.n	8006006 <_printf_i+0x11a>
 800601c:	2b08      	cmp	r3, #8
 800601e:	d10b      	bne.n	8006038 <_printf_i+0x14c>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	07df      	lsls	r7, r3, #31
 8006024:	d508      	bpl.n	8006038 <_printf_i+0x14c>
 8006026:	6923      	ldr	r3, [r4, #16]
 8006028:	6861      	ldr	r1, [r4, #4]
 800602a:	4299      	cmp	r1, r3
 800602c:	bfde      	ittt	le
 800602e:	2330      	movle	r3, #48	; 0x30
 8006030:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006034:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006038:	1b92      	subs	r2, r2, r6
 800603a:	6122      	str	r2, [r4, #16]
 800603c:	f8cd a000 	str.w	sl, [sp]
 8006040:	464b      	mov	r3, r9
 8006042:	aa03      	add	r2, sp, #12
 8006044:	4621      	mov	r1, r4
 8006046:	4640      	mov	r0, r8
 8006048:	f7ff fee2 	bl	8005e10 <_printf_common>
 800604c:	3001      	adds	r0, #1
 800604e:	d14c      	bne.n	80060ea <_printf_i+0x1fe>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295
 8006054:	b004      	add	sp, #16
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605a:	4835      	ldr	r0, [pc, #212]	; (8006130 <_printf_i+0x244>)
 800605c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	680e      	ldr	r6, [r1, #0]
 8006064:	061f      	lsls	r7, r3, #24
 8006066:	f856 5b04 	ldr.w	r5, [r6], #4
 800606a:	600e      	str	r6, [r1, #0]
 800606c:	d514      	bpl.n	8006098 <_printf_i+0x1ac>
 800606e:	07d9      	lsls	r1, r3, #31
 8006070:	bf44      	itt	mi
 8006072:	f043 0320 	orrmi.w	r3, r3, #32
 8006076:	6023      	strmi	r3, [r4, #0]
 8006078:	b91d      	cbnz	r5, 8006082 <_printf_i+0x196>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f023 0320 	bic.w	r3, r3, #32
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	2310      	movs	r3, #16
 8006084:	e7b0      	b.n	8005fe8 <_printf_i+0xfc>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	f043 0320 	orr.w	r3, r3, #32
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	2378      	movs	r3, #120	; 0x78
 8006090:	4828      	ldr	r0, [pc, #160]	; (8006134 <_printf_i+0x248>)
 8006092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006096:	e7e3      	b.n	8006060 <_printf_i+0x174>
 8006098:	065e      	lsls	r6, r3, #25
 800609a:	bf48      	it	mi
 800609c:	b2ad      	uxthmi	r5, r5
 800609e:	e7e6      	b.n	800606e <_printf_i+0x182>
 80060a0:	4616      	mov	r6, r2
 80060a2:	e7bb      	b.n	800601c <_printf_i+0x130>
 80060a4:	680b      	ldr	r3, [r1, #0]
 80060a6:	6826      	ldr	r6, [r4, #0]
 80060a8:	6960      	ldr	r0, [r4, #20]
 80060aa:	1d1d      	adds	r5, r3, #4
 80060ac:	600d      	str	r5, [r1, #0]
 80060ae:	0635      	lsls	r5, r6, #24
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	d501      	bpl.n	80060b8 <_printf_i+0x1cc>
 80060b4:	6018      	str	r0, [r3, #0]
 80060b6:	e002      	b.n	80060be <_printf_i+0x1d2>
 80060b8:	0671      	lsls	r1, r6, #25
 80060ba:	d5fb      	bpl.n	80060b4 <_printf_i+0x1c8>
 80060bc:	8018      	strh	r0, [r3, #0]
 80060be:	2300      	movs	r3, #0
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	4616      	mov	r6, r2
 80060c4:	e7ba      	b.n	800603c <_printf_i+0x150>
 80060c6:	680b      	ldr	r3, [r1, #0]
 80060c8:	1d1a      	adds	r2, r3, #4
 80060ca:	600a      	str	r2, [r1, #0]
 80060cc:	681e      	ldr	r6, [r3, #0]
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	2100      	movs	r1, #0
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7fa f884 	bl	80001e0 <memchr>
 80060d8:	b108      	cbz	r0, 80060de <_printf_i+0x1f2>
 80060da:	1b80      	subs	r0, r0, r6
 80060dc:	6060      	str	r0, [r4, #4]
 80060de:	6863      	ldr	r3, [r4, #4]
 80060e0:	6123      	str	r3, [r4, #16]
 80060e2:	2300      	movs	r3, #0
 80060e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e8:	e7a8      	b.n	800603c <_printf_i+0x150>
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	4632      	mov	r2, r6
 80060ee:	4649      	mov	r1, r9
 80060f0:	4640      	mov	r0, r8
 80060f2:	47d0      	blx	sl
 80060f4:	3001      	adds	r0, #1
 80060f6:	d0ab      	beq.n	8006050 <_printf_i+0x164>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	079b      	lsls	r3, r3, #30
 80060fc:	d413      	bmi.n	8006126 <_printf_i+0x23a>
 80060fe:	68e0      	ldr	r0, [r4, #12]
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	4298      	cmp	r0, r3
 8006104:	bfb8      	it	lt
 8006106:	4618      	movlt	r0, r3
 8006108:	e7a4      	b.n	8006054 <_printf_i+0x168>
 800610a:	2301      	movs	r3, #1
 800610c:	4632      	mov	r2, r6
 800610e:	4649      	mov	r1, r9
 8006110:	4640      	mov	r0, r8
 8006112:	47d0      	blx	sl
 8006114:	3001      	adds	r0, #1
 8006116:	d09b      	beq.n	8006050 <_printf_i+0x164>
 8006118:	3501      	adds	r5, #1
 800611a:	68e3      	ldr	r3, [r4, #12]
 800611c:	9903      	ldr	r1, [sp, #12]
 800611e:	1a5b      	subs	r3, r3, r1
 8006120:	42ab      	cmp	r3, r5
 8006122:	dcf2      	bgt.n	800610a <_printf_i+0x21e>
 8006124:	e7eb      	b.n	80060fe <_printf_i+0x212>
 8006126:	2500      	movs	r5, #0
 8006128:	f104 0619 	add.w	r6, r4, #25
 800612c:	e7f5      	b.n	800611a <_printf_i+0x22e>
 800612e:	bf00      	nop
 8006130:	08006e76 	.word	0x08006e76
 8006134:	08006e87 	.word	0x08006e87

08006138 <_sbrk_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d06      	ldr	r5, [pc, #24]	; (8006154 <_sbrk_r+0x1c>)
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f7fb fd26 	bl	8001b94 <_sbrk>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_sbrk_r+0x1a>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_sbrk_r+0x1a>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20000cdc 	.word	0x20000cdc

08006158 <__swbuf_r>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	460e      	mov	r6, r1
 800615c:	4614      	mov	r4, r2
 800615e:	4605      	mov	r5, r0
 8006160:	b118      	cbz	r0, 800616a <__swbuf_r+0x12>
 8006162:	6983      	ldr	r3, [r0, #24]
 8006164:	b90b      	cbnz	r3, 800616a <__swbuf_r+0x12>
 8006166:	f000 f9d9 	bl	800651c <__sinit>
 800616a:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <__swbuf_r+0x98>)
 800616c:	429c      	cmp	r4, r3
 800616e:	d12b      	bne.n	80061c8 <__swbuf_r+0x70>
 8006170:	686c      	ldr	r4, [r5, #4]
 8006172:	69a3      	ldr	r3, [r4, #24]
 8006174:	60a3      	str	r3, [r4, #8]
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	071a      	lsls	r2, r3, #28
 800617a:	d52f      	bpl.n	80061dc <__swbuf_r+0x84>
 800617c:	6923      	ldr	r3, [r4, #16]
 800617e:	b36b      	cbz	r3, 80061dc <__swbuf_r+0x84>
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1ac0      	subs	r0, r0, r3
 8006186:	6963      	ldr	r3, [r4, #20]
 8006188:	b2f6      	uxtb	r6, r6
 800618a:	4283      	cmp	r3, r0
 800618c:	4637      	mov	r7, r6
 800618e:	dc04      	bgt.n	800619a <__swbuf_r+0x42>
 8006190:	4621      	mov	r1, r4
 8006192:	4628      	mov	r0, r5
 8006194:	f000 f92e 	bl	80063f4 <_fflush_r>
 8006198:	bb30      	cbnz	r0, 80061e8 <__swbuf_r+0x90>
 800619a:	68a3      	ldr	r3, [r4, #8]
 800619c:	3b01      	subs	r3, #1
 800619e:	60a3      	str	r3, [r4, #8]
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	6022      	str	r2, [r4, #0]
 80061a6:	701e      	strb	r6, [r3, #0]
 80061a8:	6963      	ldr	r3, [r4, #20]
 80061aa:	3001      	adds	r0, #1
 80061ac:	4283      	cmp	r3, r0
 80061ae:	d004      	beq.n	80061ba <__swbuf_r+0x62>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	07db      	lsls	r3, r3, #31
 80061b4:	d506      	bpl.n	80061c4 <__swbuf_r+0x6c>
 80061b6:	2e0a      	cmp	r6, #10
 80061b8:	d104      	bne.n	80061c4 <__swbuf_r+0x6c>
 80061ba:	4621      	mov	r1, r4
 80061bc:	4628      	mov	r0, r5
 80061be:	f000 f919 	bl	80063f4 <_fflush_r>
 80061c2:	b988      	cbnz	r0, 80061e8 <__swbuf_r+0x90>
 80061c4:	4638      	mov	r0, r7
 80061c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c8:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <__swbuf_r+0x9c>)
 80061ca:	429c      	cmp	r4, r3
 80061cc:	d101      	bne.n	80061d2 <__swbuf_r+0x7a>
 80061ce:	68ac      	ldr	r4, [r5, #8]
 80061d0:	e7cf      	b.n	8006172 <__swbuf_r+0x1a>
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <__swbuf_r+0xa0>)
 80061d4:	429c      	cmp	r4, r3
 80061d6:	bf08      	it	eq
 80061d8:	68ec      	ldreq	r4, [r5, #12]
 80061da:	e7ca      	b.n	8006172 <__swbuf_r+0x1a>
 80061dc:	4621      	mov	r1, r4
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 f80c 	bl	80061fc <__swsetup_r>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d0cb      	beq.n	8006180 <__swbuf_r+0x28>
 80061e8:	f04f 37ff 	mov.w	r7, #4294967295
 80061ec:	e7ea      	b.n	80061c4 <__swbuf_r+0x6c>
 80061ee:	bf00      	nop
 80061f0:	08006eb8 	.word	0x08006eb8
 80061f4:	08006ed8 	.word	0x08006ed8
 80061f8:	08006e98 	.word	0x08006e98

080061fc <__swsetup_r>:
 80061fc:	4b32      	ldr	r3, [pc, #200]	; (80062c8 <__swsetup_r+0xcc>)
 80061fe:	b570      	push	{r4, r5, r6, lr}
 8006200:	681d      	ldr	r5, [r3, #0]
 8006202:	4606      	mov	r6, r0
 8006204:	460c      	mov	r4, r1
 8006206:	b125      	cbz	r5, 8006212 <__swsetup_r+0x16>
 8006208:	69ab      	ldr	r3, [r5, #24]
 800620a:	b913      	cbnz	r3, 8006212 <__swsetup_r+0x16>
 800620c:	4628      	mov	r0, r5
 800620e:	f000 f985 	bl	800651c <__sinit>
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <__swsetup_r+0xd0>)
 8006214:	429c      	cmp	r4, r3
 8006216:	d10f      	bne.n	8006238 <__swsetup_r+0x3c>
 8006218:	686c      	ldr	r4, [r5, #4]
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006220:	0719      	lsls	r1, r3, #28
 8006222:	d42c      	bmi.n	800627e <__swsetup_r+0x82>
 8006224:	06dd      	lsls	r5, r3, #27
 8006226:	d411      	bmi.n	800624c <__swsetup_r+0x50>
 8006228:	2309      	movs	r3, #9
 800622a:	6033      	str	r3, [r6, #0]
 800622c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006230:	81a3      	strh	r3, [r4, #12]
 8006232:	f04f 30ff 	mov.w	r0, #4294967295
 8006236:	e03e      	b.n	80062b6 <__swsetup_r+0xba>
 8006238:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <__swsetup_r+0xd4>)
 800623a:	429c      	cmp	r4, r3
 800623c:	d101      	bne.n	8006242 <__swsetup_r+0x46>
 800623e:	68ac      	ldr	r4, [r5, #8]
 8006240:	e7eb      	b.n	800621a <__swsetup_r+0x1e>
 8006242:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <__swsetup_r+0xd8>)
 8006244:	429c      	cmp	r4, r3
 8006246:	bf08      	it	eq
 8006248:	68ec      	ldreq	r4, [r5, #12]
 800624a:	e7e6      	b.n	800621a <__swsetup_r+0x1e>
 800624c:	0758      	lsls	r0, r3, #29
 800624e:	d512      	bpl.n	8006276 <__swsetup_r+0x7a>
 8006250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006252:	b141      	cbz	r1, 8006266 <__swsetup_r+0x6a>
 8006254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006258:	4299      	cmp	r1, r3
 800625a:	d002      	beq.n	8006262 <__swsetup_r+0x66>
 800625c:	4630      	mov	r0, r6
 800625e:	f7ff fa77 	bl	8005750 <_free_r>
 8006262:	2300      	movs	r3, #0
 8006264:	6363      	str	r3, [r4, #52]	; 0x34
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800626c:	81a3      	strh	r3, [r4, #12]
 800626e:	2300      	movs	r3, #0
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f043 0308 	orr.w	r3, r3, #8
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	b94b      	cbnz	r3, 8006296 <__swsetup_r+0x9a>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800628c:	d003      	beq.n	8006296 <__swsetup_r+0x9a>
 800628e:	4621      	mov	r1, r4
 8006290:	4630      	mov	r0, r6
 8006292:	f000 fa07 	bl	80066a4 <__smakebuf_r>
 8006296:	89a0      	ldrh	r0, [r4, #12]
 8006298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800629c:	f010 0301 	ands.w	r3, r0, #1
 80062a0:	d00a      	beq.n	80062b8 <__swsetup_r+0xbc>
 80062a2:	2300      	movs	r3, #0
 80062a4:	60a3      	str	r3, [r4, #8]
 80062a6:	6963      	ldr	r3, [r4, #20]
 80062a8:	425b      	negs	r3, r3
 80062aa:	61a3      	str	r3, [r4, #24]
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	b943      	cbnz	r3, 80062c2 <__swsetup_r+0xc6>
 80062b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062b4:	d1ba      	bne.n	800622c <__swsetup_r+0x30>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	0781      	lsls	r1, r0, #30
 80062ba:	bf58      	it	pl
 80062bc:	6963      	ldrpl	r3, [r4, #20]
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	e7f4      	b.n	80062ac <__swsetup_r+0xb0>
 80062c2:	2000      	movs	r0, #0
 80062c4:	e7f7      	b.n	80062b6 <__swsetup_r+0xba>
 80062c6:	bf00      	nop
 80062c8:	200000bc 	.word	0x200000bc
 80062cc:	08006eb8 	.word	0x08006eb8
 80062d0:	08006ed8 	.word	0x08006ed8
 80062d4:	08006e98 	.word	0x08006e98

080062d8 <abort>:
 80062d8:	b508      	push	{r3, lr}
 80062da:	2006      	movs	r0, #6
 80062dc:	f000 faa4 	bl	8006828 <raise>
 80062e0:	2001      	movs	r0, #1
 80062e2:	f7fb fbdf 	bl	8001aa4 <_exit>
	...

080062e8 <__sflush_r>:
 80062e8:	898a      	ldrh	r2, [r1, #12]
 80062ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	4605      	mov	r5, r0
 80062f0:	0710      	lsls	r0, r2, #28
 80062f2:	460c      	mov	r4, r1
 80062f4:	d458      	bmi.n	80063a8 <__sflush_r+0xc0>
 80062f6:	684b      	ldr	r3, [r1, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dc05      	bgt.n	8006308 <__sflush_r+0x20>
 80062fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dc02      	bgt.n	8006308 <__sflush_r+0x20>
 8006302:	2000      	movs	r0, #0
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800630a:	2e00      	cmp	r6, #0
 800630c:	d0f9      	beq.n	8006302 <__sflush_r+0x1a>
 800630e:	2300      	movs	r3, #0
 8006310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006314:	682f      	ldr	r7, [r5, #0]
 8006316:	602b      	str	r3, [r5, #0]
 8006318:	d032      	beq.n	8006380 <__sflush_r+0x98>
 800631a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	075a      	lsls	r2, r3, #29
 8006320:	d505      	bpl.n	800632e <__sflush_r+0x46>
 8006322:	6863      	ldr	r3, [r4, #4]
 8006324:	1ac0      	subs	r0, r0, r3
 8006326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006328:	b10b      	cbz	r3, 800632e <__sflush_r+0x46>
 800632a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800632c:	1ac0      	subs	r0, r0, r3
 800632e:	2300      	movs	r3, #0
 8006330:	4602      	mov	r2, r0
 8006332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006334:	6a21      	ldr	r1, [r4, #32]
 8006336:	4628      	mov	r0, r5
 8006338:	47b0      	blx	r6
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	d106      	bne.n	800634e <__sflush_r+0x66>
 8006340:	6829      	ldr	r1, [r5, #0]
 8006342:	291d      	cmp	r1, #29
 8006344:	d82c      	bhi.n	80063a0 <__sflush_r+0xb8>
 8006346:	4a2a      	ldr	r2, [pc, #168]	; (80063f0 <__sflush_r+0x108>)
 8006348:	40ca      	lsrs	r2, r1
 800634a:	07d6      	lsls	r6, r2, #31
 800634c:	d528      	bpl.n	80063a0 <__sflush_r+0xb8>
 800634e:	2200      	movs	r2, #0
 8006350:	6062      	str	r2, [r4, #4]
 8006352:	04d9      	lsls	r1, r3, #19
 8006354:	6922      	ldr	r2, [r4, #16]
 8006356:	6022      	str	r2, [r4, #0]
 8006358:	d504      	bpl.n	8006364 <__sflush_r+0x7c>
 800635a:	1c42      	adds	r2, r0, #1
 800635c:	d101      	bne.n	8006362 <__sflush_r+0x7a>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	b903      	cbnz	r3, 8006364 <__sflush_r+0x7c>
 8006362:	6560      	str	r0, [r4, #84]	; 0x54
 8006364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006366:	602f      	str	r7, [r5, #0]
 8006368:	2900      	cmp	r1, #0
 800636a:	d0ca      	beq.n	8006302 <__sflush_r+0x1a>
 800636c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006370:	4299      	cmp	r1, r3
 8006372:	d002      	beq.n	800637a <__sflush_r+0x92>
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff f9eb 	bl	8005750 <_free_r>
 800637a:	2000      	movs	r0, #0
 800637c:	6360      	str	r0, [r4, #52]	; 0x34
 800637e:	e7c1      	b.n	8006304 <__sflush_r+0x1c>
 8006380:	6a21      	ldr	r1, [r4, #32]
 8006382:	2301      	movs	r3, #1
 8006384:	4628      	mov	r0, r5
 8006386:	47b0      	blx	r6
 8006388:	1c41      	adds	r1, r0, #1
 800638a:	d1c7      	bne.n	800631c <__sflush_r+0x34>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0c4      	beq.n	800631c <__sflush_r+0x34>
 8006392:	2b1d      	cmp	r3, #29
 8006394:	d001      	beq.n	800639a <__sflush_r+0xb2>
 8006396:	2b16      	cmp	r3, #22
 8006398:	d101      	bne.n	800639e <__sflush_r+0xb6>
 800639a:	602f      	str	r7, [r5, #0]
 800639c:	e7b1      	b.n	8006302 <__sflush_r+0x1a>
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	e7ad      	b.n	8006304 <__sflush_r+0x1c>
 80063a8:	690f      	ldr	r7, [r1, #16]
 80063aa:	2f00      	cmp	r7, #0
 80063ac:	d0a9      	beq.n	8006302 <__sflush_r+0x1a>
 80063ae:	0793      	lsls	r3, r2, #30
 80063b0:	680e      	ldr	r6, [r1, #0]
 80063b2:	bf08      	it	eq
 80063b4:	694b      	ldreq	r3, [r1, #20]
 80063b6:	600f      	str	r7, [r1, #0]
 80063b8:	bf18      	it	ne
 80063ba:	2300      	movne	r3, #0
 80063bc:	eba6 0807 	sub.w	r8, r6, r7
 80063c0:	608b      	str	r3, [r1, #8]
 80063c2:	f1b8 0f00 	cmp.w	r8, #0
 80063c6:	dd9c      	ble.n	8006302 <__sflush_r+0x1a>
 80063c8:	6a21      	ldr	r1, [r4, #32]
 80063ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063cc:	4643      	mov	r3, r8
 80063ce:	463a      	mov	r2, r7
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b0      	blx	r6
 80063d4:	2800      	cmp	r0, #0
 80063d6:	dc06      	bgt.n	80063e6 <__sflush_r+0xfe>
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	e78e      	b.n	8006304 <__sflush_r+0x1c>
 80063e6:	4407      	add	r7, r0
 80063e8:	eba8 0800 	sub.w	r8, r8, r0
 80063ec:	e7e9      	b.n	80063c2 <__sflush_r+0xda>
 80063ee:	bf00      	nop
 80063f0:	20400001 	.word	0x20400001

080063f4 <_fflush_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	690b      	ldr	r3, [r1, #16]
 80063f8:	4605      	mov	r5, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b913      	cbnz	r3, 8006404 <_fflush_r+0x10>
 80063fe:	2500      	movs	r5, #0
 8006400:	4628      	mov	r0, r5
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	b118      	cbz	r0, 800640e <_fflush_r+0x1a>
 8006406:	6983      	ldr	r3, [r0, #24]
 8006408:	b90b      	cbnz	r3, 800640e <_fflush_r+0x1a>
 800640a:	f000 f887 	bl	800651c <__sinit>
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <_fflush_r+0x6c>)
 8006410:	429c      	cmp	r4, r3
 8006412:	d11b      	bne.n	800644c <_fflush_r+0x58>
 8006414:	686c      	ldr	r4, [r5, #4]
 8006416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0ef      	beq.n	80063fe <_fflush_r+0xa>
 800641e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006420:	07d0      	lsls	r0, r2, #31
 8006422:	d404      	bmi.n	800642e <_fflush_r+0x3a>
 8006424:	0599      	lsls	r1, r3, #22
 8006426:	d402      	bmi.n	800642e <_fflush_r+0x3a>
 8006428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800642a:	f000 f915 	bl	8006658 <__retarget_lock_acquire_recursive>
 800642e:	4628      	mov	r0, r5
 8006430:	4621      	mov	r1, r4
 8006432:	f7ff ff59 	bl	80062e8 <__sflush_r>
 8006436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006438:	07da      	lsls	r2, r3, #31
 800643a:	4605      	mov	r5, r0
 800643c:	d4e0      	bmi.n	8006400 <_fflush_r+0xc>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	059b      	lsls	r3, r3, #22
 8006442:	d4dd      	bmi.n	8006400 <_fflush_r+0xc>
 8006444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006446:	f000 f908 	bl	800665a <__retarget_lock_release_recursive>
 800644a:	e7d9      	b.n	8006400 <_fflush_r+0xc>
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <_fflush_r+0x70>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d101      	bne.n	8006456 <_fflush_r+0x62>
 8006452:	68ac      	ldr	r4, [r5, #8]
 8006454:	e7df      	b.n	8006416 <_fflush_r+0x22>
 8006456:	4b04      	ldr	r3, [pc, #16]	; (8006468 <_fflush_r+0x74>)
 8006458:	429c      	cmp	r4, r3
 800645a:	bf08      	it	eq
 800645c:	68ec      	ldreq	r4, [r5, #12]
 800645e:	e7da      	b.n	8006416 <_fflush_r+0x22>
 8006460:	08006eb8 	.word	0x08006eb8
 8006464:	08006ed8 	.word	0x08006ed8
 8006468:	08006e98 	.word	0x08006e98

0800646c <std>:
 800646c:	2300      	movs	r3, #0
 800646e:	b510      	push	{r4, lr}
 8006470:	4604      	mov	r4, r0
 8006472:	e9c0 3300 	strd	r3, r3, [r0]
 8006476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800647a:	6083      	str	r3, [r0, #8]
 800647c:	8181      	strh	r1, [r0, #12]
 800647e:	6643      	str	r3, [r0, #100]	; 0x64
 8006480:	81c2      	strh	r2, [r0, #14]
 8006482:	6183      	str	r3, [r0, #24]
 8006484:	4619      	mov	r1, r3
 8006486:	2208      	movs	r2, #8
 8006488:	305c      	adds	r0, #92	; 0x5c
 800648a:	f7fe fff7 	bl	800547c <memset>
 800648e:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <std+0x38>)
 8006490:	6263      	str	r3, [r4, #36]	; 0x24
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <std+0x3c>)
 8006494:	62a3      	str	r3, [r4, #40]	; 0x28
 8006496:	4b05      	ldr	r3, [pc, #20]	; (80064ac <std+0x40>)
 8006498:	62e3      	str	r3, [r4, #44]	; 0x2c
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <std+0x44>)
 800649c:	6224      	str	r4, [r4, #32]
 800649e:	6323      	str	r3, [r4, #48]	; 0x30
 80064a0:	bd10      	pop	{r4, pc}
 80064a2:	bf00      	nop
 80064a4:	08006861 	.word	0x08006861
 80064a8:	08006883 	.word	0x08006883
 80064ac:	080068bb 	.word	0x080068bb
 80064b0:	080068df 	.word	0x080068df

080064b4 <_cleanup_r>:
 80064b4:	4901      	ldr	r1, [pc, #4]	; (80064bc <_cleanup_r+0x8>)
 80064b6:	f000 b8af 	b.w	8006618 <_fwalk_reent>
 80064ba:	bf00      	nop
 80064bc:	080063f5 	.word	0x080063f5

080064c0 <__sfmoreglue>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	1e4a      	subs	r2, r1, #1
 80064c4:	2568      	movs	r5, #104	; 0x68
 80064c6:	4355      	muls	r5, r2
 80064c8:	460e      	mov	r6, r1
 80064ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064ce:	f7ff f98f 	bl	80057f0 <_malloc_r>
 80064d2:	4604      	mov	r4, r0
 80064d4:	b140      	cbz	r0, 80064e8 <__sfmoreglue+0x28>
 80064d6:	2100      	movs	r1, #0
 80064d8:	e9c0 1600 	strd	r1, r6, [r0]
 80064dc:	300c      	adds	r0, #12
 80064de:	60a0      	str	r0, [r4, #8]
 80064e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064e4:	f7fe ffca 	bl	800547c <memset>
 80064e8:	4620      	mov	r0, r4
 80064ea:	bd70      	pop	{r4, r5, r6, pc}

080064ec <__sfp_lock_acquire>:
 80064ec:	4801      	ldr	r0, [pc, #4]	; (80064f4 <__sfp_lock_acquire+0x8>)
 80064ee:	f000 b8b3 	b.w	8006658 <__retarget_lock_acquire_recursive>
 80064f2:	bf00      	nop
 80064f4:	20000cd8 	.word	0x20000cd8

080064f8 <__sfp_lock_release>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__sfp_lock_release+0x8>)
 80064fa:	f000 b8ae 	b.w	800665a <__retarget_lock_release_recursive>
 80064fe:	bf00      	nop
 8006500:	20000cd8 	.word	0x20000cd8

08006504 <__sinit_lock_acquire>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__sinit_lock_acquire+0x8>)
 8006506:	f000 b8a7 	b.w	8006658 <__retarget_lock_acquire_recursive>
 800650a:	bf00      	nop
 800650c:	20000cd3 	.word	0x20000cd3

08006510 <__sinit_lock_release>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__sinit_lock_release+0x8>)
 8006512:	f000 b8a2 	b.w	800665a <__retarget_lock_release_recursive>
 8006516:	bf00      	nop
 8006518:	20000cd3 	.word	0x20000cd3

0800651c <__sinit>:
 800651c:	b510      	push	{r4, lr}
 800651e:	4604      	mov	r4, r0
 8006520:	f7ff fff0 	bl	8006504 <__sinit_lock_acquire>
 8006524:	69a3      	ldr	r3, [r4, #24]
 8006526:	b11b      	cbz	r3, 8006530 <__sinit+0x14>
 8006528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652c:	f7ff bff0 	b.w	8006510 <__sinit_lock_release>
 8006530:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006534:	6523      	str	r3, [r4, #80]	; 0x50
 8006536:	4b13      	ldr	r3, [pc, #76]	; (8006584 <__sinit+0x68>)
 8006538:	4a13      	ldr	r2, [pc, #76]	; (8006588 <__sinit+0x6c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	62a2      	str	r2, [r4, #40]	; 0x28
 800653e:	42a3      	cmp	r3, r4
 8006540:	bf04      	itt	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	61a3      	streq	r3, [r4, #24]
 8006546:	4620      	mov	r0, r4
 8006548:	f000 f820 	bl	800658c <__sfp>
 800654c:	6060      	str	r0, [r4, #4]
 800654e:	4620      	mov	r0, r4
 8006550:	f000 f81c 	bl	800658c <__sfp>
 8006554:	60a0      	str	r0, [r4, #8]
 8006556:	4620      	mov	r0, r4
 8006558:	f000 f818 	bl	800658c <__sfp>
 800655c:	2200      	movs	r2, #0
 800655e:	60e0      	str	r0, [r4, #12]
 8006560:	2104      	movs	r1, #4
 8006562:	6860      	ldr	r0, [r4, #4]
 8006564:	f7ff ff82 	bl	800646c <std>
 8006568:	68a0      	ldr	r0, [r4, #8]
 800656a:	2201      	movs	r2, #1
 800656c:	2109      	movs	r1, #9
 800656e:	f7ff ff7d 	bl	800646c <std>
 8006572:	68e0      	ldr	r0, [r4, #12]
 8006574:	2202      	movs	r2, #2
 8006576:	2112      	movs	r1, #18
 8006578:	f7ff ff78 	bl	800646c <std>
 800657c:	2301      	movs	r3, #1
 800657e:	61a3      	str	r3, [r4, #24]
 8006580:	e7d2      	b.n	8006528 <__sinit+0xc>
 8006582:	bf00      	nop
 8006584:	08006cac 	.word	0x08006cac
 8006588:	080064b5 	.word	0x080064b5

0800658c <__sfp>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	4607      	mov	r7, r0
 8006590:	f7ff ffac 	bl	80064ec <__sfp_lock_acquire>
 8006594:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <__sfp+0x84>)
 8006596:	681e      	ldr	r6, [r3, #0]
 8006598:	69b3      	ldr	r3, [r6, #24]
 800659a:	b913      	cbnz	r3, 80065a2 <__sfp+0x16>
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff ffbd 	bl	800651c <__sinit>
 80065a2:	3648      	adds	r6, #72	; 0x48
 80065a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	d503      	bpl.n	80065b4 <__sfp+0x28>
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	b30b      	cbz	r3, 80065f4 <__sfp+0x68>
 80065b0:	6836      	ldr	r6, [r6, #0]
 80065b2:	e7f7      	b.n	80065a4 <__sfp+0x18>
 80065b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065b8:	b9d5      	cbnz	r5, 80065f0 <__sfp+0x64>
 80065ba:	4b16      	ldr	r3, [pc, #88]	; (8006614 <__sfp+0x88>)
 80065bc:	60e3      	str	r3, [r4, #12]
 80065be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065c2:	6665      	str	r5, [r4, #100]	; 0x64
 80065c4:	f000 f847 	bl	8006656 <__retarget_lock_init_recursive>
 80065c8:	f7ff ff96 	bl	80064f8 <__sfp_lock_release>
 80065cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065d4:	6025      	str	r5, [r4, #0]
 80065d6:	61a5      	str	r5, [r4, #24]
 80065d8:	2208      	movs	r2, #8
 80065da:	4629      	mov	r1, r5
 80065dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065e0:	f7fe ff4c 	bl	800547c <memset>
 80065e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065ec:	4620      	mov	r0, r4
 80065ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f0:	3468      	adds	r4, #104	; 0x68
 80065f2:	e7d9      	b.n	80065a8 <__sfp+0x1c>
 80065f4:	2104      	movs	r1, #4
 80065f6:	4638      	mov	r0, r7
 80065f8:	f7ff ff62 	bl	80064c0 <__sfmoreglue>
 80065fc:	4604      	mov	r4, r0
 80065fe:	6030      	str	r0, [r6, #0]
 8006600:	2800      	cmp	r0, #0
 8006602:	d1d5      	bne.n	80065b0 <__sfp+0x24>
 8006604:	f7ff ff78 	bl	80064f8 <__sfp_lock_release>
 8006608:	230c      	movs	r3, #12
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	e7ee      	b.n	80065ec <__sfp+0x60>
 800660e:	bf00      	nop
 8006610:	08006cac 	.word	0x08006cac
 8006614:	ffff0001 	.word	0xffff0001

08006618 <_fwalk_reent>:
 8006618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800661c:	4606      	mov	r6, r0
 800661e:	4688      	mov	r8, r1
 8006620:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006624:	2700      	movs	r7, #0
 8006626:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800662a:	f1b9 0901 	subs.w	r9, r9, #1
 800662e:	d505      	bpl.n	800663c <_fwalk_reent+0x24>
 8006630:	6824      	ldr	r4, [r4, #0]
 8006632:	2c00      	cmp	r4, #0
 8006634:	d1f7      	bne.n	8006626 <_fwalk_reent+0xe>
 8006636:	4638      	mov	r0, r7
 8006638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663c:	89ab      	ldrh	r3, [r5, #12]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d907      	bls.n	8006652 <_fwalk_reent+0x3a>
 8006642:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006646:	3301      	adds	r3, #1
 8006648:	d003      	beq.n	8006652 <_fwalk_reent+0x3a>
 800664a:	4629      	mov	r1, r5
 800664c:	4630      	mov	r0, r6
 800664e:	47c0      	blx	r8
 8006650:	4307      	orrs	r7, r0
 8006652:	3568      	adds	r5, #104	; 0x68
 8006654:	e7e9      	b.n	800662a <_fwalk_reent+0x12>

08006656 <__retarget_lock_init_recursive>:
 8006656:	4770      	bx	lr

08006658 <__retarget_lock_acquire_recursive>:
 8006658:	4770      	bx	lr

0800665a <__retarget_lock_release_recursive>:
 800665a:	4770      	bx	lr

0800665c <__swhatbuf_r>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	460e      	mov	r6, r1
 8006660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006664:	2900      	cmp	r1, #0
 8006666:	b096      	sub	sp, #88	; 0x58
 8006668:	4614      	mov	r4, r2
 800666a:	461d      	mov	r5, r3
 800666c:	da07      	bge.n	800667e <__swhatbuf_r+0x22>
 800666e:	2300      	movs	r3, #0
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	89b3      	ldrh	r3, [r6, #12]
 8006674:	061a      	lsls	r2, r3, #24
 8006676:	d410      	bmi.n	800669a <__swhatbuf_r+0x3e>
 8006678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800667c:	e00e      	b.n	800669c <__swhatbuf_r+0x40>
 800667e:	466a      	mov	r2, sp
 8006680:	f000 f954 	bl	800692c <_fstat_r>
 8006684:	2800      	cmp	r0, #0
 8006686:	dbf2      	blt.n	800666e <__swhatbuf_r+0x12>
 8006688:	9a01      	ldr	r2, [sp, #4]
 800668a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800668e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006692:	425a      	negs	r2, r3
 8006694:	415a      	adcs	r2, r3
 8006696:	602a      	str	r2, [r5, #0]
 8006698:	e7ee      	b.n	8006678 <__swhatbuf_r+0x1c>
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	2000      	movs	r0, #0
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	b016      	add	sp, #88	; 0x58
 80066a2:	bd70      	pop	{r4, r5, r6, pc}

080066a4 <__smakebuf_r>:
 80066a4:	898b      	ldrh	r3, [r1, #12]
 80066a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066a8:	079d      	lsls	r5, r3, #30
 80066aa:	4606      	mov	r6, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	d507      	bpl.n	80066c0 <__smakebuf_r+0x1c>
 80066b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	2301      	movs	r3, #1
 80066ba:	6163      	str	r3, [r4, #20]
 80066bc:	b002      	add	sp, #8
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	ab01      	add	r3, sp, #4
 80066c2:	466a      	mov	r2, sp
 80066c4:	f7ff ffca 	bl	800665c <__swhatbuf_r>
 80066c8:	9900      	ldr	r1, [sp, #0]
 80066ca:	4605      	mov	r5, r0
 80066cc:	4630      	mov	r0, r6
 80066ce:	f7ff f88f 	bl	80057f0 <_malloc_r>
 80066d2:	b948      	cbnz	r0, 80066e8 <__smakebuf_r+0x44>
 80066d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d8:	059a      	lsls	r2, r3, #22
 80066da:	d4ef      	bmi.n	80066bc <__smakebuf_r+0x18>
 80066dc:	f023 0303 	bic.w	r3, r3, #3
 80066e0:	f043 0302 	orr.w	r3, r3, #2
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	e7e3      	b.n	80066b0 <__smakebuf_r+0xc>
 80066e8:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <__smakebuf_r+0x7c>)
 80066ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	6020      	str	r0, [r4, #0]
 80066f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	9b00      	ldr	r3, [sp, #0]
 80066f8:	6163      	str	r3, [r4, #20]
 80066fa:	9b01      	ldr	r3, [sp, #4]
 80066fc:	6120      	str	r0, [r4, #16]
 80066fe:	b15b      	cbz	r3, 8006718 <__smakebuf_r+0x74>
 8006700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006704:	4630      	mov	r0, r6
 8006706:	f000 f923 	bl	8006950 <_isatty_r>
 800670a:	b128      	cbz	r0, 8006718 <__smakebuf_r+0x74>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	89a0      	ldrh	r0, [r4, #12]
 800671a:	4305      	orrs	r5, r0
 800671c:	81a5      	strh	r5, [r4, #12]
 800671e:	e7cd      	b.n	80066bc <__smakebuf_r+0x18>
 8006720:	080064b5 	.word	0x080064b5

08006724 <memcpy>:
 8006724:	440a      	add	r2, r1
 8006726:	4291      	cmp	r1, r2
 8006728:	f100 33ff 	add.w	r3, r0, #4294967295
 800672c:	d100      	bne.n	8006730 <memcpy+0xc>
 800672e:	4770      	bx	lr
 8006730:	b510      	push	{r4, lr}
 8006732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673a:	4291      	cmp	r1, r2
 800673c:	d1f9      	bne.n	8006732 <memcpy+0xe>
 800673e:	bd10      	pop	{r4, pc}

08006740 <memmove>:
 8006740:	4288      	cmp	r0, r1
 8006742:	b510      	push	{r4, lr}
 8006744:	eb01 0402 	add.w	r4, r1, r2
 8006748:	d902      	bls.n	8006750 <memmove+0x10>
 800674a:	4284      	cmp	r4, r0
 800674c:	4623      	mov	r3, r4
 800674e:	d807      	bhi.n	8006760 <memmove+0x20>
 8006750:	1e43      	subs	r3, r0, #1
 8006752:	42a1      	cmp	r1, r4
 8006754:	d008      	beq.n	8006768 <memmove+0x28>
 8006756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800675a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800675e:	e7f8      	b.n	8006752 <memmove+0x12>
 8006760:	4402      	add	r2, r0
 8006762:	4601      	mov	r1, r0
 8006764:	428a      	cmp	r2, r1
 8006766:	d100      	bne.n	800676a <memmove+0x2a>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800676e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006772:	e7f7      	b.n	8006764 <memmove+0x24>

08006774 <__malloc_lock>:
 8006774:	4801      	ldr	r0, [pc, #4]	; (800677c <__malloc_lock+0x8>)
 8006776:	f7ff bf6f 	b.w	8006658 <__retarget_lock_acquire_recursive>
 800677a:	bf00      	nop
 800677c:	20000cd4 	.word	0x20000cd4

08006780 <__malloc_unlock>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__malloc_unlock+0x8>)
 8006782:	f7ff bf6a 	b.w	800665a <__retarget_lock_release_recursive>
 8006786:	bf00      	nop
 8006788:	20000cd4 	.word	0x20000cd4

0800678c <_realloc_r>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	4607      	mov	r7, r0
 8006790:	4614      	mov	r4, r2
 8006792:	460e      	mov	r6, r1
 8006794:	b921      	cbnz	r1, 80067a0 <_realloc_r+0x14>
 8006796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800679a:	4611      	mov	r1, r2
 800679c:	f7ff b828 	b.w	80057f0 <_malloc_r>
 80067a0:	b922      	cbnz	r2, 80067ac <_realloc_r+0x20>
 80067a2:	f7fe ffd5 	bl	8005750 <_free_r>
 80067a6:	4625      	mov	r5, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ac:	f000 f8f2 	bl	8006994 <_malloc_usable_size_r>
 80067b0:	42a0      	cmp	r0, r4
 80067b2:	d20f      	bcs.n	80067d4 <_realloc_r+0x48>
 80067b4:	4621      	mov	r1, r4
 80067b6:	4638      	mov	r0, r7
 80067b8:	f7ff f81a 	bl	80057f0 <_malloc_r>
 80067bc:	4605      	mov	r5, r0
 80067be:	2800      	cmp	r0, #0
 80067c0:	d0f2      	beq.n	80067a8 <_realloc_r+0x1c>
 80067c2:	4631      	mov	r1, r6
 80067c4:	4622      	mov	r2, r4
 80067c6:	f7ff ffad 	bl	8006724 <memcpy>
 80067ca:	4631      	mov	r1, r6
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7fe ffbf 	bl	8005750 <_free_r>
 80067d2:	e7e9      	b.n	80067a8 <_realloc_r+0x1c>
 80067d4:	4635      	mov	r5, r6
 80067d6:	e7e7      	b.n	80067a8 <_realloc_r+0x1c>

080067d8 <_raise_r>:
 80067d8:	291f      	cmp	r1, #31
 80067da:	b538      	push	{r3, r4, r5, lr}
 80067dc:	4604      	mov	r4, r0
 80067de:	460d      	mov	r5, r1
 80067e0:	d904      	bls.n	80067ec <_raise_r+0x14>
 80067e2:	2316      	movs	r3, #22
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067ee:	b112      	cbz	r2, 80067f6 <_raise_r+0x1e>
 80067f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067f4:	b94b      	cbnz	r3, 800680a <_raise_r+0x32>
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 f830 	bl	800685c <_getpid_r>
 80067fc:	462a      	mov	r2, r5
 80067fe:	4601      	mov	r1, r0
 8006800:	4620      	mov	r0, r4
 8006802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006806:	f000 b817 	b.w	8006838 <_kill_r>
 800680a:	2b01      	cmp	r3, #1
 800680c:	d00a      	beq.n	8006824 <_raise_r+0x4c>
 800680e:	1c59      	adds	r1, r3, #1
 8006810:	d103      	bne.n	800681a <_raise_r+0x42>
 8006812:	2316      	movs	r3, #22
 8006814:	6003      	str	r3, [r0, #0]
 8006816:	2001      	movs	r0, #1
 8006818:	e7e7      	b.n	80067ea <_raise_r+0x12>
 800681a:	2400      	movs	r4, #0
 800681c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006820:	4628      	mov	r0, r5
 8006822:	4798      	blx	r3
 8006824:	2000      	movs	r0, #0
 8006826:	e7e0      	b.n	80067ea <_raise_r+0x12>

08006828 <raise>:
 8006828:	4b02      	ldr	r3, [pc, #8]	; (8006834 <raise+0xc>)
 800682a:	4601      	mov	r1, r0
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	f7ff bfd3 	b.w	80067d8 <_raise_r>
 8006832:	bf00      	nop
 8006834:	200000bc 	.word	0x200000bc

08006838 <_kill_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d07      	ldr	r5, [pc, #28]	; (8006858 <_kill_r+0x20>)
 800683c:	2300      	movs	r3, #0
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	4611      	mov	r1, r2
 8006844:	602b      	str	r3, [r5, #0]
 8006846:	f7fb f91d 	bl	8001a84 <_kill>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	d102      	bne.n	8006854 <_kill_r+0x1c>
 800684e:	682b      	ldr	r3, [r5, #0]
 8006850:	b103      	cbz	r3, 8006854 <_kill_r+0x1c>
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	bd38      	pop	{r3, r4, r5, pc}
 8006856:	bf00      	nop
 8006858:	20000cdc 	.word	0x20000cdc

0800685c <_getpid_r>:
 800685c:	f7fb b90a 	b.w	8001a74 <_getpid>

08006860 <__sread>:
 8006860:	b510      	push	{r4, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	f000 f89c 	bl	80069a4 <_read_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	bfab      	itete	ge
 8006870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006872:	89a3      	ldrhlt	r3, [r4, #12]
 8006874:	181b      	addge	r3, r3, r0
 8006876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800687a:	bfac      	ite	ge
 800687c:	6563      	strge	r3, [r4, #84]	; 0x54
 800687e:	81a3      	strhlt	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__swrite>:
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	461f      	mov	r7, r3
 8006888:	898b      	ldrh	r3, [r1, #12]
 800688a:	05db      	lsls	r3, r3, #23
 800688c:	4605      	mov	r5, r0
 800688e:	460c      	mov	r4, r1
 8006890:	4616      	mov	r6, r2
 8006892:	d505      	bpl.n	80068a0 <__swrite+0x1e>
 8006894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006898:	2302      	movs	r3, #2
 800689a:	2200      	movs	r2, #0
 800689c:	f000 f868 	bl	8006970 <_lseek_r>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	4632      	mov	r2, r6
 80068ae:	463b      	mov	r3, r7
 80068b0:	4628      	mov	r0, r5
 80068b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068b6:	f000 b817 	b.w	80068e8 <_write_r>

080068ba <__sseek>:
 80068ba:	b510      	push	{r4, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c2:	f000 f855 	bl	8006970 <_lseek_r>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	bf15      	itete	ne
 80068cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80068ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068d6:	81a3      	strheq	r3, [r4, #12]
 80068d8:	bf18      	it	ne
 80068da:	81a3      	strhne	r3, [r4, #12]
 80068dc:	bd10      	pop	{r4, pc}

080068de <__sclose>:
 80068de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e2:	f000 b813 	b.w	800690c <_close_r>
	...

080068e8 <_write_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4d07      	ldr	r5, [pc, #28]	; (8006908 <_write_r+0x20>)
 80068ec:	4604      	mov	r4, r0
 80068ee:	4608      	mov	r0, r1
 80068f0:	4611      	mov	r1, r2
 80068f2:	2200      	movs	r2, #0
 80068f4:	602a      	str	r2, [r5, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f7fb f8fb 	bl	8001af2 <_write>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_write_r+0x1e>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_write_r+0x1e>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	20000cdc 	.word	0x20000cdc

0800690c <_close_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	4d06      	ldr	r5, [pc, #24]	; (8006928 <_close_r+0x1c>)
 8006910:	2300      	movs	r3, #0
 8006912:	4604      	mov	r4, r0
 8006914:	4608      	mov	r0, r1
 8006916:	602b      	str	r3, [r5, #0]
 8006918:	f7fb f907 	bl	8001b2a <_close>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_close_r+0x1a>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_close_r+0x1a>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20000cdc 	.word	0x20000cdc

0800692c <_fstat_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	; (800694c <_fstat_r+0x20>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	f7fb f902 	bl	8001b42 <_fstat>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d102      	bne.n	8006948 <_fstat_r+0x1c>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	b103      	cbz	r3, 8006948 <_fstat_r+0x1c>
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	bd38      	pop	{r3, r4, r5, pc}
 800694a:	bf00      	nop
 800694c:	20000cdc 	.word	0x20000cdc

08006950 <_isatty_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d06      	ldr	r5, [pc, #24]	; (800696c <_isatty_r+0x1c>)
 8006954:	2300      	movs	r3, #0
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	f7fb f901 	bl	8001b62 <_isatty>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_isatty_r+0x1a>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_isatty_r+0x1a>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	20000cdc 	.word	0x20000cdc

08006970 <_lseek_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d07      	ldr	r5, [pc, #28]	; (8006990 <_lseek_r+0x20>)
 8006974:	4604      	mov	r4, r0
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	2200      	movs	r2, #0
 800697c:	602a      	str	r2, [r5, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fb f8fa 	bl	8001b78 <_lseek>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_lseek_r+0x1e>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_lseek_r+0x1e>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20000cdc 	.word	0x20000cdc

08006994 <_malloc_usable_size_r>:
 8006994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006998:	1f18      	subs	r0, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfbc      	itt	lt
 800699e:	580b      	ldrlt	r3, [r1, r0]
 80069a0:	18c0      	addlt	r0, r0, r3
 80069a2:	4770      	bx	lr

080069a4 <_read_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4d07      	ldr	r5, [pc, #28]	; (80069c4 <_read_r+0x20>)
 80069a8:	4604      	mov	r4, r0
 80069aa:	4608      	mov	r0, r1
 80069ac:	4611      	mov	r1, r2
 80069ae:	2200      	movs	r2, #0
 80069b0:	602a      	str	r2, [r5, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f7fb f880 	bl	8001ab8 <_read>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_read_r+0x1e>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_read_r+0x1e>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20000cdc 	.word	0x20000cdc

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr
