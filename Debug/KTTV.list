
KTTV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ccc  08007ccc  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ccc  08007ccc  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ccc  08007ccc  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08007cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f70  20000170  08007e40  00020170  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200010e0  08007e40  000210e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b42  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d4  00000000  00000000  00032cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00035eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00036c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020102  00000000  00000000  00037918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113a4  00000000  00000000  00057a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5e27  00000000  00000000  00068dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ebe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  0011ec38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000170 	.word	0x20000170
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800777c 	.word	0x0800777c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000174 	.word	0x20000174
 80001cc:	0800777c 	.word	0x0800777c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Flash_delBuff>:
#include "FLASH_STM32.h"
#include "stdio.h"
uint8_t lengthPage;

void Flash_delBuff(char* data, uint16_t len)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	807b      	strh	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
 8000290:	e007      	b.n	80002a2 <Flash_delBuff+0x22>
	{
		data[i] = 0;
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	4413      	add	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 800029c:	7bfb      	ldrb	r3, [r7, #15]
 800029e:	3301      	adds	r3, #1
 80002a0:	73fb      	strb	r3, [r7, #15]
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	887a      	ldrh	r2, [r7, #2]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d8f2      	bhi.n	8000292 <Flash_delBuff+0x12>
	}
}
 80002ac:	bf00      	nop
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <Flash_Lock>:

void Flash_Lock()
{
 80002ba:	b580      	push	{r7, lr}
 80002bc:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 80002be:	f002 fc85 	bl	8002bcc <HAL_FLASH_Lock>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <Flash_Unlock>:

void Flash_Unlock()
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80002ca:	f002 fc59 	bl	8002b80 <HAL_FLASH_Unlock>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <Flash_Erase>:
  return sector;
}
#endif

void Flash_Erase(uint32_t addr)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b086      	sub	sp, #24
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
			//print log here
			__NOP();
		}
	#else
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PageError = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	60bb      	str	r3, [r7, #8]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.PageAddress = addr;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	613b      	str	r3, [r7, #16]
		EraseInitStruct.NbPages     = 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	617b      	str	r3, [r7, #20]
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 80002ea:	f107 0208 	add.w	r2, r7, #8
 80002ee:	f107 030c 	add.w	r3, r7, #12
 80002f2:	4611      	mov	r1, r2
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fd07 	bl	8002d08 <HAL_FLASHEx_Erase>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d000      	beq.n	8000302 <Flash_Erase+0x30>
		{
			//print log here
			__NOP();
 8000300:	bf00      	nop
		}
	#endif
}
 8000302:	bf00      	nop
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <Flash_WriteIntType>:

void Flash_WriteIntType(uint32_t addr, uint32_t data, uint32_t typeprogram)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b084      	sub	sp, #16
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Program(typeprogram, addr, data);
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	461a      	mov	r2, r3
 800031a:	f04f 0300 	mov.w	r3, #0
 800031e:	68f9      	ldr	r1, [r7, #12]
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f002 fbbd 	bl	8002aa0 <HAL_FLASH_Program>
}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}

0800032e <Flash_ReadIntType>:

uint32_t Flash_ReadIntType(uint32_t addr)
{
 800032e:	b480      	push	{r7}
 8000330:	b085      	sub	sp, #20
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
	uint32_t* val = (uint32_t *)addr;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	60fb      	str	r3, [r7, #12]
	return *val;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	681b      	ldr	r3, [r3, #0]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <Flash_WriteCharType>:

void Flash_WriteCharType(uint32_t addr, char* data, uint8_t typeprogram)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	4613      	mov	r3, r2
 8000358:	71fb      	strb	r3, [r7, #7]
	uint16_t i;
	FLASH->CR |= FLASH_CR_PG;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <Flash_WriteCharType+0x98>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	4a21      	ldr	r2, [pc, #132]	; (80003e4 <Flash_WriteCharType+0x98>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6113      	str	r3, [r2, #16]
	int var = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
	lengthPage = strlen(data);
 800036a:	68b8      	ldr	r0, [r7, #8]
 800036c:	f7ff ff30 	bl	80001d0 <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <Flash_WriteCharType+0x9c>)
 8000376:	701a      	strb	r2, [r3, #0]
	for(i=0; i<lengthPage; i+=1)
 8000378:	2300      	movs	r3, #0
 800037a:	82fb      	strh	r3, [r7, #22]
 800037c:	e01a      	b.n	80003b4 <Flash_WriteCharType+0x68>
	{
		while((FLASH->SR&FLASH_SR_BSY)){};
 800037e:	bf00      	nop
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <Flash_WriteCharType+0x98>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f9      	bne.n	8000380 <Flash_WriteCharType+0x34>
		var = (int)data[i];
 800038c:	8afb      	ldrh	r3, [r7, #22]
 800038e:	68ba      	ldr	r2, [r7, #8]
 8000390:	4413      	add	r3, r2
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	613b      	str	r3, [r7, #16]
			//Print log here
			break;
		}
		#else
		{
			HAL_FLASH_Program(typeprogram, (addr + i*2), var);
 8000396:	79f8      	ldrb	r0, [r7, #7]
 8000398:	8afb      	ldrh	r3, [r7, #22]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	461a      	mov	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	18d1      	adds	r1, r2, r3
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	461a      	mov	r2, r3
 80003a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80003aa:	f002 fb79 	bl	8002aa0 <HAL_FLASH_Program>
	for(i=0; i<lengthPage; i+=1)
 80003ae:	8afb      	ldrh	r3, [r7, #22]
 80003b0:	3301      	adds	r3, #1
 80003b2:	82fb      	strh	r3, [r7, #22]
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <Flash_WriteCharType+0x9c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	8afa      	ldrh	r2, [r7, #22]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d3de      	bcc.n	800037e <Flash_WriteCharType+0x32>
		}
		#endif
	}
	while((FLASH->SR&FLASH_SR_BSY)){};
 80003c0:	bf00      	nop
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <Flash_WriteCharType+0x98>)
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d1f9      	bne.n	80003c2 <Flash_WriteCharType+0x76>
	FLASH->CR &= ~FLASH_CR_PG;
 80003ce:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <Flash_WriteCharType+0x98>)
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <Flash_WriteCharType+0x98>)
 80003d4:	f023 0301 	bic.w	r3, r3, #1
 80003d8:	6113      	str	r3, [r2, #16]
}
 80003da:	bf00      	nop
 80003dc:	3718      	adds	r7, #24
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40022000 	.word	0x40022000
 80003e8:	20000ed8 	.word	0x20000ed8

080003ec <Flash_ReadCharType>:

uint32_t Flash_ReadCharType(char* dataOut, uint32_t addr, uint8_t typeprogram)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	4613      	mov	r3, r2
 80003f8:	71fb      	strb	r3, [r7, #7]
	Flash_delBuff(dataOut, strlen(dataOut));
 80003fa:	68f8      	ldr	r0, [r7, #12]
 80003fc:	f7ff fee8 	bl	80001d0 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	b29b      	uxth	r3, r3
 8000404:	4619      	mov	r1, r3
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f7ff ff3a 	bl	8000280 <Flash_delBuff>
	uint32_t ind = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
	uint32_t count = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
	uint32_t sizearea = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
	#if _FLASHTYPE_ == SECTOR
		sizearea = SIZE_OF_SECTOR;
	#else
		sizearea = SIZE_OF_PAGE;
 8000418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800041c:	617b      	str	r3, [r7, #20]
	#endif
	for(ind = addr; ind < addr+sizearea; )
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	61fb      	str	r3, [r7, #28]
 8000422:	e014      	b.n	800044e <Flash_ReadCharType+0x62>
	{
		if((unsigned char)Flash_ReadIntType(ind) == 0xFF) break;
 8000424:	69f8      	ldr	r0, [r7, #28]
 8000426:	f7ff ff82 	bl	800032e <Flash_ReadIntType>
 800042a:	4603      	mov	r3, r0
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2bff      	cmp	r3, #255	; 0xff
 8000430:	d014      	beq.n	800045c <Flash_ReadCharType+0x70>
		else
		{
			dataOut[count++] = Flash_ReadIntType(ind);
 8000432:	69f8      	ldr	r0, [r7, #28]
 8000434:	f7ff ff7b 	bl	800032e <Flash_ReadIntType>
 8000438:	4601      	mov	r1, r0
 800043a:	69bb      	ldr	r3, [r7, #24]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	61ba      	str	r2, [r7, #24]
 8000440:	68fa      	ldr	r2, [r7, #12]
 8000442:	4413      	add	r3, r2
 8000444:	b2ca      	uxtb	r2, r1
 8000446:	701a      	strb	r2, [r3, #0]
		{
			ind=ind+0x02;
		}
		#else
		{
			ind=ind+0x02;
 8000448:	69fb      	ldr	r3, [r7, #28]
 800044a:	3302      	adds	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
	for(ind = addr; ind < addr+sizearea; )
 800044e:	68ba      	ldr	r2, [r7, #8]
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	4413      	add	r3, r2
 8000454:	69fa      	ldr	r2, [r7, #28]
 8000456:	429a      	cmp	r2, r3
 8000458:	d3e4      	bcc.n	8000424 <Flash_ReadCharType+0x38>
 800045a:	e000      	b.n	800045e <Flash_ReadCharType+0x72>
		if((unsigned char)Flash_ReadIntType(ind) == 0xFF) break;
 800045c:	bf00      	nop
		}
		#endif
	}
	return count;
 800045e:	69bb      	ldr	r3, [r7, #24]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <HTTP_configParams>:
  * @param  None.
  * @retval RET_FAIL if configuration failed.
  * 		RET_OK if configuration successful.
  */
STATUS HTTP_configParams(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	Sim_send("AT+CGDCONT=cid,\"ip\",\"APN\"\r",strlen("AT+CGDCONT=cid,\"ip\",\"APN\"\r"));
 800046c:	211a      	movs	r1, #26
 800046e:	482f      	ldr	r0, [pc, #188]	; (800052c <HTTP_configParams+0xc4>)
 8000470:	f000 f9a8 	bl	80007c4 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8000474:	f241 3288 	movw	r2, #5000	; 0x1388
 8000478:	2102      	movs	r1, #2
 800047a:	482d      	ldr	r0, [pc, #180]	; (8000530 <HTTP_configParams+0xc8>)
 800047c:	f000 fa06 	bl	800088c <Sim_checkResponseWith>
 8000480:	4603      	mov	r3, r0
 8000482:	461a      	mov	r2, r3
 8000484:	4b2b      	ldr	r3, [pc, #172]	; (8000534 <HTTP_configParams+0xcc>)
 8000486:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000488:	bf00      	nop
	if(ret == RET_OK)
 800048a:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <HTTP_configParams+0xcc>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d147      	bne.n	8000522 <HTTP_configParams+0xba>
	{
		Sim_send("AT+CGACT=1,cid\r",strlen("AT+CGACT=1,cid\r"));
 8000492:	210f      	movs	r1, #15
 8000494:	4828      	ldr	r0, [pc, #160]	; (8000538 <HTTP_configParams+0xd0>)
 8000496:	f000 f995 	bl	80007c4 <Sim_send>
		ret = Sim_checkResponseWith("OK", 2, 5000);
 800049a:	f241 3288 	movw	r2, #5000	; 0x1388
 800049e:	2102      	movs	r1, #2
 80004a0:	4823      	ldr	r0, [pc, #140]	; (8000530 <HTTP_configParams+0xc8>)
 80004a2:	f000 f9f3 	bl	800088c <Sim_checkResponseWith>
 80004a6:	4603      	mov	r3, r0
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <HTTP_configParams+0xcc>)
 80004ac:	701a      	strb	r2, [r3, #0]
		__NOP();
 80004ae:	bf00      	nop
		if(ret == RET_OK)
 80004b0:	4b20      	ldr	r3, [pc, #128]	; (8000534 <HTTP_configParams+0xcc>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d134      	bne.n	8000522 <HTTP_configParams+0xba>
		{
			Sim_send("AT+HTTPINIT\r",strlen("AT+HTTPINIT\r"));
 80004b8:	210c      	movs	r1, #12
 80004ba:	4820      	ldr	r0, [pc, #128]	; (800053c <HTTP_configParams+0xd4>)
 80004bc:	f000 f982 	bl	80007c4 <Sim_send>
			ret = Sim_checkResponseWith("OK", 2, 5000);
 80004c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80004c4:	2102      	movs	r1, #2
 80004c6:	481a      	ldr	r0, [pc, #104]	; (8000530 <HTTP_configParams+0xc8>)
 80004c8:	f000 f9e0 	bl	800088c <Sim_checkResponseWith>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <HTTP_configParams+0xcc>)
 80004d2:	701a      	strb	r2, [r3, #0]
			__NOP();
 80004d4:	bf00      	nop
			if(ret == RET_FAIL)
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <HTTP_configParams+0xcc>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d121      	bne.n	8000522 <HTTP_configParams+0xba>
			{
				Sim_send("AT+HTTPTERM\r",strlen("AT+HTTPTERM\r"));
 80004de:	210c      	movs	r1, #12
 80004e0:	4817      	ldr	r0, [pc, #92]	; (8000540 <HTTP_configParams+0xd8>)
 80004e2:	f000 f96f 	bl	80007c4 <Sim_send>
				ret = Sim_checkResponseWith("OK", 2, 5000);
 80004e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80004ea:	2102      	movs	r1, #2
 80004ec:	4810      	ldr	r0, [pc, #64]	; (8000530 <HTTP_configParams+0xc8>)
 80004ee:	f000 f9cd 	bl	800088c <Sim_checkResponseWith>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HTTP_configParams+0xcc>)
 80004f8:	701a      	strb	r2, [r3, #0]
				__NOP();
 80004fa:	bf00      	nop
				if(ret == RET_OK)
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <HTTP_configParams+0xcc>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d10e      	bne.n	8000522 <HTTP_configParams+0xba>
				{
					Sim_send("AT+HTTPINIT\r",strlen("AT+HTTPINIT\r"));
 8000504:	210c      	movs	r1, #12
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <HTTP_configParams+0xd4>)
 8000508:	f000 f95c 	bl	80007c4 <Sim_send>
					ret = Sim_checkResponseWith("OK", 2, 5000);
 800050c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000510:	2102      	movs	r1, #2
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <HTTP_configParams+0xc8>)
 8000514:	f000 f9ba 	bl	800088c <Sim_checkResponseWith>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HTTP_configParams+0xcc>)
 800051e:	701a      	strb	r2, [r3, #0]
					__NOP();
 8000520:	bf00      	nop
				}
			}
		}
	}
	return ret;
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <HTTP_configParams+0xcc>)
 8000524:	781b      	ldrb	r3, [r3, #0]
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	08007794 	.word	0x08007794
 8000530:	080077b0 	.word	0x080077b0
 8000534:	20000ed9 	.word	0x20000ed9
 8000538:	080077b4 	.word	0x080077b4
 800053c:	080077c4 	.word	0x080077c4
 8000540:	080077d4 	.word	0x080077d4

08000544 <HTTP_sendGETRequest>:
  * @param  url is URL to access.
  * @retval RET_OK if Server responds to code 200.
  * 		RET_FAIL if otherwise.
  */
STATUS HTTP_sendGETRequest(char* url)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b09c      	sub	sp, #112	; 0x70
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	char cmd[100] = {0};
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	2260      	movs	r2, #96	; 0x60
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f005 fe69 	bl	8006230 <memset>
	sprintf(cmd,"AT+HTTPPARA=\"URL\",\"%s\"\r",url);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	4926      	ldr	r1, [pc, #152]	; (8000600 <HTTP_sendGETRequest+0xbc>)
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fe6a 	bl	8006240 <siprintf>
	Sim_send(cmd,strlen(cmd));
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe2d 	bl	80001d0 <strlen>
 8000576:	4603      	mov	r3, r0
 8000578:	b29a      	uxth	r2, r3
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f91f 	bl	80007c4 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 8000586:	f241 3288 	movw	r2, #5000	; 0x1388
 800058a:	2102      	movs	r1, #2
 800058c:	481d      	ldr	r0, [pc, #116]	; (8000604 <HTTP_sendGETRequest+0xc0>)
 800058e:	f000 f97d 	bl	800088c <Sim_checkResponseWith>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <HTTP_sendGETRequest+0xc4>)
 8000598:	701a      	strb	r2, [r3, #0]
	__NOP();
 800059a:	bf00      	nop
	if(ret == RET_OK)
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <HTTP_sendGETRequest+0xc4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d126      	bne.n	80005f2 <HTTP_sendGETRequest+0xae>
	{
		Sim_send("AT+HTTPACTION=0\r",16);
 80005a4:	2110      	movs	r1, #16
 80005a6:	4819      	ldr	r0, [pc, #100]	; (800060c <HTTP_sendGETRequest+0xc8>)
 80005a8:	f000 f90c 	bl	80007c4 <Sim_send>
		ret = Sim_checkResponseWith("+HTTPACTION: 0,200", 2, 30000);
 80005ac:	f247 5230 	movw	r2, #30000	; 0x7530
 80005b0:	2102      	movs	r1, #2
 80005b2:	4817      	ldr	r0, [pc, #92]	; (8000610 <HTTP_sendGETRequest+0xcc>)
 80005b4:	f000 f96a 	bl	800088c <Sim_checkResponseWith>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HTTP_sendGETRequest+0xc4>)
 80005be:	701a      	strb	r2, [r3, #0]
		__NOP();
 80005c0:	bf00      	nop
		if(ret == RET_OK)
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <HTTP_sendGETRequest+0xc4>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d113      	bne.n	80005f2 <HTTP_sendGETRequest+0xae>
		{
			Sim_send("AT+HTTPHEAD\r",12);
 80005ca:	210c      	movs	r1, #12
 80005cc:	4811      	ldr	r0, [pc, #68]	; (8000614 <HTTP_sendGETRequest+0xd0>)
 80005ce:	f000 f8f9 	bl	80007c4 <Sim_send>
			ret = Sim_checkResponseWith("200 OK", 3, 60000);
 80005d2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005d6:	2103      	movs	r1, #3
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <HTTP_sendGETRequest+0xd4>)
 80005da:	f000 f957 	bl	800088c <Sim_checkResponseWith>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HTTP_sendGETRequest+0xc4>)
 80005e4:	701a      	strb	r2, [r3, #0]
			__NOP();
 80005e6:	bf00      	nop
			if(ret == RET_OK)
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HTTP_sendGETRequest+0xc4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d100      	bne.n	80005f2 <HTTP_sendGETRequest+0xae>
			{
				__NOP();
 80005f0:	bf00      	nop
			}
		}
	}
	return ret;
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HTTP_sendGETRequest+0xc4>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3770      	adds	r7, #112	; 0x70
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	080077e4 	.word	0x080077e4
 8000604:	080077b0 	.word	0x080077b0
 8000608:	20000ed9 	.word	0x20000ed9
 800060c:	080077fc 	.word	0x080077fc
 8000610:	08007810 	.word	0x08007810
 8000614:	08007824 	.word	0x08007824
 8000618:	08007834 	.word	0x08007834

0800061c <HTTP_readGETResponse>:
  * @param  datatoget is used to store response data from the server.
  * @retval RET_OK if read success.
  * 		RET_FAIL if read fail.
  */
STATUS HTTP_readGETResponse(char* datatoget)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	deleteBuffer(datatoget, strlen(datatoget));
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fdd3 	bl	80001d0 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	4619      	mov	r1, r3
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f886 	bl	8000740 <deleteBuffer>
	Sim_send("AT+HTTPHEAD\r",strlen("AT+HTTPHEAD\r"));
 8000634:	210c      	movs	r1, #12
 8000636:	481d      	ldr	r0, [pc, #116]	; (80006ac <HTTP_readGETResponse+0x90>)
 8000638:	f000 f8c4 	bl	80007c4 <Sim_send>
	ret = Sim_checkResponseWith("\r\nOK\r\n", 4, 60000);
 800063c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000640:	2104      	movs	r1, #4
 8000642:	481b      	ldr	r0, [pc, #108]	; (80006b0 <HTTP_readGETResponse+0x94>)
 8000644:	f000 f922 	bl	800088c <Sim_checkResponseWith>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <HTTP_readGETResponse+0x98>)
 800064e:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000650:	bf00      	nop
	if(ret == RET_OK)
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HTTP_readGETResponse+0x98>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d122      	bne.n	80006a0 <HTTP_readGETResponse+0x84>
	{
		char* ptr = NULL;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
		ptr = strstr((char*)Sim_Rxdata,"HTTP/");
 800065e:	4916      	ldr	r1, [pc, #88]	; (80006b8 <HTTP_readGETResponse+0x9c>)
 8000660:	4816      	ldr	r0, [pc, #88]	; (80006bc <HTTP_readGETResponse+0xa0>)
 8000662:	f005 fe15 	bl	8006290 <strstr>
 8000666:	6178      	str	r0, [r7, #20]
		if(ptr != NULL)
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d015      	beq.n	800069a <HTTP_readGETResponse+0x7e>
		{
			char* ptr1 = NULL;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
			ptr1 = strstr((char*)Sim_Rxdata,"\r\nOK");
 8000672:	4913      	ldr	r1, [pc, #76]	; (80006c0 <HTTP_readGETResponse+0xa4>)
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <HTTP_readGETResponse+0xa0>)
 8000676:	f005 fe0b 	bl	8006290 <strstr>
 800067a:	6138      	str	r0, [r7, #16]
			uint16_t startpos = ptr - (char*)Sim_Rxdata;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <HTTP_readGETResponse+0xa0>)
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	81fb      	strh	r3, [r7, #14]
			uint16_t endpos = ptr1 - (char*)Sim_Rxdata;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <HTTP_readGETResponse+0xa0>)
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	81bb      	strh	r3, [r7, #12]
			subString((char*)Sim_Rxdata, datatoget, startpos, endpos);
 800068c:	89fa      	ldrh	r2, [r7, #14]
 800068e:	89bb      	ldrh	r3, [r7, #12]
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <HTTP_readGETResponse+0xa0>)
 8000694:	f000 f86f 	bl	8000776 <subString>
 8000698:	e002      	b.n	80006a0 <HTTP_readGETResponse+0x84>
		}
		else
		{
			ret = RET_FAIL;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HTTP_readGETResponse+0x98>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
		}
	}
	return ret;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <HTTP_readGETResponse+0x98>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08007824 	.word	0x08007824
 80006b0:	0800783c 	.word	0x0800783c
 80006b4:	20000ed9 	.word	0x20000ed9
 80006b8:	08007844 	.word	0x08007844
 80006bc:	20000578 	.word	0x20000578
 80006c0:	0800784c 	.word	0x0800784c

080006c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == SIM_USART)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_UART_RxCpltCallback+0x60>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d121      	bne.n	800071a <HAL_UART_RxCpltCallback+0x56>
	{
		if(Sim_Count == MAX_RECVBUF_LEN)
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_UART_RxCpltCallback+0x64>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006e0:	d102      	bne.n	80006e8 <HAL_UART_RxCpltCallback+0x24>
		{
			Sim_Count = 0;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_UART_RxCpltCallback+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	801a      	strh	r2, [r3, #0]
		}
		Sim_Rxdata[Sim_Count++] = Sim_Rxbyte[0];
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_UART_RxCpltCallback+0x64>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	b291      	uxth	r1, r2
 80006f2:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <HAL_UART_RxCpltCallback+0x64>)
 80006f4:	8011      	strh	r1, [r2, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_UART_RxCpltCallback+0x68>)
 80006fa:	7819      	ldrb	r1, [r3, #0]
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_UART_RxCpltCallback+0x6c>)
 80006fe:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	490a      	ldr	r1, [pc, #40]	; (800072c <HAL_UART_RxCpltCallback+0x68>)
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <HAL_UART_RxCpltCallback+0x70>)
 8000706:	f004 fe19 	bl	800533c <HAL_UART_Receive_IT>
		Sim_UartTime = HAL_GetTick();
 800070a:	f002 f811 	bl	8002730 <HAL_GetTick>
 800070e:	4603      	mov	r3, r0
 8000710:	4a09      	ldr	r2, [pc, #36]	; (8000738 <HAL_UART_RxCpltCallback+0x74>)
 8000712:	6013      	str	r3, [r2, #0]
		isSimResponse = true;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_UART_RxCpltCallback+0x78>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
	}
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40004400 	.word	0x40004400
 8000728:	20000960 	.word	0x20000960
 800072c:	20000574 	.word	0x20000574
 8000730:	20000578 	.word	0x20000578
 8000734:	20001024 	.word	0x20001024
 8000738:	20000964 	.word	0x20000964
 800073c:	20000962 	.word	0x20000962

08000740 <deleteBuffer>:
  * @param  buf which buffer needs to be deleted
  * @param  len which length of buffer to be deleted.
  * @retval None
  */
void deleteBuffer(char* buf, uint32_t len)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 0; i < len; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	e007      	b.n	8000760 <deleteBuffer+0x20>
	{
		buf[i] = '\0';
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4413      	add	r3, r2
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d3f3      	bcc.n	8000750 <deleteBuffer+0x10>
	}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <subString>:
  * @param  startpos is the index to start the substring at.
  * @param  endpos is the index to end the substring before.
  * @retval None
  */
void subString(char* maindata, char* subdata, uint32_t startpos, uint32_t endpos)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	603b      	str	r3, [r7, #0]
	if(endpos < strlen(maindata))
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f7ff fd23 	bl	80001d0 <strlen>
 800078a:	4602      	mov	r2, r0
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	4293      	cmp	r3, r2
 8000790:	d213      	bcs.n	80007ba <subString+0x44>
	{
		for(uint32_t i = startpos; i < endpos; i++)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e00c      	b.n	80007b2 <subString+0x3c>
		{
			subdata[i - startpos] = maindata[i];
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	441a      	add	r2, r3
 800079e:	6979      	ldr	r1, [r7, #20]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	1acb      	subs	r3, r1, r3
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	440b      	add	r3, r1
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	701a      	strb	r2, [r3, #0]
		for(uint32_t i = startpos; i < endpos; i++)
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	3301      	adds	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d3ee      	bcc.n	8000798 <subString+0x22>
		}
	}
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <Sim_send>:
  * @param  command which is AT commands or data.
  * @param  len which is length of AT commands or data.
  * @retval None
  */
STATUS Sim_send(char *command, uint16_t len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
	deleteBuffer((char*)Sim_Rxdata, strlen((char*)Sim_Rxdata));
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <Sim_send+0x44>)
 80007d2:	f7ff fcfd 	bl	80001d0 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4619      	mov	r1, r3
 80007da:	480b      	ldr	r0, [pc, #44]	; (8000808 <Sim_send+0x44>)
 80007dc:	f7ff ffb0 	bl	8000740 <deleteBuffer>
	Sim_Count = 0;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <Sim_send+0x48>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	801a      	strh	r2, [r3, #0]
	if(HAL_UART_Transmit(&SIM_UART, (uint8_t*) command, len, MAX_SEND_TIME) == HAL_OK)
 80007e6:	887a      	ldrh	r2, [r7, #2]
 80007e8:	f44f 7359 	mov.w	r3, #868	; 0x364
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	4808      	ldr	r0, [pc, #32]	; (8000810 <Sim_send+0x4c>)
 80007f0:	f004 fd10 	bl	8005214 <HAL_UART_Transmit>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <Sim_send+0x3a>
	{
		return RET_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <Sim_send+0x3c>
	}
	return RET_TIMEOUT;
 80007fe:	2302      	movs	r3, #2
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000578 	.word	0x20000578
 800080c:	20000960 	.word	0x20000960
 8000810:	20001024 	.word	0x20001024

08000814 <Sim_recv>:
  * @param  timeout which is maximum waiting time for receiving data.
  * @retval RET_TIMEOUT if no response data.
  * 		RET_OK if received a string of data.
  */
STATUS Sim_recv(uint32_t timeout)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 800081c:	f001 ff88 	bl	8002730 <HAL_GetTick>
 8000820:	60f8      	str	r0, [r7, #12]
	while(isSimResponse == false)
 8000822:	e009      	b.n	8000838 <Sim_recv+0x24>
	{
		if(HAL_GetTick() - time > timeout)
 8000824:	f001 ff84 	bl	8002730 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	d201      	bcs.n	8000838 <Sim_recv+0x24>
		{
			return RET_TIMEOUT;
 8000834:	2302      	movs	r3, #2
 8000836:	e020      	b.n	800087a <Sim_recv+0x66>
	while(isSimResponse == false)
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <Sim_recv+0x70>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	f083 0301 	eor.w	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1ed      	bne.n	8000824 <Sim_recv+0x10>
		}
	}
	HAL_Delay(5);
 8000848:	2005      	movs	r0, #5
 800084a:	f001 ff7d 	bl	8002748 <HAL_Delay>
	uint32_t time1 = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		time1 = HAL_GetTick();
 8000852:	f001 ff6d 	bl	8002730 <HAL_GetTick>
 8000856:	60b8      	str	r0, [r7, #8]
		if((time1 - Sim_UartTime) > 100)
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <Sim_recv+0x74>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	2b64      	cmp	r3, #100	; 0x64
 8000862:	d906      	bls.n	8000872 <Sim_recv+0x5e>
		{
			__NOP();
 8000864:	bf00      	nop
			break;
 8000866:	bf00      	nop
		}
		HAL_Delay(1);
	}
	isSimResponse = false;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <Sim_recv+0x70>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e003      	b.n	800087a <Sim_recv+0x66>
		HAL_Delay(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f001 ff68 	bl	8002748 <HAL_Delay>
		time1 = HAL_GetTick();
 8000878:	e7eb      	b.n	8000852 <Sim_recv+0x3e>
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000962 	.word	0x20000962
 8000888:	20000964 	.word	0x20000964

0800088c <Sim_checkResponseWith>:
  * @param	timeout is maximum waiting time of a data
  * @retval RET_FAIL if no userdata data in Sim_Rxdata.
  * 		RET_OK if otherwise.
  */
STATUS Sim_checkResponseWith(char* userdata, uint8_t maxretry, uint32_t timeout)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	460b      	mov	r3, r1
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	for(i = 0; i < maxretry; i++)
 800089a:	2300      	movs	r3, #0
 800089c:	75fb      	strb	r3, [r7, #23]
 800089e:	e012      	b.n	80008c6 <Sim_checkResponseWith+0x3a>
	{
		if(Sim_recv(timeout) == RET_OK)
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ffb7 	bl	8000814 <Sim_recv>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d109      	bne.n	80008c0 <Sim_checkResponseWith+0x34>
		{
			if(strstr((char*)Sim_Rxdata,userdata) != NULL)
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <Sim_checkResponseWith+0x50>)
 80008b0:	f005 fcee 	bl	8006290 <strstr>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <Sim_checkResponseWith+0x34>
			{
				__NOP();
 80008ba:	bf00      	nop
				#if (SIM_DEBUG == 1)
					printf("%s\r\n",(char*)Sim_Rxdata);
				#endif
				return RET_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	e008      	b.n	80008d2 <Sim_checkResponseWith+0x46>
	for(i = 0; i < maxretry; i++)
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	3301      	adds	r3, #1
 80008c4:	75fb      	strb	r3, [r7, #23]
 80008c6:	7dfa      	ldrb	r2, [r7, #23]
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d3e8      	bcc.n	80008a0 <Sim_checkResponseWith+0x14>
		printf("-----Error-----\r\n");
		printf("Max retry = %d\r\n",i);
		printf("%s",(char*)Sim_Rxdata);
		printf("---------------\r\n");
	#endif
	__NOP();
 80008ce:	bf00      	nop
	return RET_FAIL;
 80008d0:	2301      	movs	r3, #1
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000578 	.word	0x20000578

080008e0 <Sim_checkOK>:
  * @param  None.
  * @retval RET_FAIL if no response or incorrect data.
  * 		RET_OK if response correct data.
  */
STATUS Sim_checkOK(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	Sim_send("AT\r",3);
 80008e4:	2103      	movs	r1, #3
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <Sim_checkOK+0x2c>)
 80008e8:	f7ff ff6c 	bl	80007c4 <Sim_send>
	ret = Sim_checkResponseWith("OK", 1, 1000);
 80008ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f0:	2101      	movs	r1, #1
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <Sim_checkOK+0x30>)
 80008f4:	f7ff ffca 	bl	800088c <Sim_checkResponseWith>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <Sim_checkOK+0x34>)
 80008fe:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000900:	bf00      	nop
	return ret;
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <Sim_checkOK+0x34>)
 8000904:	781b      	ldrb	r3, [r3, #0]
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	08007854 	.word	0x08007854
 8000910:	08007858 	.word	0x08007858
 8000914:	20000ed9 	.word	0x20000ed9

08000918 <Sim_getSignalQuality>:
  * @param  None.
  * @retval RET_FAIL if 0 < RSSI < 32.
  * 		RET_OK if otherwise.
  */
uint8_t Sim_getSignalQuality(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
	uint8_t rssi = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	71fb      	strb	r3, [r7, #7]
	Sim_send("AT+CSQ\r",7);
 8000922:	2107      	movs	r1, #7
 8000924:	4817      	ldr	r0, [pc, #92]	; (8000984 <Sim_getSignalQuality+0x6c>)
 8000926:	f7ff ff4d 	bl	80007c4 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 3000);
 800092a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800092e:	2102      	movs	r1, #2
 8000930:	4815      	ldr	r0, [pc, #84]	; (8000988 <Sim_getSignalQuality+0x70>)
 8000932:	f7ff ffab 	bl	800088c <Sim_checkResponseWith>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <Sim_getSignalQuality+0x74>)
 800093c:	701a      	strb	r2, [r3, #0]
	__NOP();
 800093e:	bf00      	nop
	if(ret == RET_OK)
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <Sim_getSignalQuality+0x74>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d117      	bne.n	8000978 <Sim_getSignalQuality+0x60>
	{
		char* tok = strtok((char*)Sim_Rxdata,":");
 8000948:	4911      	ldr	r1, [pc, #68]	; (8000990 <Sim_getSignalQuality+0x78>)
 800094a:	4812      	ldr	r0, [pc, #72]	; (8000994 <Sim_getSignalQuality+0x7c>)
 800094c:	f005 fcb8 	bl	80062c0 <strtok>
 8000950:	6038      	str	r0, [r7, #0]
		tok = strtok(NULL,",");
 8000952:	4911      	ldr	r1, [pc, #68]	; (8000998 <Sim_getSignalQuality+0x80>)
 8000954:	2000      	movs	r0, #0
 8000956:	f005 fcb3 	bl	80062c0 <strtok>
 800095a:	6038      	str	r0, [r7, #0]
		rssi = atoi(tok);
 800095c:	6838      	ldr	r0, [r7, #0]
 800095e:	f005 fc39 	bl	80061d4 <atoi>
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
		deleteBuffer((char*)Sim_Rxdata, 100);
 8000966:	2164      	movs	r1, #100	; 0x64
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <Sim_getSignalQuality+0x7c>)
 800096a:	f7ff fee9 	bl	8000740 <deleteBuffer>
		if(rssi < 32)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b1f      	cmp	r3, #31
 8000972:	d801      	bhi.n	8000978 <Sim_getSignalQuality+0x60>
		{
			return rssi;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	e000      	b.n	800097a <Sim_getSignalQuality+0x62>
		}
	}
	return 99;
 8000978:	2363      	movs	r3, #99	; 0x63
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	0800785c 	.word	0x0800785c
 8000988:	08007858 	.word	0x08007858
 800098c:	20000ed9 	.word	0x20000ed9
 8000990:	08007864 	.word	0x08007864
 8000994:	20000578 	.word	0x20000578
 8000998:	08007868 	.word	0x08007868

0800099c <Sim_disconnectInternet>:
  * @param  None.
  * @retval RET_FAIL if disconnection failed.
  * 		RET_OK if disconnection successful.
  */
STATUS Sim_disconnectInternet(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	Sim_send("AT+QIDEACT=1\r",13);
 80009a0:	210d      	movs	r1, #13
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <Sim_disconnectInternet+0x2c>)
 80009a4:	f7ff ff0e 	bl	80007c4 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 80009a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ac:	2102      	movs	r1, #2
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <Sim_disconnectInternet+0x30>)
 80009b0:	f7ff ff6c 	bl	800088c <Sim_checkResponseWith>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <Sim_disconnectInternet+0x34>)
 80009ba:	701a      	strb	r2, [r3, #0]
	__NOP();
 80009bc:	bf00      	nop
	return ret;
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <Sim_disconnectInternet+0x34>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	080078cc 	.word	0x080078cc
 80009cc:	08007858 	.word	0x08007858
 80009d0:	20000ed9 	.word	0x20000ed9

080009d4 <Sim_initSMS>:

STATUS Sim_initSMS(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	//Select SMS Message Format
	Sim_send("AT+CMGF=1\r",strlen("AT+CMGF=1\r"));
 80009d8:	210a      	movs	r1, #10
 80009da:	4810      	ldr	r0, [pc, #64]	; (8000a1c <Sim_initSMS+0x48>)
 80009dc:	f7ff fef2 	bl	80007c4 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 80009e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009e4:	2102      	movs	r1, #2
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <Sim_initSMS+0x4c>)
 80009e8:	f7ff ff50 	bl	800088c <Sim_checkResponseWith>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <Sim_initSMS+0x50>)
 80009f2:	701a      	strb	r2, [r3, #0]
	__NOP();
 80009f4:	bf00      	nop
	//Delete all message
	Sim_send("AT+CMGD=1,4\r",strlen("AT+CMGD=1,4\r"));
 80009f6:	210c      	movs	r1, #12
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <Sim_initSMS+0x54>)
 80009fa:	f7ff fee3 	bl	80007c4 <Sim_send>
	ret = Sim_checkResponseWith("OK", 2, 5000);
 80009fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a02:	2102      	movs	r1, #2
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <Sim_initSMS+0x4c>)
 8000a06:	f7ff ff41 	bl	800088c <Sim_checkResponseWith>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <Sim_initSMS+0x50>)
 8000a10:	701a      	strb	r2, [r3, #0]
	__NOP();
 8000a12:	bf00      	nop
	return ret;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <Sim_initSMS+0x50>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	080078dc 	.word	0x080078dc
 8000a20:	08007858 	.word	0x08007858
 8000a24:	20000ed9 	.word	0x20000ed9
 8000a28:	080078e8 	.word	0x080078e8

08000a2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a30:	f3bf 8f4f 	dsb	sy
}
 8000a34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <__NVIC_SystemReset+0x24>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a3e:	4904      	ldr	r1, [pc, #16]	; (8000a50 <__NVIC_SystemReset+0x24>)
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_SystemReset+0x28>)
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a46:	f3bf 8f4f 	dsb	sy
}
 8000a4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <__NVIC_SystemReset+0x20>
 8000a50:	e000ed00 	.word	0xe000ed00
 8000a54:	05fa0004 	.word	0x05fa0004

08000a58 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIM_RI_Pin)
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d102      	bne.n	8000a6e <HAL_GPIO_EXTI_Callback+0x16>
	{
		Sim_isRISignal = true;
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x24>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	2000096a 	.word	0x2000096a

08000a80 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	isOnTimeToSendReq = true;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_RTC_AlarmAEventCallback+0x68>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
	//Thuc hien lay thoi gian hien tai cua RTC
	HAL_RTC_GetTime(hrtc, &currentTime, RTC_FORMAT_BIN);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4916      	ldr	r1, [pc, #88]	; (8000aec <HAL_RTC_AlarmAEventCallback+0x6c>)
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f003 ffd2 	bl	8004a3c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &currentDate, RTC_FORMAT_BIN);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4915      	ldr	r1, [pc, #84]	; (8000af0 <HAL_RTC_AlarmAEventCallback+0x70>)
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f004 f8d2 	bl	8004c46 <HAL_RTC_GetDate>
	rtc_count++;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_RTC_AlarmAEventCallback+0x74>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_RTC_AlarmAEventCallback+0x74>)
 8000aae:	801a      	strh	r2, [r3, #0]
	if((userAlarm.AlarmTime.Hours == 0) && (userAlarm.AlarmTime.Minutes == 0))
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_RTC_AlarmAEventCallback+0x78>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d106      	bne.n	8000ac6 <HAL_RTC_AlarmAEventCallback+0x46>
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_RTC_AlarmAEventCallback+0x78>)
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <HAL_RTC_AlarmAEventCallback+0x46>
	{
		isRTCStartCounting = true;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_RTC_AlarmAEventCallback+0x7c>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
	}
	//Thuc hien cai dat thoi gian Alarm
	RTC_initAlarm(currentTime.Hours, currentTime.Minutes, 0);
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_RTC_AlarmAEventCallback+0x6c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_RTC_AlarmAEventCallback+0x6c>)
 8000acc:	7851      	ldrb	r1, [r2, #1]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 f817 	bl	8001b04 <RTC_initAlarm>
	HAL_RTC_SetAlarm_IT(hrtc, &userAlarm, RTC_FORMAT_BIN);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <HAL_RTC_AlarmAEventCallback+0x78>)
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f004 f902 	bl	8004ce4 <HAL_RTC_SetAlarm_IT>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000ba5 	.word	0x20000ba5
 8000aec:	20000b64 	.word	0x20000b64
 8000af0:	20000b78 	.word	0x20000b78
 8000af4:	20000ba6 	.word	0x20000ba6
 8000af8:	20000b7c 	.word	0x20000b7c
 8000afc:	20000ba4 	.word	0x20000ba4

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f001 fdb9 	bl	800267c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f9ab 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f000 fb5f 	bl	80011d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b12:	f000 fafd 	bl	8001110 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b16:	f000 fb2b 	bl	8001170 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000b1a:	f000 fa07 	bl	8000f2c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  	HAL_Delay(1000);
 8000b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b22:	f001 fe11 	bl	8002748 <HAL_Delay>
  	Flash_init();
 8000b26:	f001 f9df 	bl	8001ee8 <Flash_init>
    HAL_UART_Receive_IT(&SIM_UART, Sim_Rxbyte, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	49a9      	ldr	r1, [pc, #676]	; (8000dd4 <main+0x2d4>)
 8000b2e:	48aa      	ldr	r0, [pc, #680]	; (8000dd8 <main+0x2d8>)
 8000b30:	f004 fc04 	bl	800533c <HAL_UART_Receive_IT>
    Sim_resetSIM();
 8000b34:	f000 fe36 	bl	80017a4 <Sim_resetSIM>
    /* First Connection */
	char StationStart[25]  = {0};
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	751a      	strb	r2, [r3, #20]
	char StationConfig[25] = {0};
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	751a      	strb	r2, [r3, #20]
	sprintf(StationStart,"station=%d&status=%s",STATION,"START");
 8000b62:	f107 001c 	add.w	r0, r7, #28
 8000b66:	4b9d      	ldr	r3, [pc, #628]	; (8000ddc <main+0x2dc>)
 8000b68:	221e      	movs	r2, #30
 8000b6a:	499d      	ldr	r1, [pc, #628]	; (8000de0 <main+0x2e0>)
 8000b6c:	f005 fb68 	bl	8006240 <siprintf>
	sprintf(StationConfig,"station=%d&status=%s",STATION,"CONFIG");
 8000b70:	4638      	mov	r0, r7
 8000b72:	4b9c      	ldr	r3, [pc, #624]	; (8000de4 <main+0x2e4>)
 8000b74:	221e      	movs	r2, #30
 8000b76:	499a      	ldr	r1, [pc, #616]	; (8000de0 <main+0x2e0>)
 8000b78:	f005 fb62 	bl	8006240 <siprintf>
	Sim_exitSLEEPMode();
 8000b7c:	f000 fdf6 	bl	800176c <Sim_exitSLEEPMode>
	Sim_checkOK();
 8000b80:	f7ff feae 	bl	80008e0 <Sim_checkOK>
	HAL_Delay(3000);
 8000b84:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b88:	f001 fdde 	bl	8002748 <HAL_Delay>
    if(Sim_checkOK() == RET_OK)
 8000b8c:	f7ff fea8 	bl	80008e0 <Sim_checkOK>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d11b      	bne.n	8000bce <main+0xce>
    {
		Sim_RSSI = Sim_getSignalQuality();
 8000b96:	f7ff febf 	bl	8000918 <Sim_getSignalQuality>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b92      	ldr	r3, [pc, #584]	; (8000de8 <main+0x2e8>)
 8000ba0:	701a      	strb	r2, [r3, #0]
		if(Sim_RSSI != 99) //99 <=> error
 8000ba2:	4b91      	ldr	r3, [pc, #580]	; (8000de8 <main+0x2e8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b63      	cmp	r3, #99	; 0x63
 8000ba8:	d011      	beq.n	8000bce <main+0xce>
		{
			if(Sim_initSMS() == RET_OK)
 8000baa:	f7ff ff13 	bl	80009d4 <Sim_initSMS>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10c      	bne.n	8000bce <main+0xce>
			{
				if(HTTP_configParams() == RET_OK)
 8000bb4:	f7ff fc58 	bl	8000468 <HTTP_configParams>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d107      	bne.n	8000bce <main+0xce>
				{
					__NOP();
 8000bbe:	bf00      	nop
					Sim_connectHTTP(HostConfig, URLConfig, StationStart, (char*)HTTP_DataToGet);
 8000bc0:	f107 021c 	add.w	r2, r7, #28
 8000bc4:	4b89      	ldr	r3, [pc, #548]	; (8000dec <main+0x2ec>)
 8000bc6:	498a      	ldr	r1, [pc, #552]	; (8000df0 <main+0x2f0>)
 8000bc8:	488a      	ldr	r0, [pc, #552]	; (8000df4 <main+0x2f4>)
 8000bca:	f000 fb99 	bl	8001300 <Sim_connectHTTP>
				}
			}
		}
    }
    __NOP();
 8000bce:	bf00      	nop
    Sim_enterSLEEPMode();
 8000bd0:	f000 fd8e 	bl	80016f0 <Sim_enterSLEEPMode>
    Sim_isRISignal = false; //After reset, RISignal will raise
 8000bd4:	4b88      	ldr	r3, [pc, #544]	; (8000df8 <main+0x2f8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Sim_isRISignal == true)
 8000bda:	4b87      	ldr	r3, [pc, #540]	; (8000df8 <main+0x2f8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d004      	beq.n	8000bee <main+0xee>
	  {
		  Sim_restartControl();
 8000be4:	f000 fe7c 	bl	80018e0 <Sim_restartControl>
		  Sim_isRISignal = false;
 8000be8:	4b83      	ldr	r3, [pc, #524]	; (8000df8 <main+0x2f8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
	  }

	  if(configStatus == 1)
 8000bee:	4b83      	ldr	r3, [pc, #524]	; (8000dfc <main+0x2fc>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <main+0x108>
	  {
		  Sim_connectHTTP(HostConfig, URLConfig, StationConfig, (char*)HTTP_DataToGet);
 8000bf6:	463a      	mov	r2, r7
 8000bf8:	4b7c      	ldr	r3, [pc, #496]	; (8000dec <main+0x2ec>)
 8000bfa:	497d      	ldr	r1, [pc, #500]	; (8000df0 <main+0x2f0>)
 8000bfc:	487d      	ldr	r0, [pc, #500]	; (8000df4 <main+0x2f4>)
 8000bfe:	f000 fb7f 	bl	8001300 <Sim_connectHTTP>
		  configStatus = 0;
 8000c02:	4b7e      	ldr	r3, [pc, #504]	; (8000dfc <main+0x2fc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
	  }

	  if(isRTCStartCounting)
 8000c08:	4b7d      	ldr	r3, [pc, #500]	; (8000e00 <main+0x300>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d013      	beq.n	8000c3a <main+0x13a>
	  {
		  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8000c12:	2200      	movs	r2, #0
 8000c14:	497b      	ldr	r1, [pc, #492]	; (8000e04 <main+0x304>)
 8000c16:	487c      	ldr	r0, [pc, #496]	; (8000e08 <main+0x308>)
 8000c18:	f003 ff10 	bl	8004a3c <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	497b      	ldr	r1, [pc, #492]	; (8000e0c <main+0x30c>)
 8000c20:	4879      	ldr	r0, [pc, #484]	; (8000e08 <main+0x308>)
 8000c22:	f004 f810 	bl	8004c46 <HAL_RTC_GetDate>
		  if((currentTime.Hours == 0)&&(currentTime.Minutes > 4))
 8000c26:	4b77      	ldr	r3, [pc, #476]	; (8000e04 <main+0x304>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d105      	bne.n	8000c3a <main+0x13a>
 8000c2e:	4b75      	ldr	r3, [pc, #468]	; (8000e04 <main+0x304>)
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d901      	bls.n	8000c3a <main+0x13a>
		  {
			  NVIC_SystemReset();
 8000c36:	f7ff fef9 	bl	8000a2c <__NVIC_SystemReset>
		  }
	  }

	  if(isOnTimeToSendReq)
 8000c3a:	4b75      	ldr	r3, [pc, #468]	; (8000e10 <main+0x310>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d035      	beq.n	8000cb0 <main+0x1b0>
	  {
		  Sim_exitSLEEPMode();
 8000c44:	f000 fd92 	bl	800176c <Sim_exitSLEEPMode>
		  //Kiem tra tin hieu Sim
		  Sim_RSSI = Sim_getSignalQuality();
 8000c48:	f7ff fe66 	bl	8000918 <Sim_getSignalQuality>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b65      	ldr	r3, [pc, #404]	; (8000de8 <main+0x2e8>)
 8000c52:	701a      	strb	r2, [r3, #0]
		  //Tong hop du lieu
		  strcpy(MainData,"TEST DATA");
 8000c54:	4b6f      	ldr	r3, [pc, #444]	; (8000e14 <main+0x314>)
 8000c56:	4a70      	ldr	r2, [pc, #448]	; (8000e18 <main+0x318>)
 8000c58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5a:	c303      	stmia	r3!, {r0, r1}
 8000c5c:	801a      	strh	r2, [r3, #0]
		  //Gui du lieu len Server
		  ret = Sim_connectHTTP(Host1, URL1, MainData, (char*)HTTP_DataToGet);
 8000c5e:	4b63      	ldr	r3, [pc, #396]	; (8000dec <main+0x2ec>)
 8000c60:	4a6c      	ldr	r2, [pc, #432]	; (8000e14 <main+0x314>)
 8000c62:	496e      	ldr	r1, [pc, #440]	; (8000e1c <main+0x31c>)
 8000c64:	486e      	ldr	r0, [pc, #440]	; (8000e20 <main+0x320>)
 8000c66:	f000 fb4b 	bl	8001300 <Sim_connectHTTP>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b6d      	ldr	r3, [pc, #436]	; (8000e24 <main+0x324>)
 8000c70:	701a      	strb	r2, [r3, #0]
		  if(ret != RET_OK)
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <main+0x324>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d008      	beq.n	8000c8c <main+0x18c>
		  {
			  Flash_writeData(Host1, NULL, MainData);
 8000c7a:	4a66      	ldr	r2, [pc, #408]	; (8000e14 <main+0x314>)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4868      	ldr	r0, [pc, #416]	; (8000e20 <main+0x320>)
 8000c80:	f001 f9a2 	bl	8001fc8 <Flash_writeData>
			  Flash_isReadData = false;
 8000c84:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <main+0x328>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <main+0x192>
		  }
		  else
		  {
			  Flash_isReadData = true;
 8000c8c:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <main+0x328>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
		  }
		  //Reset du lieu
		  memset(MainData,0,strlen(MainData));
 8000c92:	4860      	ldr	r0, [pc, #384]	; (8000e14 <main+0x314>)
 8000c94:	f7ff fa9c 	bl	80001d0 <strlen>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	485d      	ldr	r0, [pc, #372]	; (8000e14 <main+0x314>)
 8000ca0:	f005 fac6 	bl	8006230 <memset>
		  Sim_enterSLEEPMode();
 8000ca4:	f000 fd24 	bl	80016f0 <Sim_enterSLEEPMode>
		  isOnTimeToSendReq = false;
 8000ca8:	4b59      	ldr	r3, [pc, #356]	; (8000e10 <main+0x310>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	e794      	b.n	8000bda <main+0xda>
	  }
	  else
	  {
		  if(Flash_isReadData == true)
 8000cb0:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <main+0x328>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 8082 	beq.w	8000dbe <main+0x2be>
		  {
			  if(READ_DATA_ADDR != WRITE_DATA_ADDR)
 8000cba:	4b5c      	ldr	r3, [pc, #368]	; (8000e2c <main+0x32c>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b5c      	ldr	r3, [pc, #368]	; (8000e30 <main+0x330>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d070      	beq.n	8000da8 <main+0x2a8>
			  {
				  memset(Flash_DataToRead, 0, strlen(Flash_DataToRead));
 8000cc6:	485b      	ldr	r0, [pc, #364]	; (8000e34 <main+0x334>)
 8000cc8:	f7ff fa82 	bl	80001d0 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4858      	ldr	r0, [pc, #352]	; (8000e34 <main+0x334>)
 8000cd4:	f005 faac 	bl	8006230 <memset>
				  READ_DATA_ADDR = Flash_ReadIntType(RD_ADDR);
 8000cd8:	4857      	ldr	r0, [pc, #348]	; (8000e38 <main+0x338>)
 8000cda:	f7ff fb28 	bl	800032e <Flash_ReadIntType>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a52      	ldr	r2, [pc, #328]	; (8000e2c <main+0x32c>)
 8000ce2:	6013      	str	r3, [r2, #0]
				  WRITE_DATA_ADDR = Flash_ReadIntType(WR_ADDR);
 8000ce4:	4855      	ldr	r0, [pc, #340]	; (8000e3c <main+0x33c>)
 8000ce6:	f7ff fb22 	bl	800032e <Flash_ReadIntType>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a50      	ldr	r2, [pc, #320]	; (8000e30 <main+0x330>)
 8000cee:	6013      	str	r3, [r2, #0]
				  PAGE_ADDR = Flash_ReadIntType(PG_ADDR);
 8000cf0:	4853      	ldr	r0, [pc, #332]	; (8000e40 <main+0x340>)
 8000cf2:	f7ff fb1c 	bl	800032e <Flash_ReadIntType>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a52      	ldr	r2, [pc, #328]	; (8000e44 <main+0x344>)
 8000cfa:	6013      	str	r3, [r2, #0]
				  Flash_ReadCharType(Flash_DataToRead, READ_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8000cfc:	4b4b      	ldr	r3, [pc, #300]	; (8000e2c <main+0x32c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2201      	movs	r2, #1
 8000d02:	4619      	mov	r1, r3
 8000d04:	484b      	ldr	r0, [pc, #300]	; (8000e34 <main+0x334>)
 8000d06:	f7ff fb71 	bl	80003ec <Flash_ReadCharType>
				  Flash_ReadDataLen = strlen(Flash_DataToRead);
 8000d0a:	484a      	ldr	r0, [pc, #296]	; (8000e34 <main+0x334>)
 8000d0c:	f7ff fa60 	bl	80001d0 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <main+0x348>)
 8000d16:	801a      	strh	r2, [r3, #0]
				  if(Flash_ReadDataLen != 0)
 8000d18:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <main+0x348>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <main+0x226>
				  {
					  Flash_extractData(Flash_DataToRead);
 8000d20:	4844      	ldr	r0, [pc, #272]	; (8000e34 <main+0x334>)
 8000d22:	f001 fa0d 	bl	8002140 <Flash_extractData>
				  }
				  ret = Sim_connectHTTP(Flash_Host, Flash_URL, Flash_Data, (char*)HTTP_DataToGet);
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <main+0x2ec>)
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <main+0x34c>)
 8000d2a:	4949      	ldr	r1, [pc, #292]	; (8000e50 <main+0x350>)
 8000d2c:	4849      	ldr	r0, [pc, #292]	; (8000e54 <main+0x354>)
 8000d2e:	f000 fae7 	bl	8001300 <Sim_connectHTTP>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <main+0x324>)
 8000d38:	701a      	strb	r2, [r3, #0]
				  if(ret == RET_OK)
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <main+0x324>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d12e      	bne.n	8000da0 <main+0x2a0>
				  {
					  READ_DATA_ADDR += Flash_ReadDataLen*2+2;
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <main+0x348>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <main+0x32c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a36      	ldr	r2, [pc, #216]	; (8000e2c <main+0x32c>)
 8000d54:	6013      	str	r3, [r2, #0]
					  if(READ_DATA_ADDR == MAX_PAGE_ADDR)
 8000d56:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <main+0x32c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a3f      	ldr	r2, [pc, #252]	; (8000e58 <main+0x358>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d102      	bne.n	8000d66 <main+0x266>
					  {
						  READ_DATA_ADDR = MIN_DATA_ADDR;
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <main+0x32c>)
 8000d62:	4a3e      	ldr	r2, [pc, #248]	; (8000e5c <main+0x35c>)
 8000d64:	601a      	str	r2, [r3, #0]
					  }
					  Flash_Unlock();
 8000d66:	f7ff faae 	bl	80002c6 <Flash_Unlock>
					  Flash_Erase(RD_ADDR);
 8000d6a:	4833      	ldr	r0, [pc, #204]	; (8000e38 <main+0x338>)
 8000d6c:	f7ff fab1 	bl	80002d2 <Flash_Erase>
					  Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR,FLASH_TYPEPROGRAM_WORD);
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <main+0x32c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2202      	movs	r2, #2
 8000d76:	4619      	mov	r1, r3
 8000d78:	482f      	ldr	r0, [pc, #188]	; (8000e38 <main+0x338>)
 8000d7a:	f7ff fac6 	bl	800030a <Flash_WriteIntType>
					  Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR,FLASH_TYPEPROGRAM_WORD);
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <main+0x330>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2202      	movs	r2, #2
 8000d84:	4619      	mov	r1, r3
 8000d86:	482d      	ldr	r0, [pc, #180]	; (8000e3c <main+0x33c>)
 8000d88:	f7ff fabf 	bl	800030a <Flash_WriteIntType>
					  Flash_WriteIntType(PG_ADDR,PAGE_ADDR,FLASH_TYPEPROGRAM_WORD);
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <main+0x344>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2202      	movs	r2, #2
 8000d92:	4619      	mov	r1, r3
 8000d94:	482a      	ldr	r0, [pc, #168]	; (8000e40 <main+0x340>)
 8000d96:	f7ff fab8 	bl	800030a <Flash_WriteIntType>
					  Flash_Lock();
 8000d9a:	f7ff fa8e 	bl	80002ba <Flash_Lock>
 8000d9e:	e71c      	b.n	8000bda <main+0xda>
				  }
				  else //gui that bai -> khong cho phep doc bo nho Flash
				  {
					  Flash_isReadData = false;
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <main+0x328>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e718      	b.n	8000bda <main+0xda>
				  }
			  }
			  else //gui het du lieu Flash -> dua ve Sleepmode
			  {
				  if(Sim_SleepMode == false)
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <main+0x360>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f083 0301 	eor.w	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f43f af11 	beq.w	8000bda <main+0xda>
				  {
					  Sim_enterSLEEPMode();
 8000db8:	f000 fc9a 	bl	80016f0 <Sim_enterSLEEPMode>
 8000dbc:	e70d      	b.n	8000bda <main+0xda>
				  }
			  }
		  }
		  else //khong cho phep doc du lieu Flash -> dua ve Sleepmode
		  {
			  if(Sim_SleepMode == false)
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <main+0x360>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f43f af06 	beq.w	8000bda <main+0xda>
			  {
				  Sim_enterSLEEPMode();
 8000dce:	f000 fc8f 	bl	80016f0 <Sim_enterSLEEPMode>
	  if(Sim_isRISignal == true)
 8000dd2:	e702      	b.n	8000bda <main+0xda>
 8000dd4:	20000574 	.word	0x20000574
 8000dd8:	20001024 	.word	0x20001024
 8000ddc:	08007928 	.word	0x08007928
 8000de0:	08007930 	.word	0x08007930
 8000de4:	08007948 	.word	0x08007948
 8000de8:	20000968 	.word	0x20000968
 8000dec:	2000018c 	.word	0x2000018c
 8000df0:	200000a0 	.word	0x200000a0
 8000df4:	20000080 	.word	0x20000080
 8000df8:	2000096a 	.word	0x2000096a
 8000dfc:	20000b60 	.word	0x20000b60
 8000e00:	20000ba4 	.word	0x20000ba4
 8000e04:	20000b64 	.word	0x20000b64
 8000e08:	20000fd0 	.word	0x20000fd0
 8000e0c:	20000b78 	.word	0x20000b78
 8000e10:	20000ba5 	.word	0x20000ba5
 8000e14:	20000e04 	.word	0x20000e04
 8000e18:	08007950 	.word	0x08007950
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000020 	.word	0x20000020
 8000e24:	20000ed9 	.word	0x20000ed9
 8000e28:	20000e02 	.word	0x20000e02
 8000e2c:	200000f4 	.word	0x200000f4
 8000e30:	200000f0 	.word	0x200000f0
 8000e34:	20000c70 	.word	0x20000c70
 8000e38:	08011000 	.word	0x08011000
 8000e3c:	08010c00 	.word	0x08010c00
 8000e40:	08010800 	.word	0x08010800
 8000e44:	200000f8 	.word	0x200000f8
 8000e48:	20000e00 	.word	0x20000e00
 8000e4c:	20000d38 	.word	0x20000d38
 8000e50:	20000ff0 	.word	0x20000ff0
 8000e54:	20000f60 	.word	0x20000f60
 8000e58:	0801fbf0 	.word	0x0801fbf0
 8000e5c:	08011400 	.word	0x08011400
 8000e60:	20000969 	.word	0x20000969

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09e      	sub	sp, #120	; 0x78
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 f9dc 	bl	8006230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	223c      	movs	r2, #60	; 0x3c
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 f9ce 	bl	8006230 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e94:	f002 f986 	bl	80031a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <SystemClock_Config+0xc0>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <SystemClock_Config+0xc0>)
 8000e9e:	f023 0318 	bic.w	r3, r3, #24
 8000ea2:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 f981 	bl	80031c4 <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000ec8:	f001 f9bc 	bl	8002244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 f874 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ef2:	f001 f9a7 	bl	8002244 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <SystemClock_Config+0xc4>)
 8000ef8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 fa98 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f16:	f001 f995 	bl	8002244 <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3778      	adds	r7, #120	; 0x78
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	00010006 	.word	0x00010006

08000f2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b090      	sub	sp, #64	; 0x40
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2228      	movs	r2, #40	; 0x28
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 f96f 	bl	8006230 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f52:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f54:	4a6a      	ldr	r2, [pc, #424]	; (8001100 <MX_RTC_Init+0x1d4>)
 8000f56:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f58:	4b68      	ldr	r3, [pc, #416]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f5e:	4b67      	ldr	r3, [pc, #412]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f60:	227f      	movs	r2, #127	; 0x7f
 8000f62:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f64:	4b65      	ldr	r3, [pc, #404]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f6a:	4b64      	ldr	r3, [pc, #400]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f76:	4b61      	ldr	r3, [pc, #388]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f7c:	485f      	ldr	r0, [pc, #380]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f7e:	f003 fc0f 	bl	80047a0 <HAL_RTC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000f88:	f001 f95c 	bl	8002244 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F5)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	485b      	ldr	r0, [pc, #364]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000f90:	f004 f8d0 	bl	8005134 <HAL_RTCEx_BKUPRead>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f243 22f5 	movw	r2, #13045	; 0x32f5
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d071      	beq.n	8001082 <MX_RTC_Init+0x156>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8000f9e:	2317      	movs	r3, #23
 8000fa0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 59;
 8000fa4:	233b      	movs	r3, #59	; 0x3b
 8000fa6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 50;
 8000faa:	2332      	movs	r3, #50	; 0x32
 8000fac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	484e      	ldr	r0, [pc, #312]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000fc2:	f003 fc7e 	bl	80048c2 <HAL_RTC_SetTime>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000fcc:	f001 f93a 	bl	8002244 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 31;
 8000fdc:	231f      	movs	r3, #31
 8000fde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 21;
 8000fe2:	2315      	movs	r3, #21
 8000fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4842      	ldr	r0, [pc, #264]	; (80010fc <MX_RTC_Init+0x1d0>)
 8000ff2:	f003 fd81 	bl	8004af8 <HAL_RTC_SetDate>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8000ffc:	f001 f922 	bl	8002244 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 23;
 8001000:	2317      	movs	r3, #23
 8001002:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 59;
 8001004:	233b      	movs	r3, #59	; 0x3b
 8001006:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 55;
 8001008:	2337      	movs	r3, #55	; 0x37
 800100a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800101c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800102c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	4619      	mov	r1, r3
 8001038:	4830      	ldr	r0, [pc, #192]	; (80010fc <MX_RTC_Init+0x1d0>)
 800103a:	f003 fe53 	bl	8004ce4 <HAL_RTC_SetAlarm_IT>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001044:	f001 f8fe 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //Khoi tao cac gia tri ban dau cho cac bien
  userAlarm = sAlarm;
 8001048:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <MX_RTC_Init+0x1d8>)
 800104a:	461d      	mov	r5, r3
 800104c:	463c      	mov	r4, r7
 800104e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105a:	e885 0003 	stmia.w	r5, {r0, r1}
  currentTime = sTime;
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <MX_RTC_Init+0x1dc>)
 8001060:	461d      	mov	r5, r3
 8001062:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	602b      	str	r3, [r5, #0]
  currentDate = sDate;
 800106e:	4a27      	ldr	r2, [pc, #156]	; (800110c <MX_RTC_Init+0x1e0>)
 8001070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001072:	6013      	str	r3, [r2, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F5);
 8001074:	f243 22f5 	movw	r2, #13045	; 0x32f5
 8001078:	2101      	movs	r1, #1
 800107a:	4820      	ldr	r0, [pc, #128]	; (80010fc <MX_RTC_Init+0x1d0>)
 800107c:	f004 f840 	bl	8005100 <HAL_RTCEx_BKUPWrite>
	  userAlarm.Alarm = RTC_ALARM_A;
	  RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
  }
  /* USER CODE END RTC_Init 2 */

}
 8001080:	e037      	b.n	80010f2 <MX_RTC_Init+0x1c6>
	  HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001082:	2200      	movs	r2, #0
 8001084:	4920      	ldr	r1, [pc, #128]	; (8001108 <MX_RTC_Init+0x1dc>)
 8001086:	481d      	ldr	r0, [pc, #116]	; (80010fc <MX_RTC_Init+0x1d0>)
 8001088:	f003 fcd8 	bl	8004a3c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800108c:	2200      	movs	r2, #0
 800108e:	491f      	ldr	r1, [pc, #124]	; (800110c <MX_RTC_Init+0x1e0>)
 8001090:	481a      	ldr	r0, [pc, #104]	; (80010fc <MX_RTC_Init+0x1d0>)
 8001092:	f003 fdd8 	bl	8004c46 <HAL_RTC_GetDate>
	  userAlarm.AlarmTime.Hours = currentTime.Hours;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_RTC_Init+0x1dc>)
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_RTC_Init+0x1d8>)
 800109c:	701a      	strb	r2, [r3, #0]
	  userAlarm.AlarmTime.Minutes = currentTime.Minutes;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_RTC_Init+0x1dc>)
 80010a0:	785a      	ldrb	r2, [r3, #1]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010a4:	705a      	strb	r2, [r3, #1]
	  userAlarm.AlarmTime.Seconds = 0;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	709a      	strb	r2, [r3, #2]
	  userAlarm.AlarmTime.SubSeconds = 0;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
	  userAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
	  userAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
	  userAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010c4:	615a      	str	r2, [r3, #20]
	  userAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
	  userAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
	  userAlarm.AlarmDateWeekDay = 1;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]
	  userAlarm.Alarm = RTC_ALARM_A;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
	  RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <MX_RTC_Init+0x1d8>)
 80010e8:	7851      	ldrb	r1, [r2, #1]
 80010ea:	2200      	movs	r2, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fd09 	bl	8001b04 <RTC_initAlarm>
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	; 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bdb0      	pop	{r4, r5, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000fd0 	.word	0x20000fd0
 8001100:	40002800 	.word	0x40002800
 8001104:	20000b7c 	.word	0x20000b7c
 8001108:	20000b64 	.word	0x20000b64
 800110c:	20000b78 	.word	0x20000b78

08001110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_USART2_UART_Init+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART2_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART2_UART_Init+0x58>)
 8001154:	f004 f810 	bl	8005178 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800115e:	f001 f871 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20001024 	.word	0x20001024
 800116c:	40004400 	.word	0x40004400

08001170 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <MX_USART3_UART_Init+0x5c>)
 8001178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800117c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011b4:	f003 ffe0 	bl	8005178 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011be:	f001 f841 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000edc 	.word	0x20000edc
 80011cc:	40004800 	.word	0x40004800

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <MX_GPIO_Init+0x120>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a41      	ldr	r2, [pc, #260]	; (80012f0 <MX_GPIO_Init+0x120>)
 80011ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <MX_GPIO_Init+0x120>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fe:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <MX_GPIO_Init+0x120>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a3b      	ldr	r2, [pc, #236]	; (80012f0 <MX_GPIO_Init+0x120>)
 8001204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <MX_GPIO_Init+0x120>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <MX_GPIO_Init+0x120>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a35      	ldr	r2, [pc, #212]	; (80012f0 <MX_GPIO_Init+0x120>)
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_GPIO_Init+0x120>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <MX_GPIO_Init+0x120>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <MX_GPIO_Init+0x120>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <MX_GPIO_Init+0x120>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM_RESET_Pin|SIM_PWR_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	210c      	movs	r1, #12
 800124a:	482a      	ldr	r0, [pc, #168]	; (80012f4 <MX_GPIO_Init+0x124>)
 800124c:	f001 ff7a 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2101      	movs	r1, #1
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f001 ff74 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2104      	movs	r1, #4
 8001260:	4825      	ldr	r0, [pc, #148]	; (80012f8 <MX_GPIO_Init+0x128>)
 8001262:	f001 ff6f 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SIM_RESET_Pin SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_RESET_Pin|SIM_PWR_Pin;
 8001266:	230c      	movs	r3, #12
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	481d      	ldr	r0, [pc, #116]	; (80012f4 <MX_GPIO_Init+0x124>)
 800127e:	f001 fde7 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_DTR_Pin */
  GPIO_InitStruct.Pin = SIM_DTR_Pin;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SIM_DTR_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f001 fdd8 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_RI_Pin */
  GPIO_InitStruct.Pin = SIM_RI_Pin;
 80012a0:	2302      	movs	r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_GPIO_Init+0x12c>)
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_RI_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f001 fdcb 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 80012ba:	2304      	movs	r3, #4
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <MX_GPIO_Init+0x128>)
 80012d2:	f001 fdbd 	bl	8002e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2007      	movs	r0, #7
 80012dc:	f001 fb33 	bl	8002946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80012e0:	2007      	movs	r0, #7
 80012e2:	f001 fb4c 	bl	800297e <HAL_NVIC_EnableIRQ>

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000800 	.word	0x48000800
 80012f8:	48000400 	.word	0x48000400
 80012fc:	10210000 	.word	0x10210000

08001300 <Sim_connectHTTP>:

/* USER CODE BEGIN 4 */
STATUS Sim_connectHTTP(char* host, char* url, char* sentdata, char* recvdata)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af02      	add	r7, sp, #8
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
	Sim_exitSLEEPMode();
 800130e:	f000 fa2d 	bl	800176c <Sim_exitSLEEPMode>
	deleteBuffer(HTTPServer_URL, strlen(HTTPServer_URL));
 8001312:	4858      	ldr	r0, [pc, #352]	; (8001474 <Sim_connectHTTP+0x174>)
 8001314:	f7fe ff5c 	bl	80001d0 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	4619      	mov	r1, r3
 800131c:	4855      	ldr	r0, [pc, #340]	; (8001474 <Sim_connectHTTP+0x174>)
 800131e:	f7ff fa0f 	bl	8000740 <deleteBuffer>
	sprintf(HTTPServer_URL,"http://%s/%s?%s",host,url,sentdata);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4953      	ldr	r1, [pc, #332]	; (8001478 <Sim_connectHTTP+0x178>)
 800132c:	4851      	ldr	r0, [pc, #324]	; (8001474 <Sim_connectHTTP+0x174>)
 800132e:	f004 ff87 	bl	8006240 <siprintf>
	STATUS m_ret = RET_FAIL;
 8001332:	2301      	movs	r3, #1
 8001334:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++)
 8001336:	2300      	movs	r3, #0
 8001338:	77bb      	strb	r3, [r7, #30]
 800133a:	e090      	b.n	800145e <Sim_connectHTTP+0x15e>
	{
		if(HTTP_sendGETRequest(HTTPServer_URL) == RET_OK)
 800133c:	484d      	ldr	r0, [pc, #308]	; (8001474 <Sim_connectHTTP+0x174>)
 800133e:	f7ff f901 	bl	8000544 <HTTP_sendGETRequest>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d17e      	bne.n	8001446 <Sim_connectHTTP+0x146>
		{
			__NOP();
 8001348:	bf00      	nop
			if(HTTP_readGETResponse(recvdata) == RET_OK)
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f7ff f966 	bl	800061c <HTTP_readGETResponse>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d177      	bne.n	8001446 <Sim_connectHTTP+0x146>
			{
				__NOP();
 8001356:	bf00      	nop
				if(strstr(recvdata,"200 OK") != NULL)
 8001358:	4948      	ldr	r1, [pc, #288]	; (800147c <Sim_connectHTTP+0x17c>)
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f004 ff98 	bl	8006290 <strstr>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d06f      	beq.n	8001446 <Sim_connectHTTP+0x146>
				{
					Sim_extractTimeStamp(recvdata);
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f000 f8a2 	bl	80014b0 <Sim_extractTimeStamp>
					if(strstr(recvdata,"||CC") != NULL)
 800136c:	4944      	ldr	r1, [pc, #272]	; (8001480 <Sim_connectHTTP+0x180>)
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f004 ff8e 	bl	8006290 <strstr>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <Sim_connectHTTP+0x86>
					{
						Sim_getHostnUrl(recvdata);
 800137a:	6838      	ldr	r0, [r7, #0]
 800137c:	f000 f944 	bl	8001608 <Sim_getHostnUrl>
						m_ret = RET_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	77fb      	strb	r3, [r7, #31]
 8001384:	e05f      	b.n	8001446 <Sim_connectHTTP+0x146>
					}
					else if(strstr(recvdata,"||00") != NULL)
 8001386:	493f      	ldr	r1, [pc, #252]	; (8001484 <Sim_connectHTTP+0x184>)
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f004 ff81 	bl	8006290 <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <Sim_connectHTTP+0xa0>
					{
						configStatus = 1;
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <Sim_connectHTTP+0x188>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
						m_ret = RET_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	77fb      	strb	r3, [r7, #31]
 800139e:	e052      	b.n	8001446 <Sim_connectHTTP+0x146>
					}
					else if(strstr(recvdata,"||11") != NULL)
 80013a0:	493a      	ldr	r1, [pc, #232]	; (800148c <Sim_connectHTTP+0x18c>)
 80013a2:	6838      	ldr	r0, [r7, #0]
 80013a4:	f004 ff74 	bl	8006290 <strstr>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d04b      	beq.n	8001446 <Sim_connectHTTP+0x146>
					{
						char* tok = NULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
						tok = strtok(recvdata,"|");
 80013b2:	4937      	ldr	r1, [pc, #220]	; (8001490 <Sim_connectHTTP+0x190>)
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f004 ff83 	bl	80062c0 <strtok>
 80013ba:	61b8      	str	r0, [r7, #24]
						tok = strtok(NULL,"<");
 80013bc:	4935      	ldr	r1, [pc, #212]	; (8001494 <Sim_connectHTTP+0x194>)
 80013be:	2000      	movs	r0, #0
 80013c0:	f004 ff7e 	bl	80062c0 <strtok>
 80013c4:	61b8      	str	r0, [r7, #24]
						int8_t rtc_alarm = atoi(tok);
 80013c6:	69b8      	ldr	r0, [r7, #24]
 80013c8:	f004 ff04 	bl	80061d4 <atoi>
 80013cc:	4603      	mov	r3, r0
 80013ce:	75fb      	strb	r3, [r7, #23]
						if((rtc_alarm >= 0) && (rtc_alarm <= 60))
 80013d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db34      	blt.n	8001442 <Sim_connectHTTP+0x142>
 80013d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013dc:	2b3c      	cmp	r3, #60	; 0x3c
 80013de:	dc30      	bgt.n	8001442 <Sim_connectHTTP+0x142>
						{
							if((rtc_alarm % 5) == 0)
 80013e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <Sim_connectHTTP+0x198>)
 80013e6:	fb83 1302 	smull	r1, r3, r3, r2
 80013ea:	1059      	asrs	r1, r3, #1
 80013ec:	17d3      	asrs	r3, r2, #31
 80013ee:	1ac9      	subs	r1, r1, r3
 80013f0:	460b      	mov	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d121      	bne.n	8001442 <Sim_connectHTTP+0x142>
							{
								if(rtc_alarm != RTC_ALARM)
 80013fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001402:	4a26      	ldr	r2, [pc, #152]	; (800149c <Sim_connectHTTP+0x19c>)
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	4293      	cmp	r3, r2
 8001408:	d01b      	beq.n	8001442 <Sim_connectHTTP+0x142>
								{
									RTC_ALARM = rtc_alarm;
 800140a:	7dfa      	ldrb	r2, [r7, #23]
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <Sim_connectHTTP+0x19c>)
 800140e:	701a      	strb	r2, [r3, #0]
									Flash_WriteIntType(MODE_RTC_ADDR, RTC_ALARM, FLASH_TYPEPROGRAM_HALFWORD);
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <Sim_connectHTTP+0x19c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4619      	mov	r1, r3
 8001418:	4821      	ldr	r0, [pc, #132]	; (80014a0 <Sim_connectHTTP+0x1a0>)
 800141a:	f7fe ff76 	bl	800030a <Flash_WriteIntType>
									HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800141e:	2200      	movs	r2, #0
 8001420:	4920      	ldr	r1, [pc, #128]	; (80014a4 <Sim_connectHTTP+0x1a4>)
 8001422:	4821      	ldr	r0, [pc, #132]	; (80014a8 <Sim_connectHTTP+0x1a8>)
 8001424:	f003 fb0a 	bl	8004a3c <HAL_RTC_GetTime>
									HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001428:	2200      	movs	r2, #0
 800142a:	4920      	ldr	r1, [pc, #128]	; (80014ac <Sim_connectHTTP+0x1ac>)
 800142c:	481e      	ldr	r0, [pc, #120]	; (80014a8 <Sim_connectHTTP+0x1a8>)
 800142e:	f003 fc0a 	bl	8004c46 <HAL_RTC_GetDate>
									RTC_initAlarm(currentTime.Hours, currentTime.Minutes, 0);
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <Sim_connectHTTP+0x1a4>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <Sim_connectHTTP+0x1a4>)
 8001438:	7851      	ldrb	r1, [r2, #1]
 800143a:	2200      	movs	r2, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fb61 	bl	8001b04 <RTC_initAlarm>
								}
							}
						}
						m_ret = RET_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
		}
		Sim_disconnectInternet();
 8001446:	f7ff faa9 	bl	800099c <Sim_disconnectInternet>
		if(m_ret == RET_OK)
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <Sim_connectHTTP+0x168>
		{
			break;
		}
		else
		{
			HAL_Delay(2000);
 8001450:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001454:	f001 f978 	bl	8002748 <HAL_Delay>
	for(uint8_t i = 0; i < 3; i++)
 8001458:	7fbb      	ldrb	r3, [r7, #30]
 800145a:	3301      	adds	r3, #1
 800145c:	77bb      	strb	r3, [r7, #30]
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	2b02      	cmp	r3, #2
 8001462:	f67f af6b 	bls.w	800133c <Sim_connectHTTP+0x3c>
 8001466:	e000      	b.n	800146a <Sim_connectHTTP+0x16a>
			break;
 8001468:	bf00      	nop
		}
	}
	return m_ret;
 800146a:	7ffb      	ldrb	r3, [r7, #31]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000096c 	.word	0x2000096c
 8001478:	0800795c 	.word	0x0800795c
 800147c:	0800796c 	.word	0x0800796c
 8001480:	08007974 	.word	0x08007974
 8001484:	0800797c 	.word	0x0800797c
 8001488:	20000b60 	.word	0x20000b60
 800148c:	08007984 	.word	0x08007984
 8001490:	0800798c 	.word	0x0800798c
 8001494:	08007990 	.word	0x08007990
 8001498:	66666667 	.word	0x66666667
 800149c:	200000be 	.word	0x200000be
 80014a0:	08010400 	.word	0x08010400
 80014a4:	20000b64 	.word	0x20000b64
 80014a8:	20000fd0 	.word	0x20000fd0
 80014ac:	20000b78 	.word	0x20000b78

080014b0 <Sim_extractTimeStamp>:

void Sim_extractTimeStamp(char* data)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
	char* ptr1 = strstr(data,"Date:");
 80014bc:	494c      	ldr	r1, [pc, #304]	; (80015f0 <Sim_extractTimeStamp+0x140>)
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f004 fee6 	bl	8006290 <strstr>
 80014c4:	61b8      	str	r0, [r7, #24]
	char* ptr2 = strstr(data," GMT");
 80014c6:	494b      	ldr	r1, [pc, #300]	; (80015f4 <Sim_extractTimeStamp+0x144>)
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f004 fee1 	bl	8006290 <strstr>
 80014ce:	6138      	str	r0, [r7, #16]
	if((ptr1 != NULL) & (ptr2 != NULL))
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf14      	ite	ne
 80014e2:	2301      	movne	r3, #1
 80014e4:	2300      	moveq	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d07b      	beq.n	80015e8 <Sim_extractTimeStamp+0x138>
	{
		while(ptr1 != ptr2)
 80014f0:	e009      	b.n	8001506 <Sim_extractTimeStamp+0x56>
		{
			TimeStamp.timezone[i++] = *ptr1;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	61fa      	str	r2, [r7, #28]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	7811      	ldrb	r1, [r2, #0]
 80014fc:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <Sim_extractTimeStamp+0x148>)
 80014fe:	54d1      	strb	r1, [r2, r3]
			ptr1++;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	3301      	adds	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
		while(ptr1 != ptr2)
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	429a      	cmp	r2, r3
 800150c:	d1f1      	bne.n	80014f2 <Sim_extractTimeStamp+0x42>
		}
		char* tok = strtok(TimeStamp.timezone," ");
 800150e:	493b      	ldr	r1, [pc, #236]	; (80015fc <Sim_extractTimeStamp+0x14c>)
 8001510:	4839      	ldr	r0, [pc, #228]	; (80015f8 <Sim_extractTimeStamp+0x148>)
 8001512:	f004 fed5 	bl	80062c0 <strtok>
 8001516:	60f8      	str	r0, [r7, #12]
		tok = strtok(NULL," ");
 8001518:	4938      	ldr	r1, [pc, #224]	; (80015fc <Sim_extractTimeStamp+0x14c>)
 800151a:	2000      	movs	r0, #0
 800151c:	f004 fed0 	bl	80062c0 <strtok>
 8001520:	60f8      	str	r0, [r7, #12]
		tok = strtok(NULL," ");
 8001522:	4936      	ldr	r1, [pc, #216]	; (80015fc <Sim_extractTimeStamp+0x14c>)
 8001524:	2000      	movs	r0, #0
 8001526:	f004 fecb 	bl	80062c0 <strtok>
 800152a:	60f8      	str	r0, [r7, #12]
		TimeStamp.date = atoi(tok);
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f004 fe51 	bl	80061d4 <atoi>
 8001532:	4603      	mov	r3, r0
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <Sim_extractTimeStamp+0x148>)
 8001538:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		tok = strtok(NULL," ");
 800153c:	492f      	ldr	r1, [pc, #188]	; (80015fc <Sim_extractTimeStamp+0x14c>)
 800153e:	2000      	movs	r0, #0
 8001540:	f004 febe 	bl	80062c0 <strtok>
 8001544:	60f8      	str	r0, [r7, #12]
		for(int i = 0; i < 12; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e015      	b.n	8001578 <Sim_extractTimeStamp+0xc8>
		{
			if(strstr(tok,Months[i]) != NULL)
 800154c:	4a2c      	ldr	r2, [pc, #176]	; (8001600 <Sim_extractTimeStamp+0x150>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	4619      	mov	r1, r3
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f004 fe9a 	bl	8006290 <strstr>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <Sim_extractTimeStamp+0xc2>
			{
				TimeStamp.mon = i + 1;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3301      	adds	r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <Sim_extractTimeStamp+0x148>)
 800156c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				break;
 8001570:	e005      	b.n	800157e <Sim_extractTimeStamp+0xce>
		for(int i = 0; i < 12; i++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2b0b      	cmp	r3, #11
 800157c:	dde6      	ble.n	800154c <Sim_extractTimeStamp+0x9c>
			}
		}
		tok = strtok(NULL," ");
 800157e:	491f      	ldr	r1, [pc, #124]	; (80015fc <Sim_extractTimeStamp+0x14c>)
 8001580:	2000      	movs	r0, #0
 8001582:	f004 fe9d 	bl	80062c0 <strtok>
 8001586:	60f8      	str	r0, [r7, #12]
		TimeStamp.year = atoi(tok);
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f004 fe23 	bl	80061d4 <atoi>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <Sim_extractTimeStamp+0x148>)
 8001594:	869a      	strh	r2, [r3, #52]	; 0x34
		tok = strtok(NULL,":");
 8001596:	491b      	ldr	r1, [pc, #108]	; (8001604 <Sim_extractTimeStamp+0x154>)
 8001598:	2000      	movs	r0, #0
 800159a:	f004 fe91 	bl	80062c0 <strtok>
 800159e:	60f8      	str	r0, [r7, #12]
		TimeStamp.hour = atoi(tok);
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f004 fe17 	bl	80061d4 <atoi>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <Sim_extractTimeStamp+0x148>)
 80015ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		tok = strtok(NULL,":");
 80015b0:	4914      	ldr	r1, [pc, #80]	; (8001604 <Sim_extractTimeStamp+0x154>)
 80015b2:	2000      	movs	r0, #0
 80015b4:	f004 fe84 	bl	80062c0 <strtok>
 80015b8:	60f8      	str	r0, [r7, #12]
		TimeStamp.min = atoi(tok);
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f004 fe0a 	bl	80061d4 <atoi>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <Sim_extractTimeStamp+0x148>)
 80015c6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		tok = strtok(NULL,":");
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <Sim_extractTimeStamp+0x154>)
 80015cc:	2000      	movs	r0, #0
 80015ce:	f004 fe77 	bl	80062c0 <strtok>
 80015d2:	60f8      	str	r0, [r7, #12]
		TimeStamp.sec = atoi(tok);
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f004 fdfd 	bl	80061d4 <atoi>
 80015da:	4603      	mov	r3, r0
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <Sim_extractTimeStamp+0x148>)
 80015e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		//update RTC Time
		RTC_updateUserTime();
 80015e4:	f000 faf6 	bl	8001bd4 <RTC_updateUserTime>
	}
}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08007994 	.word	0x08007994
 80015f4:	0800799c 	.word	0x0800799c
 80015f8:	20000f94 	.word	0x20000f94
 80015fc:	080079a4 	.word	0x080079a4
 8001600:	200000c0 	.word	0x200000c0
 8001604:	080079a8 	.word	0x080079a8

08001608 <Sim_getHostnUrl>:

void Sim_getHostnUrl(char* data)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	memset(Host1,0,strlen(Host1));
 8001610:	482f      	ldr	r0, [pc, #188]	; (80016d0 <Sim_getHostnUrl+0xc8>)
 8001612:	f7fe fddd 	bl	80001d0 <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	2100      	movs	r1, #0
 800161c:	482c      	ldr	r0, [pc, #176]	; (80016d0 <Sim_getHostnUrl+0xc8>)
 800161e:	f004 fe07 	bl	8006230 <memset>
	memset(Host2,0,strlen(Host2));
 8001622:	482c      	ldr	r0, [pc, #176]	; (80016d4 <Sim_getHostnUrl+0xcc>)
 8001624:	f7fe fdd4 	bl	80001d0 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	461a      	mov	r2, r3
 800162c:	2100      	movs	r1, #0
 800162e:	4829      	ldr	r0, [pc, #164]	; (80016d4 <Sim_getHostnUrl+0xcc>)
 8001630:	f004 fdfe 	bl	8006230 <memset>
	memset(URL1,0,strlen(URL1));
 8001634:	4828      	ldr	r0, [pc, #160]	; (80016d8 <Sim_getHostnUrl+0xd0>)
 8001636:	f7fe fdcb 	bl	80001d0 <strlen>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	2100      	movs	r1, #0
 8001640:	4825      	ldr	r0, [pc, #148]	; (80016d8 <Sim_getHostnUrl+0xd0>)
 8001642:	f004 fdf5 	bl	8006230 <memset>
	memset(URL2,0,strlen(URL2));
 8001646:	4825      	ldr	r0, [pc, #148]	; (80016dc <Sim_getHostnUrl+0xd4>)
 8001648:	f7fe fdc2 	bl	80001d0 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	2100      	movs	r1, #0
 8001652:	4822      	ldr	r0, [pc, #136]	; (80016dc <Sim_getHostnUrl+0xd4>)
 8001654:	f004 fdec 	bl	8006230 <memset>
	char* token;
	token = strtok(data,"|");
 8001658:	4921      	ldr	r1, [pc, #132]	; (80016e0 <Sim_getHostnUrl+0xd8>)
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f004 fe30 	bl	80062c0 <strtok>
 8001660:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,":");
 8001662:	4920      	ldr	r1, [pc, #128]	; (80016e4 <Sim_getHostnUrl+0xdc>)
 8001664:	2000      	movs	r0, #0
 8001666:	f004 fe2b 	bl	80062c0 <strtok>
 800166a:	60f8      	str	r0, [r7, #12]
	strcpy(Host1,token);
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <Sim_getHostnUrl+0xc8>)
 8001670:	f004 fe06 	bl	8006280 <strcpy>
	token = strtok(NULL,"/");
 8001674:	491c      	ldr	r1, [pc, #112]	; (80016e8 <Sim_getHostnUrl+0xe0>)
 8001676:	2000      	movs	r0, #0
 8001678:	f004 fe22 	bl	80062c0 <strtok>
 800167c:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,"<");
 800167e:	491b      	ldr	r1, [pc, #108]	; (80016ec <Sim_getHostnUrl+0xe4>)
 8001680:	2000      	movs	r0, #0
 8001682:	f004 fe1d 	bl	80062c0 <strtok>
 8001686:	60f8      	str	r0, [r7, #12]
	strcpy(URL1,token);
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	4813      	ldr	r0, [pc, #76]	; (80016d8 <Sim_getHostnUrl+0xd0>)
 800168c:	f004 fdf8 	bl	8006280 <strcpy>
	token = strtok(NULL,"|");
 8001690:	4913      	ldr	r1, [pc, #76]	; (80016e0 <Sim_getHostnUrl+0xd8>)
 8001692:	2000      	movs	r0, #0
 8001694:	f004 fe14 	bl	80062c0 <strtok>
 8001698:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,":");
 800169a:	4912      	ldr	r1, [pc, #72]	; (80016e4 <Sim_getHostnUrl+0xdc>)
 800169c:	2000      	movs	r0, #0
 800169e:	f004 fe0f 	bl	80062c0 <strtok>
 80016a2:	60f8      	str	r0, [r7, #12]
	strcpy(Host2,token);
 80016a4:	68f9      	ldr	r1, [r7, #12]
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <Sim_getHostnUrl+0xcc>)
 80016a8:	f004 fdea 	bl	8006280 <strcpy>
	token = strtok(NULL,"/");
 80016ac:	490e      	ldr	r1, [pc, #56]	; (80016e8 <Sim_getHostnUrl+0xe0>)
 80016ae:	2000      	movs	r0, #0
 80016b0:	f004 fe06 	bl	80062c0 <strtok>
 80016b4:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL,"<");
 80016b6:	490d      	ldr	r1, [pc, #52]	; (80016ec <Sim_getHostnUrl+0xe4>)
 80016b8:	2000      	movs	r0, #0
 80016ba:	f004 fe01 	bl	80062c0 <strtok>
 80016be:	60f8      	str	r0, [r7, #12]
	strcpy(URL2,token);
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <Sim_getHostnUrl+0xd4>)
 80016c4:	f004 fddc 	bl	8006280 <strcpy>
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000020 	.word	0x20000020
 80016d4:	20000060 	.word	0x20000060
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000040 	.word	0x20000040
 80016e0:	0800798c 	.word	0x0800798c
 80016e4:	080079a8 	.word	0x080079a8
 80016e8:	080079ac 	.word	0x080079ac
 80016ec:	08007990 	.word	0x08007990

080016f0 <Sim_enterSLEEPMode>:

void Sim_enterSLEEPMode(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	STATUS m_ret;
	for(uint8_t i = 0; i < 2; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	e01d      	b.n	8001738 <Sim_enterSLEEPMode+0x48>
	{
		Sim_send("AT+CSCLK=1\r", strlen("AT+CSCLK=1\r"));
 80016fc:	210b      	movs	r1, #11
 80016fe:	4818      	ldr	r0, [pc, #96]	; (8001760 <Sim_enterSLEEPMode+0x70>)
 8001700:	f7ff f860 	bl	80007c4 <Sim_send>
		m_ret = Sim_checkResponseWith("OK", 2, 5000);
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	2102      	movs	r1, #2
 800170a:	4816      	ldr	r0, [pc, #88]	; (8001764 <Sim_enterSLEEPMode+0x74>)
 800170c:	f7ff f8be 	bl	800088c <Sim_checkResponseWith>
 8001710:	4603      	mov	r3, r0
 8001712:	71bb      	strb	r3, [r7, #6]
		__NOP();
 8001714:	bf00      	nop
		if(m_ret == RET_OK)
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10a      	bne.n	8001732 <Sim_enterSLEEPMode+0x42>
		{
			//DTR high
			HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2101      	movs	r1, #1
 8001720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001724:	f001 fd0e 	bl	8003144 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172c:	f001 f80c 	bl	8002748 <HAL_Delay>
			break;
 8001730:	e005      	b.n	800173e <Sim_enterSLEEPMode+0x4e>
	for(uint8_t i = 0; i < 2; i++)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	3301      	adds	r3, #1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d9de      	bls.n	80016fc <Sim_enterSLEEPMode+0xc>
		}
	}
	if(Sim_checkOK() == RET_FAIL)
 800173e:	f7ff f8cf 	bl	80008e0 <Sim_checkOK>
 8001742:	4603      	mov	r3, r0
 8001744:	2b01      	cmp	r3, #1
 8001746:	d103      	bne.n	8001750 <Sim_enterSLEEPMode+0x60>
	{
		Sim_SleepMode = true;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <Sim_enterSLEEPMode+0x78>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Sim_SleepMode = false;
	}
}
 800174e:	e002      	b.n	8001756 <Sim_enterSLEEPMode+0x66>
		Sim_SleepMode = false;
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <Sim_enterSLEEPMode+0x78>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	080079b0 	.word	0x080079b0
 8001764:	080079bc 	.word	0x080079bc
 8001768:	20000969 	.word	0x20000969

0800176c <Sim_exitSLEEPMode>:

void Sim_exitSLEEPMode(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	Sim_SleepMode = true; //Sim van con o che do sleep mode
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <Sim_exitSLEEPMode+0x34>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
	//DTR low
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2101      	movs	r1, #1
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f001 fce1 	bl	8003144 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001786:	f000 ffdf 	bl	8002748 <HAL_Delay>
	if(Sim_checkOK() == RET_OK)
 800178a:	f7ff f8a9 	bl	80008e0 <Sim_checkOK>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <Sim_exitSLEEPMode+0x2e>
	{
		Sim_SleepMode = false;
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <Sim_exitSLEEPMode+0x34>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
	}
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000969 	.word	0x20000969

080017a4 <Sim_resetSIM>:

void Sim_resetSIM(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	//DTR high
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2101      	movs	r1, #1
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f001 fcc8 	bl	8003144 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017b4:	2064      	movs	r0, #100	; 0x64
 80017b6:	f000 ffc7 	bl	8002748 <HAL_Delay>
	//DTR low
	HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2101      	movs	r1, #1
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f001 fcbf 	bl	8003144 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80017c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ca:	f000 ffbd 	bl	8002748 <HAL_Delay>
	if(Sim_checkOK() == RET_OK) //SIM response
 80017ce:	f7ff f887 	bl	80008e0 <Sim_checkOK>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d134      	bne.n	8001842 <Sim_resetSIM+0x9e>
	{
		/*turn off*/
		//pull down PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2108      	movs	r1, #8
 80017dc:	483f      	ldr	r0, [pc, #252]	; (80018dc <Sim_resetSIM+0x138>)
 80017de:	f001 fcb1 	bl	8003144 <HAL_GPIO_WritePin>
		//wait at least 2.5s
		HAL_Delay(3000);
 80017e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017e6:	f000 ffaf 	bl	8002748 <HAL_Delay>
		//release PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2108      	movs	r1, #8
 80017ee:	483b      	ldr	r0, [pc, #236]	; (80018dc <Sim_resetSIM+0x138>)
 80017f0:	f001 fca8 	bl	8003144 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 80017f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80017f8:	f000 ffa6 	bl	8002748 <HAL_Delay>
		HAL_Delay(5000);
 80017fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001800:	f000 ffa2 	bl	8002748 <HAL_Delay>
		/* turn on power*/
		//pull down PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2108      	movs	r1, #8
 8001808:	4834      	ldr	r0, [pc, #208]	; (80018dc <Sim_resetSIM+0x138>)
 800180a:	f001 fc9b 	bl	8003144 <HAL_GPIO_WritePin>
		//wait at least 0.5s
		HAL_Delay(3000);
 800180e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001812:	f000 ff99 	bl	8002748 <HAL_Delay>
		//release PWRKEY
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2108      	movs	r1, #8
 800181a:	4830      	ldr	r0, [pc, #192]	; (80018dc <Sim_resetSIM+0x138>)
 800181c:	f001 fc92 	bl	8003144 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8001820:	f241 3088 	movw	r0, #5000	; 0x1388
 8001824:	f000 ff90 	bl	8002748 <HAL_Delay>
		HAL_Delay(5000);
 8001828:	f241 3088 	movw	r0, #5000	; 0x1388
 800182c:	f000 ff8c 	bl	8002748 <HAL_Delay>
		HAL_Delay(5000);
 8001830:	f241 3088 	movw	r0, #5000	; 0x1388
 8001834:	f000 ff88 	bl	8002748 <HAL_Delay>
		HAL_Delay(5000);
 8001838:	f241 3088 	movw	r0, #5000	; 0x1388
 800183c:	f000 ff84 	bl	8002748 <HAL_Delay>
			HAL_Delay(5000);
			HAL_Delay(5000);
			HAL_Delay(5000);
		}
	}
}
 8001840:	e04a      	b.n	80018d8 <Sim_resetSIM+0x134>
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2108      	movs	r1, #8
 8001846:	4825      	ldr	r0, [pc, #148]	; (80018dc <Sim_resetSIM+0x138>)
 8001848:	f001 fc7c 	bl	8003144 <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 800184c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001850:	f000 ff7a 	bl	8002748 <HAL_Delay>
		HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2108      	movs	r1, #8
 8001858:	4820      	ldr	r0, [pc, #128]	; (80018dc <Sim_resetSIM+0x138>)
 800185a:	f001 fc73 	bl	8003144 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 800185e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001862:	f000 ff71 	bl	8002748 <HAL_Delay>
		HAL_Delay(5000);
 8001866:	f241 3088 	movw	r0, #5000	; 0x1388
 800186a:	f000 ff6d 	bl	8002748 <HAL_Delay>
		HAL_Delay(5000);
 800186e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001872:	f000 ff69 	bl	8002748 <HAL_Delay>
		HAL_Delay(5000);
 8001876:	f241 3088 	movw	r0, #5000	; 0x1388
 800187a:	f000 ff65 	bl	8002748 <HAL_Delay>
		Sim_exitSLEEPMode();
 800187e:	f7ff ff75 	bl	800176c <Sim_exitSLEEPMode>
		Sim_checkOK();
 8001882:	f7ff f82d 	bl	80008e0 <Sim_checkOK>
		HAL_Delay(1000);
 8001886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800188a:	f000 ff5d 	bl	8002748 <HAL_Delay>
		if(Sim_checkOK() == RET_OK) //SIM ON
 800188e:	f7ff f827 	bl	80008e0 <Sim_checkOK>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <Sim_resetSIM+0xf8>
			__NOP();
 8001898:	bf00      	nop
}
 800189a:	e01d      	b.n	80018d8 <Sim_resetSIM+0x134>
			HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	2108      	movs	r1, #8
 80018a0:	480e      	ldr	r0, [pc, #56]	; (80018dc <Sim_resetSIM+0x138>)
 80018a2:	f001 fc4f 	bl	8003144 <HAL_GPIO_WritePin>
			HAL_Delay(3000);
 80018a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018aa:	f000 ff4d 	bl	8002748 <HAL_Delay>
			HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2108      	movs	r1, #8
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <Sim_resetSIM+0x138>)
 80018b4:	f001 fc46 	bl	8003144 <HAL_GPIO_WritePin>
			HAL_Delay(5000);
 80018b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80018bc:	f000 ff44 	bl	8002748 <HAL_Delay>
			HAL_Delay(5000);
 80018c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80018c4:	f000 ff40 	bl	8002748 <HAL_Delay>
			HAL_Delay(5000);
 80018c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80018cc:	f000 ff3c 	bl	8002748 <HAL_Delay>
			HAL_Delay(5000);
 80018d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80018d4:	f000 ff38 	bl	8002748 <HAL_Delay>
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	48000800 	.word	0x48000800

080018e0 <Sim_restartControl>:

void Sim_restartControl(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0a0      	sub	sp, #128	; 0x80
 80018e4:	af00      	add	r7, sp, #0
	bool isResetSystem = false;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	char Sim_PhoneNumb[15] = {0};
 80018ec:	2300      	movs	r3, #0
 80018ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80018f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	f8c3 2007 	str.w	r2, [r3, #7]
	STATUS m_ret;
	m_ret = Sim_checkResponseWith("+CMTI:", 3, 5000);
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	2103      	movs	r1, #3
 8001904:	484d      	ldr	r0, [pc, #308]	; (8001a3c <Sim_restartControl+0x15c>)
 8001906:	f7fe ffc1 	bl	800088c <Sim_checkResponseWith>
 800190a:	4603      	mov	r3, r0
 800190c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	__NOP();
 8001910:	bf00      	nop
	if(m_ret == RET_OK)
 8001912:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 808b 	bne.w	8001a32 <Sim_restartControl+0x152>
	{
		char Sim_Cmd[100] = {0};
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	2260      	movs	r2, #96	; 0x60
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f004 fc81 	bl	8006230 <memset>
		Sim_exitSLEEPMode();
 800192e:	f7ff ff1d 	bl	800176c <Sim_exitSLEEPMode>
		for(uint8_t i = 1; i < 11; i++)
 8001932:	2301      	movs	r3, #1
 8001934:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001938:	e061      	b.n	80019fe <Sim_restartControl+0x11e>
		{
			sprintf(Sim_Cmd,"AT+CMGR=%d\r",i);
 800193a:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	493f      	ldr	r1, [pc, #252]	; (8001a40 <Sim_restartControl+0x160>)
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fc7c 	bl	8006240 <siprintf>
			//Doc noi dung tin nhan
			Sim_send(Sim_Cmd, strlen(Sim_Cmd));
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc40 	bl	80001d0 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe ff33 	bl	80007c4 <Sim_send>
			m_ret = Sim_checkResponseWith("RESET", 3, 3000);
 800195e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001962:	2103      	movs	r1, #3
 8001964:	4837      	ldr	r0, [pc, #220]	; (8001a44 <Sim_restartControl+0x164>)
 8001966:	f7fe ff91 	bl	800088c <Sim_checkResponseWith>
 800196a:	4603      	mov	r3, r0
 800196c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			char* tok = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	67bb      	str	r3, [r7, #120]	; 0x78
			tok = strtok((char*)Sim_Rxdata,"\"");
 8001974:	4934      	ldr	r1, [pc, #208]	; (8001a48 <Sim_restartControl+0x168>)
 8001976:	4835      	ldr	r0, [pc, #212]	; (8001a4c <Sim_restartControl+0x16c>)
 8001978:	f004 fca2 	bl	80062c0 <strtok>
 800197c:	67b8      	str	r0, [r7, #120]	; 0x78
			if(tok != NULL)
 800197e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001980:	2b00      	cmp	r3, #0
 8001982:	d037      	beq.n	80019f4 <Sim_restartControl+0x114>
			{
				while(tok != NULL)
 8001984:	e02f      	b.n	80019e6 <Sim_restartControl+0x106>
				{
					tok = strtok(NULL,"\"");
 8001986:	4930      	ldr	r1, [pc, #192]	; (8001a48 <Sim_restartControl+0x168>)
 8001988:	2000      	movs	r0, #0
 800198a:	f004 fc99 	bl	80062c0 <strtok>
 800198e:	67b8      	str	r0, [r7, #120]	; 0x78
					if(strstr(tok,"+84") != NULL)
 8001990:	492f      	ldr	r1, [pc, #188]	; (8001a50 <Sim_restartControl+0x170>)
 8001992:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001994:	f004 fc7c 	bl	8006290 <strstr>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d012      	beq.n	80019c4 <Sim_restartControl+0xe4>
					{
						memset(Sim_PhoneNumb,0,strlen(Sim_PhoneNumb));
 800199e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fc14 	bl	80001d0 <strlen>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f004 fc3d 	bl	8006230 <memset>
						strcpy(Sim_PhoneNumb,tok);
 80019b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fc5f 	bl	8006280 <strcpy>
 80019c2:	e010      	b.n	80019e6 <Sim_restartControl+0x106>
					}
					else if(strstr(tok,"RESET") != NULL)
 80019c4:	491f      	ldr	r1, [pc, #124]	; (8001a44 <Sim_restartControl+0x164>)
 80019c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80019c8:	f004 fc62 	bl	8006290 <strstr>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <Sim_restartControl+0x106>
					{
						Sim_sendMess(Sim_PhoneNumb, "Reset he thong thanh cong");
 80019d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019d6:	491f      	ldr	r1, [pc, #124]	; (8001a54 <Sim_restartControl+0x174>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f841 	bl	8001a60 <Sim_sendMess>
						isResetSystem = true;
 80019de:	2301      	movs	r3, #1
 80019e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						break; //break while
 80019e4:	e002      	b.n	80019ec <Sim_restartControl+0x10c>
				while(tok != NULL)
 80019e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1cc      	bne.n	8001986 <Sim_restartControl+0xa6>
					}
				}
				if(isResetSystem == true)
 80019ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <Sim_restartControl+0x128>
		for(uint8_t i = 1; i < 11; i++)
 80019f4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80019f8:	3301      	adds	r3, #1
 80019fa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80019fe:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d999      	bls.n	800193a <Sim_restartControl+0x5a>
 8001a06:	e000      	b.n	8001a0a <Sim_restartControl+0x12a>
				{
					break; //break for
 8001a08:	bf00      	nop
				}
			}
		}
		Sim_send("AT+CMGD=1,4\r",strlen("AT+CMGD=1,4\r"));
 8001a0a:	210c      	movs	r1, #12
 8001a0c:	4812      	ldr	r0, [pc, #72]	; (8001a58 <Sim_restartControl+0x178>)
 8001a0e:	f7fe fed9 	bl	80007c4 <Sim_send>
		m_ret = Sim_checkResponseWith("OK", 2, 5000);
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	2102      	movs	r1, #2
 8001a18:	4810      	ldr	r0, [pc, #64]	; (8001a5c <Sim_restartControl+0x17c>)
 8001a1a:	f7fe ff37 	bl	800088c <Sim_checkResponseWith>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		__NOP();
 8001a24:	bf00      	nop
		if(isResetSystem == true)
 8001a26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <Sim_restartControl+0x152>
		{
			NVIC_SystemReset();
 8001a2e:	f7fe fffd 	bl	8000a2c <__NVIC_SystemReset>
		}
	}
}
 8001a32:	bf00      	nop
 8001a34:	3780      	adds	r7, #128	; 0x80
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	080079c0 	.word	0x080079c0
 8001a40:	080079c8 	.word	0x080079c8
 8001a44:	080079d4 	.word	0x080079d4
 8001a48:	080079dc 	.word	0x080079dc
 8001a4c:	20000578 	.word	0x20000578
 8001a50:	080079e0 	.word	0x080079e0
 8001a54:	080079e4 	.word	0x080079e4
 8001a58:	08007a00 	.word	0x08007a00
 8001a5c:	080079bc 	.word	0x080079bc

08001a60 <Sim_sendMess>:

void Sim_sendMess(char* phonenumber, char* content)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b096      	sub	sp, #88	; 0x58
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	char Sim_Cmd1[40] = {0};
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a72:	2224      	movs	r2, #36	; 0x24
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 fbda 	bl	8006230 <memset>
	sprintf(Sim_Cmd1,"AT+CMGS=\"%s\"\r",phonenumber);
 8001a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	491d      	ldr	r1, [pc, #116]	; (8001af8 <Sim_sendMess+0x98>)
 8001a84:	4618      	mov	r0, r3
 8001a86:	f004 fbdb 	bl	8006240 <siprintf>
	char Sim_Cmd2[40] = {0};
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 fbca 	bl	8006230 <memset>
	sprintf(Sim_Cmd2,"%s\x1A",content);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	4916      	ldr	r1, [pc, #88]	; (8001afc <Sim_sendMess+0x9c>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 fbcb 	bl	8006240 <siprintf>
	Sim_send(Sim_Cmd1, strlen(Sim_Cmd1));
 8001aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fb8e 	bl	80001d0 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fe80 	bl	80007c4 <Sim_send>
	if(Sim_checkResponseWith(">",2,5000) == RET_OK)
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	2102      	movs	r1, #2
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <Sim_sendMess+0xa0>)
 8001acc:	f7fe fede 	bl	800088c <Sim_checkResponseWith>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <Sim_sendMess+0x90>
	{
		Sim_send(Sim_Cmd2, strlen(Sim_Cmd2));
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fb78 	bl	80001d0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fe6a 	bl	80007c4 <Sim_send>
	}
}
 8001af0:	bf00      	nop
 8001af2:	3758      	adds	r7, #88	; 0x58
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	08007a10 	.word	0x08007a10
 8001afc:	08007a20 	.word	0x08007a20
 8001b00:	08007a24 	.word	0x08007a24

08001b04 <RTC_initAlarm>:

bool RTC_initAlarm(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	71bb      	strb	r3, [r7, #6]
 8001b12:	4613      	mov	r3, r2
 8001b14:	717b      	strb	r3, [r7, #5]
	minutes = (minutes/RTC_ALARM)*RTC_ALARM + RTC_ALARM;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <RTC_initAlarm+0xbc>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	79ba      	ldrb	r2, [r7, #6]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <RTC_initAlarm+0xbc>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	fb12 f303 	smulbb	r3, r2, r3
 8001b2e:	71bb      	strb	r3, [r7, #6]
	if(minutes > 59)
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	2b3b      	cmp	r3, #59	; 0x3b
 8001b34:	d915      	bls.n	8001b62 <RTC_initAlarm+0x5e>
	{
		if(hours+1 > 23)
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b16      	cmp	r3, #22
 8001b3a:	d90f      	bls.n	8001b5c <RTC_initAlarm+0x58>
		{
			hours = (hours+1)%24;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <RTC_initAlarm+0xc0>)
 8001b42:	fb83 1302 	smull	r1, r3, r3, r2
 8001b46:	1099      	asrs	r1, r3, #2
 8001b48:	17d3      	asrs	r3, r2, #31
 8001b4a:	1ac9      	subs	r1, r1, r3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	440b      	add	r3, r1
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	1ad1      	subs	r1, r2, r3
 8001b56:	460b      	mov	r3, r1
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	e002      	b.n	8001b62 <RTC_initAlarm+0x5e>
		}
		else hours = hours+1;
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		hours = hours;
	}
	minutes = minutes%60;
 8001b62:	79ba      	ldrb	r2, [r7, #6]
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <RTC_initAlarm+0xc4>)
 8001b66:	fba3 1302 	umull	r1, r3, r3, r2
 8001b6a:	0959      	lsrs	r1, r3, #5
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a5b      	subs	r3, r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	71bb      	strb	r3, [r7, #6]
	seconds = seconds%60;
 8001b78:	797a      	ldrb	r2, [r7, #5]
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <RTC_initAlarm+0xc4>)
 8001b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b80:	0959      	lsrs	r1, r3, #5
 8001b82:	460b      	mov	r3, r1
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a5b      	subs	r3, r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	717b      	strb	r3, [r7, #5]
	userAlarm.AlarmTime.Hours = hours;
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <RTC_initAlarm+0xc8>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	7013      	strb	r3, [r2, #0]
	userAlarm.AlarmTime.Minutes = minutes;
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <RTC_initAlarm+0xc8>)
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	7053      	strb	r3, [r2, #1]
	userAlarm.AlarmTime.Seconds = 0;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <RTC_initAlarm+0xc8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	709a      	strb	r2, [r3, #2]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &userAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	490a      	ldr	r1, [pc, #40]	; (8001bcc <RTC_initAlarm+0xc8>)
 8001ba4:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <RTC_initAlarm+0xcc>)
 8001ba6:	f003 f89d 	bl	8004ce4 <HAL_RTC_SetAlarm_IT>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <RTC_initAlarm+0xb0>
	{
		return false;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <RTC_initAlarm+0xb2>
	}
	return true;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200000be 	.word	0x200000be
 8001bc4:	2aaaaaab 	.word	0x2aaaaaab
 8001bc8:	88888889 	.word	0x88888889
 8001bcc:	20000b7c 	.word	0x20000b7c
 8001bd0:	20000fd0 	.word	0x20000fd0

08001bd4 <RTC_updateUserTime>:

void RTC_updateUserTime(void)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
	bool isCorrectTime = false;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	77fb      	strb	r3, [r7, #31]
	RTC_TimeTypeDef m_Time = currentTime;
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <RTC_updateUserTime+0x130>)
 8001be0:	f107 0408 	add.w	r4, r7, #8
 8001be4:	461d      	mov	r5, r3
 8001be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	6023      	str	r3, [r4, #0]
	RTC_DateTypeDef m_Date = currentDate;
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <RTC_updateUserTime+0x134>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	607b      	str	r3, [r7, #4]
	TimeStamp.year -= 2000;
 8001bf4:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001bf6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001bf8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c00:	869a      	strh	r2, [r3, #52]	; 0x34
	TimeStamp.hour += 7;
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001c08:	3307      	adds	r3, #7
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c0e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if(TimeStamp.year < 99)
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c14:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001c16:	2b62      	cmp	r3, #98	; 0x62
 8001c18:	d829      	bhi.n	8001c6e <RTC_updateUserTime+0x9a>
	{
		if((TimeStamp.mon > 0) && (TimeStamp.mon < 13))
 8001c1a:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c1c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d024      	beq.n	8001c6e <RTC_updateUserTime+0x9a>
 8001c24:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c26:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d81f      	bhi.n	8001c6e <RTC_updateUserTime+0x9a>
		{
			if((TimeStamp.date > 0) && (TimeStamp.date < 32))
 8001c2e:	4b37      	ldr	r3, [pc, #220]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c30:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01a      	beq.n	8001c6e <RTC_updateUserTime+0x9a>
 8001c38:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c3e:	2b1f      	cmp	r3, #31
 8001c40:	d815      	bhi.n	8001c6e <RTC_updateUserTime+0x9a>
			{
				if((TimeStamp.hour > 6) && (TimeStamp.hour < 31)) //7->30
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d910      	bls.n	8001c6e <RTC_updateUserTime+0x9a>
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c4e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001c52:	2b1e      	cmp	r3, #30
 8001c54:	d80b      	bhi.n	8001c6e <RTC_updateUserTime+0x9a>
				{
					if(TimeStamp.min < 60)
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c58:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001c5c:	2b3b      	cmp	r3, #59	; 0x3b
 8001c5e:	d806      	bhi.n	8001c6e <RTC_updateUserTime+0x9a>
					{
						if(TimeStamp.sec < 60)
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c66:	2b3b      	cmp	r3, #59	; 0x3b
 8001c68:	d801      	bhi.n	8001c6e <RTC_updateUserTime+0x9a>
						{
							isCorrectTime = true;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
		}
	}
	if(isCorrectTime)
 8001c6e:	7ffb      	ldrb	r3, [r7, #31]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d042      	beq.n	8001cfa <RTC_updateUserTime+0x126>
	{
		//cap nhat ngay thang cho DateToUpdate
		m_Date.Date = TimeStamp.date;
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c7a:	71bb      	strb	r3, [r7, #6]
		m_Date.Month = TimeStamp.mon;
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c7e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001c82:	717b      	strb	r3, [r7, #5]
		m_Date.Year = TimeStamp.year;
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c86:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	71fb      	strb	r3, [r7, #7]
		if(TimeStamp.hour > 23)
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001c92:	2b17      	cmp	r3, #23
 8001c94:	d90c      	bls.n	8001cb0 <RTC_updateUserTime+0xdc>
		{
			TimeStamp.hour = TimeStamp.hour - 24;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001c98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001c9c:	3b18      	subs	r3, #24
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001ca2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			RTC_updateUserDate(&m_Date);
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f833 	bl	8001d14 <RTC_updateUserDate>
 8001cae:	e005      	b.n	8001cbc <RTC_updateUserTime+0xe8>
		}
		else
		{
			HAL_RTC_SetDate(&hrtc, &m_Date, RTC_FORMAT_BIN);
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4816      	ldr	r0, [pc, #88]	; (8001d10 <RTC_updateUserTime+0x13c>)
 8001cb8:	f002 ff1e 	bl	8004af8 <HAL_RTC_SetDate>
		}
		m_Time.Hours = TimeStamp.hour;
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001cbe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001cc2:	723b      	strb	r3, [r7, #8]
		m_Time.Minutes = TimeStamp.min;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001cc6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001cca:	727b      	strb	r3, [r7, #9]
		m_Time.Seconds = TimeStamp.sec;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <RTC_updateUserTime+0x138>)
 8001cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd2:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetTime(&hrtc, &m_Time, RTC_FORMAT_BIN);
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <RTC_updateUserTime+0x13c>)
 8001cde:	f002 fdf0 	bl	80048c2 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &m_Date, RTC_FORMAT_BIN);
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <RTC_updateUserTime+0x13c>)
 8001cea:	f002 ff05 	bl	8004af8 <HAL_RTC_SetDate>
		RTC_initAlarm(m_Time.Hours, m_Time.Minutes, 0);
 8001cee:	7a3b      	ldrb	r3, [r7, #8]
 8001cf0:	7a79      	ldrb	r1, [r7, #9]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff05 	bl	8001b04 <RTC_initAlarm>
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdb0      	pop	{r4, r5, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000b64 	.word	0x20000b64
 8001d08:	20000b78 	.word	0x20000b78
 8001d0c:	20000f94 	.word	0x20000f94
 8001d10:	20000fd0 	.word	0x20000fd0

08001d14 <RTC_updateUserDate>:

void RTC_updateUserDate(RTC_DateTypeDef* datetime)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	if ((datetime->Month == 1U) || (datetime->Month == 3U) || (datetime->Month == 5U) || (datetime->Month == 7U) || \
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d017      	beq.n	8001d54 <RTC_updateUserDate+0x40>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d013      	beq.n	8001d54 <RTC_updateUserDate+0x40>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d00f      	beq.n	8001d54 <RTC_updateUserDate+0x40>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	2b07      	cmp	r3, #7
 8001d3a:	d00b      	beq.n	8001d54 <RTC_updateUserDate+0x40>
        (datetime->Month == 8U) || (datetime->Month == 10U) || (datetime->Month == 12U))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	785b      	ldrb	r3, [r3, #1]
	if ((datetime->Month == 1U) || (datetime->Month == 3U) || (datetime->Month == 5U) || (datetime->Month == 7U) || \
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d007      	beq.n	8001d54 <RTC_updateUserDate+0x40>
        (datetime->Month == 8U) || (datetime->Month == 10U) || (datetime->Month == 12U))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	785b      	ldrb	r3, [r3, #1]
 8001d48:	2b0a      	cmp	r3, #10
 8001d4a:	d003      	beq.n	8001d54 <RTC_updateUserDate+0x40>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d125      	bne.n	8001da0 <RTC_updateUserDate+0x8c>
	{
		if (datetime->Date < 31U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	789b      	ldrb	r3, [r3, #2]
 8001d58:	2b1e      	cmp	r3, #30
 8001d5a:	d806      	bhi.n	8001d6a <RTC_updateUserDate+0x56>
		{
			datetime->Date++;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	789b      	ldrb	r3, [r3, #2]
 8001d60:	3301      	adds	r3, #1
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 31U)
 8001d68:	e079      	b.n	8001e5e <RTC_updateUserDate+0x14a>
		}
		/* Date structure member: day = 31 */
		else
		{
			if (datetime->Month != 12U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	785b      	ldrb	r3, [r3, #1]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d009      	beq.n	8001d86 <RTC_updateUserDate+0x72>
			{
				datetime->Month++;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	785b      	ldrb	r3, [r3, #1]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 31U)
 8001d84:	e06b      	b.n	8001e5e <RTC_updateUserDate+0x14a>
			}
			/* Date structure member: day = 31 & month =12 */
			else
			{
				datetime->Month = 1U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	709a      	strb	r2, [r3, #2]
				datetime->Year++;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	78db      	ldrb	r3, [r3, #3]
 8001d96:	3301      	adds	r3, #1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	70da      	strb	r2, [r3, #3]
		if (datetime->Date < 31U)
 8001d9e:	e05e      	b.n	8001e5e <RTC_updateUserDate+0x14a>
			}
		}
	}
	else if ((datetime->Month == 4U) || (datetime->Month == 6U) || (datetime->Month == 9U) || (datetime->Month == 11U))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	785b      	ldrb	r3, [r3, #1]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d00b      	beq.n	8001dc0 <RTC_updateUserDate+0xac>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2b06      	cmp	r3, #6
 8001dae:	d007      	beq.n	8001dc0 <RTC_updateUserDate+0xac>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	2b09      	cmp	r3, #9
 8001db6:	d003      	beq.n	8001dc0 <RTC_updateUserDate+0xac>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	2b0b      	cmp	r3, #11
 8001dbe:	d114      	bne.n	8001dea <RTC_updateUserDate+0xd6>
	{
		if (datetime->Date < 30U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	789b      	ldrb	r3, [r3, #2]
 8001dc4:	2b1d      	cmp	r3, #29
 8001dc6:	d806      	bhi.n	8001dd6 <RTC_updateUserDate+0xc2>
		{
			datetime->Date++;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	789b      	ldrb	r3, [r3, #2]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 30U)
 8001dd4:	e043      	b.n	8001e5e <RTC_updateUserDate+0x14a>
		}
		/* Date structure member: day = 30 */
		else
		{
			datetime->Month++;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	705a      	strb	r2, [r3, #1]
			datetime->Date = 1U;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	709a      	strb	r2, [r3, #2]
		if (datetime->Date < 30U)
 8001de8:	e039      	b.n	8001e5e <RTC_updateUserDate+0x14a>
		}
	}
	else if (datetime->Month == 2U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d135      	bne.n	8001e5e <RTC_updateUserDate+0x14a>
	{
		if (datetime->Date < 28U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	789b      	ldrb	r3, [r3, #2]
 8001df6:	2b1b      	cmp	r3, #27
 8001df8:	d806      	bhi.n	8001e08 <RTC_updateUserDate+0xf4>
		{
			datetime->Date++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	789b      	ldrb	r3, [r3, #2]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	709a      	strb	r2, [r3, #2]
 8001e06:	e02a      	b.n	8001e5e <RTC_updateUserDate+0x14a>
		}
		else if (datetime->Date == 28U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	789b      	ldrb	r3, [r3, #2]
 8001e0c:	2b1c      	cmp	r3, #28
 8001e0e:	d119      	bne.n	8001e44 <RTC_updateUserDate+0x130>
		{
			/* Leap year */
			if (RTC_isLeapYear(datetime->Year))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	78db      	ldrb	r3, [r3, #3]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f82c 	bl	8001e74 <RTC_isLeapYear>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <RTC_updateUserDate+0x11c>
			{
				datetime->Date++;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	789b      	ldrb	r3, [r3, #2]
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	709a      	strb	r2, [r3, #2]
 8001e2e:	e016      	b.n	8001e5e <RTC_updateUserDate+0x14a>
			}
			else
			{
				datetime->Month++;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	3301      	adds	r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	705a      	strb	r2, [r3, #1]
				datetime->Date = 1U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	709a      	strb	r2, [r3, #2]
 8001e42:	e00c      	b.n	8001e5e <RTC_updateUserDate+0x14a>
			}
		}
		else if (datetime->Date == 29U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	789b      	ldrb	r3, [r3, #2]
 8001e48:	2b1d      	cmp	r3, #29
 8001e4a:	d108      	bne.n	8001e5e <RTC_updateUserDate+0x14a>
		{
			datetime->Month++;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	705a      	strb	r2, [r3, #1]
			datetime->Date = 1U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	709a      	strb	r2, [r3, #2]
		}
	}
	HAL_RTC_SetDate(&hrtc, datetime, RTC_FORMAT_BIN);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <RTC_updateUserDate+0x15c>)
 8001e64:	f002 fe48 	bl	8004af8 <HAL_RTC_SetDate>
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000fd0 	.word	0x20000fd0

08001e74 <RTC_isLeapYear>:

bool RTC_isLeapYear(uint16_t y)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
  if((y + 2000) % 4 != 0)
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <RTC_isLeapYear+0x1c>
  {
    return false;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e023      	b.n	8001ed8 <RTC_isLeapYear+0x64>
  }
  else if((y + 2000) % 100 != 0)
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <RTC_isLeapYear+0x70>)
 8001e98:	fb83 1302 	smull	r1, r3, r3, r2
 8001e9c:	1159      	asrs	r1, r3, #5
 8001e9e:	17d3      	asrs	r3, r2, #31
 8001ea0:	1acb      	subs	r3, r1, r3
 8001ea2:	2164      	movs	r1, #100	; 0x64
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <RTC_isLeapYear+0x3e>
  {
    return true;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e012      	b.n	8001ed8 <RTC_isLeapYear+0x64>
  }
  else if((y + 2000) % 400 != 0)
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <RTC_isLeapYear+0x70>)
 8001eba:	fb83 1302 	smull	r1, r3, r3, r2
 8001ebe:	11d9      	asrs	r1, r3, #7
 8001ec0:	17d3      	asrs	r3, r2, #31
 8001ec2:	1acb      	subs	r3, r1, r3
 8001ec4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <RTC_isLeapYear+0x62>
  {
    return false;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <RTC_isLeapYear+0x64>
  }
  else return true;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	51eb851f 	.word	0x51eb851f

08001ee8 <Flash_init>:

void Flash_init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	/* Flash init */
	if(Flash_ReadIntType(WR_ADDR) == 0xFFFFFFFF)
 8001eec:	482d      	ldr	r0, [pc, #180]	; (8001fa4 <Flash_init+0xbc>)
 8001eee:	f7fe fa1e 	bl	800032e <Flash_ReadIntType>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d106      	bne.n	8001f08 <Flash_init+0x20>
	{
		Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <Flash_init+0xc0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4619      	mov	r1, r3
 8001f02:	4828      	ldr	r0, [pc, #160]	; (8001fa4 <Flash_init+0xbc>)
 8001f04:	f7fe fa01 	bl	800030a <Flash_WriteIntType>
	}
	if(Flash_ReadIntType(RD_ADDR) == 0xFFFFFFFF)
 8001f08:	4828      	ldr	r0, [pc, #160]	; (8001fac <Flash_init+0xc4>)
 8001f0a:	f7fe fa10 	bl	800032e <Flash_ReadIntType>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d106      	bne.n	8001f24 <Flash_init+0x3c>
	{
		Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <Flash_init+0xc8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <Flash_init+0xc4>)
 8001f20:	f7fe f9f3 	bl	800030a <Flash_WriteIntType>
	}
	if(Flash_ReadIntType(PG_ADDR) == 0xFFFFFFFF)
 8001f24:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <Flash_init+0xcc>)
 8001f26:	f7fe fa02 	bl	800032e <Flash_ReadIntType>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d106      	bne.n	8001f40 <Flash_init+0x58>
	{
		Flash_WriteIntType(PG_ADDR, PAGE_ADDR, FLASH_TYPEPROGRAM_HALFWORD);
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <Flash_init+0xd0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2201      	movs	r2, #1
 8001f38:	4619      	mov	r1, r3
 8001f3a:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <Flash_init+0xcc>)
 8001f3c:	f7fe f9e5 	bl	800030a <Flash_WriteIntType>
	}
	WRITE_DATA_ADDR = Flash_ReadIntType(WR_ADDR);
 8001f40:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <Flash_init+0xbc>)
 8001f42:	f7fe f9f4 	bl	800032e <Flash_ReadIntType>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <Flash_init+0xc0>)
 8001f4a:	6013      	str	r3, [r2, #0]
	READ_DATA_ADDR = Flash_ReadIntType(RD_ADDR);
 8001f4c:	4817      	ldr	r0, [pc, #92]	; (8001fac <Flash_init+0xc4>)
 8001f4e:	f7fe f9ee 	bl	800032e <Flash_ReadIntType>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <Flash_init+0xc8>)
 8001f56:	6013      	str	r3, [r2, #0]
	PAGE_ADDR = Flash_ReadIntType(PG_ADDR);
 8001f58:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <Flash_init+0xcc>)
 8001f5a:	f7fe f9e8 	bl	800032e <Flash_ReadIntType>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <Flash_init+0xd0>)
 8001f62:	6013      	str	r3, [r2, #0]
	if(Flash_ReadIntType(MODE_RTC_ADDR) == 0xFFFFFFFF)
 8001f64:	4815      	ldr	r0, [pc, #84]	; (8001fbc <Flash_init+0xd4>)
 8001f66:	f7fe f9e2 	bl	800032e <Flash_ReadIntType>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d106      	bne.n	8001f80 <Flash_init+0x98>
	{
		Flash_WriteIntType(MODE_RTC_ADDR, RTC_ALARM, FLASH_TYPEPROGRAM_HALFWORD);
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <Flash_init+0xd8>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4810      	ldr	r0, [pc, #64]	; (8001fbc <Flash_init+0xd4>)
 8001f7c:	f7fe f9c5 	bl	800030a <Flash_WriteIntType>
	}
	RTC_ALARM = Flash_ReadIntType(MODE_RTC_ADDR);
 8001f80:	480e      	ldr	r0, [pc, #56]	; (8001fbc <Flash_init+0xd4>)
 8001f82:	f7fe f9d4 	bl	800032e <Flash_ReadIntType>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <Flash_init+0xd8>)
 8001f8c:	701a      	strb	r2, [r3, #0]
	RTC_initAlarm(userAlarm.AlarmTime.Hours,userAlarm.AlarmTime.Minutes,0);
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <Flash_init+0xdc>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <Flash_init+0xdc>)
 8001f94:	7851      	ldrb	r1, [r2, #1]
 8001f96:	2200      	movs	r2, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fdb3 	bl	8001b04 <RTC_initAlarm>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	08010c00 	.word	0x08010c00
 8001fa8:	200000f0 	.word	0x200000f0
 8001fac:	08011000 	.word	0x08011000
 8001fb0:	200000f4 	.word	0x200000f4
 8001fb4:	08010800 	.word	0x08010800
 8001fb8:	200000f8 	.word	0x200000f8
 8001fbc:	08010400 	.word	0x08010400
 8001fc0:	200000be 	.word	0x200000be
 8001fc4:	20000b7c 	.word	0x20000b7c

08001fc8 <Flash_writeData>:

void Flash_writeData(const char* host, const char* url, const char* data)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
	memset(Flash_DataToWrite,0,strlen(Flash_DataToWrite));
 8001fd4:	484b      	ldr	r0, [pc, #300]	; (8002104 <Flash_writeData+0x13c>)
 8001fd6:	f7fe f8fb 	bl	80001d0 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4848      	ldr	r0, [pc, #288]	; (8002104 <Flash_writeData+0x13c>)
 8001fe2:	f004 f925 	bl	8006230 <memset>
	if((host != NULL) && (url != NULL))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <Flash_writeData+0x3c>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <Flash_writeData+0x3c>
	{
		sprintf(Flash_DataToWrite,"%s|%s|%s",host,url,data);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4943      	ldr	r1, [pc, #268]	; (8002108 <Flash_writeData+0x140>)
 8001ffc:	4841      	ldr	r0, [pc, #260]	; (8002104 <Flash_writeData+0x13c>)
 8001ffe:	f004 f91f 	bl	8006240 <siprintf>
 8002002:	e011      	b.n	8002028 <Flash_writeData+0x60>
	}
	else
	{
		if(strstr(host,Host1) != NULL)
 8002004:	4941      	ldr	r1, [pc, #260]	; (800210c <Flash_writeData+0x144>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f004 f942 	bl	8006290 <strstr>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <Flash_writeData+0x56>
		{
			sprintf(Flash_DataToWrite,"%s||1",data);
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	493e      	ldr	r1, [pc, #248]	; (8002110 <Flash_writeData+0x148>)
 8002016:	483b      	ldr	r0, [pc, #236]	; (8002104 <Flash_writeData+0x13c>)
 8002018:	f004 f912 	bl	8006240 <siprintf>
 800201c:	e004      	b.n	8002028 <Flash_writeData+0x60>
		}
		else
		{
			sprintf(Flash_DataToWrite,"%s||2",data);
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	493c      	ldr	r1, [pc, #240]	; (8002114 <Flash_writeData+0x14c>)
 8002022:	4838      	ldr	r0, [pc, #224]	; (8002104 <Flash_writeData+0x13c>)
 8002024:	f004 f90c 	bl	8006240 <siprintf>
		}
	}
	Flash_Unlock();
 8002028:	f7fe f94d 	bl	80002c6 <Flash_Unlock>
	Flash_WriteDataLen = strlen(Flash_DataToWrite);
 800202c:	4835      	ldr	r0, [pc, #212]	; (8002104 <Flash_writeData+0x13c>)
 800202e:	f7fe f8cf 	bl	80001d0 <strlen>
 8002032:	4603      	mov	r3, r0
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <Flash_writeData+0x150>)
 8002038:	801a      	strh	r2, [r3, #0]
	if((WRITE_DATA_ADDR + Flash_WriteDataLen*2) >= PAGE_ADDR)
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <Flash_writeData+0x150>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	461a      	mov	r2, r3
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <Flash_writeData+0x154>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	441a      	add	r2, r3
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <Flash_writeData+0x158>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d329      	bcc.n	80020a4 <Flash_writeData+0xdc>
	{
		if(PAGE_ADDR == MAX_PAGE_ADDR)
 8002050:	4b33      	ldr	r3, [pc, #204]	; (8002120 <Flash_writeData+0x158>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a33      	ldr	r2, [pc, #204]	; (8002124 <Flash_writeData+0x15c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d10b      	bne.n	8002072 <Flash_writeData+0xaa>
		{
			PAGE_ADDR = MIN_PAGE_ADDR;
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <Flash_writeData+0x158>)
 800205c:	4a32      	ldr	r2, [pc, #200]	; (8002128 <Flash_writeData+0x160>)
 800205e:	601a      	str	r2, [r3, #0]
			WRITE_DATA_ADDR = MIN_DATA_ADDR;
 8002060:	4b2e      	ldr	r3, [pc, #184]	; (800211c <Flash_writeData+0x154>)
 8002062:	4a32      	ldr	r2, [pc, #200]	; (800212c <Flash_writeData+0x164>)
 8002064:	601a      	str	r2, [r3, #0]
			Flash_Erase(WRITE_DATA_ADDR);
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <Flash_writeData+0x154>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe f931 	bl	80002d2 <Flash_Erase>
 8002070:	e005      	b.n	800207e <Flash_writeData+0xb6>
		}
		else
		{
			PAGE_ADDR += 0x800;
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <Flash_writeData+0x158>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800207a:	4a29      	ldr	r2, [pc, #164]	; (8002120 <Flash_writeData+0x158>)
 800207c:	6013      	str	r3, [r2, #0]
		}
		if(READ_DATA_ADDR > WRITE_DATA_ADDR)
 800207e:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <Flash_writeData+0x168>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <Flash_writeData+0x154>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d905      	bls.n	8002096 <Flash_writeData+0xce>
		{
			READ_DATA_ADDR = PAGE_ADDR + 0x10 - 0x800;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <Flash_writeData+0x158>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 8002092:	4a27      	ldr	r2, [pc, #156]	; (8002130 <Flash_writeData+0x168>)
 8002094:	6013      	str	r3, [r2, #0]
		}
		Flash_Unlock();
 8002096:	f7fe f916 	bl	80002c6 <Flash_Unlock>
		Flash_Erase(PAGE_ADDR);
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <Flash_writeData+0x158>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f917 	bl	80002d2 <Flash_Erase>
	}
	Flash_WriteCharType(WRITE_DATA_ADDR, Flash_DataToWrite, FLASH_TYPEPROGRAM_HALFWORD);
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <Flash_writeData+0x154>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	4916      	ldr	r1, [pc, #88]	; (8002104 <Flash_writeData+0x13c>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe f94d 	bl	800034c <Flash_WriteCharType>
	WRITE_DATA_ADDR += Flash_WriteDataLen*2+2;
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <Flash_writeData+0x150>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <Flash_writeData+0x154>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a16      	ldr	r2, [pc, #88]	; (800211c <Flash_writeData+0x154>)
 80020c4:	6013      	str	r3, [r2, #0]
	Flash_Erase(WR_ADDR);
 80020c6:	481b      	ldr	r0, [pc, #108]	; (8002134 <Flash_writeData+0x16c>)
 80020c8:	f7fe f903 	bl	80002d2 <Flash_Erase>
	//Luu PAGE_ADDR, WRITE_DATA_ADDR, READ_DATA_ADDR vao bo nho Flash
	Flash_WriteIntType(RD_ADDR, READ_DATA_ADDR, FLASH_TYPEPROGRAM_WORD);
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <Flash_writeData+0x168>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2202      	movs	r2, #2
 80020d2:	4619      	mov	r1, r3
 80020d4:	4818      	ldr	r0, [pc, #96]	; (8002138 <Flash_writeData+0x170>)
 80020d6:	f7fe f918 	bl	800030a <Flash_WriteIntType>
	Flash_WriteIntType(WR_ADDR, WRITE_DATA_ADDR, FLASH_TYPEPROGRAM_WORD);
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <Flash_writeData+0x154>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2202      	movs	r2, #2
 80020e0:	4619      	mov	r1, r3
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <Flash_writeData+0x16c>)
 80020e4:	f7fe f911 	bl	800030a <Flash_WriteIntType>
	Flash_WriteIntType(PG_ADDR, PAGE_ADDR, FLASH_TYPEPROGRAM_WORD);
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <Flash_writeData+0x158>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2202      	movs	r2, #2
 80020ee:	4619      	mov	r1, r3
 80020f0:	4812      	ldr	r0, [pc, #72]	; (800213c <Flash_writeData+0x174>)
 80020f2:	f7fe f90a 	bl	800030a <Flash_WriteIntType>
	Flash_Lock();
 80020f6:	f7fe f8e0 	bl	80002ba <Flash_Lock>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000ba8 	.word	0x20000ba8
 8002108:	08007a28 	.word	0x08007a28
 800210c:	20000020 	.word	0x20000020
 8002110:	08007a34 	.word	0x08007a34
 8002114:	08007a3c 	.word	0x08007a3c
 8002118:	20001022 	.word	0x20001022
 800211c:	200000f0 	.word	0x200000f0
 8002120:	200000f8 	.word	0x200000f8
 8002124:	0801fbf0 	.word	0x0801fbf0
 8002128:	080117f0 	.word	0x080117f0
 800212c:	08011400 	.word	0x08011400
 8002130:	200000f4 	.word	0x200000f4
 8002134:	08010c00 	.word	0x08010c00
 8002138:	08011000 	.word	0x08011000
 800213c:	08010800 	.word	0x08010800

08002140 <Flash_extractData>:

void Flash_extractData(char* data)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	memset(Flash_Host,0,strlen(Flash_Host));
 8002148:	4835      	ldr	r0, [pc, #212]	; (8002220 <Flash_extractData+0xe0>)
 800214a:	f7fe f841 	bl	80001d0 <strlen>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	4832      	ldr	r0, [pc, #200]	; (8002220 <Flash_extractData+0xe0>)
 8002156:	f004 f86b 	bl	8006230 <memset>
	memset(Flash_URL,0,strlen(Flash_URL));
 800215a:	4832      	ldr	r0, [pc, #200]	; (8002224 <Flash_extractData+0xe4>)
 800215c:	f7fe f838 	bl	80001d0 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	2100      	movs	r1, #0
 8002166:	482f      	ldr	r0, [pc, #188]	; (8002224 <Flash_extractData+0xe4>)
 8002168:	f004 f862 	bl	8006230 <memset>
	memset(Flash_Data,0,strlen(Flash_Data));
 800216c:	482e      	ldr	r0, [pc, #184]	; (8002228 <Flash_extractData+0xe8>)
 800216e:	f7fe f82f 	bl	80001d0 <strlen>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	2100      	movs	r1, #0
 8002178:	482b      	ldr	r0, [pc, #172]	; (8002228 <Flash_extractData+0xe8>)
 800217a:	f004 f859 	bl	8006230 <memset>
	if(strstr(data,"||") == NULL)
 800217e:	492b      	ldr	r1, [pc, #172]	; (800222c <Flash_extractData+0xec>)
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f004 f885 	bl	8006290 <strstr>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11b      	bne.n	80021c4 <Flash_extractData+0x84>
	{
		char* token;
		token = strtok(data,"|");
 800218c:	4928      	ldr	r1, [pc, #160]	; (8002230 <Flash_extractData+0xf0>)
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f004 f896 	bl	80062c0 <strtok>
 8002194:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_Host,token);
 8002196:	68b9      	ldr	r1, [r7, #8]
 8002198:	4821      	ldr	r0, [pc, #132]	; (8002220 <Flash_extractData+0xe0>)
 800219a:	f004 f871 	bl	8006280 <strcpy>
		token = strtok(NULL,"|");
 800219e:	4924      	ldr	r1, [pc, #144]	; (8002230 <Flash_extractData+0xf0>)
 80021a0:	2000      	movs	r0, #0
 80021a2:	f004 f88d 	bl	80062c0 <strtok>
 80021a6:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_URL,token);
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	481e      	ldr	r0, [pc, #120]	; (8002224 <Flash_extractData+0xe4>)
 80021ac:	f004 f868 	bl	8006280 <strcpy>
		token = strtok(NULL,"|");
 80021b0:	491f      	ldr	r1, [pc, #124]	; (8002230 <Flash_extractData+0xf0>)
 80021b2:	2000      	movs	r0, #0
 80021b4:	f004 f884 	bl	80062c0 <strtok>
 80021b8:	60b8      	str	r0, [r7, #8]
		strcpy(Flash_Data,token);
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	481a      	ldr	r0, [pc, #104]	; (8002228 <Flash_extractData+0xe8>)
 80021be:	f004 f85f 	bl	8006280 <strcpy>
		{
			strcpy(Flash_Host,Host2);
			strcpy(Flash_URL,URL2);
		}
	}
}
 80021c2:	e029      	b.n	8002218 <Flash_extractData+0xd8>
		token = strtok(data,"|");
 80021c4:	491a      	ldr	r1, [pc, #104]	; (8002230 <Flash_extractData+0xf0>)
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f004 f87a 	bl	80062c0 <strtok>
 80021cc:	60f8      	str	r0, [r7, #12]
		strcpy(Flash_Data,token);
 80021ce:	68f9      	ldr	r1, [r7, #12]
 80021d0:	4815      	ldr	r0, [pc, #84]	; (8002228 <Flash_extractData+0xe8>)
 80021d2:	f004 f855 	bl	8006280 <strcpy>
		token = strtok(NULL,"|");
 80021d6:	4916      	ldr	r1, [pc, #88]	; (8002230 <Flash_extractData+0xf0>)
 80021d8:	2000      	movs	r0, #0
 80021da:	f004 f871 	bl	80062c0 <strtok>
 80021de:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL,"|");
 80021e0:	4913      	ldr	r1, [pc, #76]	; (8002230 <Flash_extractData+0xf0>)
 80021e2:	2000      	movs	r0, #0
 80021e4:	f004 f86c 	bl	80062c0 <strtok>
 80021e8:	60f8      	str	r0, [r7, #12]
		if(atoi(token) == 1)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f003 fff2 	bl	80061d4 <atoi>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d108      	bne.n	8002208 <Flash_extractData+0xc8>
			strcpy(Flash_Host,Host1);
 80021f6:	490f      	ldr	r1, [pc, #60]	; (8002234 <Flash_extractData+0xf4>)
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <Flash_extractData+0xe0>)
 80021fa:	f004 f841 	bl	8006280 <strcpy>
			strcpy(Flash_URL,URL1);
 80021fe:	490e      	ldr	r1, [pc, #56]	; (8002238 <Flash_extractData+0xf8>)
 8002200:	4808      	ldr	r0, [pc, #32]	; (8002224 <Flash_extractData+0xe4>)
 8002202:	f004 f83d 	bl	8006280 <strcpy>
}
 8002206:	e007      	b.n	8002218 <Flash_extractData+0xd8>
			strcpy(Flash_Host,Host2);
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <Flash_extractData+0xfc>)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <Flash_extractData+0xe0>)
 800220c:	f004 f838 	bl	8006280 <strcpy>
			strcpy(Flash_URL,URL2);
 8002210:	490b      	ldr	r1, [pc, #44]	; (8002240 <Flash_extractData+0x100>)
 8002212:	4804      	ldr	r0, [pc, #16]	; (8002224 <Flash_extractData+0xe4>)
 8002214:	f004 f834 	bl	8006280 <strcpy>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000f60 	.word	0x20000f60
 8002224:	20000ff0 	.word	0x20000ff0
 8002228:	20000d38 	.word	0x20000d38
 800222c:	08007a44 	.word	0x08007a44
 8002230:	0800798c 	.word	0x0800798c
 8002234:	20000020 	.word	0x20000020
 8002238:	20000000 	.word	0x20000000
 800223c:	20000060 	.word	0x20000060
 8002240:	20000040 	.word	0x20000040

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800224c:	e7fe      	b.n	800224c <Error_Handler+0x8>
	...

08002250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_MspInit+0x44>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_MspInit+0x44>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6193      	str	r3, [r2, #24]
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_MspInit+0x44>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_MspInit+0x44>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a08      	ldr	r2, [pc, #32]	; (8002294 <HAL_MspInit+0x44>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	61d3      	str	r3, [r2, #28]
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_MspInit+0x44>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_RTC_MspInit+0x50>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d119      	bne.n	80022de <HAL_RTC_MspInit+0x46>
 80022aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ae:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022b8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_RTC_MspInit+0x54>)
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	461a      	mov	r2, r3
 80022ca:	2301      	movs	r3, #1
 80022cc:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2029      	movs	r0, #41	; 0x29
 80022d4:	f000 fb37 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80022d8:	2029      	movs	r0, #41	; 0x29
 80022da:	f000 fb50 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40002800 	.word	0x40002800
 80022ec:	10908100 	.word	0x10908100

080022f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a33      	ldr	r2, [pc, #204]	; (80023dc <HAL_UART_MspInit+0xec>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d131      	bne.n	8002376 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a32      	ldr	r2, [pc, #200]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4a2c      	ldr	r2, [pc, #176]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 8002330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002334:	6153      	str	r3, [r2, #20]
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_RX_Pin|SIM_TX_Pin;
 8002342:	230c      	movs	r3, #12
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002352:	2307      	movs	r3, #7
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002360:	f000 fd76 	bl	8002e50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2026      	movs	r0, #38	; 0x26
 800236a:	f000 faec 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800236e:	2026      	movs	r0, #38	; 0x26
 8002370:	f000 fb05 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002374:	e02d      	b.n	80023d2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_UART_MspInit+0xf4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d128      	bne.n	80023d2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 8002386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238a:	61d3      	str	r3, [r2, #28]
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a2:	6153      	str	r3, [r2, #20]
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_UART_MspInit+0xf0>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 80023b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023c2:	2307      	movs	r3, #7
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c6:	f107 031c 	add.w	r3, r7, #28
 80023ca:	4619      	mov	r1, r3
 80023cc:	4806      	ldr	r0, [pc, #24]	; (80023e8 <HAL_UART_MspInit+0xf8>)
 80023ce:	f000 fd3f 	bl	8002e50 <HAL_GPIO_Init>
}
 80023d2:	bf00      	nop
 80023d4:	3730      	adds	r7, #48	; 0x30
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40004400 	.word	0x40004400
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40004800 	.word	0x40004800
 80023e8:	48000400 	.word	0x48000400

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <NMI_Handler+0x4>

080023f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <HardFault_Handler+0x4>

080023f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <MemManage_Handler+0x4>

080023fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <BusFault_Handler+0x4>

08002404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <UsageFault_Handler+0x4>

0800240a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002438:	f000 f966 	bl	8002708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002444:	2002      	movs	r0, #2
 8002446:	f000 fe95 	bl	8003174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <USART2_IRQHandler+0x10>)
 8002456:	f002 ffaf 	bl	80053b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20001024 	.word	0x20001024

08002464 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <RTC_Alarm_IRQHandler+0x10>)
 800246a:	f002 fd73 	bl	8004f54 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000fd0 	.word	0x20000fd0

08002478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
	return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_kill>:

int _kill(int pid, int sig)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002492:	f003 fea3 	bl	80061dc <__errno>
 8002496:	4603      	mov	r3, r0
 8002498:	2216      	movs	r2, #22
 800249a:	601a      	str	r2, [r3, #0]
	return -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_exit>:

void _exit (int status)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ffe7 	bl	8002488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ba:	e7fe      	b.n	80024ba <_exit+0x12>

080024bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e00a      	b.n	80024e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ce:	f3af 8000 	nop.w
 80024d2:	4601      	mov	r1, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60ba      	str	r2, [r7, #8]
 80024da:	b2ca      	uxtb	r2, r1
 80024dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dbf0      	blt.n	80024ce <_read+0x12>
	}

return len;
 80024ec:	687b      	ldr	r3, [r7, #4]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e009      	b.n	800251c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf1      	blt.n	8002508 <_write+0x12>
	}
	return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_close>:

int _close(int file)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
	return -1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002556:	605a      	str	r2, [r3, #4]
	return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_isatty>:

int _isatty(int file)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	return 1;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
	return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f003 fe08 	bl	80061dc <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000a000 	.word	0x2000a000
 80025f8:	00000400 	.word	0x00000400
 80025fc:	20000ecc 	.word	0x20000ecc
 8002600:	200010e0 	.word	0x200010e0

08002604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <SystemInit+0x20>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <SystemInit+0x20>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002660 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800262c:	480d      	ldr	r0, [pc, #52]	; (8002664 <LoopForever+0x6>)
  ldr r1, =_edata
 800262e:	490e      	ldr	r1, [pc, #56]	; (8002668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002630:	4a0e      	ldr	r2, [pc, #56]	; (800266c <LoopForever+0xe>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002634:	e002      	b.n	800263c <LoopCopyDataInit>

08002636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263a:	3304      	adds	r3, #4

0800263c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800263c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002640:	d3f9      	bcc.n	8002636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002642:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002644:	4c0b      	ldr	r4, [pc, #44]	; (8002674 <LoopForever+0x16>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002648:	e001      	b.n	800264e <LoopFillZerobss>

0800264a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800264c:	3204      	adds	r2, #4

0800264e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002650:	d3fb      	bcc.n	800264a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002652:	f7ff ffd7 	bl	8002604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002656:	f003 fdc7 	bl	80061e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800265a:	f7fe fa51 	bl	8000b00 <main>

0800265e <LoopForever>:

LoopForever:
    b LoopForever
 800265e:	e7fe      	b.n	800265e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002660:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 800266c:	08007cd4 	.word	0x08007cd4
  ldr r2, =_sbss
 8002670:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8002674:	200010e0 	.word	0x200010e0

08002678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <ADC1_2_IRQHandler>
	...

0800267c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_Init+0x28>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_Init+0x28>)
 8002686:	f043 0310 	orr.w	r3, r3, #16
 800268a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268c:	2003      	movs	r0, #3
 800268e:	f000 f94f 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002692:	2000      	movs	r0, #0
 8002694:	f000 f808 	bl	80026a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002698:	f7ff fdda 	bl	8002250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40022000 	.word	0x40022000

080026a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x54>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_InitTick+0x58>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f967 	bl	800299a <HAL_SYSTICK_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00e      	b.n	80026f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d80a      	bhi.n	80026f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026dc:	2200      	movs	r2, #0
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f000 f92f 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e8:	4a06      	ldr	r2, [pc, #24]	; (8002704 <HAL_InitTick+0x5c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200000fc 	.word	0x200000fc
 8002700:	20000104 	.word	0x20000104
 8002704:	20000100 	.word	0x20000100

08002708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x20>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x24>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_IncTick+0x24>)
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000104 	.word	0x20000104
 800272c:	200010a8 	.word	0x200010a8

08002730 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;  
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_GetTick+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	200010a8 	.word	0x200010a8

08002748 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff ffee 	bl	8002730 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d005      	beq.n	800276e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_Delay+0x44>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800276e:	bf00      	nop
 8002770:	f7ff ffde 	bl	8002730 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <HAL_Delay+0x28>
  {
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000104 	.word	0x20000104

08002790 <__NVIC_SetPriorityGrouping>:
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff29 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff3e 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff8e 	bl	8002884 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5d 	bl	8002830 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff31 	bl	80027f4 <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d008      	beq.n	80029d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2204      	movs	r2, #4
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e020      	b.n	8002a18 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 020e 	bic.w	r2, r2, #14
 80029e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d005      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e027      	b.n	8002a96 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 020e 	bic.w	r2, r2, #14
 8002a54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
    } 
  }
  return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_FLASH_Program+0xd8>)
 8002abc:	7e1b      	ldrb	r3, [r3, #24]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_FLASH_Program+0x26>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e054      	b.n	8002b70 <HAL_FLASH_Program+0xd0>
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <HAL_FLASH_Program+0xd8>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002acc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ad0:	f000 f8a8 	bl	8002c24 <FLASH_WaitForLastOperation>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d144      	bne.n	8002b68 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	757b      	strb	r3, [r7, #21]
 8002ae8:	e007      	b.n	8002afa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d102      	bne.n	8002af6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002af0:	2302      	movs	r3, #2
 8002af2:	757b      	strb	r3, [r7, #21]
 8002af4:	e001      	b.n	8002afa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002af6:	2304      	movs	r3, #4
 8002af8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	75bb      	strb	r3, [r7, #22]
 8002afe:	e02d      	b.n	8002b5c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002b00:	7dbb      	ldrb	r3, [r7, #22]
 8002b02:	005a      	lsls	r2, r3, #1
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	eb02 0c03 	add.w	ip, r2, r3
 8002b0a:	7dbb      	ldrb	r3, [r7, #22]
 8002b0c:	0119      	lsls	r1, r3, #4
 8002b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b12:	f1c1 0620 	rsb	r6, r1, #32
 8002b16:	f1a1 0020 	sub.w	r0, r1, #32
 8002b1a:	fa22 f401 	lsr.w	r4, r2, r1
 8002b1e:	fa03 f606 	lsl.w	r6, r3, r6
 8002b22:	4334      	orrs	r4, r6
 8002b24:	fa23 f000 	lsr.w	r0, r3, r0
 8002b28:	4304      	orrs	r4, r0
 8002b2a:	fa23 f501 	lsr.w	r5, r3, r1
 8002b2e:	b2a3      	uxth	r3, r4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4660      	mov	r0, ip
 8002b34:	f000 f85a 	bl	8002bec <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b3c:	f000 f872 	bl	8002c24 <FLASH_WaitForLastOperation>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_FLASH_Program+0xdc>)
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_FLASH_Program+0xdc>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002b56:	7dbb      	ldrb	r3, [r7, #22]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	75bb      	strb	r3, [r7, #22]
 8002b5c:	7dba      	ldrb	r2, [r7, #22]
 8002b5e:	7d7b      	ldrb	r3, [r7, #21]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3cd      	bcc.n	8002b00 <HAL_FLASH_Program+0x60>
 8002b64:	e000      	b.n	8002b68 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002b66:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_FLASH_Program+0xd8>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	761a      	strb	r2, [r3, #24]

  return status;
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b78:	200010b0 	.word	0x200010b0
 8002b7c:	40022000 	.word	0x40022000

08002b80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_FLASH_Unlock+0x40>)
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_FLASH_Unlock+0x40>)
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_FLASH_Unlock+0x44>)
 8002b9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_FLASH_Unlock+0x40>)
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_FLASH_Unlock+0x48>)
 8002ba0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_FLASH_Unlock+0x40>)
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	45670123 	.word	0x45670123
 8002bc8:	cdef89ab 	.word	0xcdef89ab

08002bcc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_FLASH_Lock+0x1c>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_FLASH_Lock+0x1c>)
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40022000 	.word	0x40022000

08002bec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <FLASH_Program_HalfWord+0x30>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <FLASH_Program_HalfWord+0x34>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <FLASH_Program_HalfWord+0x34>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	887a      	ldrh	r2, [r7, #2]
 8002c0e:	801a      	strh	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	200010b0 	.word	0x200010b0
 8002c20:	40022000 	.word	0x40022000

08002c24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff fd80 	bl	8002730 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c32:	e010      	b.n	8002c56 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3a:	d00c      	beq.n	8002c56 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <FLASH_WaitForLastOperation+0x2e>
 8002c42:	f7ff fd75 	bl	8002730 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d201      	bcs.n	8002c56 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e01f      	b.n	8002c96 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <FLASH_WaitForLastOperation+0x7c>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d0e8      	beq.n	8002c34 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <FLASH_WaitForLastOperation+0x7c>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d102      	bne.n	8002c74 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <FLASH_WaitForLastOperation+0x7c>)
 8002c70:	2220      	movs	r2, #32
 8002c72:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <FLASH_WaitForLastOperation+0x7c>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d005      	beq.n	8002c8c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <FLASH_WaitForLastOperation+0x7c>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d103      	bne.n	8002c94 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002c8c:	f000 f80a 	bl	8002ca4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40022000 	.word	0x40022000

08002ca4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <FLASH_SetErrorCode+0x5c>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d109      	bne.n	8002cce <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <FLASH_SetErrorCode+0x60>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <FLASH_SetErrorCode+0x60>)
 8002cc4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f043 0310 	orr.w	r3, r3, #16
 8002ccc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <FLASH_SetErrorCode+0x5c>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d109      	bne.n	8002cee <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <FLASH_SetErrorCode+0x60>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <FLASH_SetErrorCode+0x60>)
 8002ce4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <FLASH_SetErrorCode+0x5c>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60d3      	str	r3, [r2, #12]
}  
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40022000 	.word	0x40022000
 8002d04:	200010b0 	.word	0x200010b0

08002d08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_FLASHEx_Erase+0xcc>)
 8002d1c:	7e1b      	ldrb	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_FLASHEx_Erase+0x1e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e052      	b.n	8002dcc <HAL_FLASHEx_Erase+0xc4>
 8002d26:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_FLASHEx_Erase+0xcc>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d115      	bne.n	8002d60 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002d34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d38:	f7ff ff74 	bl	8002c24 <FLASH_WaitForLastOperation>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d140      	bne.n	8002dc4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002d42:	f000 f84b 	bl	8002ddc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d4a:	f7ff ff6b 	bl	8002c24 <FLASH_WaitForLastOperation>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_FLASHEx_Erase+0xd0>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_FLASHEx_Erase+0xd0>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6113      	str	r3, [r2, #16]
 8002d5e:	e031      	b.n	8002dc4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002d60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d64:	f7ff ff5e 	bl	8002c24 <FLASH_WaitForLastOperation>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d12a      	bne.n	8002dc4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	e019      	b.n	8002db2 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002d7e:	68b8      	ldr	r0, [r7, #8]
 8002d80:	f000 f846 	bl	8002e10 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d88:	f7ff ff4c 	bl	8002c24 <FLASH_WaitForLastOperation>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_FLASHEx_Erase+0xd0>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_FLASHEx_Erase+0xd0>)
 8002d96:	f023 0302 	bic.w	r3, r3, #2
 8002d9a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	601a      	str	r2, [r3, #0]
            break;
 8002da8:	e00c      	b.n	8002dc4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	02da      	lsls	r2, r3, #11
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d3dc      	bcc.n	8002d7e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_FLASHEx_Erase+0xcc>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	761a      	strb	r2, [r3, #24]

  return status;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200010b0 	.word	0x200010b0
 8002dd8:	40022000 	.word	0x40022000

08002ddc <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <FLASH_MassErase+0x2c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <FLASH_MassErase+0x30>)
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	4a08      	ldr	r2, [pc, #32]	; (8002e0c <FLASH_MassErase+0x30>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <FLASH_MassErase+0x30>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <FLASH_MassErase+0x30>)
 8002df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dfc:	6113      	str	r3, [r2, #16]
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	200010b0 	.word	0x200010b0
 8002e0c:	40022000 	.word	0x40022000

08002e10 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <FLASH_PageErase+0x38>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <FLASH_PageErase+0x3c>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <FLASH_PageErase+0x3c>)
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002e2a:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <FLASH_PageErase+0x3c>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <FLASH_PageErase+0x3c>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <FLASH_PageErase+0x3c>)
 8002e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e3a:	6113      	str	r3, [r2, #16]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	200010b0 	.word	0x200010b0
 8002e4c:	40022000 	.word	0x40022000

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5e:	e154      	b.n	800310a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8146 	beq.w	8003104 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d00b      	beq.n	8002e98 <HAL_GPIO_Init+0x48>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d007      	beq.n	8002e98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e8c:	2b11      	cmp	r3, #17
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b12      	cmp	r3, #18
 8002e96:	d130      	bne.n	8002efa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ece:	2201      	movs	r2, #1
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 0201 	and.w	r2, r3, #1
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2203      	movs	r2, #3
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0xea>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b12      	cmp	r3, #18
 8002f38:	d123      	bne.n	8002f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	08da      	lsrs	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	220f      	movs	r2, #15
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	6939      	ldr	r1, [r7, #16]
 8002f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0203 	and.w	r2, r3, #3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80a0 	beq.w	8003104 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc4:	4b58      	ldr	r3, [pc, #352]	; (8003128 <HAL_GPIO_Init+0x2d8>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_GPIO_Init+0x2d8>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b55      	ldr	r3, [pc, #340]	; (8003128 <HAL_GPIO_Init+0x2d8>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fdc:	4a53      	ldr	r2, [pc, #332]	; (800312c <HAL_GPIO_Init+0x2dc>)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003006:	d019      	beq.n	800303c <HAL_GPIO_Init+0x1ec>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a49      	ldr	r2, [pc, #292]	; (8003130 <HAL_GPIO_Init+0x2e0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_GPIO_Init+0x1e8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a48      	ldr	r2, [pc, #288]	; (8003134 <HAL_GPIO_Init+0x2e4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00d      	beq.n	8003034 <HAL_GPIO_Init+0x1e4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a47      	ldr	r2, [pc, #284]	; (8003138 <HAL_GPIO_Init+0x2e8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <HAL_GPIO_Init+0x1e0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a46      	ldr	r2, [pc, #280]	; (800313c <HAL_GPIO_Init+0x2ec>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_GPIO_Init+0x1dc>
 8003028:	2304      	movs	r3, #4
 800302a:	e008      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 800302c:	2305      	movs	r3, #5
 800302e:	e006      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 8003030:	2303      	movs	r3, #3
 8003032:	e004      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 8003034:	2302      	movs	r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_GPIO_Init+0x1ee>
 800303c:	2300      	movs	r3, #0
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	f002 0203 	and.w	r2, r2, #3
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	4093      	lsls	r3, r2
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800304e:	4937      	ldr	r1, [pc, #220]	; (800312c <HAL_GPIO_Init+0x2dc>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800305c:	4b38      	ldr	r3, [pc, #224]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003080:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003086:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030aa:	4a25      	ldr	r2, [pc, #148]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030d4:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030da:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <HAL_GPIO_Init+0x2f0>)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3301      	adds	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	f47f aea3 	bne.w	8002e60 <HAL_GPIO_Init+0x10>
  }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000
 800312c:	40010000 	.word	0x40010000
 8003130:	48000400 	.word	0x48000400
 8003134:	48000800 	.word	0x48000800
 8003138:	48000c00 	.word	0x48000c00
 800313c:	48001000 	.word	0x48001000
 8003140:	40010400 	.word	0x40010400

08003144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
 8003150:	4613      	mov	r3, r2
 8003152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003154:	787b      	ldrb	r3, [r7, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003160:	e002      	b.n	8003168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fc60 	bl	8000a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40010400 	.word	0x40010400

080031a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40007000 	.word	0x40007000

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f000 bef4 	b.w	8003fc6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 816a 	beq.w	80034c2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031ee:	4bb3      	ldr	r3, [pc, #716]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00c      	beq.n	8003214 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031fa:	4bb0      	ldr	r3, [pc, #704]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d159      	bne.n	80032ba <HAL_RCC_OscConfig+0xf6>
 8003206:	4bad      	ldr	r3, [pc, #692]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003212:	d152      	bne.n	80032ba <HAL_RCC_OscConfig+0xf6>
 8003214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003218:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003228:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d102      	bne.n	8003246 <HAL_RCC_OscConfig+0x82>
 8003240:	4b9e      	ldr	r3, [pc, #632]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0xae>
 8003246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800324a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800325a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800325e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003262:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800326e:	4b93      	ldr	r3, [pc, #588]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003276:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800327a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800327e:	fa92 f2a2 	rbit	r2, r2
 8003282:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003286:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800328a:	fab2 f282 	clz	r2, r2
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	f042 0220 	orr.w	r2, r2, #32
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	f002 021f 	and.w	r2, r2, #31
 800329a:	2101      	movs	r1, #1
 800329c:	fa01 f202 	lsl.w	r2, r1, r2
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 810c 	beq.w	80034c0 <HAL_RCC_OscConfig+0x2fc>
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f040 8106 	bne.w	80034c0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f000 be86 	b.w	8003fc6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x110>
 80032c6:	4b7d      	ldr	r3, [pc, #500]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7c      	ldr	r2, [pc, #496]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e030      	b.n	8003336 <HAL_RCC_OscConfig+0x172>
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x134>
 80032de:	4b77      	ldr	r3, [pc, #476]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a76      	ldr	r2, [pc, #472]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b74      	ldr	r3, [pc, #464]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a73      	ldr	r2, [pc, #460]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80032f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01e      	b.n	8003336 <HAL_RCC_OscConfig+0x172>
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0x15a>
 8003304:	4b6d      	ldr	r3, [pc, #436]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a6c      	ldr	r2, [pc, #432]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 800330a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a69      	ldr	r2, [pc, #420]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x172>
 800331e:	4b67      	ldr	r3, [pc, #412]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a66      	ldr	r2, [pc, #408]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b64      	ldr	r3, [pc, #400]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a63      	ldr	r2, [pc, #396]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003336:	4b61      	ldr	r3, [pc, #388]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f023 020f 	bic.w	r2, r3, #15
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	495d      	ldr	r1, [pc, #372]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d059      	beq.n	8003408 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7ff f9ec 	bl	8002730 <HAL_GetTick>
 8003358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335e:	f7ff f9e7 	bl	8002730 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d902      	bls.n	8003374 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	f000 be29 	b.w	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003378:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003388:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_OscConfig+0x1e2>
 80033a0:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	e015      	b.n	80033d2 <HAL_RCC_OscConfig+0x20e>
 80033a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033c2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033ce:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033de:	fa92 f2a2 	rbit	r2, r2
 80033e2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033e6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80033ea:	fab2 f282 	clz	r2, r2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f042 0220 	orr.w	r2, r2, #32
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f002 021f 	and.w	r2, r2, #31
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ab      	beq.n	800335e <HAL_RCC_OscConfig+0x19a>
 8003406:	e05c      	b.n	80034c2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7ff f992 	bl	8002730 <HAL_GetTick>
 800340c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003410:	e00a      	b.n	8003428 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003412:	f7ff f98d 	bl	8002730 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d902      	bls.n	8003428 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	f000 bdcf 	b.w	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800342c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800343c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d102      	bne.n	800345a <HAL_RCC_OscConfig+0x296>
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x2c2>
 800345a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800346e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003472:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003476:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_RCC_OscConfig+0x2f8>)
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800348a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800348e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003492:	fa92 f2a2 	rbit	r2, r2
 8003496:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800349a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800349e:	fab2 f282 	clz	r2, r2
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f042 0220 	orr.w	r2, r2, #32
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	f002 021f 	and.w	r2, r2, #31
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ab      	bne.n	8003412 <HAL_RCC_OscConfig+0x24e>
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_OscConfig+0x2fe>
 80034bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 816f 	beq.w	80037b0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034d2:	4bd0      	ldr	r3, [pc, #832]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034de:	4bcd      	ldr	r3, [pc, #820]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d16c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x400>
 80034ea:	4bca      	ldr	r3, [pc, #808]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d166      	bne.n	80035c4 <HAL_RCC_OscConfig+0x400>
 80034f6:	2302      	movs	r3, #2
 80034f8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003508:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_RCC_OscConfig+0x362>
 8003520:	4bbc      	ldr	r3, [pc, #752]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e013      	b.n	800354e <HAL_RCC_OscConfig+0x38a>
 8003526:	2302      	movs	r3, #2
 8003528:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003538:	2302      	movs	r3, #2
 800353a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800353e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800354a:	4bb2      	ldr	r3, [pc, #712]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2202      	movs	r2, #2
 8003550:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003554:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003558:	fa92 f2a2 	rbit	r2, r2
 800355c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003560:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f042 0220 	orr.w	r2, r2, #32
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f002 021f 	and.w	r2, r2, #31
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f202 	lsl.w	r2, r1, r2
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_RCC_OscConfig+0x3cc>
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d002      	beq.n	8003590 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f000 bd1b 	b.w	8003fc6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4ba0      	ldr	r3, [pc, #640]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	21f8      	movs	r1, #248	; 0xf8
 80035a0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035a8:	fa91 f1a1 	rbit	r1, r1
 80035ac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035b0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035b4:	fab1 f181 	clz	r1, r1
 80035b8:	b2c9      	uxtb	r1, r1
 80035ba:	408b      	lsls	r3, r1
 80035bc:	4995      	ldr	r1, [pc, #596]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	e0f5      	b.n	80037b0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8085 	beq.w	80036da <HAL_RCC_OscConfig+0x516>
 80035d0:	2301      	movs	r3, #1
 80035d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80035e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	461a      	mov	r2, r3
 80035f8:	2301      	movs	r3, #1
 80035fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7ff f898 	bl	8002730 <HAL_GetTick>
 8003600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003606:	f7ff f893 	bl	8002730 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d902      	bls.n	800361c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	f000 bcd5 	b.w	8003fc6 <HAL_RCC_OscConfig+0xe02>
 800361c:	2302      	movs	r3, #2
 800361e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800362e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_RCC_OscConfig+0x488>
 8003646:	4b73      	ldr	r3, [pc, #460]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e013      	b.n	8003674 <HAL_RCC_OscConfig+0x4b0>
 800364c:	2302      	movs	r3, #2
 800364e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800365e:	2302      	movs	r3, #2
 8003660:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003664:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003670:	4b68      	ldr	r3, [pc, #416]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	2202      	movs	r2, #2
 8003676:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800367a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800367e:	fa92 f2a2 	rbit	r2, r2
 8003682:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003686:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800368a:	fab2 f282 	clz	r2, r2
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f042 0220 	orr.w	r2, r2, #32
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f002 021f 	and.w	r2, r2, #31
 800369a:	2101      	movs	r1, #1
 800369c:	fa01 f202 	lsl.w	r2, r1, r2
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0af      	beq.n	8003606 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b5b      	ldr	r3, [pc, #364]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	21f8      	movs	r1, #248	; 0xf8
 80036b6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036be:	fa91 f1a1 	rbit	r1, r1
 80036c2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80036c6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036ca:	fab1 f181 	clz	r1, r1
 80036ce:	b2c9      	uxtb	r1, r1
 80036d0:	408b      	lsls	r3, r1
 80036d2:	4950      	ldr	r1, [pc, #320]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
 80036d8:	e06a      	b.n	80037b0 <HAL_RCC_OscConfig+0x5ec>
 80036da:	2301      	movs	r3, #1
 80036dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80036ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	461a      	mov	r2, r3
 8003702:	2300      	movs	r3, #0
 8003704:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7ff f813 	bl	8002730 <HAL_GetTick>
 800370a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	e00a      	b.n	8003726 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003710:	f7ff f80e 	bl	8002730 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d902      	bls.n	8003726 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	f000 bc50 	b.w	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003726:	2302      	movs	r3, #2
 8003728:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373c:	fab3 f383 	clz	r3, r3
 8003740:	b2db      	uxtb	r3, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <HAL_RCC_OscConfig+0x592>
 8003750:	4b30      	ldr	r3, [pc, #192]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	e013      	b.n	800377e <HAL_RCC_OscConfig+0x5ba>
 8003756:	2302      	movs	r3, #2
 8003758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003768:	2302      	movs	r3, #2
 800376a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800376e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <HAL_RCC_OscConfig+0x650>)
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2202      	movs	r2, #2
 8003780:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003784:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003788:	fa92 f2a2 	rbit	r2, r2
 800378c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003790:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003794:	fab2 f282 	clz	r2, r2
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	f042 0220 	orr.w	r2, r2, #32
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	f002 021f 	and.w	r2, r2, #31
 80037a4:	2101      	movs	r1, #1
 80037a6:	fa01 f202 	lsl.w	r2, r1, r2
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1af      	bne.n	8003710 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80da 	beq.w	8003974 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c0:	1d3b      	adds	r3, r7, #4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d069      	beq.n	800389e <HAL_RCC_OscConfig+0x6da>
 80037ca:	2301      	movs	r3, #1
 80037cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80037dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_OscConfig+0x654>)
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	461a      	mov	r2, r3
 80037f0:	2301      	movs	r3, #1
 80037f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f4:	f7fe ff9c 	bl	8002730 <HAL_GetTick>
 80037f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fc:	e00e      	b.n	800381c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fe ff97 	bl	8002730 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d906      	bls.n	800381c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e3d9      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	10908120 	.word	0x10908120
 800381c:	2302      	movs	r3, #2
 800381e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800382e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003832:	2202      	movs	r2, #2
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	fa93 f2a3 	rbit	r2, r3
 8003840:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800384a:	2202      	movs	r2, #2
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f2a3 	rbit	r2, r3
 8003858:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800385c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	4ba5      	ldr	r3, [pc, #660]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003862:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003866:	2102      	movs	r1, #2
 8003868:	6019      	str	r1, [r3, #0]
 800386a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	fa93 f1a3 	rbit	r1, r3
 8003874:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003878:	6019      	str	r1, [r3, #0]
  return result;
 800387a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0b0      	beq.n	80037fe <HAL_RCC_OscConfig+0x63a>
 800389c:	e06a      	b.n	8003974 <HAL_RCC_OscConfig+0x7b0>
 800389e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	fa93 f2a3 	rbit	r2, r3
 80038b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038b4:	601a      	str	r2, [r3, #0]
  return result;
 80038b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	461a      	mov	r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d0:	f7fe ff2e 	bl	8002730 <HAL_GetTick>
 80038d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	e009      	b.n	80038ee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038da:	f7fe ff29 	bl	8002730 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e36b      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
 80038ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038f2:	2202      	movs	r2, #2
 80038f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800390a:	2202      	movs	r2, #2
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fa93 f2a3 	rbit	r2, r3
 8003918:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003922:	2202      	movs	r2, #2
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003934:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003936:	4b6f      	ldr	r3, [pc, #444]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800393a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800393e:	2102      	movs	r1, #2
 8003940:	6019      	str	r1, [r3, #0]
 8003942:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f1a3 	rbit	r1, r3
 800394c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003950:	6019      	str	r1, [r3, #0]
  return result;
 8003952:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1b2      	bne.n	80038da <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8158 	beq.w	8003c34 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b5a      	ldr	r3, [pc, #360]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d112      	bne.n	80039bc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4a56      	ldr	r2, [pc, #344]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	61d3      	str	r3, [r2, #28]
 80039a2:	4b54      	ldr	r3, [pc, #336]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_RCC_OscConfig+0x938>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11a      	bne.n	80039fe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_OscConfig+0x938>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a4b      	ldr	r2, [pc, #300]	; (8003afc <HAL_RCC_OscConfig+0x938>)
 80039ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d4:	f7fe feac 	bl	8002730 <HAL_GetTick>
 80039d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e009      	b.n	80039f2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fe fea7 	bl	8002730 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e2e9      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	4b42      	ldr	r3, [pc, #264]	; (8003afc <HAL_RCC_OscConfig+0x938>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ef      	beq.n	80039de <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x852>
 8003a08:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4a39      	ldr	r2, [pc, #228]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6213      	str	r3, [r2, #32]
 8003a14:	e02f      	b.n	8003a76 <HAL_RCC_OscConfig+0x8b2>
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCC_OscConfig+0x876>
 8003a20:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	6213      	str	r3, [r2, #32]
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4a30      	ldr	r2, [pc, #192]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a32:	f023 0304 	bic.w	r3, r3, #4
 8003a36:	6213      	str	r3, [r2, #32]
 8003a38:	e01d      	b.n	8003a76 <HAL_RCC_OscConfig+0x8b2>
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x89a>
 8003a44:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a2a      	ldr	r2, [pc, #168]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6213      	str	r3, [r2, #32]
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6213      	str	r3, [r2, #32]
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCC_OscConfig+0x8b2>
 8003a5e:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6213      	str	r3, [r2, #32]
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a21      	ldr	r2, [pc, #132]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d06b      	beq.n	8003b58 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a80:	f7fe fe56 	bl	8002730 <HAL_GetTick>
 8003a84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	e00b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fe fe51 	bl	8002730 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e291      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003aa2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f2a3 	rbit	r2, r3
 8003ab4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003abe:	2202      	movs	r2, #2
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ad0:	601a      	str	r2, [r3, #0]
  return result;
 8003ad2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ad6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d109      	bne.n	8003b00 <HAL_RCC_OscConfig+0x93c>
 8003aec:	4b01      	ldr	r3, [pc, #4]	; (8003af4 <HAL_RCC_OscConfig+0x930>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	e014      	b.n	8003b1c <HAL_RCC_OscConfig+0x958>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	10908120 	.word	0x10908120
 8003afc:	40007000 	.word	0x40007000
 8003b00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b04:	2202      	movs	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	4bbb      	ldr	r3, [pc, #748]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b20:	2102      	movs	r1, #2
 8003b22:	6011      	str	r1, [r2, #0]
 8003b24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	fa92 f1a2 	rbit	r1, r2
 8003b2e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b32:	6011      	str	r1, [r2, #0]
  return result;
 8003b34:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	fab2 f282 	clz	r2, r2
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	f002 021f 	and.w	r2, r2, #31
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d099      	beq.n	8003a8a <HAL_RCC_OscConfig+0x8c6>
 8003b56:	e063      	b.n	8003c20 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7fe fdea 	bl	8002730 <HAL_GetTick>
 8003b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b60:	e00b      	b.n	8003b7a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fe fde5 	bl	8002730 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e225      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003b7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b7e:	2202      	movs	r2, #2
 8003b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	fa93 f2a3 	rbit	r2, r3
 8003b8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b96:	2202      	movs	r2, #2
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ba8:	601a      	str	r2, [r3, #0]
  return result;
 8003baa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0302 	orr.w	r3, r3, #2
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d102      	bne.n	8003bca <HAL_RCC_OscConfig+0xa06>
 8003bc4:	4b90      	ldr	r3, [pc, #576]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	e00d      	b.n	8003be6 <HAL_RCC_OscConfig+0xa22>
 8003bca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003bce:	2202      	movs	r2, #2
 8003bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	fa93 f2a3 	rbit	r2, r3
 8003bdc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	4b89      	ldr	r3, [pc, #548]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bea:	2102      	movs	r1, #2
 8003bec:	6011      	str	r1, [r2, #0]
 8003bee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	fa92 f1a2 	rbit	r1, r2
 8003bf8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003bfc:	6011      	str	r1, [r2, #0]
  return result;
 8003bfe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	fab2 f282 	clz	r2, r2
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	f002 021f 	and.w	r2, r2, #31
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1a0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c28:	4b77      	ldr	r3, [pc, #476]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4a76      	ldr	r2, [pc, #472]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 81c2 	beq.w	8003fc4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c40:	4b71      	ldr	r3, [pc, #452]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	f000 819c 	beq.w	8003f86 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	f040 8114 	bne.w	8003e82 <HAL_RCC_OscConfig+0xcbe>
 8003c5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	fa93 f2a3 	rbit	r2, r3
 8003c6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c72:	601a      	str	r2, [r3, #0]
  return result;
 8003c74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe fd4e 	bl	8002730 <HAL_GetTick>
 8003c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c98:	e009      	b.n	8003cae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fe fd49 	bl	8002730 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e18b      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003cae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	fa93 f2a3 	rbit	r2, r3
 8003cc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003cc6:	601a      	str	r2, [r3, #0]
  return result;
 8003cc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ccc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d102      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xb24>
 8003ce2:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	e01b      	b.n	8003d20 <HAL_RCC_OscConfig+0xb5c>
 8003ce8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	fa93 f2a3 	rbit	r2, r3
 8003d16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	4b3a      	ldr	r3, [pc, #232]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	fa92 f1a2 	rbit	r1, r2
 8003d34:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d38:	6011      	str	r1, [r2, #0]
  return result;
 8003d3a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f002 021f 	and.w	r2, r2, #31
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d19e      	bne.n	8003c9a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	4925      	ldr	r1, [pc, #148]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
 8003d78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	fa93 f2a3 	rbit	r2, r3
 8003d8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d90:	601a      	str	r2, [r3, #0]
  return result;
 8003d92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d96:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003da2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	461a      	mov	r2, r3
 8003daa:	2301      	movs	r3, #1
 8003dac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fe fcbf 	bl	8002730 <HAL_GetTick>
 8003db2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db6:	e009      	b.n	8003dcc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fe fcba 	bl	8002730 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0fc      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003dcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	fa93 f2a3 	rbit	r2, r3
 8003de0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003de4:	601a      	str	r2, [r3, #0]
  return result;
 8003de6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCC_OscConfig+0xc48>
 8003e00:	4b01      	ldr	r3, [pc, #4]	; (8003e08 <HAL_RCC_OscConfig+0xc44>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	e01e      	b.n	8003e44 <HAL_RCC_OscConfig+0xc80>
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	fa93 f2a3 	rbit	r2, r3
 8003e20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	fa93 f2a3 	rbit	r2, r3
 8003e3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <HAL_RCC_OscConfig+0xe0c>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	fa92 f1a2 	rbit	r1, r2
 8003e58:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e5c:	6011      	str	r1, [r2, #0]
  return result;
 8003e5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	fab2 f282 	clz	r2, r2
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	f042 0220 	orr.w	r2, r2, #32
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	f002 021f 	and.w	r2, r2, #31
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d09b      	beq.n	8003db8 <HAL_RCC_OscConfig+0xbf4>
 8003e80:	e0a0      	b.n	8003fc4 <HAL_RCC_OscConfig+0xe00>
 8003e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f2a3 	rbit	r2, r3
 8003e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e9a:	601a      	str	r2, [r3, #0]
  return result;
 8003e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ea0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fc3a 	bl	8002730 <HAL_GetTick>
 8003ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	e009      	b.n	8003ed6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fe fc35 	bl	8002730 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e077      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
 8003ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	fa93 f2a3 	rbit	r2, r3
 8003eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eee:	601a      	str	r2, [r3, #0]
  return result;
 8003ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d102      	bne.n	8003f10 <HAL_RCC_OscConfig+0xd4c>
 8003f0a:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <HAL_RCC_OscConfig+0xe0c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	e01b      	b.n	8003f48 <HAL_RCC_OscConfig+0xd84>
 8003f10:	f107 0320 	add.w	r3, r7, #32
 8003f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f107 0320 	add.w	r3, r7, #32
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f107 031c 	add.w	r3, r7, #28
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f107 0318 	add.w	r3, r7, #24
 8003f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f107 0318 	add.w	r3, r7, #24
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f107 0314 	add.w	r3, r7, #20
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <HAL_RCC_OscConfig+0xe0c>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f107 0210 	add.w	r2, r7, #16
 8003f4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f50:	6011      	str	r1, [r2, #0]
 8003f52:	f107 0210 	add.w	r2, r7, #16
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	fa92 f1a2 	rbit	r1, r2
 8003f5c:	f107 020c 	add.w	r2, r7, #12
 8003f60:	6011      	str	r1, [r2, #0]
  return result;
 8003f62:	f107 020c 	add.w	r2, r7, #12
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	fab2 f282 	clz	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	f042 0220 	orr.w	r2, r2, #32
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	f002 021f 	and.w	r2, r2, #31
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d19e      	bne.n	8003ec2 <HAL_RCC_OscConfig+0xcfe>
 8003f84:	e01e      	b.n	8003fc4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e018      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_RCC_OscConfig+0xe0c>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d108      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003fae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b09e      	sub	sp, #120	; 0x78
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e162      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b90      	ldr	r3, [pc, #576]	; (8004230 <HAL_RCC_ClockConfig+0x25c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d910      	bls.n	800401c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b8d      	ldr	r3, [pc, #564]	; (8004230 <HAL_RCC_ClockConfig+0x25c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 0207 	bic.w	r2, r3, #7
 8004002:	498b      	ldr	r1, [pc, #556]	; (8004230 <HAL_RCC_ClockConfig+0x25c>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b89      	ldr	r3, [pc, #548]	; (8004230 <HAL_RCC_ClockConfig+0x25c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e14a      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004028:	4b82      	ldr	r3, [pc, #520]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	497f      	ldr	r1, [pc, #508]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80dc 	beq.w	8004200 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13c      	bne.n	80040ca <HAL_RCC_ClockConfig+0xf6>
 8004050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004054:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800405e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <HAL_RCC_ClockConfig+0xa6>
 8004074:	4b6f      	ldr	r3, [pc, #444]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	e00f      	b.n	800409a <HAL_RCC_ClockConfig+0xc6>
 800407a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800407e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	667b      	str	r3, [r7, #100]	; 0x64
 8004088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800408c:	663b      	str	r3, [r7, #96]	; 0x60
 800408e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004096:	4b67      	ldr	r3, [pc, #412]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800409e:	65ba      	str	r2, [r7, #88]	; 0x58
 80040a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040a2:	fa92 f2a2 	rbit	r2, r2
 80040a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040aa:	fab2 f282 	clz	r2, r2
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	f042 0220 	orr.w	r2, r2, #32
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	f002 021f 	and.w	r2, r2, #31
 80040ba:	2101      	movs	r1, #1
 80040bc:	fa01 f202 	lsl.w	r2, r1, r2
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d17b      	bne.n	80041be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e0f3      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d13c      	bne.n	800414c <HAL_RCC_ClockConfig+0x178>
 80040d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d102      	bne.n	80040fc <HAL_RCC_ClockConfig+0x128>
 80040f6:	4b4f      	ldr	r3, [pc, #316]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	e00f      	b.n	800411c <HAL_RCC_ClockConfig+0x148>
 80040fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004100:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	647b      	str	r3, [r7, #68]	; 0x44
 800410a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800410e:	643b      	str	r3, [r7, #64]	; 0x40
 8004110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004118:	4b46      	ldr	r3, [pc, #280]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004120:	63ba      	str	r2, [r7, #56]	; 0x38
 8004122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004124:	fa92 f2a2 	rbit	r2, r2
 8004128:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800412a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800412c:	fab2 f282 	clz	r2, r2
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	f042 0220 	orr.w	r2, r2, #32
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	f002 021f 	and.w	r2, r2, #31
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f202 	lsl.w	r2, r1, r2
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d13a      	bne.n	80041be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0b2      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2de>
 800414c:	2302      	movs	r3, #2
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d102      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
 800416e:	4b31      	ldr	r3, [pc, #196]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	e00d      	b.n	8004190 <HAL_RCC_ClockConfig+0x1bc>
 8004174:	2302      	movs	r3, #2
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
 8004180:	2302      	movs	r3, #2
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	4b29      	ldr	r3, [pc, #164]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2202      	movs	r2, #2
 8004192:	61ba      	str	r2, [r7, #24]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	fa92 f2a2 	rbit	r2, r2
 800419a:	617a      	str	r2, [r7, #20]
  return result;
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	fab2 f282 	clz	r2, r2
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	f042 0220 	orr.w	r2, r2, #32
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	f002 021f 	and.w	r2, r2, #31
 80041ae:	2101      	movs	r1, #1
 80041b0:	fa01 f202 	lsl.w	r2, r1, r2
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e079      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	491a      	ldr	r1, [pc, #104]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d0:	f7fe faae 	bl	8002730 <HAL_GetTick>
 80041d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fe faaa 	bl	8002730 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e061      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_RCC_ClockConfig+0x260>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 020c 	and.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1eb      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x25c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d214      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_RCC_ClockConfig+0x25c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	4906      	ldr	r1, [pc, #24]	; (8004230 <HAL_RCC_ClockConfig+0x25c>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <HAL_RCC_ClockConfig+0x25c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e040      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2de>
 8004230:	40022000 	.word	0x40022000
 8004234:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004244:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <HAL_RCC_ClockConfig+0x2e8>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	491a      	ldr	r1, [pc, #104]	; (80042bc <HAL_RCC_ClockConfig+0x2e8>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004262:	4b16      	ldr	r3, [pc, #88]	; (80042bc <HAL_RCC_ClockConfig+0x2e8>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4912      	ldr	r1, [pc, #72]	; (80042bc <HAL_RCC_ClockConfig+0x2e8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004276:	f000 f829 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800427a:	4601      	mov	r1, r0
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_RCC_ClockConfig+0x2e8>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004284:	22f0      	movs	r2, #240	; 0xf0
 8004286:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	fa92 f2a2 	rbit	r2, r2
 800428e:	60fa      	str	r2, [r7, #12]
  return result;
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	fab2 f282 	clz	r2, r2
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	40d3      	lsrs	r3, r2
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x2ec>)
 800429c:	5cd3      	ldrb	r3, [r2, r3]
 800429e:	fa21 f303 	lsr.w	r3, r1, r3
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <HAL_RCC_ClockConfig+0x2f0>)
 80042a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_RCC_ClockConfig+0x2f4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe f9fc 	bl	80026a8 <HAL_InitTick>
  
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3778      	adds	r7, #120	; 0x78
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	08007a48 	.word	0x08007a48
 80042c4:	200000fc 	.word	0x200000fc
 80042c8:	20000100 	.word	0x20000100

080042cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b08b      	sub	sp, #44	; 0x2c
 80042d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80042e6:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_RCC_GetSysClockFreq+0xc0>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d002      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x30>
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d003      	beq.n	8004302 <HAL_RCC_GetSysClockFreq+0x36>
 80042fa:	e03c      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042fc:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042fe:	623b      	str	r3, [r7, #32]
      break;
 8004300:	e03c      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004308:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800430c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	fa92 f2a2 	rbit	r2, r2
 8004314:	607a      	str	r2, [r7, #4]
  return result;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	fab2 f282 	clz	r2, r2
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	40d3      	lsrs	r3, r2
 8004320:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004322:	5cd3      	ldrb	r3, [r2, r3]
 8004324:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	220f      	movs	r2, #15
 8004330:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	fa92 f2a2 	rbit	r2, r2
 8004338:	60fa      	str	r2, [r7, #12]
  return result;
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	fab2 f282 	clz	r2, r2
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	40d3      	lsrs	r3, r2
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004346:	5cd3      	ldrb	r3, [r2, r3]
 8004348:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004354:	4a0e      	ldr	r2, [pc, #56]	; (8004390 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	fbb2 f2f3 	udiv	r2, r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	e004      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4a0c      	ldr	r2, [pc, #48]	; (800439c <HAL_RCC_GetSysClockFreq+0xd0>)
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	623b      	str	r3, [r7, #32]
      break;
 8004374:	e002      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004378:	623b      	str	r3, [r7, #32]
      break;
 800437a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437c:	6a3b      	ldr	r3, [r7, #32]
}
 800437e:	4618      	mov	r0, r3
 8004380:	372c      	adds	r7, #44	; 0x2c
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	007a1200 	.word	0x007a1200
 8004394:	08007a60 	.word	0x08007a60
 8004398:	08007a70 	.word	0x08007a70
 800439c:	003d0900 	.word	0x003d0900

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	200000fc 	.word	0x200000fc

080043b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043be:	f7ff ffef 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043c2:	4601      	mov	r1, r0
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	fa92 f2a2 	rbit	r2, r2
 80043d8:	603a      	str	r2, [r7, #0]
  return result;
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	fab2 f282 	clz	r2, r2
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	40d3      	lsrs	r3, r2
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80043e6:	5cd3      	ldrb	r3, [r2, r3]
 80043e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	08007a58 	.word	0x08007a58

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004402:	f7ff ffcd 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 8004406:	4601      	mov	r1, r0
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004410:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004414:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	fa92 f2a2 	rbit	r2, r2
 800441c:	603a      	str	r2, [r7, #0]
  return result;
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	40d3      	lsrs	r3, r2
 8004428:	4a04      	ldr	r2, [pc, #16]	; (800443c <HAL_RCC_GetPCLK2Freq+0x40>)
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000
 800443c:	08007a58 	.word	0x08007a58

08004440 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b092      	sub	sp, #72	; 0x48
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80d4 	beq.w	800460c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004464:	4b4e      	ldr	r3, [pc, #312]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10e      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	4b4b      	ldr	r3, [pc, #300]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	4a4a      	ldr	r2, [pc, #296]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447a:	61d3      	str	r3, [r2, #28]
 800447c:	4b48      	ldr	r3, [pc, #288]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448e:	4b45      	ldr	r3, [pc, #276]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d118      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449a:	4b42      	ldr	r3, [pc, #264]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a41      	ldr	r2, [pc, #260]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a6:	f7fe f943 	bl	8002730 <HAL_GetTick>
 80044aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	e008      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ae:	f7fe f93f 	bl	8002730 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b64      	cmp	r3, #100	; 0x64
 80044ba:	d901      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e169      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	4b38      	ldr	r3, [pc, #224]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044cc:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8084 	beq.w	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d07c      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ec:	4b2c      	ldr	r3, [pc, #176]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	fa93 f3a3 	rbit	r3, r3
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	461a      	mov	r2, r3
 8004516:	2301      	movs	r3, #1
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	461a      	mov	r2, r3
 800453a:	2300      	movs	r3, #0
 800453c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800453e:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d04b      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fe f8ef 	bl	8002730 <HAL_GetTick>
 8004552:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004556:	f7fe f8eb 	bl	8002730 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	; 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e113      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800456c:	2302      	movs	r3, #2
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
 8004578:	2302      	movs	r3, #2
 800457a:	623b      	str	r3, [r7, #32]
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	61fb      	str	r3, [r7, #28]
  return result;
 8004584:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d108      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800459a:	4b01      	ldr	r3, [pc, #4]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	e00d      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40007000 	.word	0x40007000
 80045a8:	10908100 	.word	0x10908100
 80045ac:	2302      	movs	r3, #2
 80045ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	4b78      	ldr	r3, [pc, #480]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2202      	movs	r2, #2
 80045be:	613a      	str	r2, [r7, #16]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	fa92 f2a2 	rbit	r2, r2
 80045c6:	60fa      	str	r2, [r7, #12]
  return result;
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	fab2 f282 	clz	r2, r2
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	f002 021f 	and.w	r2, r2, #31
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f202 	lsl.w	r2, r1, r2
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0b7      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045e6:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	496a      	ldr	r1, [pc, #424]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d105      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004600:	4b66      	ldr	r3, [pc, #408]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	4a65      	ldr	r2, [pc, #404]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004618:	4b60      	ldr	r3, [pc, #384]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	f023 0203 	bic.w	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	495d      	ldr	r1, [pc, #372]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004636:	4b59      	ldr	r3, [pc, #356]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4956      	ldr	r1, [pc, #344]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004654:	4b51      	ldr	r3, [pc, #324]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	494e      	ldr	r1, [pc, #312]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004672:	4b4a      	ldr	r3, [pc, #296]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	f023 0210 	bic.w	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4947      	ldr	r1, [pc, #284]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004690:	4b42      	ldr	r3, [pc, #264]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	493f      	ldr	r1, [pc, #252]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ae:	4b3b      	ldr	r3, [pc, #236]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f023 0220 	bic.w	r2, r3, #32
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4938      	ldr	r1, [pc, #224]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046cc:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	4930      	ldr	r1, [pc, #192]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	4929      	ldr	r1, [pc, #164]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4921      	ldr	r1, [pc, #132]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	491a      	ldr	r1, [pc, #104]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004734:	4313      	orrs	r3, r2
 8004736:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004744:	4b15      	ldr	r3, [pc, #84]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	4912      	ldr	r1, [pc, #72]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004762:	4b0e      	ldr	r3, [pc, #56]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	490b      	ldr	r1, [pc, #44]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004770:	4313      	orrs	r3, r2
 8004772:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	4903      	ldr	r1, [pc, #12]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800478e:	4313      	orrs	r3, r2
 8004790:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3748      	adds	r7, #72	; 0x48
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000

080047a0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e083      	b.n	80048ba <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7f5b      	ldrb	r3, [r3, #29]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fd fd68 	bl	8002298 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	22ca      	movs	r2, #202	; 0xca
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2253      	movs	r2, #83	; 0x53
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fc26 	bl	8005030 <RTC_EnterInitMode>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2204      	movs	r2, #4
 80047f6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e05e      	b.n	80048ba <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800480a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68d2      	ldr	r2, [r2, #12]
 8004836:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6919      	ldr	r1, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	041a      	lsls	r2, r3, #16
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10e      	bne.n	8004888 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fbb8 	bl	8004fe0 <HAL_RTC_WaitForSynchro>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	22ff      	movs	r2, #255	; 0xff
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2204      	movs	r2, #4
 8004882:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e018      	b.n	80048ba <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	22ff      	movs	r2, #255	; 0xff
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048c2:	b590      	push	{r4, r7, lr}
 80048c4:	b087      	sub	sp, #28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	7f1b      	ldrb	r3, [r3, #28]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_RTC_SetTime+0x1c>
 80048da:	2302      	movs	r3, #2
 80048dc:	e0aa      	b.n	8004a34 <HAL_RTC_SetTime+0x172>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2202      	movs	r2, #2
 80048e8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d126      	bne.n	800493e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2200      	movs	r2, #0
 8004902:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fbbd 	bl	8005088 <RTC_ByteToBcd2>
 800490e:	4603      	mov	r3, r0
 8004910:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fbb6 	bl	8005088 <RTC_ByteToBcd2>
 800491c:	4603      	mov	r3, r0
 800491e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004920:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	789b      	ldrb	r3, [r3, #2]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fbae 	bl	8005088 <RTC_ByteToBcd2>
 800492c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800492e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	78db      	ldrb	r3, [r3, #3]
 8004936:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	e018      	b.n	8004970 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2200      	movs	r2, #0
 8004950:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800495e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004964:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	78db      	ldrb	r3, [r3, #3]
 800496a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	22ca      	movs	r2, #202	; 0xca
 8004976:	625a      	str	r2, [r3, #36]	; 0x24
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2253      	movs	r2, #83	; 0x53
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fb55 	bl	8005030 <RTC_EnterInitMode>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	22ff      	movs	r2, #255	; 0xff
 8004992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2204      	movs	r2, #4
 8004998:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e047      	b.n	8004a34 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80049ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80049b2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6899      	ldr	r1, [r3, #8]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d111      	bne.n	8004a1e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 faf0 	bl	8004fe0 <HAL_RTC_WaitForSynchro>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	22ff      	movs	r2, #255	; 0xff
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2204      	movs	r2, #4
 8004a12:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e00a      	b.n	8004a34 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	22ff      	movs	r2, #255	; 0xff
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd90      	pop	{r4, r7, pc}

08004a3c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a6e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11a      	bne.n	8004aee <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fb01 	bl	80050c4 <RTC_Bcd2ToByte>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 faf8 	bl	80050c4 <RTC_Bcd2ToByte>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	789b      	ldrb	r3, [r3, #2]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 faef 	bl	80050c4 <RTC_Bcd2ToByte>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004af8:	b590      	push	{r4, r7, lr}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	7f1b      	ldrb	r3, [r3, #28]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_RTC_SetDate+0x1c>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e094      	b.n	8004c3e <HAL_RTC_SetDate+0x146>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10e      	bne.n	8004b44 <HAL_RTC_SetDate+0x4c>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	f023 0310 	bic.w	r3, r3, #16
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	330a      	adds	r3, #10
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11c      	bne.n	8004b84 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	78db      	ldrb	r3, [r3, #3]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fa9a 	bl	8005088 <RTC_ByteToBcd2>
 8004b54:	4603      	mov	r3, r0
 8004b56:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fa93 	bl	8005088 <RTC_ByteToBcd2>
 8004b62:	4603      	mov	r3, r0
 8004b64:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b66:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	789b      	ldrb	r3, [r3, #2]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fa8b 	bl	8005088 <RTC_ByteToBcd2>
 8004b72:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b74:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e00e      	b.n	8004ba2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	78db      	ldrb	r3, [r3, #3]
 8004b88:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b90:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b96:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	22ca      	movs	r2, #202	; 0xca
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2253      	movs	r2, #83	; 0x53
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fa3c 	bl	8005030 <RTC_EnterInitMode>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e033      	b.n	8004c3e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004be0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004be4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bf4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d111      	bne.n	8004c28 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f9eb 	bl	8004fe0 <HAL_RTC_WaitForSynchro>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e00a      	b.n	8004c3e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	22ff      	movs	r2, #255	; 0xff
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}

08004c46 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c64:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	0b5b      	lsrs	r3, r3, #13
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11a      	bne.n	8004cda <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	78db      	ldrb	r3, [r3, #3]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fa0b 	bl	80050c4 <RTC_Bcd2ToByte>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fa02 	bl	80050c4 <RTC_Bcd2ToByte>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	789b      	ldrb	r3, [r3, #2]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f9f9 	bl	80050c4 <RTC_Bcd2ToByte>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b089      	sub	sp, #36	; 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	7f1b      	ldrb	r3, [r3, #28]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_RTC_SetAlarm_IT+0x24>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e11f      	b.n	8004f48 <HAL_RTC_SetAlarm_IT+0x264>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2202      	movs	r2, #2
 8004d12:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d137      	bne.n	8004d8a <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f9a8 	bl	8005088 <RTC_ByteToBcd2>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 f9a1 	bl	8005088 <RTC_ByteToBcd2>
 8004d46:	4603      	mov	r3, r0
 8004d48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d4a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	789b      	ldrb	r3, [r3, #2]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 f999 	bl	8005088 <RTC_ByteToBcd2>
 8004d56:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	78db      	ldrb	r3, [r3, #3]
 8004d60:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004d62:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f98b 	bl	8005088 <RTC_ByteToBcd2>
 8004d72:	4603      	mov	r3, r0
 8004d74:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d76:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e023      	b.n	8004dd2 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004daa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004db0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	78db      	ldrb	r3, [r3, #3]
 8004db6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004db8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dc0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004dc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004dc8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	22ca      	movs	r2, #202	; 0xca
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2253      	movs	r2, #83	; 0x53
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df6:	d148      	bne.n	8004e8a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e06:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004e18:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004e1a:	f7fd fc89 	bl	8002730 <HAL_GetTick>
 8004e1e:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004e20:	e013      	b.n	8004e4a <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e22:	f7fd fc85 	bl	8002730 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e30:	d90b      	bls.n	8004e4a <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	22ff      	movs	r2, #255	; 0xff
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e07e      	b.n	8004f48 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0e4      	beq.n	8004e22 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e76:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	e047      	b.n	8004f1a <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e98:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004eaa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004eac:	f7fd fc40 	bl	8002730 <HAL_GetTick>
 8004eb0:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004eb2:	e013      	b.n	8004edc <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004eb4:	f7fd fc3c 	bl	8002730 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec2:	d90b      	bls.n	8004edc <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	22ff      	movs	r2, #255	; 0xff
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e035      	b.n	8004f48 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0e4      	beq.n	8004eb4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f18:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <HAL_RTC_SetAlarm_IT+0x26c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a0c      	ldr	r2, [pc, #48]	; (8004f50 <HAL_RTC_SetAlarm_IT+0x26c>)
 8004f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f24:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_RTC_SetAlarm_IT+0x26c>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <HAL_RTC_SetAlarm_IT+0x26c>)
 8004f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f30:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	22ff      	movs	r2, #255	; 0xff
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3724      	adds	r7, #36	; 0x24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd90      	pop	{r4, r7, pc}
 8004f50:	40010400 	.word	0x40010400

08004f54 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d012      	beq.n	8004f90 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fb fd81 	bl	8000a80 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004f8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d012      	beq.n	8004fc4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00b      	beq.n	8004fc4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f8d9 	bl	8005164 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004fc2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RTC_AlarmIRQHandler+0x88>)
 8004fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fca:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	775a      	strb	r2, [r3, #29]
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ffa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004ffc:	f7fd fb98 	bl	8002730 <HAL_GetTick>
 8005000:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005002:	e009      	b.n	8005018 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005004:	f7fd fb94 	bl	8002730 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005012:	d901      	bls.n	8005018 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e007      	b.n	8005028 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0ee      	beq.n	8005004 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d119      	bne.n	800507e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f04f 32ff 	mov.w	r2, #4294967295
 8005052:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005054:	f7fd fb6c 	bl	8002730 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800505a:	e009      	b.n	8005070 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800505c:	f7fd fb68 	bl	8002730 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800506a:	d901      	bls.n	8005070 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e007      	b.n	8005080 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0ee      	beq.n	800505c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005096:	e005      	b.n	80050a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	3b0a      	subs	r3, #10
 80050a2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	d8f6      	bhi.n	8005098 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	b2db      	uxtb	r3, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	b2db      	uxtb	r3, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3350      	adds	r3, #80	; 0x50
 8005116:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3350      	adds	r3, #80	; 0x50
 8005148:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e040      	b.n	800520c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd f8a8 	bl	80022f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	; 0x24
 80051a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fb1e 	bl	80057f8 <UART_SetConfig>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e022      	b.n	800520c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fce6 	bl	8005ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fd6d 	bl	8005ce4 <UART_CheckIdleState>
 800520a:	4603      	mov	r3, r0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005228:	2b20      	cmp	r3, #32
 800522a:	f040 8082 	bne.w	8005332 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_Transmit+0x26>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07a      	b.n	8005334 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_UART_Transmit+0x38>
 8005248:	2302      	movs	r3, #2
 800524a:	e073      	b.n	8005334 <HAL_UART_Transmit+0x120>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2221      	movs	r2, #33	; 0x21
 8005260:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005262:	f7fd fa65 	bl	8002730 <HAL_GetTick>
 8005266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d108      	bne.n	8005294 <HAL_UART_Transmit+0x80>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e003      	b.n	800529c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80052a4:	e02d      	b.n	8005302 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fd60 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e039      	b.n	8005334 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d2:	b292      	uxth	r2, r2
 80052d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	3302      	adds	r3, #2
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e008      	b.n	80052f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	781a      	ldrb	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	b292      	uxth	r2, r2
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1cb      	bne.n	80052a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	2140      	movs	r1, #64	; 0x40
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fd2c 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e005      	b.n	8005334 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534e:	2b20      	cmp	r3, #32
 8005350:	d12c      	bne.n	80053ac <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_UART_Receive_IT+0x22>
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e025      	b.n	80053ae <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_UART_Receive_IT+0x34>
 800536c:	2302      	movs	r3, #2
 800536e:	e01e      	b.n	80053ae <HAL_UART_Receive_IT+0x72>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800539a:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	461a      	mov	r2, r3
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fd64 	bl	8005e70 <UART_Start_Receive_IT>
 80053a8:	4603      	mov	r3, r0
 80053aa:	e000      	b.n	80053ae <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f640 030f 	movw	r3, #2063	; 0x80f
 80053de:	4013      	ands	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d113      	bne.n	8005410 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00e      	beq.n	8005410 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 81cc 	beq.w	800579e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
      }
      return;
 800540e:	e1c6      	b.n	800579e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80e3 	beq.w	80055de <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d105      	bne.n	800542e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4ba5      	ldr	r3, [pc, #660]	; (80056bc <HAL_UART_IRQHandler+0x304>)
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80d8 	beq.w	80055de <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d010      	beq.n	800545a <HAL_UART_IRQHandler+0xa2>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2201      	movs	r2, #1
 8005448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	f043 0201 	orr.w	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <HAL_UART_IRQHandler+0xce>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2202      	movs	r2, #2
 8005474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547c:	f043 0204 	orr.w	r2, r3, #4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <HAL_UART_IRQHandler+0xfa>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2204      	movs	r2, #4
 80054a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a8:	f043 0202 	orr.w	r2, r3, #2
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2208      	movs	r2, #8
 80054d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054de:	f043 0208 	orr.w	r2, r3, #8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d011      	beq.n	8005516 <HAL_UART_IRQHandler+0x15e>
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00c      	beq.n	8005516 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8140 	beq.w	80057a2 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00c      	beq.n	8005546 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d004      	beq.n	8005566 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005562:	2b00      	cmp	r3, #0
 8005564:	d031      	beq.n	80055ca <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fcf8 	bl	8005f5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d123      	bne.n	80055c2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005588:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	2b00      	cmp	r3, #0
 8005590:	d013      	beq.n	80055ba <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	4a4a      	ldr	r2, [pc, #296]	; (80056c0 <HAL_UART_IRQHandler+0x308>)
 8005598:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fd fa40 	bl	8002a24 <HAL_DMA_Abort_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d017      	beq.n	80055da <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e00f      	b.n	80055da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f906 	bl	80057cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	e00b      	b.n	80055da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f902 	bl	80057cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	e007      	b.n	80055da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8fe 	bl	80057cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80055d8:	e0e3      	b.n	80057a2 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055da:	bf00      	nop
    return;
 80055dc:	e0e1      	b.n	80057a2 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	f040 80a7 	bne.w	8005736 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80a1 	beq.w	8005736 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 809b 	beq.w	8005736 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2210      	movs	r2, #16
 8005606:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d156      	bne.n	80056c4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005620:	893b      	ldrh	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80bf 	beq.w	80057a6 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800562e:	893a      	ldrh	r2, [r7, #8]
 8005630:	429a      	cmp	r2, r3
 8005632:	f080 80b8 	bcs.w	80057a6 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	893a      	ldrh	r2, [r7, #8]
 800563a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b20      	cmp	r3, #32
 8005646:	d02a      	beq.n	800569e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005656:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0210 	bic.w	r2, r2, #16
 8005692:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	4618      	mov	r0, r3
 800569a:	f7fd f98a 	bl	80029b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f894 	bl	80057e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056b8:	e075      	b.n	80057a6 <HAL_UART_IRQHandler+0x3ee>
 80056ba:	bf00      	nop
 80056bc:	04000120 	.word	0x04000120
 80056c0:	08005fbb 	.word	0x08005fbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d063      	beq.n	80057aa <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 80056e2:	897b      	ldrh	r3, [r7, #10]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d060      	beq.n	80057aa <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0210 	bic.w	r2, r2, #16
 8005728:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800572a:	897b      	ldrh	r3, [r7, #10]
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f856 	bl	80057e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005734:	e039      	b.n	80057aa <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00d      	beq.n	800575c <HAL_UART_IRQHandler+0x3a4>
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005752:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fd33 	bl	80061c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800575a:	e029      	b.n	80057b0 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00d      	beq.n	8005782 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01a      	beq.n	80057ae <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4798      	blx	r3
    }
    return;
 8005780:	e015      	b.n	80057ae <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d011      	beq.n	80057b0 <HAL_UART_IRQHandler+0x3f8>
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fc25 	bl	8005fe6 <UART_EndTransmit_IT>
    return;
 800579c:	e008      	b.n	80057b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 800579e:	bf00      	nop
 80057a0:	e006      	b.n	80057b0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80057a2:	bf00      	nop
 80057a4:	e004      	b.n	80057b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80057ae:	bf00      	nop
  }

}
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop

080057b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005826:	f023 030c 	bic.w	r3, r3, #12
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	6979      	ldr	r1, [r7, #20]
 8005830:	430b      	orrs	r3, r1
 8005832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4aae      	ldr	r2, [pc, #696]	; (8005b2c <UART_SetConfig+0x334>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d120      	bne.n	80058ba <UART_SetConfig+0xc2>
 8005878:	4bad      	ldr	r3, [pc, #692]	; (8005b30 <UART_SetConfig+0x338>)
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	2b03      	cmp	r3, #3
 8005882:	d817      	bhi.n	80058b4 <UART_SetConfig+0xbc>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <UART_SetConfig+0x94>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058a9 	.word	0x080058a9
 8005894:	080058af 	.word	0x080058af
 8005898:	080058a3 	.word	0x080058a3
 800589c:	2301      	movs	r3, #1
 800589e:	77fb      	strb	r3, [r7, #31]
 80058a0:	e0b5      	b.n	8005a0e <UART_SetConfig+0x216>
 80058a2:	2302      	movs	r3, #2
 80058a4:	77fb      	strb	r3, [r7, #31]
 80058a6:	e0b2      	b.n	8005a0e <UART_SetConfig+0x216>
 80058a8:	2304      	movs	r3, #4
 80058aa:	77fb      	strb	r3, [r7, #31]
 80058ac:	e0af      	b.n	8005a0e <UART_SetConfig+0x216>
 80058ae:	2308      	movs	r3, #8
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	e0ac      	b.n	8005a0e <UART_SetConfig+0x216>
 80058b4:	2310      	movs	r3, #16
 80058b6:	77fb      	strb	r3, [r7, #31]
 80058b8:	e0a9      	b.n	8005a0e <UART_SetConfig+0x216>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a9d      	ldr	r2, [pc, #628]	; (8005b34 <UART_SetConfig+0x33c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d124      	bne.n	800590e <UART_SetConfig+0x116>
 80058c4:	4b9a      	ldr	r3, [pc, #616]	; (8005b30 <UART_SetConfig+0x338>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058d0:	d011      	beq.n	80058f6 <UART_SetConfig+0xfe>
 80058d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058d6:	d817      	bhi.n	8005908 <UART_SetConfig+0x110>
 80058d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058dc:	d011      	beq.n	8005902 <UART_SetConfig+0x10a>
 80058de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e2:	d811      	bhi.n	8005908 <UART_SetConfig+0x110>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <UART_SetConfig+0xf8>
 80058e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ec:	d006      	beq.n	80058fc <UART_SetConfig+0x104>
 80058ee:	e00b      	b.n	8005908 <UART_SetConfig+0x110>
 80058f0:	2300      	movs	r3, #0
 80058f2:	77fb      	strb	r3, [r7, #31]
 80058f4:	e08b      	b.n	8005a0e <UART_SetConfig+0x216>
 80058f6:	2302      	movs	r3, #2
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e088      	b.n	8005a0e <UART_SetConfig+0x216>
 80058fc:	2304      	movs	r3, #4
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e085      	b.n	8005a0e <UART_SetConfig+0x216>
 8005902:	2308      	movs	r3, #8
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e082      	b.n	8005a0e <UART_SetConfig+0x216>
 8005908:	2310      	movs	r3, #16
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e07f      	b.n	8005a0e <UART_SetConfig+0x216>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a89      	ldr	r2, [pc, #548]	; (8005b38 <UART_SetConfig+0x340>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d124      	bne.n	8005962 <UART_SetConfig+0x16a>
 8005918:	4b85      	ldr	r3, [pc, #532]	; (8005b30 <UART_SetConfig+0x338>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005920:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005924:	d011      	beq.n	800594a <UART_SetConfig+0x152>
 8005926:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800592a:	d817      	bhi.n	800595c <UART_SetConfig+0x164>
 800592c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005930:	d011      	beq.n	8005956 <UART_SetConfig+0x15e>
 8005932:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005936:	d811      	bhi.n	800595c <UART_SetConfig+0x164>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <UART_SetConfig+0x14c>
 800593c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005940:	d006      	beq.n	8005950 <UART_SetConfig+0x158>
 8005942:	e00b      	b.n	800595c <UART_SetConfig+0x164>
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e061      	b.n	8005a0e <UART_SetConfig+0x216>
 800594a:	2302      	movs	r3, #2
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e05e      	b.n	8005a0e <UART_SetConfig+0x216>
 8005950:	2304      	movs	r3, #4
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e05b      	b.n	8005a0e <UART_SetConfig+0x216>
 8005956:	2308      	movs	r3, #8
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e058      	b.n	8005a0e <UART_SetConfig+0x216>
 800595c:	2310      	movs	r3, #16
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e055      	b.n	8005a0e <UART_SetConfig+0x216>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a75      	ldr	r2, [pc, #468]	; (8005b3c <UART_SetConfig+0x344>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d124      	bne.n	80059b6 <UART_SetConfig+0x1be>
 800596c:	4b70      	ldr	r3, [pc, #448]	; (8005b30 <UART_SetConfig+0x338>)
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005978:	d011      	beq.n	800599e <UART_SetConfig+0x1a6>
 800597a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800597e:	d817      	bhi.n	80059b0 <UART_SetConfig+0x1b8>
 8005980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005984:	d011      	beq.n	80059aa <UART_SetConfig+0x1b2>
 8005986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800598a:	d811      	bhi.n	80059b0 <UART_SetConfig+0x1b8>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <UART_SetConfig+0x1a0>
 8005990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005994:	d006      	beq.n	80059a4 <UART_SetConfig+0x1ac>
 8005996:	e00b      	b.n	80059b0 <UART_SetConfig+0x1b8>
 8005998:	2300      	movs	r3, #0
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e037      	b.n	8005a0e <UART_SetConfig+0x216>
 800599e:	2302      	movs	r3, #2
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e034      	b.n	8005a0e <UART_SetConfig+0x216>
 80059a4:	2304      	movs	r3, #4
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e031      	b.n	8005a0e <UART_SetConfig+0x216>
 80059aa:	2308      	movs	r3, #8
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e02e      	b.n	8005a0e <UART_SetConfig+0x216>
 80059b0:	2310      	movs	r3, #16
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e02b      	b.n	8005a0e <UART_SetConfig+0x216>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a61      	ldr	r2, [pc, #388]	; (8005b40 <UART_SetConfig+0x348>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d124      	bne.n	8005a0a <UART_SetConfig+0x212>
 80059c0:	4b5b      	ldr	r3, [pc, #364]	; (8005b30 <UART_SetConfig+0x338>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80059c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059cc:	d011      	beq.n	80059f2 <UART_SetConfig+0x1fa>
 80059ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059d2:	d817      	bhi.n	8005a04 <UART_SetConfig+0x20c>
 80059d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059d8:	d011      	beq.n	80059fe <UART_SetConfig+0x206>
 80059da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059de:	d811      	bhi.n	8005a04 <UART_SetConfig+0x20c>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <UART_SetConfig+0x1f4>
 80059e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e8:	d006      	beq.n	80059f8 <UART_SetConfig+0x200>
 80059ea:	e00b      	b.n	8005a04 <UART_SetConfig+0x20c>
 80059ec:	2300      	movs	r3, #0
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e00d      	b.n	8005a0e <UART_SetConfig+0x216>
 80059f2:	2302      	movs	r3, #2
 80059f4:	77fb      	strb	r3, [r7, #31]
 80059f6:	e00a      	b.n	8005a0e <UART_SetConfig+0x216>
 80059f8:	2304      	movs	r3, #4
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e007      	b.n	8005a0e <UART_SetConfig+0x216>
 80059fe:	2308      	movs	r3, #8
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e004      	b.n	8005a0e <UART_SetConfig+0x216>
 8005a04:	2310      	movs	r3, #16
 8005a06:	77fb      	strb	r3, [r7, #31]
 8005a08:	e001      	b.n	8005a0e <UART_SetConfig+0x216>
 8005a0a:	2310      	movs	r3, #16
 8005a0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a16:	d15c      	bne.n	8005ad2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005a18:	7ffb      	ldrb	r3, [r7, #31]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d827      	bhi.n	8005a6e <UART_SetConfig+0x276>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x22c>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a51 	.word	0x08005a51
 8005a2c:	08005a59 	.word	0x08005a59
 8005a30:	08005a6f 	.word	0x08005a6f
 8005a34:	08005a5f 	.word	0x08005a5f
 8005a38:	08005a6f 	.word	0x08005a6f
 8005a3c:	08005a6f 	.word	0x08005a6f
 8005a40:	08005a6f 	.word	0x08005a6f
 8005a44:	08005a67 	.word	0x08005a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fe fcb6 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	61b8      	str	r0, [r7, #24]
        break;
 8005a4e:	e013      	b.n	8005a78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a50:	f7fe fcd4 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 8005a54:	61b8      	str	r0, [r7, #24]
        break;
 8005a56:	e00f      	b.n	8005a78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a58:	4b3a      	ldr	r3, [pc, #232]	; (8005b44 <UART_SetConfig+0x34c>)
 8005a5a:	61bb      	str	r3, [r7, #24]
        break;
 8005a5c:	e00c      	b.n	8005a78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5e:	f7fe fc35 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8005a62:	61b8      	str	r0, [r7, #24]
        break;
 8005a64:	e008      	b.n	8005a78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a6a:	61bb      	str	r3, [r7, #24]
        break;
 8005a6c:	e004      	b.n	8005a78 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	77bb      	strb	r3, [r7, #30]
        break;
 8005a76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8085 	beq.w	8005b8a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	005a      	lsls	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	441a      	add	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b0f      	cmp	r3, #15
 8005a9c:	d916      	bls.n	8005acc <UART_SetConfig+0x2d4>
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa4:	d212      	bcs.n	8005acc <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f023 030f 	bic.w	r3, r3, #15
 8005aae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	89fb      	ldrh	r3, [r7, #14]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	89fa      	ldrh	r2, [r7, #14]
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	e05e      	b.n	8005b8a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	77bb      	strb	r3, [r7, #30]
 8005ad0:	e05b      	b.n	8005b8a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ad2:	7ffb      	ldrb	r3, [r7, #31]
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d837      	bhi.n	8005b48 <UART_SetConfig+0x350>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <UART_SetConfig+0x2e8>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b05 	.word	0x08005b05
 8005ae4:	08005b0d 	.word	0x08005b0d
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	08005b49 	.word	0x08005b49
 8005af0:	08005b1b 	.word	0x08005b1b
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005b49 	.word	0x08005b49
 8005afc:	08005b49 	.word	0x08005b49
 8005b00:	08005b23 	.word	0x08005b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b04:	f7fe fc58 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 8005b08:	61b8      	str	r0, [r7, #24]
        break;
 8005b0a:	e022      	b.n	8005b52 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0c:	f7fe fc76 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 8005b10:	61b8      	str	r0, [r7, #24]
        break;
 8005b12:	e01e      	b.n	8005b52 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b14:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <UART_SetConfig+0x34c>)
 8005b16:	61bb      	str	r3, [r7, #24]
        break;
 8005b18:	e01b      	b.n	8005b52 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b1a:	f7fe fbd7 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8005b1e:	61b8      	str	r0, [r7, #24]
        break;
 8005b20:	e017      	b.n	8005b52 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b26:	61bb      	str	r3, [r7, #24]
        break;
 8005b28:	e013      	b.n	8005b52 <UART_SetConfig+0x35a>
 8005b2a:	bf00      	nop
 8005b2c:	40013800 	.word	0x40013800
 8005b30:	40021000 	.word	0x40021000
 8005b34:	40004400 	.word	0x40004400
 8005b38:	40004800 	.word	0x40004800
 8005b3c:	40004c00 	.word	0x40004c00
 8005b40:	40005000 	.word	0x40005000
 8005b44:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	77bb      	strb	r3, [r7, #30]
        break;
 8005b50:	bf00      	nop
    }

    if (pclk != 0U)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d018      	beq.n	8005b8a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	085a      	lsrs	r2, r3, #1
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	441a      	add	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b0f      	cmp	r3, #15
 8005b72:	d908      	bls.n	8005b86 <UART_SetConfig+0x38e>
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7a:	d204      	bcs.n	8005b86 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	60da      	str	r2, [r3, #12]
 8005b84:	e001      	b.n	8005b8a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b96:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01a      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d10a      	bne.n	8005cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cf4:	f7fc fd1c 	bl	8002730 <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d10e      	bne.n	8005d26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f82d 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e023      	b.n	8005d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d10e      	bne.n	8005d52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f817 	bl	8005d76 <UART_WaitOnFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e00d      	b.n	8005d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	4613      	mov	r3, r2
 8005d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d86:	e05e      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d05a      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d90:	f7fc fcce 	bl	8002730 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d11b      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005db4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e043      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02c      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d124      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e00f      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d091      	beq.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	88fa      	ldrh	r2, [r7, #6]
 8005e90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea2:	d10e      	bne.n	8005ec2 <UART_Start_Receive_IT+0x52>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <UART_Start_Receive_IT+0x48>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb6:	e01a      	b.n	8005eee <UART_Start_Receive_IT+0x7e>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	22ff      	movs	r2, #255	; 0xff
 8005ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ec0:	e015      	b.n	8005eee <UART_Start_Receive_IT+0x7e>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <UART_Start_Receive_IT+0x76>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <UART_Start_Receive_IT+0x6c>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	22ff      	movs	r2, #255	; 0xff
 8005ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eda:	e008      	b.n	8005eee <UART_Start_Receive_IT+0x7e>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	227f      	movs	r2, #127	; 0x7f
 8005ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ee4:	e003      	b.n	8005eee <UART_Start_Receive_IT+0x7e>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2222      	movs	r2, #34	; 0x22
 8005efa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f14:	d107      	bne.n	8005f26 <UART_Start_Receive_IT+0xb6>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d103      	bne.n	8005f26 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a0c      	ldr	r2, [pc, #48]	; (8005f54 <UART_Start_Receive_IT+0xe4>)
 8005f22:	665a      	str	r2, [r3, #100]	; 0x64
 8005f24:	e002      	b.n	8005f2c <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <UART_Start_Receive_IT+0xe8>)
 8005f2a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005f42:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	080060ed 	.word	0x080060ed
 8005f58:	08006019 	.word	0x08006019

08005f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d107      	bne.n	8005f9c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0210 	bic.w	r2, r2, #16
 8005f9a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff fbf7 	bl	80057cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fbd4 	bl	80057b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006026:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602c:	2b22      	cmp	r3, #34	; 0x22
 800602e:	d151      	bne.n	80060d4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006036:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006038:	89bb      	ldrh	r3, [r7, #12]
 800603a:	b2d9      	uxtb	r1, r3
 800603c:	89fb      	ldrh	r3, [r7, #14]
 800603e:	b2da      	uxtb	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006044:	400a      	ands	r2, r1
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d138      	bne.n	80060e4 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006080:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0201 	bic.w	r2, r2, #1
 8006090:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10f      	bne.n	80060c6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0210 	bic.w	r2, r2, #16
 80060b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fb8e 	bl	80057e0 <HAL_UARTEx_RxEventCallback>
 80060c4:	e002      	b.n	80060cc <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fa fafc 	bl	80006c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060d2:	e007      	b.n	80060e4 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0208 	orr.w	r2, r2, #8
 80060e2:	619a      	str	r2, [r3, #24]
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060fa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006100:	2b22      	cmp	r3, #34	; 0x22
 8006102:	d151      	bne.n	80061a8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800610a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006112:	89ba      	ldrh	r2, [r7, #12]
 8006114:	89fb      	ldrh	r3, [r7, #14]
 8006116:	4013      	ands	r3, r2
 8006118:	b29a      	uxth	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d138      	bne.n	80061b8 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006154:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0201 	bic.w	r2, r2, #1
 8006164:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006176:	2b01      	cmp	r3, #1
 8006178:	d10f      	bne.n	800619a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0210 	bic.w	r2, r2, #16
 8006188:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff fb24 	bl	80057e0 <HAL_UARTEx_RxEventCallback>
 8006198:	e002      	b.n	80061a0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fa fa92 	bl	80006c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061a6:	e007      	b.n	80061b8 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0208 	orr.w	r2, r2, #8
 80061b6:	619a      	str	r2, [r3, #24]
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <atoi>:
 80061d4:	220a      	movs	r2, #10
 80061d6:	2100      	movs	r1, #0
 80061d8:	f000 b952 	b.w	8006480 <strtol>

080061dc <__errno>:
 80061dc:	4b01      	ldr	r3, [pc, #4]	; (80061e4 <__errno+0x8>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000108 	.word	0x20000108

080061e8 <__libc_init_array>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	4d0d      	ldr	r5, [pc, #52]	; (8006220 <__libc_init_array+0x38>)
 80061ec:	4c0d      	ldr	r4, [pc, #52]	; (8006224 <__libc_init_array+0x3c>)
 80061ee:	1b64      	subs	r4, r4, r5
 80061f0:	10a4      	asrs	r4, r4, #2
 80061f2:	2600      	movs	r6, #0
 80061f4:	42a6      	cmp	r6, r4
 80061f6:	d109      	bne.n	800620c <__libc_init_array+0x24>
 80061f8:	4d0b      	ldr	r5, [pc, #44]	; (8006228 <__libc_init_array+0x40>)
 80061fa:	4c0c      	ldr	r4, [pc, #48]	; (800622c <__libc_init_array+0x44>)
 80061fc:	f001 fabe 	bl	800777c <_init>
 8006200:	1b64      	subs	r4, r4, r5
 8006202:	10a4      	asrs	r4, r4, #2
 8006204:	2600      	movs	r6, #0
 8006206:	42a6      	cmp	r6, r4
 8006208:	d105      	bne.n	8006216 <__libc_init_array+0x2e>
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006210:	4798      	blx	r3
 8006212:	3601      	adds	r6, #1
 8006214:	e7ee      	b.n	80061f4 <__libc_init_array+0xc>
 8006216:	f855 3b04 	ldr.w	r3, [r5], #4
 800621a:	4798      	blx	r3
 800621c:	3601      	adds	r6, #1
 800621e:	e7f2      	b.n	8006206 <__libc_init_array+0x1e>
 8006220:	08007ccc 	.word	0x08007ccc
 8006224:	08007ccc 	.word	0x08007ccc
 8006228:	08007ccc 	.word	0x08007ccc
 800622c:	08007cd0 	.word	0x08007cd0

08006230 <memset>:
 8006230:	4402      	add	r2, r0
 8006232:	4603      	mov	r3, r0
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <memset+0xa>
 8006238:	4770      	bx	lr
 800623a:	f803 1b01 	strb.w	r1, [r3], #1
 800623e:	e7f9      	b.n	8006234 <memset+0x4>

08006240 <siprintf>:
 8006240:	b40e      	push	{r1, r2, r3}
 8006242:	b500      	push	{lr}
 8006244:	b09c      	sub	sp, #112	; 0x70
 8006246:	ab1d      	add	r3, sp, #116	; 0x74
 8006248:	9002      	str	r0, [sp, #8]
 800624a:	9006      	str	r0, [sp, #24]
 800624c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006250:	4809      	ldr	r0, [pc, #36]	; (8006278 <siprintf+0x38>)
 8006252:	9107      	str	r1, [sp, #28]
 8006254:	9104      	str	r1, [sp, #16]
 8006256:	4909      	ldr	r1, [pc, #36]	; (800627c <siprintf+0x3c>)
 8006258:	f853 2b04 	ldr.w	r2, [r3], #4
 800625c:	9105      	str	r1, [sp, #20]
 800625e:	6800      	ldr	r0, [r0, #0]
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	a902      	add	r1, sp, #8
 8006264:	f000 fa54 	bl	8006710 <_svfiprintf_r>
 8006268:	9b02      	ldr	r3, [sp, #8]
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	b01c      	add	sp, #112	; 0x70
 8006270:	f85d eb04 	ldr.w	lr, [sp], #4
 8006274:	b003      	add	sp, #12
 8006276:	4770      	bx	lr
 8006278:	20000108 	.word	0x20000108
 800627c:	ffff0208 	.word	0xffff0208

08006280 <strcpy>:
 8006280:	4603      	mov	r3, r0
 8006282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006286:	f803 2b01 	strb.w	r2, [r3], #1
 800628a:	2a00      	cmp	r2, #0
 800628c:	d1f9      	bne.n	8006282 <strcpy+0x2>
 800628e:	4770      	bx	lr

08006290 <strstr>:
 8006290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006292:	780c      	ldrb	r4, [r1, #0]
 8006294:	b164      	cbz	r4, 80062b0 <strstr+0x20>
 8006296:	4603      	mov	r3, r0
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	1c5e      	adds	r6, r3, #1
 800629e:	b90a      	cbnz	r2, 80062a4 <strstr+0x14>
 80062a0:	4610      	mov	r0, r2
 80062a2:	e005      	b.n	80062b0 <strstr+0x20>
 80062a4:	4294      	cmp	r4, r2
 80062a6:	d108      	bne.n	80062ba <strstr+0x2a>
 80062a8:	460d      	mov	r5, r1
 80062aa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80062ae:	b902      	cbnz	r2, 80062b2 <strstr+0x22>
 80062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80062b6:	4297      	cmp	r7, r2
 80062b8:	d0f7      	beq.n	80062aa <strstr+0x1a>
 80062ba:	4633      	mov	r3, r6
 80062bc:	e7ec      	b.n	8006298 <strstr+0x8>
	...

080062c0 <strtok>:
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <strtok+0x5c>)
 80062c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062c4:	681e      	ldr	r6, [r3, #0]
 80062c6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80062c8:	4605      	mov	r5, r0
 80062ca:	b9fc      	cbnz	r4, 800630c <strtok+0x4c>
 80062cc:	2050      	movs	r0, #80	; 0x50
 80062ce:	9101      	str	r1, [sp, #4]
 80062d0:	f000 f910 	bl	80064f4 <malloc>
 80062d4:	9901      	ldr	r1, [sp, #4]
 80062d6:	65b0      	str	r0, [r6, #88]	; 0x58
 80062d8:	4602      	mov	r2, r0
 80062da:	b920      	cbnz	r0, 80062e6 <strtok+0x26>
 80062dc:	4b10      	ldr	r3, [pc, #64]	; (8006320 <strtok+0x60>)
 80062de:	4811      	ldr	r0, [pc, #68]	; (8006324 <strtok+0x64>)
 80062e0:	2157      	movs	r1, #87	; 0x57
 80062e2:	f000 f8d7 	bl	8006494 <__assert_func>
 80062e6:	e9c0 4400 	strd	r4, r4, [r0]
 80062ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80062ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80062f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80062f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80062fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80062fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006302:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006306:	6184      	str	r4, [r0, #24]
 8006308:	7704      	strb	r4, [r0, #28]
 800630a:	6244      	str	r4, [r0, #36]	; 0x24
 800630c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800630e:	2301      	movs	r3, #1
 8006310:	4628      	mov	r0, r5
 8006312:	b002      	add	sp, #8
 8006314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006318:	f000 b806 	b.w	8006328 <__strtok_r>
 800631c:	20000108 	.word	0x20000108
 8006320:	08007a84 	.word	0x08007a84
 8006324:	08007a9b 	.word	0x08007a9b

08006328 <__strtok_r>:
 8006328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632a:	b908      	cbnz	r0, 8006330 <__strtok_r+0x8>
 800632c:	6810      	ldr	r0, [r2, #0]
 800632e:	b188      	cbz	r0, 8006354 <__strtok_r+0x2c>
 8006330:	4604      	mov	r4, r0
 8006332:	4620      	mov	r0, r4
 8006334:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006338:	460f      	mov	r7, r1
 800633a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800633e:	b91e      	cbnz	r6, 8006348 <__strtok_r+0x20>
 8006340:	b965      	cbnz	r5, 800635c <__strtok_r+0x34>
 8006342:	6015      	str	r5, [r2, #0]
 8006344:	4628      	mov	r0, r5
 8006346:	e005      	b.n	8006354 <__strtok_r+0x2c>
 8006348:	42b5      	cmp	r5, r6
 800634a:	d1f6      	bne.n	800633a <__strtok_r+0x12>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f0      	bne.n	8006332 <__strtok_r+0xa>
 8006350:	6014      	str	r4, [r2, #0]
 8006352:	7003      	strb	r3, [r0, #0]
 8006354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006356:	461c      	mov	r4, r3
 8006358:	e00c      	b.n	8006374 <__strtok_r+0x4c>
 800635a:	b915      	cbnz	r5, 8006362 <__strtok_r+0x3a>
 800635c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006360:	460e      	mov	r6, r1
 8006362:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006366:	42ab      	cmp	r3, r5
 8006368:	d1f7      	bne.n	800635a <__strtok_r+0x32>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0f3      	beq.n	8006356 <__strtok_r+0x2e>
 800636e:	2300      	movs	r3, #0
 8006370:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006374:	6014      	str	r4, [r2, #0]
 8006376:	e7ed      	b.n	8006354 <__strtok_r+0x2c>

08006378 <_strtol_l.isra.0>:
 8006378:	2b01      	cmp	r3, #1
 800637a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800637e:	d001      	beq.n	8006384 <_strtol_l.isra.0+0xc>
 8006380:	2b24      	cmp	r3, #36	; 0x24
 8006382:	d906      	bls.n	8006392 <_strtol_l.isra.0+0x1a>
 8006384:	f7ff ff2a 	bl	80061dc <__errno>
 8006388:	2316      	movs	r3, #22
 800638a:	6003      	str	r3, [r0, #0]
 800638c:	2000      	movs	r0, #0
 800638e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006392:	4f3a      	ldr	r7, [pc, #232]	; (800647c <_strtol_l.isra.0+0x104>)
 8006394:	468e      	mov	lr, r1
 8006396:	4676      	mov	r6, lr
 8006398:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800639c:	5de5      	ldrb	r5, [r4, r7]
 800639e:	f015 0508 	ands.w	r5, r5, #8
 80063a2:	d1f8      	bne.n	8006396 <_strtol_l.isra.0+0x1e>
 80063a4:	2c2d      	cmp	r4, #45	; 0x2d
 80063a6:	d134      	bne.n	8006412 <_strtol_l.isra.0+0x9a>
 80063a8:	f89e 4000 	ldrb.w	r4, [lr]
 80063ac:	f04f 0801 	mov.w	r8, #1
 80063b0:	f106 0e02 	add.w	lr, r6, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d05c      	beq.n	8006472 <_strtol_l.isra.0+0xfa>
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d10c      	bne.n	80063d6 <_strtol_l.isra.0+0x5e>
 80063bc:	2c30      	cmp	r4, #48	; 0x30
 80063be:	d10a      	bne.n	80063d6 <_strtol_l.isra.0+0x5e>
 80063c0:	f89e 4000 	ldrb.w	r4, [lr]
 80063c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80063c8:	2c58      	cmp	r4, #88	; 0x58
 80063ca:	d14d      	bne.n	8006468 <_strtol_l.isra.0+0xf0>
 80063cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80063d0:	2310      	movs	r3, #16
 80063d2:	f10e 0e02 	add.w	lr, lr, #2
 80063d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80063da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80063de:	2600      	movs	r6, #0
 80063e0:	fbbc f9f3 	udiv	r9, ip, r3
 80063e4:	4635      	mov	r5, r6
 80063e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80063ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80063ee:	2f09      	cmp	r7, #9
 80063f0:	d818      	bhi.n	8006424 <_strtol_l.isra.0+0xac>
 80063f2:	463c      	mov	r4, r7
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	dd24      	ble.n	8006442 <_strtol_l.isra.0+0xca>
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	db1f      	blt.n	800643c <_strtol_l.isra.0+0xc4>
 80063fc:	45a9      	cmp	r9, r5
 80063fe:	d31d      	bcc.n	800643c <_strtol_l.isra.0+0xc4>
 8006400:	d101      	bne.n	8006406 <_strtol_l.isra.0+0x8e>
 8006402:	45a2      	cmp	sl, r4
 8006404:	db1a      	blt.n	800643c <_strtol_l.isra.0+0xc4>
 8006406:	fb05 4503 	mla	r5, r5, r3, r4
 800640a:	2601      	movs	r6, #1
 800640c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006410:	e7eb      	b.n	80063ea <_strtol_l.isra.0+0x72>
 8006412:	2c2b      	cmp	r4, #43	; 0x2b
 8006414:	bf08      	it	eq
 8006416:	f89e 4000 	ldrbeq.w	r4, [lr]
 800641a:	46a8      	mov	r8, r5
 800641c:	bf08      	it	eq
 800641e:	f106 0e02 	addeq.w	lr, r6, #2
 8006422:	e7c7      	b.n	80063b4 <_strtol_l.isra.0+0x3c>
 8006424:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006428:	2f19      	cmp	r7, #25
 800642a:	d801      	bhi.n	8006430 <_strtol_l.isra.0+0xb8>
 800642c:	3c37      	subs	r4, #55	; 0x37
 800642e:	e7e1      	b.n	80063f4 <_strtol_l.isra.0+0x7c>
 8006430:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006434:	2f19      	cmp	r7, #25
 8006436:	d804      	bhi.n	8006442 <_strtol_l.isra.0+0xca>
 8006438:	3c57      	subs	r4, #87	; 0x57
 800643a:	e7db      	b.n	80063f4 <_strtol_l.isra.0+0x7c>
 800643c:	f04f 36ff 	mov.w	r6, #4294967295
 8006440:	e7e4      	b.n	800640c <_strtol_l.isra.0+0x94>
 8006442:	2e00      	cmp	r6, #0
 8006444:	da05      	bge.n	8006452 <_strtol_l.isra.0+0xda>
 8006446:	2322      	movs	r3, #34	; 0x22
 8006448:	6003      	str	r3, [r0, #0]
 800644a:	4665      	mov	r5, ip
 800644c:	b942      	cbnz	r2, 8006460 <_strtol_l.isra.0+0xe8>
 800644e:	4628      	mov	r0, r5
 8006450:	e79d      	b.n	800638e <_strtol_l.isra.0+0x16>
 8006452:	f1b8 0f00 	cmp.w	r8, #0
 8006456:	d000      	beq.n	800645a <_strtol_l.isra.0+0xe2>
 8006458:	426d      	negs	r5, r5
 800645a:	2a00      	cmp	r2, #0
 800645c:	d0f7      	beq.n	800644e <_strtol_l.isra.0+0xd6>
 800645e:	b10e      	cbz	r6, 8006464 <_strtol_l.isra.0+0xec>
 8006460:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006464:	6011      	str	r1, [r2, #0]
 8006466:	e7f2      	b.n	800644e <_strtol_l.isra.0+0xd6>
 8006468:	2430      	movs	r4, #48	; 0x30
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1b3      	bne.n	80063d6 <_strtol_l.isra.0+0x5e>
 800646e:	2308      	movs	r3, #8
 8006470:	e7b1      	b.n	80063d6 <_strtol_l.isra.0+0x5e>
 8006472:	2c30      	cmp	r4, #48	; 0x30
 8006474:	d0a4      	beq.n	80063c0 <_strtol_l.isra.0+0x48>
 8006476:	230a      	movs	r3, #10
 8006478:	e7ad      	b.n	80063d6 <_strtol_l.isra.0+0x5e>
 800647a:	bf00      	nop
 800647c:	08007b39 	.word	0x08007b39

08006480 <strtol>:
 8006480:	4613      	mov	r3, r2
 8006482:	460a      	mov	r2, r1
 8006484:	4601      	mov	r1, r0
 8006486:	4802      	ldr	r0, [pc, #8]	; (8006490 <strtol+0x10>)
 8006488:	6800      	ldr	r0, [r0, #0]
 800648a:	f7ff bf75 	b.w	8006378 <_strtol_l.isra.0>
 800648e:	bf00      	nop
 8006490:	20000108 	.word	0x20000108

08006494 <__assert_func>:
 8006494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006496:	4614      	mov	r4, r2
 8006498:	461a      	mov	r2, r3
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <__assert_func+0x2c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4605      	mov	r5, r0
 80064a0:	68d8      	ldr	r0, [r3, #12]
 80064a2:	b14c      	cbz	r4, 80064b8 <__assert_func+0x24>
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <__assert_func+0x30>)
 80064a6:	9100      	str	r1, [sp, #0]
 80064a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064ac:	4906      	ldr	r1, [pc, #24]	; (80064c8 <__assert_func+0x34>)
 80064ae:	462b      	mov	r3, r5
 80064b0:	f000 f80e 	bl	80064d0 <fiprintf>
 80064b4:	f000 fdea 	bl	800708c <abort>
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <__assert_func+0x38>)
 80064ba:	461c      	mov	r4, r3
 80064bc:	e7f3      	b.n	80064a6 <__assert_func+0x12>
 80064be:	bf00      	nop
 80064c0:	20000108 	.word	0x20000108
 80064c4:	08007afc 	.word	0x08007afc
 80064c8:	08007b09 	.word	0x08007b09
 80064cc:	08007b37 	.word	0x08007b37

080064d0 <fiprintf>:
 80064d0:	b40e      	push	{r1, r2, r3}
 80064d2:	b503      	push	{r0, r1, lr}
 80064d4:	4601      	mov	r1, r0
 80064d6:	ab03      	add	r3, sp, #12
 80064d8:	4805      	ldr	r0, [pc, #20]	; (80064f0 <fiprintf+0x20>)
 80064da:	f853 2b04 	ldr.w	r2, [r3], #4
 80064de:	6800      	ldr	r0, [r0, #0]
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f000 fa3f 	bl	8006964 <_vfiprintf_r>
 80064e6:	b002      	add	sp, #8
 80064e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ec:	b003      	add	sp, #12
 80064ee:	4770      	bx	lr
 80064f0:	20000108 	.word	0x20000108

080064f4 <malloc>:
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <malloc+0xc>)
 80064f6:	4601      	mov	r1, r0
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	f000 b853 	b.w	80065a4 <_malloc_r>
 80064fe:	bf00      	nop
 8006500:	20000108 	.word	0x20000108

08006504 <_free_r>:
 8006504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006506:	2900      	cmp	r1, #0
 8006508:	d048      	beq.n	800659c <_free_r+0x98>
 800650a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650e:	9001      	str	r0, [sp, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f1a1 0404 	sub.w	r4, r1, #4
 8006516:	bfb8      	it	lt
 8006518:	18e4      	addlt	r4, r4, r3
 800651a:	f001 f805 	bl	8007528 <__malloc_lock>
 800651e:	4a20      	ldr	r2, [pc, #128]	; (80065a0 <_free_r+0x9c>)
 8006520:	9801      	ldr	r0, [sp, #4]
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	4615      	mov	r5, r2
 8006526:	b933      	cbnz	r3, 8006536 <_free_r+0x32>
 8006528:	6063      	str	r3, [r4, #4]
 800652a:	6014      	str	r4, [r2, #0]
 800652c:	b003      	add	sp, #12
 800652e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006532:	f000 bfff 	b.w	8007534 <__malloc_unlock>
 8006536:	42a3      	cmp	r3, r4
 8006538:	d90b      	bls.n	8006552 <_free_r+0x4e>
 800653a:	6821      	ldr	r1, [r4, #0]
 800653c:	1862      	adds	r2, r4, r1
 800653e:	4293      	cmp	r3, r2
 8006540:	bf04      	itt	eq
 8006542:	681a      	ldreq	r2, [r3, #0]
 8006544:	685b      	ldreq	r3, [r3, #4]
 8006546:	6063      	str	r3, [r4, #4]
 8006548:	bf04      	itt	eq
 800654a:	1852      	addeq	r2, r2, r1
 800654c:	6022      	streq	r2, [r4, #0]
 800654e:	602c      	str	r4, [r5, #0]
 8006550:	e7ec      	b.n	800652c <_free_r+0x28>
 8006552:	461a      	mov	r2, r3
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	b10b      	cbz	r3, 800655c <_free_r+0x58>
 8006558:	42a3      	cmp	r3, r4
 800655a:	d9fa      	bls.n	8006552 <_free_r+0x4e>
 800655c:	6811      	ldr	r1, [r2, #0]
 800655e:	1855      	adds	r5, r2, r1
 8006560:	42a5      	cmp	r5, r4
 8006562:	d10b      	bne.n	800657c <_free_r+0x78>
 8006564:	6824      	ldr	r4, [r4, #0]
 8006566:	4421      	add	r1, r4
 8006568:	1854      	adds	r4, r2, r1
 800656a:	42a3      	cmp	r3, r4
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	d1dd      	bne.n	800652c <_free_r+0x28>
 8006570:	681c      	ldr	r4, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	6053      	str	r3, [r2, #4]
 8006576:	4421      	add	r1, r4
 8006578:	6011      	str	r1, [r2, #0]
 800657a:	e7d7      	b.n	800652c <_free_r+0x28>
 800657c:	d902      	bls.n	8006584 <_free_r+0x80>
 800657e:	230c      	movs	r3, #12
 8006580:	6003      	str	r3, [r0, #0]
 8006582:	e7d3      	b.n	800652c <_free_r+0x28>
 8006584:	6825      	ldr	r5, [r4, #0]
 8006586:	1961      	adds	r1, r4, r5
 8006588:	428b      	cmp	r3, r1
 800658a:	bf04      	itt	eq
 800658c:	6819      	ldreq	r1, [r3, #0]
 800658e:	685b      	ldreq	r3, [r3, #4]
 8006590:	6063      	str	r3, [r4, #4]
 8006592:	bf04      	itt	eq
 8006594:	1949      	addeq	r1, r1, r5
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	6054      	str	r4, [r2, #4]
 800659a:	e7c7      	b.n	800652c <_free_r+0x28>
 800659c:	b003      	add	sp, #12
 800659e:	bd30      	pop	{r4, r5, pc}
 80065a0:	20000ed0 	.word	0x20000ed0

080065a4 <_malloc_r>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	1ccd      	adds	r5, r1, #3
 80065a8:	f025 0503 	bic.w	r5, r5, #3
 80065ac:	3508      	adds	r5, #8
 80065ae:	2d0c      	cmp	r5, #12
 80065b0:	bf38      	it	cc
 80065b2:	250c      	movcc	r5, #12
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	4606      	mov	r6, r0
 80065b8:	db01      	blt.n	80065be <_malloc_r+0x1a>
 80065ba:	42a9      	cmp	r1, r5
 80065bc:	d903      	bls.n	80065c6 <_malloc_r+0x22>
 80065be:	230c      	movs	r3, #12
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	2000      	movs	r0, #0
 80065c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c6:	f000 ffaf 	bl	8007528 <__malloc_lock>
 80065ca:	4921      	ldr	r1, [pc, #132]	; (8006650 <_malloc_r+0xac>)
 80065cc:	680a      	ldr	r2, [r1, #0]
 80065ce:	4614      	mov	r4, r2
 80065d0:	b99c      	cbnz	r4, 80065fa <_malloc_r+0x56>
 80065d2:	4f20      	ldr	r7, [pc, #128]	; (8006654 <_malloc_r+0xb0>)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	b923      	cbnz	r3, 80065e2 <_malloc_r+0x3e>
 80065d8:	4621      	mov	r1, r4
 80065da:	4630      	mov	r0, r6
 80065dc:	f000 fc86 	bl	8006eec <_sbrk_r>
 80065e0:	6038      	str	r0, [r7, #0]
 80065e2:	4629      	mov	r1, r5
 80065e4:	4630      	mov	r0, r6
 80065e6:	f000 fc81 	bl	8006eec <_sbrk_r>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d123      	bne.n	8006636 <_malloc_r+0x92>
 80065ee:	230c      	movs	r3, #12
 80065f0:	6033      	str	r3, [r6, #0]
 80065f2:	4630      	mov	r0, r6
 80065f4:	f000 ff9e 	bl	8007534 <__malloc_unlock>
 80065f8:	e7e3      	b.n	80065c2 <_malloc_r+0x1e>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	1b5b      	subs	r3, r3, r5
 80065fe:	d417      	bmi.n	8006630 <_malloc_r+0x8c>
 8006600:	2b0b      	cmp	r3, #11
 8006602:	d903      	bls.n	800660c <_malloc_r+0x68>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	441c      	add	r4, r3
 8006608:	6025      	str	r5, [r4, #0]
 800660a:	e004      	b.n	8006616 <_malloc_r+0x72>
 800660c:	6863      	ldr	r3, [r4, #4]
 800660e:	42a2      	cmp	r2, r4
 8006610:	bf0c      	ite	eq
 8006612:	600b      	streq	r3, [r1, #0]
 8006614:	6053      	strne	r3, [r2, #4]
 8006616:	4630      	mov	r0, r6
 8006618:	f000 ff8c 	bl	8007534 <__malloc_unlock>
 800661c:	f104 000b 	add.w	r0, r4, #11
 8006620:	1d23      	adds	r3, r4, #4
 8006622:	f020 0007 	bic.w	r0, r0, #7
 8006626:	1ac2      	subs	r2, r0, r3
 8006628:	d0cc      	beq.n	80065c4 <_malloc_r+0x20>
 800662a:	1a1b      	subs	r3, r3, r0
 800662c:	50a3      	str	r3, [r4, r2]
 800662e:	e7c9      	b.n	80065c4 <_malloc_r+0x20>
 8006630:	4622      	mov	r2, r4
 8006632:	6864      	ldr	r4, [r4, #4]
 8006634:	e7cc      	b.n	80065d0 <_malloc_r+0x2c>
 8006636:	1cc4      	adds	r4, r0, #3
 8006638:	f024 0403 	bic.w	r4, r4, #3
 800663c:	42a0      	cmp	r0, r4
 800663e:	d0e3      	beq.n	8006608 <_malloc_r+0x64>
 8006640:	1a21      	subs	r1, r4, r0
 8006642:	4630      	mov	r0, r6
 8006644:	f000 fc52 	bl	8006eec <_sbrk_r>
 8006648:	3001      	adds	r0, #1
 800664a:	d1dd      	bne.n	8006608 <_malloc_r+0x64>
 800664c:	e7cf      	b.n	80065ee <_malloc_r+0x4a>
 800664e:	bf00      	nop
 8006650:	20000ed0 	.word	0x20000ed0
 8006654:	20000ed4 	.word	0x20000ed4

08006658 <__ssputs_r>:
 8006658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800665c:	688e      	ldr	r6, [r1, #8]
 800665e:	429e      	cmp	r6, r3
 8006660:	4682      	mov	sl, r0
 8006662:	460c      	mov	r4, r1
 8006664:	4690      	mov	r8, r2
 8006666:	461f      	mov	r7, r3
 8006668:	d838      	bhi.n	80066dc <__ssputs_r+0x84>
 800666a:	898a      	ldrh	r2, [r1, #12]
 800666c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006670:	d032      	beq.n	80066d8 <__ssputs_r+0x80>
 8006672:	6825      	ldr	r5, [r4, #0]
 8006674:	6909      	ldr	r1, [r1, #16]
 8006676:	eba5 0901 	sub.w	r9, r5, r1
 800667a:	6965      	ldr	r5, [r4, #20]
 800667c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006684:	3301      	adds	r3, #1
 8006686:	444b      	add	r3, r9
 8006688:	106d      	asrs	r5, r5, #1
 800668a:	429d      	cmp	r5, r3
 800668c:	bf38      	it	cc
 800668e:	461d      	movcc	r5, r3
 8006690:	0553      	lsls	r3, r2, #21
 8006692:	d531      	bpl.n	80066f8 <__ssputs_r+0xa0>
 8006694:	4629      	mov	r1, r5
 8006696:	f7ff ff85 	bl	80065a4 <_malloc_r>
 800669a:	4606      	mov	r6, r0
 800669c:	b950      	cbnz	r0, 80066b4 <__ssputs_r+0x5c>
 800669e:	230c      	movs	r3, #12
 80066a0:	f8ca 3000 	str.w	r3, [sl]
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b4:	6921      	ldr	r1, [r4, #16]
 80066b6:	464a      	mov	r2, r9
 80066b8:	f000 ff0e 	bl	80074d8 <memcpy>
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c6:	81a3      	strh	r3, [r4, #12]
 80066c8:	6126      	str	r6, [r4, #16]
 80066ca:	6165      	str	r5, [r4, #20]
 80066cc:	444e      	add	r6, r9
 80066ce:	eba5 0509 	sub.w	r5, r5, r9
 80066d2:	6026      	str	r6, [r4, #0]
 80066d4:	60a5      	str	r5, [r4, #8]
 80066d6:	463e      	mov	r6, r7
 80066d8:	42be      	cmp	r6, r7
 80066da:	d900      	bls.n	80066de <__ssputs_r+0x86>
 80066dc:	463e      	mov	r6, r7
 80066de:	4632      	mov	r2, r6
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	4641      	mov	r1, r8
 80066e4:	f000 ff06 	bl	80074f4 <memmove>
 80066e8:	68a3      	ldr	r3, [r4, #8]
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	1b9b      	subs	r3, r3, r6
 80066ee:	4432      	add	r2, r6
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	6022      	str	r2, [r4, #0]
 80066f4:	2000      	movs	r0, #0
 80066f6:	e7db      	b.n	80066b0 <__ssputs_r+0x58>
 80066f8:	462a      	mov	r2, r5
 80066fa:	f000 ff21 	bl	8007540 <_realloc_r>
 80066fe:	4606      	mov	r6, r0
 8006700:	2800      	cmp	r0, #0
 8006702:	d1e1      	bne.n	80066c8 <__ssputs_r+0x70>
 8006704:	6921      	ldr	r1, [r4, #16]
 8006706:	4650      	mov	r0, sl
 8006708:	f7ff fefc 	bl	8006504 <_free_r>
 800670c:	e7c7      	b.n	800669e <__ssputs_r+0x46>
	...

08006710 <_svfiprintf_r>:
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	4698      	mov	r8, r3
 8006716:	898b      	ldrh	r3, [r1, #12]
 8006718:	061b      	lsls	r3, r3, #24
 800671a:	b09d      	sub	sp, #116	; 0x74
 800671c:	4607      	mov	r7, r0
 800671e:	460d      	mov	r5, r1
 8006720:	4614      	mov	r4, r2
 8006722:	d50e      	bpl.n	8006742 <_svfiprintf_r+0x32>
 8006724:	690b      	ldr	r3, [r1, #16]
 8006726:	b963      	cbnz	r3, 8006742 <_svfiprintf_r+0x32>
 8006728:	2140      	movs	r1, #64	; 0x40
 800672a:	f7ff ff3b 	bl	80065a4 <_malloc_r>
 800672e:	6028      	str	r0, [r5, #0]
 8006730:	6128      	str	r0, [r5, #16]
 8006732:	b920      	cbnz	r0, 800673e <_svfiprintf_r+0x2e>
 8006734:	230c      	movs	r3, #12
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	e0d1      	b.n	80068e2 <_svfiprintf_r+0x1d2>
 800673e:	2340      	movs	r3, #64	; 0x40
 8006740:	616b      	str	r3, [r5, #20]
 8006742:	2300      	movs	r3, #0
 8006744:	9309      	str	r3, [sp, #36]	; 0x24
 8006746:	2320      	movs	r3, #32
 8006748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800674c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006750:	2330      	movs	r3, #48	; 0x30
 8006752:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068fc <_svfiprintf_r+0x1ec>
 8006756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800675a:	f04f 0901 	mov.w	r9, #1
 800675e:	4623      	mov	r3, r4
 8006760:	469a      	mov	sl, r3
 8006762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006766:	b10a      	cbz	r2, 800676c <_svfiprintf_r+0x5c>
 8006768:	2a25      	cmp	r2, #37	; 0x25
 800676a:	d1f9      	bne.n	8006760 <_svfiprintf_r+0x50>
 800676c:	ebba 0b04 	subs.w	fp, sl, r4
 8006770:	d00b      	beq.n	800678a <_svfiprintf_r+0x7a>
 8006772:	465b      	mov	r3, fp
 8006774:	4622      	mov	r2, r4
 8006776:	4629      	mov	r1, r5
 8006778:	4638      	mov	r0, r7
 800677a:	f7ff ff6d 	bl	8006658 <__ssputs_r>
 800677e:	3001      	adds	r0, #1
 8006780:	f000 80aa 	beq.w	80068d8 <_svfiprintf_r+0x1c8>
 8006784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006786:	445a      	add	r2, fp
 8006788:	9209      	str	r2, [sp, #36]	; 0x24
 800678a:	f89a 3000 	ldrb.w	r3, [sl]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80a2 	beq.w	80068d8 <_svfiprintf_r+0x1c8>
 8006794:	2300      	movs	r3, #0
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800679e:	f10a 0a01 	add.w	sl, sl, #1
 80067a2:	9304      	str	r3, [sp, #16]
 80067a4:	9307      	str	r3, [sp, #28]
 80067a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067aa:	931a      	str	r3, [sp, #104]	; 0x68
 80067ac:	4654      	mov	r4, sl
 80067ae:	2205      	movs	r2, #5
 80067b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b4:	4851      	ldr	r0, [pc, #324]	; (80068fc <_svfiprintf_r+0x1ec>)
 80067b6:	f7f9 fd13 	bl	80001e0 <memchr>
 80067ba:	9a04      	ldr	r2, [sp, #16]
 80067bc:	b9d8      	cbnz	r0, 80067f6 <_svfiprintf_r+0xe6>
 80067be:	06d0      	lsls	r0, r2, #27
 80067c0:	bf44      	itt	mi
 80067c2:	2320      	movmi	r3, #32
 80067c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c8:	0711      	lsls	r1, r2, #28
 80067ca:	bf44      	itt	mi
 80067cc:	232b      	movmi	r3, #43	; 0x2b
 80067ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d2:	f89a 3000 	ldrb.w	r3, [sl]
 80067d6:	2b2a      	cmp	r3, #42	; 0x2a
 80067d8:	d015      	beq.n	8006806 <_svfiprintf_r+0xf6>
 80067da:	9a07      	ldr	r2, [sp, #28]
 80067dc:	4654      	mov	r4, sl
 80067de:	2000      	movs	r0, #0
 80067e0:	f04f 0c0a 	mov.w	ip, #10
 80067e4:	4621      	mov	r1, r4
 80067e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ea:	3b30      	subs	r3, #48	; 0x30
 80067ec:	2b09      	cmp	r3, #9
 80067ee:	d94e      	bls.n	800688e <_svfiprintf_r+0x17e>
 80067f0:	b1b0      	cbz	r0, 8006820 <_svfiprintf_r+0x110>
 80067f2:	9207      	str	r2, [sp, #28]
 80067f4:	e014      	b.n	8006820 <_svfiprintf_r+0x110>
 80067f6:	eba0 0308 	sub.w	r3, r0, r8
 80067fa:	fa09 f303 	lsl.w	r3, r9, r3
 80067fe:	4313      	orrs	r3, r2
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	46a2      	mov	sl, r4
 8006804:	e7d2      	b.n	80067ac <_svfiprintf_r+0x9c>
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	1d19      	adds	r1, r3, #4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	9103      	str	r1, [sp, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	bfbb      	ittet	lt
 8006812:	425b      	neglt	r3, r3
 8006814:	f042 0202 	orrlt.w	r2, r2, #2
 8006818:	9307      	strge	r3, [sp, #28]
 800681a:	9307      	strlt	r3, [sp, #28]
 800681c:	bfb8      	it	lt
 800681e:	9204      	strlt	r2, [sp, #16]
 8006820:	7823      	ldrb	r3, [r4, #0]
 8006822:	2b2e      	cmp	r3, #46	; 0x2e
 8006824:	d10c      	bne.n	8006840 <_svfiprintf_r+0x130>
 8006826:	7863      	ldrb	r3, [r4, #1]
 8006828:	2b2a      	cmp	r3, #42	; 0x2a
 800682a:	d135      	bne.n	8006898 <_svfiprintf_r+0x188>
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	1d1a      	adds	r2, r3, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	9203      	str	r2, [sp, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	bfb8      	it	lt
 8006838:	f04f 33ff 	movlt.w	r3, #4294967295
 800683c:	3402      	adds	r4, #2
 800683e:	9305      	str	r3, [sp, #20]
 8006840:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800690c <_svfiprintf_r+0x1fc>
 8006844:	7821      	ldrb	r1, [r4, #0]
 8006846:	2203      	movs	r2, #3
 8006848:	4650      	mov	r0, sl
 800684a:	f7f9 fcc9 	bl	80001e0 <memchr>
 800684e:	b140      	cbz	r0, 8006862 <_svfiprintf_r+0x152>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	eba0 000a 	sub.w	r0, r0, sl
 8006856:	fa03 f000 	lsl.w	r0, r3, r0
 800685a:	9b04      	ldr	r3, [sp, #16]
 800685c:	4303      	orrs	r3, r0
 800685e:	3401      	adds	r4, #1
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006866:	4826      	ldr	r0, [pc, #152]	; (8006900 <_svfiprintf_r+0x1f0>)
 8006868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800686c:	2206      	movs	r2, #6
 800686e:	f7f9 fcb7 	bl	80001e0 <memchr>
 8006872:	2800      	cmp	r0, #0
 8006874:	d038      	beq.n	80068e8 <_svfiprintf_r+0x1d8>
 8006876:	4b23      	ldr	r3, [pc, #140]	; (8006904 <_svfiprintf_r+0x1f4>)
 8006878:	bb1b      	cbnz	r3, 80068c2 <_svfiprintf_r+0x1b2>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	3307      	adds	r3, #7
 800687e:	f023 0307 	bic.w	r3, r3, #7
 8006882:	3308      	adds	r3, #8
 8006884:	9303      	str	r3, [sp, #12]
 8006886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006888:	4433      	add	r3, r6
 800688a:	9309      	str	r3, [sp, #36]	; 0x24
 800688c:	e767      	b.n	800675e <_svfiprintf_r+0x4e>
 800688e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006892:	460c      	mov	r4, r1
 8006894:	2001      	movs	r0, #1
 8006896:	e7a5      	b.n	80067e4 <_svfiprintf_r+0xd4>
 8006898:	2300      	movs	r3, #0
 800689a:	3401      	adds	r4, #1
 800689c:	9305      	str	r3, [sp, #20]
 800689e:	4619      	mov	r1, r3
 80068a0:	f04f 0c0a 	mov.w	ip, #10
 80068a4:	4620      	mov	r0, r4
 80068a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068aa:	3a30      	subs	r2, #48	; 0x30
 80068ac:	2a09      	cmp	r2, #9
 80068ae:	d903      	bls.n	80068b8 <_svfiprintf_r+0x1a8>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0c5      	beq.n	8006840 <_svfiprintf_r+0x130>
 80068b4:	9105      	str	r1, [sp, #20]
 80068b6:	e7c3      	b.n	8006840 <_svfiprintf_r+0x130>
 80068b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80068bc:	4604      	mov	r4, r0
 80068be:	2301      	movs	r3, #1
 80068c0:	e7f0      	b.n	80068a4 <_svfiprintf_r+0x194>
 80068c2:	ab03      	add	r3, sp, #12
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	462a      	mov	r2, r5
 80068c8:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <_svfiprintf_r+0x1f8>)
 80068ca:	a904      	add	r1, sp, #16
 80068cc:	4638      	mov	r0, r7
 80068ce:	f3af 8000 	nop.w
 80068d2:	1c42      	adds	r2, r0, #1
 80068d4:	4606      	mov	r6, r0
 80068d6:	d1d6      	bne.n	8006886 <_svfiprintf_r+0x176>
 80068d8:	89ab      	ldrh	r3, [r5, #12]
 80068da:	065b      	lsls	r3, r3, #25
 80068dc:	f53f af2c 	bmi.w	8006738 <_svfiprintf_r+0x28>
 80068e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e2:	b01d      	add	sp, #116	; 0x74
 80068e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e8:	ab03      	add	r3, sp, #12
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	462a      	mov	r2, r5
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <_svfiprintf_r+0x1f8>)
 80068f0:	a904      	add	r1, sp, #16
 80068f2:	4638      	mov	r0, r7
 80068f4:	f000 f9d4 	bl	8006ca0 <_printf_i>
 80068f8:	e7eb      	b.n	80068d2 <_svfiprintf_r+0x1c2>
 80068fa:	bf00      	nop
 80068fc:	08007c39 	.word	0x08007c39
 8006900:	08007c43 	.word	0x08007c43
 8006904:	00000000 	.word	0x00000000
 8006908:	08006659 	.word	0x08006659
 800690c:	08007c3f 	.word	0x08007c3f

08006910 <__sfputc_r>:
 8006910:	6893      	ldr	r3, [r2, #8]
 8006912:	3b01      	subs	r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	b410      	push	{r4}
 8006918:	6093      	str	r3, [r2, #8]
 800691a:	da08      	bge.n	800692e <__sfputc_r+0x1e>
 800691c:	6994      	ldr	r4, [r2, #24]
 800691e:	42a3      	cmp	r3, r4
 8006920:	db01      	blt.n	8006926 <__sfputc_r+0x16>
 8006922:	290a      	cmp	r1, #10
 8006924:	d103      	bne.n	800692e <__sfputc_r+0x1e>
 8006926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800692a:	f000 baef 	b.w	8006f0c <__swbuf_r>
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	1c58      	adds	r0, r3, #1
 8006932:	6010      	str	r0, [r2, #0]
 8006934:	7019      	strb	r1, [r3, #0]
 8006936:	4608      	mov	r0, r1
 8006938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800693c:	4770      	bx	lr

0800693e <__sfputs_r>:
 800693e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006940:	4606      	mov	r6, r0
 8006942:	460f      	mov	r7, r1
 8006944:	4614      	mov	r4, r2
 8006946:	18d5      	adds	r5, r2, r3
 8006948:	42ac      	cmp	r4, r5
 800694a:	d101      	bne.n	8006950 <__sfputs_r+0x12>
 800694c:	2000      	movs	r0, #0
 800694e:	e007      	b.n	8006960 <__sfputs_r+0x22>
 8006950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006954:	463a      	mov	r2, r7
 8006956:	4630      	mov	r0, r6
 8006958:	f7ff ffda 	bl	8006910 <__sfputc_r>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d1f3      	bne.n	8006948 <__sfputs_r+0xa>
 8006960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006964 <_vfiprintf_r>:
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	460d      	mov	r5, r1
 800696a:	b09d      	sub	sp, #116	; 0x74
 800696c:	4614      	mov	r4, r2
 800696e:	4698      	mov	r8, r3
 8006970:	4606      	mov	r6, r0
 8006972:	b118      	cbz	r0, 800697c <_vfiprintf_r+0x18>
 8006974:	6983      	ldr	r3, [r0, #24]
 8006976:	b90b      	cbnz	r3, 800697c <_vfiprintf_r+0x18>
 8006978:	f000 fcaa 	bl	80072d0 <__sinit>
 800697c:	4b89      	ldr	r3, [pc, #548]	; (8006ba4 <_vfiprintf_r+0x240>)
 800697e:	429d      	cmp	r5, r3
 8006980:	d11b      	bne.n	80069ba <_vfiprintf_r+0x56>
 8006982:	6875      	ldr	r5, [r6, #4]
 8006984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006986:	07d9      	lsls	r1, r3, #31
 8006988:	d405      	bmi.n	8006996 <_vfiprintf_r+0x32>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	059a      	lsls	r2, r3, #22
 800698e:	d402      	bmi.n	8006996 <_vfiprintf_r+0x32>
 8006990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006992:	f000 fd3b 	bl	800740c <__retarget_lock_acquire_recursive>
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	071b      	lsls	r3, r3, #28
 800699a:	d501      	bpl.n	80069a0 <_vfiprintf_r+0x3c>
 800699c:	692b      	ldr	r3, [r5, #16]
 800699e:	b9eb      	cbnz	r3, 80069dc <_vfiprintf_r+0x78>
 80069a0:	4629      	mov	r1, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	f000 fb04 	bl	8006fb0 <__swsetup_r>
 80069a8:	b1c0      	cbz	r0, 80069dc <_vfiprintf_r+0x78>
 80069aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ac:	07dc      	lsls	r4, r3, #31
 80069ae:	d50e      	bpl.n	80069ce <_vfiprintf_r+0x6a>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	b01d      	add	sp, #116	; 0x74
 80069b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ba:	4b7b      	ldr	r3, [pc, #492]	; (8006ba8 <_vfiprintf_r+0x244>)
 80069bc:	429d      	cmp	r5, r3
 80069be:	d101      	bne.n	80069c4 <_vfiprintf_r+0x60>
 80069c0:	68b5      	ldr	r5, [r6, #8]
 80069c2:	e7df      	b.n	8006984 <_vfiprintf_r+0x20>
 80069c4:	4b79      	ldr	r3, [pc, #484]	; (8006bac <_vfiprintf_r+0x248>)
 80069c6:	429d      	cmp	r5, r3
 80069c8:	bf08      	it	eq
 80069ca:	68f5      	ldreq	r5, [r6, #12]
 80069cc:	e7da      	b.n	8006984 <_vfiprintf_r+0x20>
 80069ce:	89ab      	ldrh	r3, [r5, #12]
 80069d0:	0598      	lsls	r0, r3, #22
 80069d2:	d4ed      	bmi.n	80069b0 <_vfiprintf_r+0x4c>
 80069d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069d6:	f000 fd1a 	bl	800740e <__retarget_lock_release_recursive>
 80069da:	e7e9      	b.n	80069b0 <_vfiprintf_r+0x4c>
 80069dc:	2300      	movs	r3, #0
 80069de:	9309      	str	r3, [sp, #36]	; 0x24
 80069e0:	2320      	movs	r3, #32
 80069e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ea:	2330      	movs	r3, #48	; 0x30
 80069ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bb0 <_vfiprintf_r+0x24c>
 80069f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069f4:	f04f 0901 	mov.w	r9, #1
 80069f8:	4623      	mov	r3, r4
 80069fa:	469a      	mov	sl, r3
 80069fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a00:	b10a      	cbz	r2, 8006a06 <_vfiprintf_r+0xa2>
 8006a02:	2a25      	cmp	r2, #37	; 0x25
 8006a04:	d1f9      	bne.n	80069fa <_vfiprintf_r+0x96>
 8006a06:	ebba 0b04 	subs.w	fp, sl, r4
 8006a0a:	d00b      	beq.n	8006a24 <_vfiprintf_r+0xc0>
 8006a0c:	465b      	mov	r3, fp
 8006a0e:	4622      	mov	r2, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7ff ff93 	bl	800693e <__sfputs_r>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f000 80aa 	beq.w	8006b72 <_vfiprintf_r+0x20e>
 8006a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a20:	445a      	add	r2, fp
 8006a22:	9209      	str	r2, [sp, #36]	; 0x24
 8006a24:	f89a 3000 	ldrb.w	r3, [sl]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80a2 	beq.w	8006b72 <_vfiprintf_r+0x20e>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f04f 32ff 	mov.w	r2, #4294967295
 8006a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a38:	f10a 0a01 	add.w	sl, sl, #1
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	9307      	str	r3, [sp, #28]
 8006a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a44:	931a      	str	r3, [sp, #104]	; 0x68
 8006a46:	4654      	mov	r4, sl
 8006a48:	2205      	movs	r2, #5
 8006a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4e:	4858      	ldr	r0, [pc, #352]	; (8006bb0 <_vfiprintf_r+0x24c>)
 8006a50:	f7f9 fbc6 	bl	80001e0 <memchr>
 8006a54:	9a04      	ldr	r2, [sp, #16]
 8006a56:	b9d8      	cbnz	r0, 8006a90 <_vfiprintf_r+0x12c>
 8006a58:	06d1      	lsls	r1, r2, #27
 8006a5a:	bf44      	itt	mi
 8006a5c:	2320      	movmi	r3, #32
 8006a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a62:	0713      	lsls	r3, r2, #28
 8006a64:	bf44      	itt	mi
 8006a66:	232b      	movmi	r3, #43	; 0x2b
 8006a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a70:	2b2a      	cmp	r3, #42	; 0x2a
 8006a72:	d015      	beq.n	8006aa0 <_vfiprintf_r+0x13c>
 8006a74:	9a07      	ldr	r2, [sp, #28]
 8006a76:	4654      	mov	r4, sl
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f04f 0c0a 	mov.w	ip, #10
 8006a7e:	4621      	mov	r1, r4
 8006a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a84:	3b30      	subs	r3, #48	; 0x30
 8006a86:	2b09      	cmp	r3, #9
 8006a88:	d94e      	bls.n	8006b28 <_vfiprintf_r+0x1c4>
 8006a8a:	b1b0      	cbz	r0, 8006aba <_vfiprintf_r+0x156>
 8006a8c:	9207      	str	r2, [sp, #28]
 8006a8e:	e014      	b.n	8006aba <_vfiprintf_r+0x156>
 8006a90:	eba0 0308 	sub.w	r3, r0, r8
 8006a94:	fa09 f303 	lsl.w	r3, r9, r3
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	9304      	str	r3, [sp, #16]
 8006a9c:	46a2      	mov	sl, r4
 8006a9e:	e7d2      	b.n	8006a46 <_vfiprintf_r+0xe2>
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	1d19      	adds	r1, r3, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	9103      	str	r1, [sp, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bfbb      	ittet	lt
 8006aac:	425b      	neglt	r3, r3
 8006aae:	f042 0202 	orrlt.w	r2, r2, #2
 8006ab2:	9307      	strge	r3, [sp, #28]
 8006ab4:	9307      	strlt	r3, [sp, #28]
 8006ab6:	bfb8      	it	lt
 8006ab8:	9204      	strlt	r2, [sp, #16]
 8006aba:	7823      	ldrb	r3, [r4, #0]
 8006abc:	2b2e      	cmp	r3, #46	; 0x2e
 8006abe:	d10c      	bne.n	8006ada <_vfiprintf_r+0x176>
 8006ac0:	7863      	ldrb	r3, [r4, #1]
 8006ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac4:	d135      	bne.n	8006b32 <_vfiprintf_r+0x1ce>
 8006ac6:	9b03      	ldr	r3, [sp, #12]
 8006ac8:	1d1a      	adds	r2, r3, #4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	9203      	str	r2, [sp, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfb8      	it	lt
 8006ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ad6:	3402      	adds	r4, #2
 8006ad8:	9305      	str	r3, [sp, #20]
 8006ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bc0 <_vfiprintf_r+0x25c>
 8006ade:	7821      	ldrb	r1, [r4, #0]
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	4650      	mov	r0, sl
 8006ae4:	f7f9 fb7c 	bl	80001e0 <memchr>
 8006ae8:	b140      	cbz	r0, 8006afc <_vfiprintf_r+0x198>
 8006aea:	2340      	movs	r3, #64	; 0x40
 8006aec:	eba0 000a 	sub.w	r0, r0, sl
 8006af0:	fa03 f000 	lsl.w	r0, r3, r0
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	4303      	orrs	r3, r0
 8006af8:	3401      	adds	r4, #1
 8006afa:	9304      	str	r3, [sp, #16]
 8006afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b00:	482c      	ldr	r0, [pc, #176]	; (8006bb4 <_vfiprintf_r+0x250>)
 8006b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b06:	2206      	movs	r2, #6
 8006b08:	f7f9 fb6a 	bl	80001e0 <memchr>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d03f      	beq.n	8006b90 <_vfiprintf_r+0x22c>
 8006b10:	4b29      	ldr	r3, [pc, #164]	; (8006bb8 <_vfiprintf_r+0x254>)
 8006b12:	bb1b      	cbnz	r3, 8006b5c <_vfiprintf_r+0x1f8>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	3307      	adds	r3, #7
 8006b18:	f023 0307 	bic.w	r3, r3, #7
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	9303      	str	r3, [sp, #12]
 8006b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b22:	443b      	add	r3, r7
 8006b24:	9309      	str	r3, [sp, #36]	; 0x24
 8006b26:	e767      	b.n	80069f8 <_vfiprintf_r+0x94>
 8006b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	2001      	movs	r0, #1
 8006b30:	e7a5      	b.n	8006a7e <_vfiprintf_r+0x11a>
 8006b32:	2300      	movs	r3, #0
 8006b34:	3401      	adds	r4, #1
 8006b36:	9305      	str	r3, [sp, #20]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f04f 0c0a 	mov.w	ip, #10
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b44:	3a30      	subs	r2, #48	; 0x30
 8006b46:	2a09      	cmp	r2, #9
 8006b48:	d903      	bls.n	8006b52 <_vfiprintf_r+0x1ee>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0c5      	beq.n	8006ada <_vfiprintf_r+0x176>
 8006b4e:	9105      	str	r1, [sp, #20]
 8006b50:	e7c3      	b.n	8006ada <_vfiprintf_r+0x176>
 8006b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b56:	4604      	mov	r4, r0
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e7f0      	b.n	8006b3e <_vfiprintf_r+0x1da>
 8006b5c:	ab03      	add	r3, sp, #12
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	462a      	mov	r2, r5
 8006b62:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <_vfiprintf_r+0x258>)
 8006b64:	a904      	add	r1, sp, #16
 8006b66:	4630      	mov	r0, r6
 8006b68:	f3af 8000 	nop.w
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	1c78      	adds	r0, r7, #1
 8006b70:	d1d6      	bne.n	8006b20 <_vfiprintf_r+0x1bc>
 8006b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b74:	07d9      	lsls	r1, r3, #31
 8006b76:	d405      	bmi.n	8006b84 <_vfiprintf_r+0x220>
 8006b78:	89ab      	ldrh	r3, [r5, #12]
 8006b7a:	059a      	lsls	r2, r3, #22
 8006b7c:	d402      	bmi.n	8006b84 <_vfiprintf_r+0x220>
 8006b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b80:	f000 fc45 	bl	800740e <__retarget_lock_release_recursive>
 8006b84:	89ab      	ldrh	r3, [r5, #12]
 8006b86:	065b      	lsls	r3, r3, #25
 8006b88:	f53f af12 	bmi.w	80069b0 <_vfiprintf_r+0x4c>
 8006b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b8e:	e711      	b.n	80069b4 <_vfiprintf_r+0x50>
 8006b90:	ab03      	add	r3, sp, #12
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	462a      	mov	r2, r5
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <_vfiprintf_r+0x258>)
 8006b98:	a904      	add	r1, sp, #16
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f880 	bl	8006ca0 <_printf_i>
 8006ba0:	e7e4      	b.n	8006b6c <_vfiprintf_r+0x208>
 8006ba2:	bf00      	nop
 8006ba4:	08007c8c 	.word	0x08007c8c
 8006ba8:	08007cac 	.word	0x08007cac
 8006bac:	08007c6c 	.word	0x08007c6c
 8006bb0:	08007c39 	.word	0x08007c39
 8006bb4:	08007c43 	.word	0x08007c43
 8006bb8:	00000000 	.word	0x00000000
 8006bbc:	0800693f 	.word	0x0800693f
 8006bc0:	08007c3f 	.word	0x08007c3f

08006bc4 <_printf_common>:
 8006bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	4616      	mov	r6, r2
 8006bca:	4699      	mov	r9, r3
 8006bcc:	688a      	ldr	r2, [r1, #8]
 8006bce:	690b      	ldr	r3, [r1, #16]
 8006bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	bfb8      	it	lt
 8006bd8:	4613      	movlt	r3, r2
 8006bda:	6033      	str	r3, [r6, #0]
 8006bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006be0:	4607      	mov	r7, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	b10a      	cbz	r2, 8006bea <_printf_common+0x26>
 8006be6:	3301      	adds	r3, #1
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	0699      	lsls	r1, r3, #26
 8006bee:	bf42      	ittt	mi
 8006bf0:	6833      	ldrmi	r3, [r6, #0]
 8006bf2:	3302      	addmi	r3, #2
 8006bf4:	6033      	strmi	r3, [r6, #0]
 8006bf6:	6825      	ldr	r5, [r4, #0]
 8006bf8:	f015 0506 	ands.w	r5, r5, #6
 8006bfc:	d106      	bne.n	8006c0c <_printf_common+0x48>
 8006bfe:	f104 0a19 	add.w	sl, r4, #25
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	6832      	ldr	r2, [r6, #0]
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dc26      	bgt.n	8006c5a <_printf_common+0x96>
 8006c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c10:	1e13      	subs	r3, r2, #0
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	bf18      	it	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	0692      	lsls	r2, r2, #26
 8006c1a:	d42b      	bmi.n	8006c74 <_printf_common+0xb0>
 8006c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c20:	4649      	mov	r1, r9
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c0      	blx	r8
 8006c26:	3001      	adds	r0, #1
 8006c28:	d01e      	beq.n	8006c68 <_printf_common+0xa4>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	68e5      	ldr	r5, [r4, #12]
 8006c2e:	6832      	ldr	r2, [r6, #0]
 8006c30:	f003 0306 	and.w	r3, r3, #6
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	bf08      	it	eq
 8006c38:	1aad      	subeq	r5, r5, r2
 8006c3a:	68a3      	ldr	r3, [r4, #8]
 8006c3c:	6922      	ldr	r2, [r4, #16]
 8006c3e:	bf0c      	ite	eq
 8006c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c44:	2500      	movne	r5, #0
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bfc4      	itt	gt
 8006c4a:	1a9b      	subgt	r3, r3, r2
 8006c4c:	18ed      	addgt	r5, r5, r3
 8006c4e:	2600      	movs	r6, #0
 8006c50:	341a      	adds	r4, #26
 8006c52:	42b5      	cmp	r5, r6
 8006c54:	d11a      	bne.n	8006c8c <_printf_common+0xc8>
 8006c56:	2000      	movs	r0, #0
 8006c58:	e008      	b.n	8006c6c <_printf_common+0xa8>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4638      	mov	r0, r7
 8006c62:	47c0      	blx	r8
 8006c64:	3001      	adds	r0, #1
 8006c66:	d103      	bne.n	8006c70 <_printf_common+0xac>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c70:	3501      	adds	r5, #1
 8006c72:	e7c6      	b.n	8006c02 <_printf_common+0x3e>
 8006c74:	18e1      	adds	r1, r4, r3
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	2030      	movs	r0, #48	; 0x30
 8006c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c7e:	4422      	add	r2, r4
 8006c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c88:	3302      	adds	r3, #2
 8006c8a:	e7c7      	b.n	8006c1c <_printf_common+0x58>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4622      	mov	r2, r4
 8006c90:	4649      	mov	r1, r9
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c0      	blx	r8
 8006c96:	3001      	adds	r0, #1
 8006c98:	d0e6      	beq.n	8006c68 <_printf_common+0xa4>
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7d9      	b.n	8006c52 <_printf_common+0x8e>
	...

08006ca0 <_printf_i>:
 8006ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	4691      	mov	r9, r2
 8006ca8:	7e27      	ldrb	r7, [r4, #24]
 8006caa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cac:	2f78      	cmp	r7, #120	; 0x78
 8006cae:	4680      	mov	r8, r0
 8006cb0:	469a      	mov	sl, r3
 8006cb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cb6:	d807      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cb8:	2f62      	cmp	r7, #98	; 0x62
 8006cba:	d80a      	bhi.n	8006cd2 <_printf_i+0x32>
 8006cbc:	2f00      	cmp	r7, #0
 8006cbe:	f000 80d8 	beq.w	8006e72 <_printf_i+0x1d2>
 8006cc2:	2f58      	cmp	r7, #88	; 0x58
 8006cc4:	f000 80a3 	beq.w	8006e0e <_printf_i+0x16e>
 8006cc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cd0:	e03a      	b.n	8006d48 <_printf_i+0xa8>
 8006cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cd6:	2b15      	cmp	r3, #21
 8006cd8:	d8f6      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cda:	a001      	add	r0, pc, #4	; (adr r0, 8006ce0 <_printf_i+0x40>)
 8006cdc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ce0:	08006d39 	.word	0x08006d39
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006cc9 	.word	0x08006cc9
 8006cec:	08006cc9 	.word	0x08006cc9
 8006cf0:	08006cc9 	.word	0x08006cc9
 8006cf4:	08006cc9 	.word	0x08006cc9
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006cc9 	.word	0x08006cc9
 8006d00:	08006cc9 	.word	0x08006cc9
 8006d04:	08006cc9 	.word	0x08006cc9
 8006d08:	08006cc9 	.word	0x08006cc9
 8006d0c:	08006e59 	.word	0x08006e59
 8006d10:	08006d7d 	.word	0x08006d7d
 8006d14:	08006e3b 	.word	0x08006e3b
 8006d18:	08006cc9 	.word	0x08006cc9
 8006d1c:	08006cc9 	.word	0x08006cc9
 8006d20:	08006e7b 	.word	0x08006e7b
 8006d24:	08006cc9 	.word	0x08006cc9
 8006d28:	08006d7d 	.word	0x08006d7d
 8006d2c:	08006cc9 	.word	0x08006cc9
 8006d30:	08006cc9 	.word	0x08006cc9
 8006d34:	08006e43 	.word	0x08006e43
 8006d38:	680b      	ldr	r3, [r1, #0]
 8006d3a:	1d1a      	adds	r2, r3, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	600a      	str	r2, [r1, #0]
 8006d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e0a3      	b.n	8006e94 <_printf_i+0x1f4>
 8006d4c:	6825      	ldr	r5, [r4, #0]
 8006d4e:	6808      	ldr	r0, [r1, #0]
 8006d50:	062e      	lsls	r6, r5, #24
 8006d52:	f100 0304 	add.w	r3, r0, #4
 8006d56:	d50a      	bpl.n	8006d6e <_printf_i+0xce>
 8006d58:	6805      	ldr	r5, [r0, #0]
 8006d5a:	600b      	str	r3, [r1, #0]
 8006d5c:	2d00      	cmp	r5, #0
 8006d5e:	da03      	bge.n	8006d68 <_printf_i+0xc8>
 8006d60:	232d      	movs	r3, #45	; 0x2d
 8006d62:	426d      	negs	r5, r5
 8006d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d68:	485e      	ldr	r0, [pc, #376]	; (8006ee4 <_printf_i+0x244>)
 8006d6a:	230a      	movs	r3, #10
 8006d6c:	e019      	b.n	8006da2 <_printf_i+0x102>
 8006d6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d72:	6805      	ldr	r5, [r0, #0]
 8006d74:	600b      	str	r3, [r1, #0]
 8006d76:	bf18      	it	ne
 8006d78:	b22d      	sxthne	r5, r5
 8006d7a:	e7ef      	b.n	8006d5c <_printf_i+0xbc>
 8006d7c:	680b      	ldr	r3, [r1, #0]
 8006d7e:	6825      	ldr	r5, [r4, #0]
 8006d80:	1d18      	adds	r0, r3, #4
 8006d82:	6008      	str	r0, [r1, #0]
 8006d84:	0628      	lsls	r0, r5, #24
 8006d86:	d501      	bpl.n	8006d8c <_printf_i+0xec>
 8006d88:	681d      	ldr	r5, [r3, #0]
 8006d8a:	e002      	b.n	8006d92 <_printf_i+0xf2>
 8006d8c:	0669      	lsls	r1, r5, #25
 8006d8e:	d5fb      	bpl.n	8006d88 <_printf_i+0xe8>
 8006d90:	881d      	ldrh	r5, [r3, #0]
 8006d92:	4854      	ldr	r0, [pc, #336]	; (8006ee4 <_printf_i+0x244>)
 8006d94:	2f6f      	cmp	r7, #111	; 0x6f
 8006d96:	bf0c      	ite	eq
 8006d98:	2308      	moveq	r3, #8
 8006d9a:	230a      	movne	r3, #10
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006da2:	6866      	ldr	r6, [r4, #4]
 8006da4:	60a6      	str	r6, [r4, #8]
 8006da6:	2e00      	cmp	r6, #0
 8006da8:	bfa2      	ittt	ge
 8006daa:	6821      	ldrge	r1, [r4, #0]
 8006dac:	f021 0104 	bicge.w	r1, r1, #4
 8006db0:	6021      	strge	r1, [r4, #0]
 8006db2:	b90d      	cbnz	r5, 8006db8 <_printf_i+0x118>
 8006db4:	2e00      	cmp	r6, #0
 8006db6:	d04d      	beq.n	8006e54 <_printf_i+0x1b4>
 8006db8:	4616      	mov	r6, r2
 8006dba:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dbe:	fb03 5711 	mls	r7, r3, r1, r5
 8006dc2:	5dc7      	ldrb	r7, [r0, r7]
 8006dc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dc8:	462f      	mov	r7, r5
 8006dca:	42bb      	cmp	r3, r7
 8006dcc:	460d      	mov	r5, r1
 8006dce:	d9f4      	bls.n	8006dba <_printf_i+0x11a>
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d10b      	bne.n	8006dec <_printf_i+0x14c>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	07df      	lsls	r7, r3, #31
 8006dd8:	d508      	bpl.n	8006dec <_printf_i+0x14c>
 8006dda:	6923      	ldr	r3, [r4, #16]
 8006ddc:	6861      	ldr	r1, [r4, #4]
 8006dde:	4299      	cmp	r1, r3
 8006de0:	bfde      	ittt	le
 8006de2:	2330      	movle	r3, #48	; 0x30
 8006de4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006de8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dec:	1b92      	subs	r2, r2, r6
 8006dee:	6122      	str	r2, [r4, #16]
 8006df0:	f8cd a000 	str.w	sl, [sp]
 8006df4:	464b      	mov	r3, r9
 8006df6:	aa03      	add	r2, sp, #12
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	f7ff fee2 	bl	8006bc4 <_printf_common>
 8006e00:	3001      	adds	r0, #1
 8006e02:	d14c      	bne.n	8006e9e <_printf_i+0x1fe>
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	b004      	add	sp, #16
 8006e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0e:	4835      	ldr	r0, [pc, #212]	; (8006ee4 <_printf_i+0x244>)
 8006e10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	680e      	ldr	r6, [r1, #0]
 8006e18:	061f      	lsls	r7, r3, #24
 8006e1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e1e:	600e      	str	r6, [r1, #0]
 8006e20:	d514      	bpl.n	8006e4c <_printf_i+0x1ac>
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	bf44      	itt	mi
 8006e26:	f043 0320 	orrmi.w	r3, r3, #32
 8006e2a:	6023      	strmi	r3, [r4, #0]
 8006e2c:	b91d      	cbnz	r5, 8006e36 <_printf_i+0x196>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	f023 0320 	bic.w	r3, r3, #32
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	2310      	movs	r3, #16
 8006e38:	e7b0      	b.n	8006d9c <_printf_i+0xfc>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	f043 0320 	orr.w	r3, r3, #32
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	2378      	movs	r3, #120	; 0x78
 8006e44:	4828      	ldr	r0, [pc, #160]	; (8006ee8 <_printf_i+0x248>)
 8006e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e4a:	e7e3      	b.n	8006e14 <_printf_i+0x174>
 8006e4c:	065e      	lsls	r6, r3, #25
 8006e4e:	bf48      	it	mi
 8006e50:	b2ad      	uxthmi	r5, r5
 8006e52:	e7e6      	b.n	8006e22 <_printf_i+0x182>
 8006e54:	4616      	mov	r6, r2
 8006e56:	e7bb      	b.n	8006dd0 <_printf_i+0x130>
 8006e58:	680b      	ldr	r3, [r1, #0]
 8006e5a:	6826      	ldr	r6, [r4, #0]
 8006e5c:	6960      	ldr	r0, [r4, #20]
 8006e5e:	1d1d      	adds	r5, r3, #4
 8006e60:	600d      	str	r5, [r1, #0]
 8006e62:	0635      	lsls	r5, r6, #24
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	d501      	bpl.n	8006e6c <_printf_i+0x1cc>
 8006e68:	6018      	str	r0, [r3, #0]
 8006e6a:	e002      	b.n	8006e72 <_printf_i+0x1d2>
 8006e6c:	0671      	lsls	r1, r6, #25
 8006e6e:	d5fb      	bpl.n	8006e68 <_printf_i+0x1c8>
 8006e70:	8018      	strh	r0, [r3, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	6123      	str	r3, [r4, #16]
 8006e76:	4616      	mov	r6, r2
 8006e78:	e7ba      	b.n	8006df0 <_printf_i+0x150>
 8006e7a:	680b      	ldr	r3, [r1, #0]
 8006e7c:	1d1a      	adds	r2, r3, #4
 8006e7e:	600a      	str	r2, [r1, #0]
 8006e80:	681e      	ldr	r6, [r3, #0]
 8006e82:	6862      	ldr	r2, [r4, #4]
 8006e84:	2100      	movs	r1, #0
 8006e86:	4630      	mov	r0, r6
 8006e88:	f7f9 f9aa 	bl	80001e0 <memchr>
 8006e8c:	b108      	cbz	r0, 8006e92 <_printf_i+0x1f2>
 8006e8e:	1b80      	subs	r0, r0, r6
 8006e90:	6060      	str	r0, [r4, #4]
 8006e92:	6863      	ldr	r3, [r4, #4]
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	2300      	movs	r3, #0
 8006e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e9c:	e7a8      	b.n	8006df0 <_printf_i+0x150>
 8006e9e:	6923      	ldr	r3, [r4, #16]
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	47d0      	blx	sl
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d0ab      	beq.n	8006e04 <_printf_i+0x164>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	079b      	lsls	r3, r3, #30
 8006eb0:	d413      	bmi.n	8006eda <_printf_i+0x23a>
 8006eb2:	68e0      	ldr	r0, [r4, #12]
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	4298      	cmp	r0, r3
 8006eb8:	bfb8      	it	lt
 8006eba:	4618      	movlt	r0, r3
 8006ebc:	e7a4      	b.n	8006e08 <_printf_i+0x168>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	47d0      	blx	sl
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d09b      	beq.n	8006e04 <_printf_i+0x164>
 8006ecc:	3501      	adds	r5, #1
 8006ece:	68e3      	ldr	r3, [r4, #12]
 8006ed0:	9903      	ldr	r1, [sp, #12]
 8006ed2:	1a5b      	subs	r3, r3, r1
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	dcf2      	bgt.n	8006ebe <_printf_i+0x21e>
 8006ed8:	e7eb      	b.n	8006eb2 <_printf_i+0x212>
 8006eda:	2500      	movs	r5, #0
 8006edc:	f104 0619 	add.w	r6, r4, #25
 8006ee0:	e7f5      	b.n	8006ece <_printf_i+0x22e>
 8006ee2:	bf00      	nop
 8006ee4:	08007c4a 	.word	0x08007c4a
 8006ee8:	08007c5b 	.word	0x08007c5b

08006eec <_sbrk_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d06      	ldr	r5, [pc, #24]	; (8006f08 <_sbrk_r+0x1c>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	f7fb fb4e 	bl	8002598 <_sbrk>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_sbrk_r+0x1a>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_sbrk_r+0x1a>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	200010dc 	.word	0x200010dc

08006f0c <__swbuf_r>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4614      	mov	r4, r2
 8006f12:	4605      	mov	r5, r0
 8006f14:	b118      	cbz	r0, 8006f1e <__swbuf_r+0x12>
 8006f16:	6983      	ldr	r3, [r0, #24]
 8006f18:	b90b      	cbnz	r3, 8006f1e <__swbuf_r+0x12>
 8006f1a:	f000 f9d9 	bl	80072d0 <__sinit>
 8006f1e:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <__swbuf_r+0x98>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d12b      	bne.n	8006f7c <__swbuf_r+0x70>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	69a3      	ldr	r3, [r4, #24]
 8006f28:	60a3      	str	r3, [r4, #8]
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	071a      	lsls	r2, r3, #28
 8006f2e:	d52f      	bpl.n	8006f90 <__swbuf_r+0x84>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	b36b      	cbz	r3, 8006f90 <__swbuf_r+0x84>
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	6820      	ldr	r0, [r4, #0]
 8006f38:	1ac0      	subs	r0, r0, r3
 8006f3a:	6963      	ldr	r3, [r4, #20]
 8006f3c:	b2f6      	uxtb	r6, r6
 8006f3e:	4283      	cmp	r3, r0
 8006f40:	4637      	mov	r7, r6
 8006f42:	dc04      	bgt.n	8006f4e <__swbuf_r+0x42>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4628      	mov	r0, r5
 8006f48:	f000 f92e 	bl	80071a8 <_fflush_r>
 8006f4c:	bb30      	cbnz	r0, 8006f9c <__swbuf_r+0x90>
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	60a3      	str	r3, [r4, #8]
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	6022      	str	r2, [r4, #0]
 8006f5a:	701e      	strb	r6, [r3, #0]
 8006f5c:	6963      	ldr	r3, [r4, #20]
 8006f5e:	3001      	adds	r0, #1
 8006f60:	4283      	cmp	r3, r0
 8006f62:	d004      	beq.n	8006f6e <__swbuf_r+0x62>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	07db      	lsls	r3, r3, #31
 8006f68:	d506      	bpl.n	8006f78 <__swbuf_r+0x6c>
 8006f6a:	2e0a      	cmp	r6, #10
 8006f6c:	d104      	bne.n	8006f78 <__swbuf_r+0x6c>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f000 f919 	bl	80071a8 <_fflush_r>
 8006f76:	b988      	cbnz	r0, 8006f9c <__swbuf_r+0x90>
 8006f78:	4638      	mov	r0, r7
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <__swbuf_r+0x9c>)
 8006f7e:	429c      	cmp	r4, r3
 8006f80:	d101      	bne.n	8006f86 <__swbuf_r+0x7a>
 8006f82:	68ac      	ldr	r4, [r5, #8]
 8006f84:	e7cf      	b.n	8006f26 <__swbuf_r+0x1a>
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <__swbuf_r+0xa0>)
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	bf08      	it	eq
 8006f8c:	68ec      	ldreq	r4, [r5, #12]
 8006f8e:	e7ca      	b.n	8006f26 <__swbuf_r+0x1a>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f80c 	bl	8006fb0 <__swsetup_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0cb      	beq.n	8006f34 <__swbuf_r+0x28>
 8006f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8006fa0:	e7ea      	b.n	8006f78 <__swbuf_r+0x6c>
 8006fa2:	bf00      	nop
 8006fa4:	08007c8c 	.word	0x08007c8c
 8006fa8:	08007cac 	.word	0x08007cac
 8006fac:	08007c6c 	.word	0x08007c6c

08006fb0 <__swsetup_r>:
 8006fb0:	4b32      	ldr	r3, [pc, #200]	; (800707c <__swsetup_r+0xcc>)
 8006fb2:	b570      	push	{r4, r5, r6, lr}
 8006fb4:	681d      	ldr	r5, [r3, #0]
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	b125      	cbz	r5, 8006fc6 <__swsetup_r+0x16>
 8006fbc:	69ab      	ldr	r3, [r5, #24]
 8006fbe:	b913      	cbnz	r3, 8006fc6 <__swsetup_r+0x16>
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f985 	bl	80072d0 <__sinit>
 8006fc6:	4b2e      	ldr	r3, [pc, #184]	; (8007080 <__swsetup_r+0xd0>)
 8006fc8:	429c      	cmp	r4, r3
 8006fca:	d10f      	bne.n	8006fec <__swsetup_r+0x3c>
 8006fcc:	686c      	ldr	r4, [r5, #4]
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fd4:	0719      	lsls	r1, r3, #28
 8006fd6:	d42c      	bmi.n	8007032 <__swsetup_r+0x82>
 8006fd8:	06dd      	lsls	r5, r3, #27
 8006fda:	d411      	bmi.n	8007000 <__swsetup_r+0x50>
 8006fdc:	2309      	movs	r3, #9
 8006fde:	6033      	str	r3, [r6, #0]
 8006fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fe4:	81a3      	strh	r3, [r4, #12]
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fea:	e03e      	b.n	800706a <__swsetup_r+0xba>
 8006fec:	4b25      	ldr	r3, [pc, #148]	; (8007084 <__swsetup_r+0xd4>)
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d101      	bne.n	8006ff6 <__swsetup_r+0x46>
 8006ff2:	68ac      	ldr	r4, [r5, #8]
 8006ff4:	e7eb      	b.n	8006fce <__swsetup_r+0x1e>
 8006ff6:	4b24      	ldr	r3, [pc, #144]	; (8007088 <__swsetup_r+0xd8>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	bf08      	it	eq
 8006ffc:	68ec      	ldreq	r4, [r5, #12]
 8006ffe:	e7e6      	b.n	8006fce <__swsetup_r+0x1e>
 8007000:	0758      	lsls	r0, r3, #29
 8007002:	d512      	bpl.n	800702a <__swsetup_r+0x7a>
 8007004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007006:	b141      	cbz	r1, 800701a <__swsetup_r+0x6a>
 8007008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800700c:	4299      	cmp	r1, r3
 800700e:	d002      	beq.n	8007016 <__swsetup_r+0x66>
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff fa77 	bl	8006504 <_free_r>
 8007016:	2300      	movs	r3, #0
 8007018:	6363      	str	r3, [r4, #52]	; 0x34
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	2300      	movs	r3, #0
 8007024:	6063      	str	r3, [r4, #4]
 8007026:	6923      	ldr	r3, [r4, #16]
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f043 0308 	orr.w	r3, r3, #8
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	6923      	ldr	r3, [r4, #16]
 8007034:	b94b      	cbnz	r3, 800704a <__swsetup_r+0x9a>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800703c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007040:	d003      	beq.n	800704a <__swsetup_r+0x9a>
 8007042:	4621      	mov	r1, r4
 8007044:	4630      	mov	r0, r6
 8007046:	f000 fa07 	bl	8007458 <__smakebuf_r>
 800704a:	89a0      	ldrh	r0, [r4, #12]
 800704c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007050:	f010 0301 	ands.w	r3, r0, #1
 8007054:	d00a      	beq.n	800706c <__swsetup_r+0xbc>
 8007056:	2300      	movs	r3, #0
 8007058:	60a3      	str	r3, [r4, #8]
 800705a:	6963      	ldr	r3, [r4, #20]
 800705c:	425b      	negs	r3, r3
 800705e:	61a3      	str	r3, [r4, #24]
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	b943      	cbnz	r3, 8007076 <__swsetup_r+0xc6>
 8007064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007068:	d1ba      	bne.n	8006fe0 <__swsetup_r+0x30>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	0781      	lsls	r1, r0, #30
 800706e:	bf58      	it	pl
 8007070:	6963      	ldrpl	r3, [r4, #20]
 8007072:	60a3      	str	r3, [r4, #8]
 8007074:	e7f4      	b.n	8007060 <__swsetup_r+0xb0>
 8007076:	2000      	movs	r0, #0
 8007078:	e7f7      	b.n	800706a <__swsetup_r+0xba>
 800707a:	bf00      	nop
 800707c:	20000108 	.word	0x20000108
 8007080:	08007c8c 	.word	0x08007c8c
 8007084:	08007cac 	.word	0x08007cac
 8007088:	08007c6c 	.word	0x08007c6c

0800708c <abort>:
 800708c:	b508      	push	{r3, lr}
 800708e:	2006      	movs	r0, #6
 8007090:	f000 faa4 	bl	80075dc <raise>
 8007094:	2001      	movs	r0, #1
 8007096:	f7fb fa07 	bl	80024a8 <_exit>
	...

0800709c <__sflush_r>:
 800709c:	898a      	ldrh	r2, [r1, #12]
 800709e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a2:	4605      	mov	r5, r0
 80070a4:	0710      	lsls	r0, r2, #28
 80070a6:	460c      	mov	r4, r1
 80070a8:	d458      	bmi.n	800715c <__sflush_r+0xc0>
 80070aa:	684b      	ldr	r3, [r1, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	dc05      	bgt.n	80070bc <__sflush_r+0x20>
 80070b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	dc02      	bgt.n	80070bc <__sflush_r+0x20>
 80070b6:	2000      	movs	r0, #0
 80070b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070be:	2e00      	cmp	r6, #0
 80070c0:	d0f9      	beq.n	80070b6 <__sflush_r+0x1a>
 80070c2:	2300      	movs	r3, #0
 80070c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070c8:	682f      	ldr	r7, [r5, #0]
 80070ca:	602b      	str	r3, [r5, #0]
 80070cc:	d032      	beq.n	8007134 <__sflush_r+0x98>
 80070ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	075a      	lsls	r2, r3, #29
 80070d4:	d505      	bpl.n	80070e2 <__sflush_r+0x46>
 80070d6:	6863      	ldr	r3, [r4, #4]
 80070d8:	1ac0      	subs	r0, r0, r3
 80070da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070dc:	b10b      	cbz	r3, 80070e2 <__sflush_r+0x46>
 80070de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070e0:	1ac0      	subs	r0, r0, r3
 80070e2:	2300      	movs	r3, #0
 80070e4:	4602      	mov	r2, r0
 80070e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070e8:	6a21      	ldr	r1, [r4, #32]
 80070ea:	4628      	mov	r0, r5
 80070ec:	47b0      	blx	r6
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	d106      	bne.n	8007102 <__sflush_r+0x66>
 80070f4:	6829      	ldr	r1, [r5, #0]
 80070f6:	291d      	cmp	r1, #29
 80070f8:	d82c      	bhi.n	8007154 <__sflush_r+0xb8>
 80070fa:	4a2a      	ldr	r2, [pc, #168]	; (80071a4 <__sflush_r+0x108>)
 80070fc:	40ca      	lsrs	r2, r1
 80070fe:	07d6      	lsls	r6, r2, #31
 8007100:	d528      	bpl.n	8007154 <__sflush_r+0xb8>
 8007102:	2200      	movs	r2, #0
 8007104:	6062      	str	r2, [r4, #4]
 8007106:	04d9      	lsls	r1, r3, #19
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	6022      	str	r2, [r4, #0]
 800710c:	d504      	bpl.n	8007118 <__sflush_r+0x7c>
 800710e:	1c42      	adds	r2, r0, #1
 8007110:	d101      	bne.n	8007116 <__sflush_r+0x7a>
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	b903      	cbnz	r3, 8007118 <__sflush_r+0x7c>
 8007116:	6560      	str	r0, [r4, #84]	; 0x54
 8007118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800711a:	602f      	str	r7, [r5, #0]
 800711c:	2900      	cmp	r1, #0
 800711e:	d0ca      	beq.n	80070b6 <__sflush_r+0x1a>
 8007120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007124:	4299      	cmp	r1, r3
 8007126:	d002      	beq.n	800712e <__sflush_r+0x92>
 8007128:	4628      	mov	r0, r5
 800712a:	f7ff f9eb 	bl	8006504 <_free_r>
 800712e:	2000      	movs	r0, #0
 8007130:	6360      	str	r0, [r4, #52]	; 0x34
 8007132:	e7c1      	b.n	80070b8 <__sflush_r+0x1c>
 8007134:	6a21      	ldr	r1, [r4, #32]
 8007136:	2301      	movs	r3, #1
 8007138:	4628      	mov	r0, r5
 800713a:	47b0      	blx	r6
 800713c:	1c41      	adds	r1, r0, #1
 800713e:	d1c7      	bne.n	80070d0 <__sflush_r+0x34>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0c4      	beq.n	80070d0 <__sflush_r+0x34>
 8007146:	2b1d      	cmp	r3, #29
 8007148:	d001      	beq.n	800714e <__sflush_r+0xb2>
 800714a:	2b16      	cmp	r3, #22
 800714c:	d101      	bne.n	8007152 <__sflush_r+0xb6>
 800714e:	602f      	str	r7, [r5, #0]
 8007150:	e7b1      	b.n	80070b6 <__sflush_r+0x1a>
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	e7ad      	b.n	80070b8 <__sflush_r+0x1c>
 800715c:	690f      	ldr	r7, [r1, #16]
 800715e:	2f00      	cmp	r7, #0
 8007160:	d0a9      	beq.n	80070b6 <__sflush_r+0x1a>
 8007162:	0793      	lsls	r3, r2, #30
 8007164:	680e      	ldr	r6, [r1, #0]
 8007166:	bf08      	it	eq
 8007168:	694b      	ldreq	r3, [r1, #20]
 800716a:	600f      	str	r7, [r1, #0]
 800716c:	bf18      	it	ne
 800716e:	2300      	movne	r3, #0
 8007170:	eba6 0807 	sub.w	r8, r6, r7
 8007174:	608b      	str	r3, [r1, #8]
 8007176:	f1b8 0f00 	cmp.w	r8, #0
 800717a:	dd9c      	ble.n	80070b6 <__sflush_r+0x1a>
 800717c:	6a21      	ldr	r1, [r4, #32]
 800717e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007180:	4643      	mov	r3, r8
 8007182:	463a      	mov	r2, r7
 8007184:	4628      	mov	r0, r5
 8007186:	47b0      	blx	r6
 8007188:	2800      	cmp	r0, #0
 800718a:	dc06      	bgt.n	800719a <__sflush_r+0xfe>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	e78e      	b.n	80070b8 <__sflush_r+0x1c>
 800719a:	4407      	add	r7, r0
 800719c:	eba8 0800 	sub.w	r8, r8, r0
 80071a0:	e7e9      	b.n	8007176 <__sflush_r+0xda>
 80071a2:	bf00      	nop
 80071a4:	20400001 	.word	0x20400001

080071a8 <_fflush_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	690b      	ldr	r3, [r1, #16]
 80071ac:	4605      	mov	r5, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	b913      	cbnz	r3, 80071b8 <_fflush_r+0x10>
 80071b2:	2500      	movs	r5, #0
 80071b4:	4628      	mov	r0, r5
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	b118      	cbz	r0, 80071c2 <_fflush_r+0x1a>
 80071ba:	6983      	ldr	r3, [r0, #24]
 80071bc:	b90b      	cbnz	r3, 80071c2 <_fflush_r+0x1a>
 80071be:	f000 f887 	bl	80072d0 <__sinit>
 80071c2:	4b14      	ldr	r3, [pc, #80]	; (8007214 <_fflush_r+0x6c>)
 80071c4:	429c      	cmp	r4, r3
 80071c6:	d11b      	bne.n	8007200 <_fflush_r+0x58>
 80071c8:	686c      	ldr	r4, [r5, #4]
 80071ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0ef      	beq.n	80071b2 <_fflush_r+0xa>
 80071d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071d4:	07d0      	lsls	r0, r2, #31
 80071d6:	d404      	bmi.n	80071e2 <_fflush_r+0x3a>
 80071d8:	0599      	lsls	r1, r3, #22
 80071da:	d402      	bmi.n	80071e2 <_fflush_r+0x3a>
 80071dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071de:	f000 f915 	bl	800740c <__retarget_lock_acquire_recursive>
 80071e2:	4628      	mov	r0, r5
 80071e4:	4621      	mov	r1, r4
 80071e6:	f7ff ff59 	bl	800709c <__sflush_r>
 80071ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ec:	07da      	lsls	r2, r3, #31
 80071ee:	4605      	mov	r5, r0
 80071f0:	d4e0      	bmi.n	80071b4 <_fflush_r+0xc>
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	059b      	lsls	r3, r3, #22
 80071f6:	d4dd      	bmi.n	80071b4 <_fflush_r+0xc>
 80071f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071fa:	f000 f908 	bl	800740e <__retarget_lock_release_recursive>
 80071fe:	e7d9      	b.n	80071b4 <_fflush_r+0xc>
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <_fflush_r+0x70>)
 8007202:	429c      	cmp	r4, r3
 8007204:	d101      	bne.n	800720a <_fflush_r+0x62>
 8007206:	68ac      	ldr	r4, [r5, #8]
 8007208:	e7df      	b.n	80071ca <_fflush_r+0x22>
 800720a:	4b04      	ldr	r3, [pc, #16]	; (800721c <_fflush_r+0x74>)
 800720c:	429c      	cmp	r4, r3
 800720e:	bf08      	it	eq
 8007210:	68ec      	ldreq	r4, [r5, #12]
 8007212:	e7da      	b.n	80071ca <_fflush_r+0x22>
 8007214:	08007c8c 	.word	0x08007c8c
 8007218:	08007cac 	.word	0x08007cac
 800721c:	08007c6c 	.word	0x08007c6c

08007220 <std>:
 8007220:	2300      	movs	r3, #0
 8007222:	b510      	push	{r4, lr}
 8007224:	4604      	mov	r4, r0
 8007226:	e9c0 3300 	strd	r3, r3, [r0]
 800722a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800722e:	6083      	str	r3, [r0, #8]
 8007230:	8181      	strh	r1, [r0, #12]
 8007232:	6643      	str	r3, [r0, #100]	; 0x64
 8007234:	81c2      	strh	r2, [r0, #14]
 8007236:	6183      	str	r3, [r0, #24]
 8007238:	4619      	mov	r1, r3
 800723a:	2208      	movs	r2, #8
 800723c:	305c      	adds	r0, #92	; 0x5c
 800723e:	f7fe fff7 	bl	8006230 <memset>
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <std+0x38>)
 8007244:	6263      	str	r3, [r4, #36]	; 0x24
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <std+0x3c>)
 8007248:	62a3      	str	r3, [r4, #40]	; 0x28
 800724a:	4b05      	ldr	r3, [pc, #20]	; (8007260 <std+0x40>)
 800724c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <std+0x44>)
 8007250:	6224      	str	r4, [r4, #32]
 8007252:	6323      	str	r3, [r4, #48]	; 0x30
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	08007615 	.word	0x08007615
 800725c:	08007637 	.word	0x08007637
 8007260:	0800766f 	.word	0x0800766f
 8007264:	08007693 	.word	0x08007693

08007268 <_cleanup_r>:
 8007268:	4901      	ldr	r1, [pc, #4]	; (8007270 <_cleanup_r+0x8>)
 800726a:	f000 b8af 	b.w	80073cc <_fwalk_reent>
 800726e:	bf00      	nop
 8007270:	080071a9 	.word	0x080071a9

08007274 <__sfmoreglue>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	1e4a      	subs	r2, r1, #1
 8007278:	2568      	movs	r5, #104	; 0x68
 800727a:	4355      	muls	r5, r2
 800727c:	460e      	mov	r6, r1
 800727e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007282:	f7ff f98f 	bl	80065a4 <_malloc_r>
 8007286:	4604      	mov	r4, r0
 8007288:	b140      	cbz	r0, 800729c <__sfmoreglue+0x28>
 800728a:	2100      	movs	r1, #0
 800728c:	e9c0 1600 	strd	r1, r6, [r0]
 8007290:	300c      	adds	r0, #12
 8007292:	60a0      	str	r0, [r4, #8]
 8007294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007298:	f7fe ffca 	bl	8006230 <memset>
 800729c:	4620      	mov	r0, r4
 800729e:	bd70      	pop	{r4, r5, r6, pc}

080072a0 <__sfp_lock_acquire>:
 80072a0:	4801      	ldr	r0, [pc, #4]	; (80072a8 <__sfp_lock_acquire+0x8>)
 80072a2:	f000 b8b3 	b.w	800740c <__retarget_lock_acquire_recursive>
 80072a6:	bf00      	nop
 80072a8:	200010d8 	.word	0x200010d8

080072ac <__sfp_lock_release>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__sfp_lock_release+0x8>)
 80072ae:	f000 b8ae 	b.w	800740e <__retarget_lock_release_recursive>
 80072b2:	bf00      	nop
 80072b4:	200010d8 	.word	0x200010d8

080072b8 <__sinit_lock_acquire>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__sinit_lock_acquire+0x8>)
 80072ba:	f000 b8a7 	b.w	800740c <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	200010d3 	.word	0x200010d3

080072c4 <__sinit_lock_release>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__sinit_lock_release+0x8>)
 80072c6:	f000 b8a2 	b.w	800740e <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	200010d3 	.word	0x200010d3

080072d0 <__sinit>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	4604      	mov	r4, r0
 80072d4:	f7ff fff0 	bl	80072b8 <__sinit_lock_acquire>
 80072d8:	69a3      	ldr	r3, [r4, #24]
 80072da:	b11b      	cbz	r3, 80072e4 <__sinit+0x14>
 80072dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e0:	f7ff bff0 	b.w	80072c4 <__sinit_lock_release>
 80072e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072e8:	6523      	str	r3, [r4, #80]	; 0x50
 80072ea:	4b13      	ldr	r3, [pc, #76]	; (8007338 <__sinit+0x68>)
 80072ec:	4a13      	ldr	r2, [pc, #76]	; (800733c <__sinit+0x6c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	bf04      	itt	eq
 80072f6:	2301      	moveq	r3, #1
 80072f8:	61a3      	streq	r3, [r4, #24]
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 f820 	bl	8007340 <__sfp>
 8007300:	6060      	str	r0, [r4, #4]
 8007302:	4620      	mov	r0, r4
 8007304:	f000 f81c 	bl	8007340 <__sfp>
 8007308:	60a0      	str	r0, [r4, #8]
 800730a:	4620      	mov	r0, r4
 800730c:	f000 f818 	bl	8007340 <__sfp>
 8007310:	2200      	movs	r2, #0
 8007312:	60e0      	str	r0, [r4, #12]
 8007314:	2104      	movs	r1, #4
 8007316:	6860      	ldr	r0, [r4, #4]
 8007318:	f7ff ff82 	bl	8007220 <std>
 800731c:	68a0      	ldr	r0, [r4, #8]
 800731e:	2201      	movs	r2, #1
 8007320:	2109      	movs	r1, #9
 8007322:	f7ff ff7d 	bl	8007220 <std>
 8007326:	68e0      	ldr	r0, [r4, #12]
 8007328:	2202      	movs	r2, #2
 800732a:	2112      	movs	r1, #18
 800732c:	f7ff ff78 	bl	8007220 <std>
 8007330:	2301      	movs	r3, #1
 8007332:	61a3      	str	r3, [r4, #24]
 8007334:	e7d2      	b.n	80072dc <__sinit+0xc>
 8007336:	bf00      	nop
 8007338:	08007a80 	.word	0x08007a80
 800733c:	08007269 	.word	0x08007269

08007340 <__sfp>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	4607      	mov	r7, r0
 8007344:	f7ff ffac 	bl	80072a0 <__sfp_lock_acquire>
 8007348:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <__sfp+0x84>)
 800734a:	681e      	ldr	r6, [r3, #0]
 800734c:	69b3      	ldr	r3, [r6, #24]
 800734e:	b913      	cbnz	r3, 8007356 <__sfp+0x16>
 8007350:	4630      	mov	r0, r6
 8007352:	f7ff ffbd 	bl	80072d0 <__sinit>
 8007356:	3648      	adds	r6, #72	; 0x48
 8007358:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800735c:	3b01      	subs	r3, #1
 800735e:	d503      	bpl.n	8007368 <__sfp+0x28>
 8007360:	6833      	ldr	r3, [r6, #0]
 8007362:	b30b      	cbz	r3, 80073a8 <__sfp+0x68>
 8007364:	6836      	ldr	r6, [r6, #0]
 8007366:	e7f7      	b.n	8007358 <__sfp+0x18>
 8007368:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800736c:	b9d5      	cbnz	r5, 80073a4 <__sfp+0x64>
 800736e:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <__sfp+0x88>)
 8007370:	60e3      	str	r3, [r4, #12]
 8007372:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007376:	6665      	str	r5, [r4, #100]	; 0x64
 8007378:	f000 f847 	bl	800740a <__retarget_lock_init_recursive>
 800737c:	f7ff ff96 	bl	80072ac <__sfp_lock_release>
 8007380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007388:	6025      	str	r5, [r4, #0]
 800738a:	61a5      	str	r5, [r4, #24]
 800738c:	2208      	movs	r2, #8
 800738e:	4629      	mov	r1, r5
 8007390:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007394:	f7fe ff4c 	bl	8006230 <memset>
 8007398:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800739c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073a0:	4620      	mov	r0, r4
 80073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a4:	3468      	adds	r4, #104	; 0x68
 80073a6:	e7d9      	b.n	800735c <__sfp+0x1c>
 80073a8:	2104      	movs	r1, #4
 80073aa:	4638      	mov	r0, r7
 80073ac:	f7ff ff62 	bl	8007274 <__sfmoreglue>
 80073b0:	4604      	mov	r4, r0
 80073b2:	6030      	str	r0, [r6, #0]
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d1d5      	bne.n	8007364 <__sfp+0x24>
 80073b8:	f7ff ff78 	bl	80072ac <__sfp_lock_release>
 80073bc:	230c      	movs	r3, #12
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	e7ee      	b.n	80073a0 <__sfp+0x60>
 80073c2:	bf00      	nop
 80073c4:	08007a80 	.word	0x08007a80
 80073c8:	ffff0001 	.word	0xffff0001

080073cc <_fwalk_reent>:
 80073cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d0:	4606      	mov	r6, r0
 80073d2:	4688      	mov	r8, r1
 80073d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073d8:	2700      	movs	r7, #0
 80073da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073de:	f1b9 0901 	subs.w	r9, r9, #1
 80073e2:	d505      	bpl.n	80073f0 <_fwalk_reent+0x24>
 80073e4:	6824      	ldr	r4, [r4, #0]
 80073e6:	2c00      	cmp	r4, #0
 80073e8:	d1f7      	bne.n	80073da <_fwalk_reent+0xe>
 80073ea:	4638      	mov	r0, r7
 80073ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f0:	89ab      	ldrh	r3, [r5, #12]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d907      	bls.n	8007406 <_fwalk_reent+0x3a>
 80073f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073fa:	3301      	adds	r3, #1
 80073fc:	d003      	beq.n	8007406 <_fwalk_reent+0x3a>
 80073fe:	4629      	mov	r1, r5
 8007400:	4630      	mov	r0, r6
 8007402:	47c0      	blx	r8
 8007404:	4307      	orrs	r7, r0
 8007406:	3568      	adds	r5, #104	; 0x68
 8007408:	e7e9      	b.n	80073de <_fwalk_reent+0x12>

0800740a <__retarget_lock_init_recursive>:
 800740a:	4770      	bx	lr

0800740c <__retarget_lock_acquire_recursive>:
 800740c:	4770      	bx	lr

0800740e <__retarget_lock_release_recursive>:
 800740e:	4770      	bx	lr

08007410 <__swhatbuf_r>:
 8007410:	b570      	push	{r4, r5, r6, lr}
 8007412:	460e      	mov	r6, r1
 8007414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007418:	2900      	cmp	r1, #0
 800741a:	b096      	sub	sp, #88	; 0x58
 800741c:	4614      	mov	r4, r2
 800741e:	461d      	mov	r5, r3
 8007420:	da07      	bge.n	8007432 <__swhatbuf_r+0x22>
 8007422:	2300      	movs	r3, #0
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	89b3      	ldrh	r3, [r6, #12]
 8007428:	061a      	lsls	r2, r3, #24
 800742a:	d410      	bmi.n	800744e <__swhatbuf_r+0x3e>
 800742c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007430:	e00e      	b.n	8007450 <__swhatbuf_r+0x40>
 8007432:	466a      	mov	r2, sp
 8007434:	f000 f954 	bl	80076e0 <_fstat_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	dbf2      	blt.n	8007422 <__swhatbuf_r+0x12>
 800743c:	9a01      	ldr	r2, [sp, #4]
 800743e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007442:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007446:	425a      	negs	r2, r3
 8007448:	415a      	adcs	r2, r3
 800744a:	602a      	str	r2, [r5, #0]
 800744c:	e7ee      	b.n	800742c <__swhatbuf_r+0x1c>
 800744e:	2340      	movs	r3, #64	; 0x40
 8007450:	2000      	movs	r0, #0
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	b016      	add	sp, #88	; 0x58
 8007456:	bd70      	pop	{r4, r5, r6, pc}

08007458 <__smakebuf_r>:
 8007458:	898b      	ldrh	r3, [r1, #12]
 800745a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800745c:	079d      	lsls	r5, r3, #30
 800745e:	4606      	mov	r6, r0
 8007460:	460c      	mov	r4, r1
 8007462:	d507      	bpl.n	8007474 <__smakebuf_r+0x1c>
 8007464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	6123      	str	r3, [r4, #16]
 800746c:	2301      	movs	r3, #1
 800746e:	6163      	str	r3, [r4, #20]
 8007470:	b002      	add	sp, #8
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	ab01      	add	r3, sp, #4
 8007476:	466a      	mov	r2, sp
 8007478:	f7ff ffca 	bl	8007410 <__swhatbuf_r>
 800747c:	9900      	ldr	r1, [sp, #0]
 800747e:	4605      	mov	r5, r0
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff f88f 	bl	80065a4 <_malloc_r>
 8007486:	b948      	cbnz	r0, 800749c <__smakebuf_r+0x44>
 8007488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800748c:	059a      	lsls	r2, r3, #22
 800748e:	d4ef      	bmi.n	8007470 <__smakebuf_r+0x18>
 8007490:	f023 0303 	bic.w	r3, r3, #3
 8007494:	f043 0302 	orr.w	r3, r3, #2
 8007498:	81a3      	strh	r3, [r4, #12]
 800749a:	e7e3      	b.n	8007464 <__smakebuf_r+0xc>
 800749c:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <__smakebuf_r+0x7c>)
 800749e:	62b3      	str	r3, [r6, #40]	; 0x28
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	6020      	str	r0, [r4, #0]
 80074a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	9b00      	ldr	r3, [sp, #0]
 80074ac:	6163      	str	r3, [r4, #20]
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	6120      	str	r0, [r4, #16]
 80074b2:	b15b      	cbz	r3, 80074cc <__smakebuf_r+0x74>
 80074b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074b8:	4630      	mov	r0, r6
 80074ba:	f000 f923 	bl	8007704 <_isatty_r>
 80074be:	b128      	cbz	r0, 80074cc <__smakebuf_r+0x74>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f023 0303 	bic.w	r3, r3, #3
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	81a3      	strh	r3, [r4, #12]
 80074cc:	89a0      	ldrh	r0, [r4, #12]
 80074ce:	4305      	orrs	r5, r0
 80074d0:	81a5      	strh	r5, [r4, #12]
 80074d2:	e7cd      	b.n	8007470 <__smakebuf_r+0x18>
 80074d4:	08007269 	.word	0x08007269

080074d8 <memcpy>:
 80074d8:	440a      	add	r2, r1
 80074da:	4291      	cmp	r1, r2
 80074dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80074e0:	d100      	bne.n	80074e4 <memcpy+0xc>
 80074e2:	4770      	bx	lr
 80074e4:	b510      	push	{r4, lr}
 80074e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ee:	4291      	cmp	r1, r2
 80074f0:	d1f9      	bne.n	80074e6 <memcpy+0xe>
 80074f2:	bd10      	pop	{r4, pc}

080074f4 <memmove>:
 80074f4:	4288      	cmp	r0, r1
 80074f6:	b510      	push	{r4, lr}
 80074f8:	eb01 0402 	add.w	r4, r1, r2
 80074fc:	d902      	bls.n	8007504 <memmove+0x10>
 80074fe:	4284      	cmp	r4, r0
 8007500:	4623      	mov	r3, r4
 8007502:	d807      	bhi.n	8007514 <memmove+0x20>
 8007504:	1e43      	subs	r3, r0, #1
 8007506:	42a1      	cmp	r1, r4
 8007508:	d008      	beq.n	800751c <memmove+0x28>
 800750a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800750e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007512:	e7f8      	b.n	8007506 <memmove+0x12>
 8007514:	4402      	add	r2, r0
 8007516:	4601      	mov	r1, r0
 8007518:	428a      	cmp	r2, r1
 800751a:	d100      	bne.n	800751e <memmove+0x2a>
 800751c:	bd10      	pop	{r4, pc}
 800751e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007526:	e7f7      	b.n	8007518 <memmove+0x24>

08007528 <__malloc_lock>:
 8007528:	4801      	ldr	r0, [pc, #4]	; (8007530 <__malloc_lock+0x8>)
 800752a:	f7ff bf6f 	b.w	800740c <__retarget_lock_acquire_recursive>
 800752e:	bf00      	nop
 8007530:	200010d4 	.word	0x200010d4

08007534 <__malloc_unlock>:
 8007534:	4801      	ldr	r0, [pc, #4]	; (800753c <__malloc_unlock+0x8>)
 8007536:	f7ff bf6a 	b.w	800740e <__retarget_lock_release_recursive>
 800753a:	bf00      	nop
 800753c:	200010d4 	.word	0x200010d4

08007540 <_realloc_r>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	4607      	mov	r7, r0
 8007544:	4614      	mov	r4, r2
 8007546:	460e      	mov	r6, r1
 8007548:	b921      	cbnz	r1, 8007554 <_realloc_r+0x14>
 800754a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800754e:	4611      	mov	r1, r2
 8007550:	f7ff b828 	b.w	80065a4 <_malloc_r>
 8007554:	b922      	cbnz	r2, 8007560 <_realloc_r+0x20>
 8007556:	f7fe ffd5 	bl	8006504 <_free_r>
 800755a:	4625      	mov	r5, r4
 800755c:	4628      	mov	r0, r5
 800755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007560:	f000 f8f2 	bl	8007748 <_malloc_usable_size_r>
 8007564:	42a0      	cmp	r0, r4
 8007566:	d20f      	bcs.n	8007588 <_realloc_r+0x48>
 8007568:	4621      	mov	r1, r4
 800756a:	4638      	mov	r0, r7
 800756c:	f7ff f81a 	bl	80065a4 <_malloc_r>
 8007570:	4605      	mov	r5, r0
 8007572:	2800      	cmp	r0, #0
 8007574:	d0f2      	beq.n	800755c <_realloc_r+0x1c>
 8007576:	4631      	mov	r1, r6
 8007578:	4622      	mov	r2, r4
 800757a:	f7ff ffad 	bl	80074d8 <memcpy>
 800757e:	4631      	mov	r1, r6
 8007580:	4638      	mov	r0, r7
 8007582:	f7fe ffbf 	bl	8006504 <_free_r>
 8007586:	e7e9      	b.n	800755c <_realloc_r+0x1c>
 8007588:	4635      	mov	r5, r6
 800758a:	e7e7      	b.n	800755c <_realloc_r+0x1c>

0800758c <_raise_r>:
 800758c:	291f      	cmp	r1, #31
 800758e:	b538      	push	{r3, r4, r5, lr}
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	d904      	bls.n	80075a0 <_raise_r+0x14>
 8007596:	2316      	movs	r3, #22
 8007598:	6003      	str	r3, [r0, #0]
 800759a:	f04f 30ff 	mov.w	r0, #4294967295
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075a2:	b112      	cbz	r2, 80075aa <_raise_r+0x1e>
 80075a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075a8:	b94b      	cbnz	r3, 80075be <_raise_r+0x32>
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 f830 	bl	8007610 <_getpid_r>
 80075b0:	462a      	mov	r2, r5
 80075b2:	4601      	mov	r1, r0
 80075b4:	4620      	mov	r0, r4
 80075b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ba:	f000 b817 	b.w	80075ec <_kill_r>
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d00a      	beq.n	80075d8 <_raise_r+0x4c>
 80075c2:	1c59      	adds	r1, r3, #1
 80075c4:	d103      	bne.n	80075ce <_raise_r+0x42>
 80075c6:	2316      	movs	r3, #22
 80075c8:	6003      	str	r3, [r0, #0]
 80075ca:	2001      	movs	r0, #1
 80075cc:	e7e7      	b.n	800759e <_raise_r+0x12>
 80075ce:	2400      	movs	r4, #0
 80075d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075d4:	4628      	mov	r0, r5
 80075d6:	4798      	blx	r3
 80075d8:	2000      	movs	r0, #0
 80075da:	e7e0      	b.n	800759e <_raise_r+0x12>

080075dc <raise>:
 80075dc:	4b02      	ldr	r3, [pc, #8]	; (80075e8 <raise+0xc>)
 80075de:	4601      	mov	r1, r0
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	f7ff bfd3 	b.w	800758c <_raise_r>
 80075e6:	bf00      	nop
 80075e8:	20000108 	.word	0x20000108

080075ec <_kill_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d07      	ldr	r5, [pc, #28]	; (800760c <_kill_r+0x20>)
 80075f0:	2300      	movs	r3, #0
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	4611      	mov	r1, r2
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	f7fa ff45 	bl	8002488 <_kill>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	d102      	bne.n	8007608 <_kill_r+0x1c>
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	b103      	cbz	r3, 8007608 <_kill_r+0x1c>
 8007606:	6023      	str	r3, [r4, #0]
 8007608:	bd38      	pop	{r3, r4, r5, pc}
 800760a:	bf00      	nop
 800760c:	200010dc 	.word	0x200010dc

08007610 <_getpid_r>:
 8007610:	f7fa bf32 	b.w	8002478 <_getpid>

08007614 <__sread>:
 8007614:	b510      	push	{r4, lr}
 8007616:	460c      	mov	r4, r1
 8007618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761c:	f000 f89c 	bl	8007758 <_read_r>
 8007620:	2800      	cmp	r0, #0
 8007622:	bfab      	itete	ge
 8007624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007626:	89a3      	ldrhlt	r3, [r4, #12]
 8007628:	181b      	addge	r3, r3, r0
 800762a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800762e:	bfac      	ite	ge
 8007630:	6563      	strge	r3, [r4, #84]	; 0x54
 8007632:	81a3      	strhlt	r3, [r4, #12]
 8007634:	bd10      	pop	{r4, pc}

08007636 <__swrite>:
 8007636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763a:	461f      	mov	r7, r3
 800763c:	898b      	ldrh	r3, [r1, #12]
 800763e:	05db      	lsls	r3, r3, #23
 8007640:	4605      	mov	r5, r0
 8007642:	460c      	mov	r4, r1
 8007644:	4616      	mov	r6, r2
 8007646:	d505      	bpl.n	8007654 <__swrite+0x1e>
 8007648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764c:	2302      	movs	r3, #2
 800764e:	2200      	movs	r2, #0
 8007650:	f000 f868 	bl	8007724 <_lseek_r>
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800765a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	4632      	mov	r2, r6
 8007662:	463b      	mov	r3, r7
 8007664:	4628      	mov	r0, r5
 8007666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800766a:	f000 b817 	b.w	800769c <_write_r>

0800766e <__sseek>:
 800766e:	b510      	push	{r4, lr}
 8007670:	460c      	mov	r4, r1
 8007672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007676:	f000 f855 	bl	8007724 <_lseek_r>
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	bf15      	itete	ne
 8007680:	6560      	strne	r0, [r4, #84]	; 0x54
 8007682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800768a:	81a3      	strheq	r3, [r4, #12]
 800768c:	bf18      	it	ne
 800768e:	81a3      	strhne	r3, [r4, #12]
 8007690:	bd10      	pop	{r4, pc}

08007692 <__sclose>:
 8007692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007696:	f000 b813 	b.w	80076c0 <_close_r>
	...

0800769c <_write_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	; (80076bc <_write_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7fa ff23 	bl	80024f6 <_write>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_write_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_write_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	200010dc 	.word	0x200010dc

080076c0 <_close_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4d06      	ldr	r5, [pc, #24]	; (80076dc <_close_r+0x1c>)
 80076c4:	2300      	movs	r3, #0
 80076c6:	4604      	mov	r4, r0
 80076c8:	4608      	mov	r0, r1
 80076ca:	602b      	str	r3, [r5, #0]
 80076cc:	f7fa ff2f 	bl	800252e <_close>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d102      	bne.n	80076da <_close_r+0x1a>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	b103      	cbz	r3, 80076da <_close_r+0x1a>
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	200010dc 	.word	0x200010dc

080076e0 <_fstat_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d07      	ldr	r5, [pc, #28]	; (8007700 <_fstat_r+0x20>)
 80076e4:	2300      	movs	r3, #0
 80076e6:	4604      	mov	r4, r0
 80076e8:	4608      	mov	r0, r1
 80076ea:	4611      	mov	r1, r2
 80076ec:	602b      	str	r3, [r5, #0]
 80076ee:	f7fa ff2a 	bl	8002546 <_fstat>
 80076f2:	1c43      	adds	r3, r0, #1
 80076f4:	d102      	bne.n	80076fc <_fstat_r+0x1c>
 80076f6:	682b      	ldr	r3, [r5, #0]
 80076f8:	b103      	cbz	r3, 80076fc <_fstat_r+0x1c>
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	bd38      	pop	{r3, r4, r5, pc}
 80076fe:	bf00      	nop
 8007700:	200010dc 	.word	0x200010dc

08007704 <_isatty_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4d06      	ldr	r5, [pc, #24]	; (8007720 <_isatty_r+0x1c>)
 8007708:	2300      	movs	r3, #0
 800770a:	4604      	mov	r4, r0
 800770c:	4608      	mov	r0, r1
 800770e:	602b      	str	r3, [r5, #0]
 8007710:	f7fa ff29 	bl	8002566 <_isatty>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_isatty_r+0x1a>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_isatty_r+0x1a>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	200010dc 	.word	0x200010dc

08007724 <_lseek_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d07      	ldr	r5, [pc, #28]	; (8007744 <_lseek_r+0x20>)
 8007728:	4604      	mov	r4, r0
 800772a:	4608      	mov	r0, r1
 800772c:	4611      	mov	r1, r2
 800772e:	2200      	movs	r2, #0
 8007730:	602a      	str	r2, [r5, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	f7fa ff22 	bl	800257c <_lseek>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_lseek_r+0x1e>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_lseek_r+0x1e>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200010dc 	.word	0x200010dc

08007748 <_malloc_usable_size_r>:
 8007748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800774c:	1f18      	subs	r0, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	bfbc      	itt	lt
 8007752:	580b      	ldrlt	r3, [r1, r0]
 8007754:	18c0      	addlt	r0, r0, r3
 8007756:	4770      	bx	lr

08007758 <_read_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4d07      	ldr	r5, [pc, #28]	; (8007778 <_read_r+0x20>)
 800775c:	4604      	mov	r4, r0
 800775e:	4608      	mov	r0, r1
 8007760:	4611      	mov	r1, r2
 8007762:	2200      	movs	r2, #0
 8007764:	602a      	str	r2, [r5, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	f7fa fea8 	bl	80024bc <_read>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_read_r+0x1e>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_read_r+0x1e>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	200010dc 	.word	0x200010dc

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
